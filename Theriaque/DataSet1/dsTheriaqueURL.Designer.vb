'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaqueURL"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaqueURL
    Inherits Global.System.Data.DataSet
    
    Private tableURL_ADRESSE As URL_ADRESSEDataTable
    
    Private tableSPURL_SPECIALITE_ADRESSE As SPURL_SPECIALITE_ADRESSEDataTable
    
    Private relationFK2_SPURL_SPECIALITE_ADRESSE As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("URL_ADRESSE")) Is Nothing) Then
                MyBase.Tables.Add(New URL_ADRESSEDataTable(ds.Tables("URL_ADRESSE")))
            End If
            If (Not (ds.Tables("SPURL_SPECIALITE_ADRESSE")) Is Nothing) Then
                MyBase.Tables.Add(New SPURL_SPECIALITE_ADRESSEDataTable(ds.Tables("SPURL_SPECIALITE_ADRESSE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property URL_ADRESSE() As URL_ADRESSEDataTable
        Get
            Return Me.tableURL_ADRESSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPURL_SPECIALITE_ADRESSE() As SPURL_SPECIALITE_ADRESSEDataTable
        Get
            Return Me.tableSPURL_SPECIALITE_ADRESSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaqueURL = CType(MyBase.Clone,dsTheriaqueURL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("URL_ADRESSE")) Is Nothing) Then
                MyBase.Tables.Add(New URL_ADRESSEDataTable(ds.Tables("URL_ADRESSE")))
            End If
            If (Not (ds.Tables("SPURL_SPECIALITE_ADRESSE")) Is Nothing) Then
                MyBase.Tables.Add(New SPURL_SPECIALITE_ADRESSEDataTable(ds.Tables("SPURL_SPECIALITE_ADRESSE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableURL_ADRESSE = CType(MyBase.Tables("URL_ADRESSE"),URL_ADRESSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableURL_ADRESSE) Is Nothing) Then
                Me.tableURL_ADRESSE.InitVars
            End If
        End If
        Me.tableSPURL_SPECIALITE_ADRESSE = CType(MyBase.Tables("SPURL_SPECIALITE_ADRESSE"),SPURL_SPECIALITE_ADRESSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPURL_SPECIALITE_ADRESSE) Is Nothing) Then
                Me.tableSPURL_SPECIALITE_ADRESSE.InitVars
            End If
        End If
        Me.relationFK2_SPURL_SPECIALITE_ADRESSE = Me.Relations("FK2_SPURL_SPECIALITE_ADRESSE")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaqueURL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaqueURL.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableURL_ADRESSE = New URL_ADRESSEDataTable
        MyBase.Tables.Add(Me.tableURL_ADRESSE)
        Me.tableSPURL_SPECIALITE_ADRESSE = New SPURL_SPECIALITE_ADRESSEDataTable
        MyBase.Tables.Add(Me.tableSPURL_SPECIALITE_ADRESSE)
        Me.relationFK2_SPURL_SPECIALITE_ADRESSE = New Global.System.Data.DataRelation("FK2_SPURL_SPECIALITE_ADRESSE", New Global.System.Data.DataColumn() {Me.tableURL_ADRESSE.URL_CODE_PKColumn}, New Global.System.Data.DataColumn() {Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_CODE_URL_PK_FKColumn}, false)
        Me.Relations.Add(Me.relationFK2_SPURL_SPECIALITE_ADRESSE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeURL_ADRESSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPURL_SPECIALITE_ADRESSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaqueURL = New dsTheriaqueURL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub URL_ADRESSERowChangeEventHandler(ByVal sender As Object, ByVal e As URL_ADRESSERowChangeEvent)
    
    Public Delegate Sub SPURL_SPECIALITE_ADRESSERowChangeEventHandler(ByVal sender As Object, ByVal e As SPURL_SPECIALITE_ADRESSERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class URL_ADRESSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnURL_CODE_PK As Global.System.Data.DataColumn
        
        Private columnURL_TYPE As Global.System.Data.DataColumn
        
        Private columnURL_FIXE As Global.System.Data.DataColumn
        
        Private columnURL_SP_CHAMPS As Global.System.Data.DataColumn
        
        Private columnURL_AUTO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "URL_ADRESSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property URL_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnURL_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property URL_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnURL_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property URL_FIXEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnURL_FIXE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property URL_SP_CHAMPSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnURL_SP_CHAMPS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property URL_AUTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnURL_AUTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As URL_ADRESSERow
            Get
                Return CType(Me.Rows(index),URL_ADRESSERow)
            End Get
        End Property
        
        Public Event URL_ADRESSERowChanging As URL_ADRESSERowChangeEventHandler
        
        Public Event URL_ADRESSERowChanged As URL_ADRESSERowChangeEventHandler
        
        Public Event URL_ADRESSERowDeleting As URL_ADRESSERowChangeEventHandler
        
        Public Event URL_ADRESSERowDeleted As URL_ADRESSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddURL_ADRESSERow(ByVal row As URL_ADRESSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddURL_ADRESSERow(ByVal URL_CODE_PK As Integer, ByVal URL_TYPE As String, ByVal URL_FIXE As String, ByVal URL_SP_CHAMPS As String, ByVal URL_AUTO As Boolean) As URL_ADRESSERow
            Dim rowURL_ADRESSERow As URL_ADRESSERow = CType(Me.NewRow,URL_ADRESSERow)
            Dim columnValuesArray() As Object = New Object() {URL_CODE_PK, URL_TYPE, URL_FIXE, URL_SP_CHAMPS, URL_AUTO}
            rowURL_ADRESSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowURL_ADRESSERow)
            Return rowURL_ADRESSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByURL_CODE_PK(ByVal URL_CODE_PK As Integer) As URL_ADRESSERow
            Return CType(Me.Rows.Find(New Object() {URL_CODE_PK}),URL_ADRESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As URL_ADRESSEDataTable = CType(MyBase.Clone,URL_ADRESSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New URL_ADRESSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnURL_CODE_PK = MyBase.Columns("URL_CODE_PK")
            Me.columnURL_TYPE = MyBase.Columns("URL_TYPE")
            Me.columnURL_FIXE = MyBase.Columns("URL_FIXE")
            Me.columnURL_SP_CHAMPS = MyBase.Columns("URL_SP_CHAMPS")
            Me.columnURL_AUTO = MyBase.Columns("URL_AUTO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnURL_CODE_PK = New Global.System.Data.DataColumn("URL_CODE_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnURL_CODE_PK)
            Me.columnURL_TYPE = New Global.System.Data.DataColumn("URL_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnURL_TYPE)
            Me.columnURL_FIXE = New Global.System.Data.DataColumn("URL_FIXE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnURL_FIXE)
            Me.columnURL_SP_CHAMPS = New Global.System.Data.DataColumn("URL_SP_CHAMPS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnURL_SP_CHAMPS)
            Me.columnURL_AUTO = New Global.System.Data.DataColumn("URL_AUTO", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnURL_AUTO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnURL_CODE_PK}, true))
            Me.columnURL_CODE_PK.AllowDBNull = false
            Me.columnURL_CODE_PK.Unique = true
            Me.columnURL_TYPE.AllowDBNull = false
            Me.columnURL_TYPE.MaxLength = 20
            Me.columnURL_FIXE.AllowDBNull = false
            Me.columnURL_FIXE.MaxLength = 255
            Me.columnURL_SP_CHAMPS.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewURL_ADRESSERow() As URL_ADRESSERow
            Return CType(Me.NewRow,URL_ADRESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New URL_ADRESSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(URL_ADRESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.URL_ADRESSERowChangedEvent) Is Nothing) Then
                RaiseEvent URL_ADRESSERowChanged(Me, New URL_ADRESSERowChangeEvent(CType(e.Row,URL_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.URL_ADRESSERowChangingEvent) Is Nothing) Then
                RaiseEvent URL_ADRESSERowChanging(Me, New URL_ADRESSERowChangeEvent(CType(e.Row,URL_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.URL_ADRESSERowDeletedEvent) Is Nothing) Then
                RaiseEvent URL_ADRESSERowDeleted(Me, New URL_ADRESSERowChangeEvent(CType(e.Row,URL_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.URL_ADRESSERowDeletingEvent) Is Nothing) Then
                RaiseEvent URL_ADRESSERowDeleting(Me, New URL_ADRESSERowChangeEvent(CType(e.Row,URL_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveURL_ADRESSERow(ByVal row As URL_ADRESSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaqueURL = New dsTheriaqueURL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "URL_ADRESSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPURL_SPECIALITE_ADRESSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSPURL_CODE_SP_PK_FK As Global.System.Data.DataColumn
        
        Private columnSPURL_CODE_URL_PK_FK As Global.System.Data.DataColumn
        
        Private columnSPURL_ADRESSE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPURL_SPECIALITE_ADRESSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPURL_CODE_SP_PK_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPURL_CODE_SP_PK_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPURL_CODE_URL_PK_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPURL_CODE_URL_PK_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPURL_ADRESSEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPURL_ADRESSE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPURL_SPECIALITE_ADRESSERow
            Get
                Return CType(Me.Rows(index),SPURL_SPECIALITE_ADRESSERow)
            End Get
        End Property
        
        Public Event SPURL_SPECIALITE_ADRESSERowChanging As SPURL_SPECIALITE_ADRESSERowChangeEventHandler
        
        Public Event SPURL_SPECIALITE_ADRESSERowChanged As SPURL_SPECIALITE_ADRESSERowChangeEventHandler
        
        Public Event SPURL_SPECIALITE_ADRESSERowDeleting As SPURL_SPECIALITE_ADRESSERowChangeEventHandler
        
        Public Event SPURL_SPECIALITE_ADRESSERowDeleted As SPURL_SPECIALITE_ADRESSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPURL_SPECIALITE_ADRESSERow(ByVal row As SPURL_SPECIALITE_ADRESSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPURL_SPECIALITE_ADRESSERow(ByVal SPURL_CODE_SP_PK_FK As Integer, ByVal parentURL_ADRESSERowByFK2_SPURL_SPECIALITE_ADRESSE As URL_ADRESSERow, ByVal SPURL_ADRESSE As String) As SPURL_SPECIALITE_ADRESSERow
            Dim rowSPURL_SPECIALITE_ADRESSERow As SPURL_SPECIALITE_ADRESSERow = CType(Me.NewRow,SPURL_SPECIALITE_ADRESSERow)
            Dim columnValuesArray() As Object = New Object() {SPURL_CODE_SP_PK_FK, Nothing, SPURL_ADRESSE}
            If (Not (parentURL_ADRESSERowByFK2_SPURL_SPECIALITE_ADRESSE) Is Nothing) Then
                columnValuesArray(1) = parentURL_ADRESSERowByFK2_SPURL_SPECIALITE_ADRESSE(0)
            End If
            rowSPURL_SPECIALITE_ADRESSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSPURL_SPECIALITE_ADRESSERow)
            Return rowSPURL_SPECIALITE_ADRESSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPURL_CODE_SP_PK_FKSPURL_CODE_URL_PK_FK(ByVal SPURL_CODE_SP_PK_FK As Integer, ByVal SPURL_CODE_URL_PK_FK As Integer) As SPURL_SPECIALITE_ADRESSERow
            Return CType(Me.Rows.Find(New Object() {SPURL_CODE_SP_PK_FK, SPURL_CODE_URL_PK_FK}),SPURL_SPECIALITE_ADRESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SPURL_SPECIALITE_ADRESSEDataTable = CType(MyBase.Clone,SPURL_SPECIALITE_ADRESSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SPURL_SPECIALITE_ADRESSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPURL_CODE_SP_PK_FK = MyBase.Columns("SPURL_CODE_SP_PK_FK")
            Me.columnSPURL_CODE_URL_PK_FK = MyBase.Columns("SPURL_CODE_URL_PK_FK")
            Me.columnSPURL_ADRESSE = MyBase.Columns("SPURL_ADRESSE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPURL_CODE_SP_PK_FK = New Global.System.Data.DataColumn("SPURL_CODE_SP_PK_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPURL_CODE_SP_PK_FK)
            Me.columnSPURL_CODE_URL_PK_FK = New Global.System.Data.DataColumn("SPURL_CODE_URL_PK_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPURL_CODE_URL_PK_FK)
            Me.columnSPURL_ADRESSE = New Global.System.Data.DataColumn("SPURL_ADRESSE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPURL_ADRESSE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSPURL_CODE_SP_PK_FK, Me.columnSPURL_CODE_URL_PK_FK}, true))
            Me.columnSPURL_CODE_SP_PK_FK.AllowDBNull = false
            Me.columnSPURL_CODE_URL_PK_FK.AllowDBNull = false
            Me.columnSPURL_ADRESSE.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPURL_SPECIALITE_ADRESSERow() As SPURL_SPECIALITE_ADRESSERow
            Return CType(Me.NewRow,SPURL_SPECIALITE_ADRESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SPURL_SPECIALITE_ADRESSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SPURL_SPECIALITE_ADRESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPURL_SPECIALITE_ADRESSERowChangedEvent) Is Nothing) Then
                RaiseEvent SPURL_SPECIALITE_ADRESSERowChanged(Me, New SPURL_SPECIALITE_ADRESSERowChangeEvent(CType(e.Row,SPURL_SPECIALITE_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPURL_SPECIALITE_ADRESSERowChangingEvent) Is Nothing) Then
                RaiseEvent SPURL_SPECIALITE_ADRESSERowChanging(Me, New SPURL_SPECIALITE_ADRESSERowChangeEvent(CType(e.Row,SPURL_SPECIALITE_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPURL_SPECIALITE_ADRESSERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPURL_SPECIALITE_ADRESSERowDeleted(Me, New SPURL_SPECIALITE_ADRESSERowChangeEvent(CType(e.Row,SPURL_SPECIALITE_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPURL_SPECIALITE_ADRESSERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPURL_SPECIALITE_ADRESSERowDeleting(Me, New SPURL_SPECIALITE_ADRESSERowChangeEvent(CType(e.Row,SPURL_SPECIALITE_ADRESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPURL_SPECIALITE_ADRESSERow(ByVal row As SPURL_SPECIALITE_ADRESSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaqueURL = New dsTheriaqueURL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPURL_SPECIALITE_ADRESSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class URL_ADRESSERow
        Inherits Global.System.Data.DataRow
        
        Private tableURL_ADRESSE As URL_ADRESSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableURL_ADRESSE = CType(Me.Table,URL_ADRESSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_CODE_PK() As Integer
            Get
                Return CType(Me(Me.tableURL_ADRESSE.URL_CODE_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableURL_ADRESSE.URL_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_TYPE() As String
            Get
                Return CType(Me(Me.tableURL_ADRESSE.URL_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableURL_ADRESSE.URL_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_FIXE() As String
            Get
                Return CType(Me(Me.tableURL_ADRESSE.URL_FIXEColumn),String)
            End Get
            Set
                Me(Me.tableURL_ADRESSE.URL_FIXEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_SP_CHAMPS() As String
            Get
                Try 
                    Return CType(Me(Me.tableURL_ADRESSE.URL_SP_CHAMPSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'URL_SP_CHAMPS' dans la table 'URL_ADRESSE' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableURL_ADRESSE.URL_SP_CHAMPSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_AUTO() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableURL_ADRESSE.URL_AUTOColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'URL_AUTO' dans la table 'URL_ADRESSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableURL_ADRESSE.URL_AUTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsURL_SP_CHAMPSNull() As Boolean
            Return Me.IsNull(Me.tableURL_ADRESSE.URL_SP_CHAMPSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetURL_SP_CHAMPSNull()
            Me(Me.tableURL_ADRESSE.URL_SP_CHAMPSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsURL_AUTONull() As Boolean
            Return Me.IsNull(Me.tableURL_ADRESSE.URL_AUTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetURL_AUTONull()
            Me(Me.tableURL_ADRESSE.URL_AUTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPURL_SPECIALITE_ADRESSERows() As SPURL_SPECIALITE_ADRESSERow()
            If (Me.Table.ChildRelations("FK2_SPURL_SPECIALITE_ADRESSE") Is Nothing) Then
                Return New SPURL_SPECIALITE_ADRESSERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK2_SPURL_SPECIALITE_ADRESSE")),SPURL_SPECIALITE_ADRESSERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPURL_SPECIALITE_ADRESSERow
        Inherits Global.System.Data.DataRow
        
        Private tableSPURL_SPECIALITE_ADRESSE As SPURL_SPECIALITE_ADRESSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPURL_SPECIALITE_ADRESSE = CType(Me.Table,SPURL_SPECIALITE_ADRESSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPURL_CODE_SP_PK_FK() As Integer
            Get
                Return CType(Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_CODE_SP_PK_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_CODE_SP_PK_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPURL_CODE_URL_PK_FK() As Integer
            Get
                Return CType(Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_CODE_URL_PK_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_CODE_URL_PK_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPURL_ADRESSE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_ADRESSEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SPURL_ADRESSE' dans la table 'SPURL_SPECIALITE_ADRESSE"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_ADRESSEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property URL_ADRESSERow() As URL_ADRESSERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK2_SPURL_SPECIALITE_ADRESSE")),URL_ADRESSERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK2_SPURL_SPECIALITE_ADRESSE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPURL_ADRESSENull() As Boolean
            Return Me.IsNull(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_ADRESSEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPURL_ADRESSENull()
            Me(Me.tableSPURL_SPECIALITE_ADRESSE.SPURL_ADRESSEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class URL_ADRESSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As URL_ADRESSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As URL_ADRESSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As URL_ADRESSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPURL_SPECIALITE_ADRESSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SPURL_SPECIALITE_ADRESSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPURL_SPECIALITE_ADRESSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPURL_SPECIALITE_ADRESSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaqueURLTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class URL_ADRESSETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "URL_ADRESSE"
            tableMapping.ColumnMappings.Add("URL_CODE_PK", "URL_CODE_PK")
            tableMapping.ColumnMappings.Add("URL_TYPE", "URL_TYPE")
            tableMapping.ColumnMappings.Add("URL_FIXE", "URL_FIXE")
            tableMapping.ColumnMappings.Add("URL_SP_CHAMPS", "URL_SP_CHAMPS")
            tableMapping.ColumnMappings.Add("URL_AUTO", "URL_AUTO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[URL_ADRESSE] WHERE (([URL_CODE_PK] = @Original_URL_CODE_"& _ 
                "PK) AND ([URL_TYPE] = @Original_URL_TYPE) AND ([URL_FIXE] = @Original_URL_FIXE) "& _ 
                "AND ((@IsNull_URL_SP_CHAMPS = 1 AND [URL_SP_CHAMPS] IS NULL) OR ([URL_SP_CHAMPS]"& _ 
                " = @Original_URL_SP_CHAMPS)) AND ((@IsNull_URL_AUTO = 1 AND [URL_AUTO] IS NULL) "& _ 
                "OR ([URL_AUTO] = @Original_URL_AUTO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_FIXE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_FIXE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_URL_SP_CHAMPS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_SP_CHAMPS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_SP_CHAMPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_SP_CHAMPS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_URL_AUTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_AUTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_AUTO", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_AUTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[URL_ADRESSE] ([URL_CODE_PK], [URL_TYPE], [URL_FIXE], [UR"& _ 
                "L_SP_CHAMPS], [URL_AUTO]) VALUES (@URL_CODE_PK, @URL_TYPE, @URL_FIXE, @URL_SP_CH"& _ 
                "AMPS, @URL_AUTO);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT URL_CODE_PK, URL_TYPE, URL_FIXE, URL_SP_CHAMPS, URL_AU"& _ 
                "TO FROM theriaque.URL_ADRESSE WHERE (URL_CODE_PK = @URL_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_FIXE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_FIXE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_SP_CHAMPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_SP_CHAMPS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_AUTO", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_AUTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[URL_ADRESSE] SET [URL_CODE_PK] = @URL_CODE_PK, [URL_TYPE] = @"& _ 
                "URL_TYPE, [URL_FIXE] = @URL_FIXE, [URL_SP_CHAMPS] = @URL_SP_CHAMPS, [URL_AUTO] ="& _ 
                " @URL_AUTO WHERE (([URL_CODE_PK] = @Original_URL_CODE_PK) AND ([URL_TYPE] = @Ori"& _ 
                "ginal_URL_TYPE) AND ([URL_FIXE] = @Original_URL_FIXE) AND ((@IsNull_URL_SP_CHAMP"& _ 
                "S = 1 AND [URL_SP_CHAMPS] IS NULL) OR ([URL_SP_CHAMPS] = @Original_URL_SP_CHAMPS"& _ 
                ")) AND ((@IsNull_URL_AUTO = 1 AND [URL_AUTO] IS NULL) OR ([URL_AUTO] = @Original"& _ 
                "_URL_AUTO)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT URL_CODE_PK, URL_TYPE, URL_FIXE, URL_SP_CHAMPS, URL_AUTO F"& _ 
                "ROM theriaque.URL_ADRESSE WHERE (URL_CODE_PK = @URL_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_FIXE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_FIXE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_SP_CHAMPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_SP_CHAMPS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_AUTO", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_AUTO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_CODE_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_FIXE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_FIXE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_URL_SP_CHAMPS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_SP_CHAMPS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_SP_CHAMPS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_SP_CHAMPS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_URL_AUTO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_AUTO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_URL_AUTO", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_AUTO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.THERIAQUEConnectionString5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT URL_CODE_PK, URL_TYPE, URL_FIXE, URL_SP_CHAMPS, URL_AUTO FROM theriaque.UR"& _ 
                "L_ADRESSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT URL_CODE_PK, URL_TYPE, URL_FIXE, URL_SP_CHAMPS, URL_AUTO FROM theriaque.UR"& _ 
                "L_ADRESSE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE URL_CODE_PK = @URL_CODE_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@URL_CODE_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "URL_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaqueURL.URL_ADRESSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaqueURL.URL_ADRESSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaqueURL.URL_ADRESSEDataTable = New dsTheriaqueURL.URL_ADRESSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaqueURL.URL_ADRESSEDataTable, ByVal URL_CODE_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(URL_CODE_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal URL_CODE_PK As Integer) As dsTheriaqueURL.URL_ADRESSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(URL_CODE_PK,Integer)
            Dim dataTable As dsTheriaqueURL.URL_ADRESSEDataTable = New dsTheriaqueURL.URL_ADRESSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaqueURL.URL_ADRESSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaqueURL) As Integer
            Return Me.Adapter.Update(dataSet, "URL_ADRESSE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_URL_CODE_PK As Integer, ByVal Original_URL_TYPE As String, ByVal Original_URL_FIXE As String, ByVal Original_URL_SP_CHAMPS As String, ByVal Original_URL_AUTO As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_URL_CODE_PK,Integer)
            If (Original_URL_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_URL_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_URL_TYPE,String)
            End If
            If (Original_URL_FIXE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_URL_FIXE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_URL_FIXE,String)
            End If
            If (Original_URL_SP_CHAMPS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_URL_SP_CHAMPS,String)
            End If
            If (Original_URL_AUTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_URL_AUTO.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal URL_CODE_PK As Integer, ByVal URL_TYPE As String, ByVal URL_FIXE As String, ByVal URL_SP_CHAMPS As String, ByVal URL_AUTO As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(URL_CODE_PK,Integer)
            If (URL_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("URL_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(URL_TYPE,String)
            End If
            If (URL_FIXE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("URL_FIXE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(URL_FIXE,String)
            End If
            If (URL_SP_CHAMPS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(URL_SP_CHAMPS,String)
            End If
            If (URL_AUTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(URL_AUTO.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal URL_CODE_PK As Integer, ByVal URL_TYPE As String, ByVal URL_FIXE As String, ByVal URL_SP_CHAMPS As String, ByVal URL_AUTO As Global.System.Nullable(Of Boolean), ByVal Original_URL_CODE_PK As Integer, ByVal Original_URL_TYPE As String, ByVal Original_URL_FIXE As String, ByVal Original_URL_SP_CHAMPS As String, ByVal Original_URL_AUTO As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(URL_CODE_PK,Integer)
            If (URL_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("URL_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(URL_TYPE,String)
            End If
            If (URL_FIXE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("URL_FIXE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(URL_FIXE,String)
            End If
            If (URL_SP_CHAMPS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(URL_SP_CHAMPS,String)
            End If
            If (URL_AUTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(URL_AUTO.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_URL_CODE_PK,Integer)
            If (Original_URL_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_URL_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_URL_TYPE,String)
            End If
            If (Original_URL_FIXE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_URL_FIXE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_URL_FIXE,String)
            End If
            If (Original_URL_SP_CHAMPS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_URL_SP_CHAMPS,String)
            End If
            If (Original_URL_AUTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_URL_AUTO.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal URL_TYPE As String, ByVal URL_FIXE As String, ByVal URL_SP_CHAMPS As String, ByVal URL_AUTO As Global.System.Nullable(Of Boolean), ByVal Original_URL_CODE_PK As Integer, ByVal Original_URL_TYPE As String, ByVal Original_URL_FIXE As String, ByVal Original_URL_SP_CHAMPS As String, ByVal Original_URL_AUTO As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_URL_CODE_PK, URL_TYPE, URL_FIXE, URL_SP_CHAMPS, URL_AUTO, Original_URL_CODE_PK, Original_URL_TYPE, Original_URL_FIXE, Original_URL_SP_CHAMPS, Original_URL_AUTO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPURL_SPECIALITE_ADRESSETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPURL_SPECIALITE_ADRESSE"
            tableMapping.ColumnMappings.Add("SPURL_CODE_SP_PK_FK", "SPURL_CODE_SP_PK_FK")
            tableMapping.ColumnMappings.Add("SPURL_CODE_URL_PK_FK", "SPURL_CODE_URL_PK_FK")
            tableMapping.ColumnMappings.Add("SPURL_ADRESSE", "SPURL_ADRESSE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SPURL_SPECIALITE_ADRESSE] WHERE (([SPURL_CODE_SP_PK_FK] "& _ 
                "= @Original_SPURL_CODE_SP_PK_FK) AND ([SPURL_CODE_URL_PK_FK] = @Original_SPURL_C"& _ 
                "ODE_URL_PK_FK) AND ((@IsNull_SPURL_ADRESSE = 1 AND [SPURL_ADRESSE] IS NULL) OR ("& _ 
                "[SPURL_ADRESSE] = @Original_SPURL_ADRESSE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPURL_CODE_SP_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_SP_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPURL_CODE_URL_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_URL_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPURL_ADRESSE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_ADRESSE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPURL_ADRESSE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_ADRESSE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SPURL_SPECIALITE_ADRESSE] ([SPURL_CODE_SP_PK_FK], [SPURL"& _ 
                "_CODE_URL_PK_FK], [SPURL_ADRESSE]) VALUES (@SPURL_CODE_SP_PK_FK, @SPURL_CODE_URL"& _ 
                "_PK_FK, @SPURL_ADRESSE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPURL_CODE_SP_PK_FK, SPURL_CODE_URL_PK_FK, SPUR"& _ 
                "L_ADRESSE FROM theriaque.SPURL_SPECIALITE_ADRESSE WHERE (SPURL_CODE_SP_PK_FK = @"& _ 
                "SPURL_CODE_SP_PK_FK) AND (SPURL_CODE_URL_PK_FK = @SPURL_CODE_URL_PK_FK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_CODE_SP_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_SP_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_CODE_URL_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_URL_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_ADRESSE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_ADRESSE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SPURL_SPECIALITE_ADRESSE] SET [SPURL_CODE_SP_PK_FK] = @SPURL_"& _ 
                "CODE_SP_PK_FK, [SPURL_CODE_URL_PK_FK] = @SPURL_CODE_URL_PK_FK, [SPURL_ADRESSE] ="& _ 
                " @SPURL_ADRESSE WHERE (([SPURL_CODE_SP_PK_FK] = @Original_SPURL_CODE_SP_PK_FK) A"& _ 
                "ND ([SPURL_CODE_URL_PK_FK] = @Original_SPURL_CODE_URL_PK_FK) AND ((@IsNull_SPURL"& _ 
                "_ADRESSE = 1 AND [SPURL_ADRESSE] IS NULL) OR ([SPURL_ADRESSE] = @Original_SPURL_"& _ 
                "ADRESSE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPURL_CODE_SP_PK_FK, SPURL_CODE_URL_PK_FK, SPURL_ADRESSE FRO"& _ 
                "M theriaque.SPURL_SPECIALITE_ADRESSE WHERE (SPURL_CODE_SP_PK_FK = @SPURL_CODE_SP"& _ 
                "_PK_FK) AND (SPURL_CODE_URL_PK_FK = @SPURL_CODE_URL_PK_FK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_CODE_SP_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_SP_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_CODE_URL_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_URL_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_ADRESSE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_ADRESSE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPURL_CODE_SP_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_SP_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPURL_CODE_URL_PK_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_URL_PK_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPURL_ADRESSE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_ADRESSE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPURL_ADRESSE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_ADRESSE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.THERIAQUEConnectionString5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPURL_CODE_SP_PK_FK, SPURL_CODE_URL_PK_FK, SPURL_ADRESSE FROM theriaque.SP"& _ 
                "URL_SPECIALITE_ADRESSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPURL_CODE_SP_PK_FK, SPURL_CODE_URL_PK_FK, SPURL_ADRESSE FROM theriaque.SP"& _ 
                "URL_SPECIALITE_ADRESSE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE SPURL_CODE_SP_PK_FK = @SPURL_CODE_SP_PK_FK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPURL_CODE_SP_PK_FK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "SPURL_CODE_SP_PK_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable = New dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable, ByVal SPURL_CODE_SP_PK_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPURL_CODE_SP_PK_FK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal SPURL_CODE_SP_PK_FK As Integer) As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPURL_CODE_SP_PK_FK,Integer)
            Dim dataTable As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable = New dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaqueURL.SPURL_SPECIALITE_ADRESSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaqueURL) As Integer
            Return Me.Adapter.Update(dataSet, "SPURL_SPECIALITE_ADRESSE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SPURL_CODE_SP_PK_FK As Integer, ByVal Original_SPURL_CODE_URL_PK_FK As Integer, ByVal Original_SPURL_ADRESSE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPURL_CODE_SP_PK_FK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPURL_CODE_URL_PK_FK,Integer)
            If (Original_SPURL_ADRESSE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPURL_ADRESSE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SPURL_CODE_SP_PK_FK As Integer, ByVal SPURL_CODE_URL_PK_FK As Integer, ByVal SPURL_ADRESSE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPURL_CODE_SP_PK_FK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPURL_CODE_URL_PK_FK,Integer)
            If (SPURL_ADRESSE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPURL_ADRESSE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPURL_CODE_SP_PK_FK As Integer, ByVal SPURL_CODE_URL_PK_FK As Integer, ByVal SPURL_ADRESSE As String, ByVal Original_SPURL_CODE_SP_PK_FK As Integer, ByVal Original_SPURL_CODE_URL_PK_FK As Integer, ByVal Original_SPURL_ADRESSE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPURL_CODE_SP_PK_FK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPURL_CODE_URL_PK_FK,Integer)
            If (SPURL_ADRESSE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPURL_ADRESSE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPURL_CODE_SP_PK_FK,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPURL_CODE_URL_PK_FK,Integer)
            If (Original_SPURL_ADRESSE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPURL_ADRESSE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPURL_ADRESSE As String, ByVal Original_SPURL_CODE_SP_PK_FK As Integer, ByVal Original_SPURL_CODE_URL_PK_FK As Integer, ByVal Original_SPURL_ADRESSE As String) As Integer
            Return Me.Update(Original_SPURL_CODE_SP_PK_FK, Original_SPURL_CODE_URL_PK_FK, SPURL_ADRESSE, Original_SPURL_CODE_SP_PK_FK, Original_SPURL_CODE_URL_PK_FK, Original_SPURL_ADRESSE)
        End Function
    End Class
End Namespace
