'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Pos_Min_Max"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Pos_Min_Max
    Inherits Global.System.Data.DataSet
    
    Private tableCDF_CODIF As CDF_CODIFDataTable
    
    Private tableFPOMM_POSOLOGIE_MIN_MAX As FPOMM_POSOLOGIE_MIN_MAXDataTable
    
    Private tableFPOMMCCH_POSOMINMAX_CLCH As FPOMMCCH_POSOMINMAX_CLCHDataTable
    
    Private tableFPOMMCPH_POSOMINMAX_CLPH As FPOMMCPH_POSOMINMAX_CLPHDataTable
    
    Private tableFPOMMPR_POSOMINMAX_PROD As FPOMMPR_POSOMINMAX_PRODDataTable
    
    Private tableCPH_CLASSEPHARMTHER As CPH_CLASSEPHARMTHERDataTable
    
    Private tableSAC_SUBACTIVE As SAC_SUBACTIVEDataTable
    
    Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
    
    Private tableFPOMMI_INTERVALLE_MIN_MAX As FPOMMI_INTERVALLE_MIN_MAXDataTable
    
    Private tableFPODCM_DOSE_CUMUL_MAX As FPODCM_DOSE_CUMUL_MAXDataTable
    
    Private tableFPOMMDO_POSOMINMAX_DOSES As FPOMMDO_POSOMINMAX_DOSESDataTable
    
    Private tableFPOMMSAC_POSOMINMAX_SUBACT As FPOMMSAC_POSOMINMAX_SUBACTDataTable
    
    Private tableFPOMMSP_POSOMINMAX_SPE As FPOMMSP_POSOMINMAX_SPEDataTable
    
    Private tableFPOMMTP_POSOMINMAX_TERPER As FPOMMTP_POSOMINMAX_TERPERDataTable
    
    Private relationFK_FPOMMPR As Global.System.Data.DataRelation
    
    Private relationFK_Posologie_Clch As Global.System.Data.DataRelation
    
    Private relationFK_POSOMINMAX_CLPH As Global.System.Data.DataRelation
    
    Private relationFK1_CPH_CLASSEPHARMTHER As Global.System.Data.DataRelation
    
    Private relationFK_CPH As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CDF_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDF_CODIFDataTable(ds.Tables("CDF_CODIF")))
            End If
            If (Not (ds.Tables("FPOMM_POSOLOGIE_MIN_MAX")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMM_POSOLOGIE_MIN_MAXDataTable(ds.Tables("FPOMM_POSOLOGIE_MIN_MAX")))
            End If
            If (Not (ds.Tables("FPOMMCCH_POSOMINMAX_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMCCH_POSOMINMAX_CLCHDataTable(ds.Tables("FPOMMCCH_POSOMINMAX_CLCH")))
            End If
            If (Not (ds.Tables("FPOMMCPH_POSOMINMAX_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMCPH_POSOMINMAX_CLPHDataTable(ds.Tables("FPOMMCPH_POSOMINMAX_CLPH")))
            End If
            If (Not (ds.Tables("FPOMMPR_POSOMINMAX_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMPR_POSOMINMAX_PRODDataTable(ds.Tables("FPOMMPR_POSOMINMAX_PROD")))
            End If
            If (Not (ds.Tables("CPH_CLASSEPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New CPH_CLASSEPHARMTHERDataTable(ds.Tables("CPH_CLASSEPHARMTHER")))
            End If
            If (Not (ds.Tables("SAC_SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New SAC_SUBACTIVEDataTable(ds.Tables("SAC_SUBACTIVE")))
            End If
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            If (Not (ds.Tables("FPOMMI_INTERVALLE_MIN_MAX")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMI_INTERVALLE_MIN_MAXDataTable(ds.Tables("FPOMMI_INTERVALLE_MIN_MAX")))
            End If
            If (Not (ds.Tables("FPODCM_DOSE_CUMUL_MAX")) Is Nothing) Then
                MyBase.Tables.Add(New FPODCM_DOSE_CUMUL_MAXDataTable(ds.Tables("FPODCM_DOSE_CUMUL_MAX")))
            End If
            If (Not (ds.Tables("FPOMMDO_POSOMINMAX_DOSES")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMDO_POSOMINMAX_DOSESDataTable(ds.Tables("FPOMMDO_POSOMINMAX_DOSES")))
            End If
            If (Not (ds.Tables("FPOMMSAC_POSOMINMAX_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMSAC_POSOMINMAX_SUBACTDataTable(ds.Tables("FPOMMSAC_POSOMINMAX_SUBACT")))
            End If
            If (Not (ds.Tables("FPOMMSP_POSOMINMAX_SPE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMSP_POSOMINMAX_SPEDataTable(ds.Tables("FPOMMSP_POSOMINMAX_SPE")))
            End If
            If (Not (ds.Tables("FPOMMTP_POSOMINMAX_TERPER")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMTP_POSOMINMAX_TERPERDataTable(ds.Tables("FPOMMTP_POSOMINMAX_TERPER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CDF_CODIF() As CDF_CODIFDataTable
        Get
            Return Me.tableCDF_CODIF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMM_POSOLOGIE_MIN_MAX() As FPOMM_POSOLOGIE_MIN_MAXDataTable
        Get
            Return Me.tableFPOMM_POSOLOGIE_MIN_MAX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMCCH_POSOMINMAX_CLCH() As FPOMMCCH_POSOMINMAX_CLCHDataTable
        Get
            Return Me.tableFPOMMCCH_POSOMINMAX_CLCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMCPH_POSOMINMAX_CLPH() As FPOMMCPH_POSOMINMAX_CLPHDataTable
        Get
            Return Me.tableFPOMMCPH_POSOMINMAX_CLPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMPR_POSOMINMAX_PROD() As FPOMMPR_POSOMINMAX_PRODDataTable
        Get
            Return Me.tableFPOMMPR_POSOMINMAX_PROD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CPH_CLASSEPHARMTHER() As CPH_CLASSEPHARMTHERDataTable
        Get
            Return Me.tableCPH_CLASSEPHARMTHER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAC_SUBACTIVE() As SAC_SUBACTIVEDataTable
        Get
            Return Me.tableSAC_SUBACTIVE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_SPECIALITE() As SP_SPECIALITEDataTable
        Get
            Return Me.tableSP_SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMI_INTERVALLE_MIN_MAX() As FPOMMI_INTERVALLE_MIN_MAXDataTable
        Get
            Return Me.tableFPOMMI_INTERVALLE_MIN_MAX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPODCM_DOSE_CUMUL_MAX() As FPODCM_DOSE_CUMUL_MAXDataTable
        Get
            Return Me.tableFPODCM_DOSE_CUMUL_MAX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMDO_POSOMINMAX_DOSES() As FPOMMDO_POSOMINMAX_DOSESDataTable
        Get
            Return Me.tableFPOMMDO_POSOMINMAX_DOSES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMSAC_POSOMINMAX_SUBACT() As FPOMMSAC_POSOMINMAX_SUBACTDataTable
        Get
            Return Me.tableFPOMMSAC_POSOMINMAX_SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMSP_POSOMINMAX_SPE() As FPOMMSP_POSOMINMAX_SPEDataTable
        Get
            Return Me.tableFPOMMSP_POSOMINMAX_SPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPOMMTP_POSOMINMAX_TERPER() As FPOMMTP_POSOMINMAX_TERPERDataTable
        Get
            Return Me.tableFPOMMTP_POSOMINMAX_TERPER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Pos_Min_Max = CType(MyBase.Clone,dsTheriaque_Pos_Min_Max)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CDF_CODIF")) Is Nothing) Then
                MyBase.Tables.Add(New CDF_CODIFDataTable(ds.Tables("CDF_CODIF")))
            End If
            If (Not (ds.Tables("FPOMM_POSOLOGIE_MIN_MAX")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMM_POSOLOGIE_MIN_MAXDataTable(ds.Tables("FPOMM_POSOLOGIE_MIN_MAX")))
            End If
            If (Not (ds.Tables("FPOMMCCH_POSOMINMAX_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMCCH_POSOMINMAX_CLCHDataTable(ds.Tables("FPOMMCCH_POSOMINMAX_CLCH")))
            End If
            If (Not (ds.Tables("FPOMMCPH_POSOMINMAX_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMCPH_POSOMINMAX_CLPHDataTable(ds.Tables("FPOMMCPH_POSOMINMAX_CLPH")))
            End If
            If (Not (ds.Tables("FPOMMPR_POSOMINMAX_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMPR_POSOMINMAX_PRODDataTable(ds.Tables("FPOMMPR_POSOMINMAX_PROD")))
            End If
            If (Not (ds.Tables("CPH_CLASSEPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New CPH_CLASSEPHARMTHERDataTable(ds.Tables("CPH_CLASSEPHARMTHER")))
            End If
            If (Not (ds.Tables("SAC_SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New SAC_SUBACTIVEDataTable(ds.Tables("SAC_SUBACTIVE")))
            End If
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            If (Not (ds.Tables("FPOMMI_INTERVALLE_MIN_MAX")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMI_INTERVALLE_MIN_MAXDataTable(ds.Tables("FPOMMI_INTERVALLE_MIN_MAX")))
            End If
            If (Not (ds.Tables("FPODCM_DOSE_CUMUL_MAX")) Is Nothing) Then
                MyBase.Tables.Add(New FPODCM_DOSE_CUMUL_MAXDataTable(ds.Tables("FPODCM_DOSE_CUMUL_MAX")))
            End If
            If (Not (ds.Tables("FPOMMDO_POSOMINMAX_DOSES")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMDO_POSOMINMAX_DOSESDataTable(ds.Tables("FPOMMDO_POSOMINMAX_DOSES")))
            End If
            If (Not (ds.Tables("FPOMMSAC_POSOMINMAX_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMSAC_POSOMINMAX_SUBACTDataTable(ds.Tables("FPOMMSAC_POSOMINMAX_SUBACT")))
            End If
            If (Not (ds.Tables("FPOMMSP_POSOMINMAX_SPE")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMSP_POSOMINMAX_SPEDataTable(ds.Tables("FPOMMSP_POSOMINMAX_SPE")))
            End If
            If (Not (ds.Tables("FPOMMTP_POSOMINMAX_TERPER")) Is Nothing) Then
                MyBase.Tables.Add(New FPOMMTP_POSOMINMAX_TERPERDataTable(ds.Tables("FPOMMTP_POSOMINMAX_TERPER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCDF_CODIF = CType(MyBase.Tables("CDF_CODIF"),CDF_CODIFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCDF_CODIF) Is Nothing) Then
                Me.tableCDF_CODIF.InitVars
            End If
        End If
        Me.tableFPOMM_POSOLOGIE_MIN_MAX = CType(MyBase.Tables("FPOMM_POSOLOGIE_MIN_MAX"),FPOMM_POSOLOGIE_MIN_MAXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMM_POSOLOGIE_MIN_MAX) Is Nothing) Then
                Me.tableFPOMM_POSOLOGIE_MIN_MAX.InitVars
            End If
        End If
        Me.tableFPOMMCCH_POSOMINMAX_CLCH = CType(MyBase.Tables("FPOMMCCH_POSOMINMAX_CLCH"),FPOMMCCH_POSOMINMAX_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMCCH_POSOMINMAX_CLCH) Is Nothing) Then
                Me.tableFPOMMCCH_POSOMINMAX_CLCH.InitVars
            End If
        End If
        Me.tableFPOMMCPH_POSOMINMAX_CLPH = CType(MyBase.Tables("FPOMMCPH_POSOMINMAX_CLPH"),FPOMMCPH_POSOMINMAX_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMCPH_POSOMINMAX_CLPH) Is Nothing) Then
                Me.tableFPOMMCPH_POSOMINMAX_CLPH.InitVars
            End If
        End If
        Me.tableFPOMMPR_POSOMINMAX_PROD = CType(MyBase.Tables("FPOMMPR_POSOMINMAX_PROD"),FPOMMPR_POSOMINMAX_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMPR_POSOMINMAX_PROD) Is Nothing) Then
                Me.tableFPOMMPR_POSOMINMAX_PROD.InitVars
            End If
        End If
        Me.tableCPH_CLASSEPHARMTHER = CType(MyBase.Tables("CPH_CLASSEPHARMTHER"),CPH_CLASSEPHARMTHERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCPH_CLASSEPHARMTHER) Is Nothing) Then
                Me.tableCPH_CLASSEPHARMTHER.InitVars
            End If
        End If
        Me.tableSAC_SUBACTIVE = CType(MyBase.Tables("SAC_SUBACTIVE"),SAC_SUBACTIVEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAC_SUBACTIVE) Is Nothing) Then
                Me.tableSAC_SUBACTIVE.InitVars
            End If
        End If
        Me.tableSP_SPECIALITE = CType(MyBase.Tables("SP_SPECIALITE"),SP_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSP_SPECIALITE) Is Nothing) Then
                Me.tableSP_SPECIALITE.InitVars
            End If
        End If
        Me.tableFPOMMI_INTERVALLE_MIN_MAX = CType(MyBase.Tables("FPOMMI_INTERVALLE_MIN_MAX"),FPOMMI_INTERVALLE_MIN_MAXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMI_INTERVALLE_MIN_MAX) Is Nothing) Then
                Me.tableFPOMMI_INTERVALLE_MIN_MAX.InitVars
            End If
        End If
        Me.tableFPODCM_DOSE_CUMUL_MAX = CType(MyBase.Tables("FPODCM_DOSE_CUMUL_MAX"),FPODCM_DOSE_CUMUL_MAXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPODCM_DOSE_CUMUL_MAX) Is Nothing) Then
                Me.tableFPODCM_DOSE_CUMUL_MAX.InitVars
            End If
        End If
        Me.tableFPOMMDO_POSOMINMAX_DOSES = CType(MyBase.Tables("FPOMMDO_POSOMINMAX_DOSES"),FPOMMDO_POSOMINMAX_DOSESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMDO_POSOMINMAX_DOSES) Is Nothing) Then
                Me.tableFPOMMDO_POSOMINMAX_DOSES.InitVars
            End If
        End If
        Me.tableFPOMMSAC_POSOMINMAX_SUBACT = CType(MyBase.Tables("FPOMMSAC_POSOMINMAX_SUBACT"),FPOMMSAC_POSOMINMAX_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMSAC_POSOMINMAX_SUBACT) Is Nothing) Then
                Me.tableFPOMMSAC_POSOMINMAX_SUBACT.InitVars
            End If
        End If
        Me.tableFPOMMSP_POSOMINMAX_SPE = CType(MyBase.Tables("FPOMMSP_POSOMINMAX_SPE"),FPOMMSP_POSOMINMAX_SPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMSP_POSOMINMAX_SPE) Is Nothing) Then
                Me.tableFPOMMSP_POSOMINMAX_SPE.InitVars
            End If
        End If
        Me.tableFPOMMTP_POSOMINMAX_TERPER = CType(MyBase.Tables("FPOMMTP_POSOMINMAX_TERPER"),FPOMMTP_POSOMINMAX_TERPERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPOMMTP_POSOMINMAX_TERPER) Is Nothing) Then
                Me.tableFPOMMTP_POSOMINMAX_TERPER.InitVars
            End If
        End If
        Me.relationFK_FPOMMPR = Me.Relations("FK_FPOMMPR")
        Me.relationFK_Posologie_Clch = Me.Relations("FK_Posologie_Clch")
        Me.relationFK_POSOMINMAX_CLPH = Me.Relations("FK_POSOMINMAX_CLPH")
        Me.relationFK1_CPH_CLASSEPHARMTHER = Me.Relations("FK1_CPH_CLASSEPHARMTHER")
        Me.relationFK_CPH = Me.Relations("FK_CPH")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Pos_Min_Max"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Pos_Min_Max.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCDF_CODIF = New CDF_CODIFDataTable
        MyBase.Tables.Add(Me.tableCDF_CODIF)
        Me.tableFPOMM_POSOLOGIE_MIN_MAX = New FPOMM_POSOLOGIE_MIN_MAXDataTable
        MyBase.Tables.Add(Me.tableFPOMM_POSOLOGIE_MIN_MAX)
        Me.tableFPOMMCCH_POSOMINMAX_CLCH = New FPOMMCCH_POSOMINMAX_CLCHDataTable
        MyBase.Tables.Add(Me.tableFPOMMCCH_POSOMINMAX_CLCH)
        Me.tableFPOMMCPH_POSOMINMAX_CLPH = New FPOMMCPH_POSOMINMAX_CLPHDataTable
        MyBase.Tables.Add(Me.tableFPOMMCPH_POSOMINMAX_CLPH)
        Me.tableFPOMMPR_POSOMINMAX_PROD = New FPOMMPR_POSOMINMAX_PRODDataTable
        MyBase.Tables.Add(Me.tableFPOMMPR_POSOMINMAX_PROD)
        Me.tableCPH_CLASSEPHARMTHER = New CPH_CLASSEPHARMTHERDataTable
        MyBase.Tables.Add(Me.tableCPH_CLASSEPHARMTHER)
        Me.tableSAC_SUBACTIVE = New SAC_SUBACTIVEDataTable
        MyBase.Tables.Add(Me.tableSAC_SUBACTIVE)
        Me.tableSP_SPECIALITE = New SP_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableSP_SPECIALITE)
        Me.tableFPOMMI_INTERVALLE_MIN_MAX = New FPOMMI_INTERVALLE_MIN_MAXDataTable
        MyBase.Tables.Add(Me.tableFPOMMI_INTERVALLE_MIN_MAX)
        Me.tableFPODCM_DOSE_CUMUL_MAX = New FPODCM_DOSE_CUMUL_MAXDataTable
        MyBase.Tables.Add(Me.tableFPODCM_DOSE_CUMUL_MAX)
        Me.tableFPOMMDO_POSOMINMAX_DOSES = New FPOMMDO_POSOMINMAX_DOSESDataTable
        MyBase.Tables.Add(Me.tableFPOMMDO_POSOMINMAX_DOSES)
        Me.tableFPOMMSAC_POSOMINMAX_SUBACT = New FPOMMSAC_POSOMINMAX_SUBACTDataTable
        MyBase.Tables.Add(Me.tableFPOMMSAC_POSOMINMAX_SUBACT)
        Me.tableFPOMMSP_POSOMINMAX_SPE = New FPOMMSP_POSOMINMAX_SPEDataTable
        MyBase.Tables.Add(Me.tableFPOMMSP_POSOMINMAX_SPE)
        Me.tableFPOMMTP_POSOMINMAX_TERPER = New FPOMMTP_POSOMINMAX_TERPERDataTable
        MyBase.Tables.Add(Me.tableFPOMMTP_POSOMINMAX_TERPER)
        Me.relationFK_FPOMMPR = New Global.System.Data.DataRelation("FK_FPOMMPR", New Global.System.Data.DataColumn() {Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableFPOMMPR_POSOMINMAX_PROD.FPOMMPR_FPOMM_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_FPOMMPR)
        Me.relationFK_Posologie_Clch = New Global.System.Data.DataRelation("FK_Posologie_Clch", New Global.System.Data.DataColumn() {Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableFPOMMCCH_POSOMINMAX_CLCH.FPOMMCCH_FPOMM_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_Posologie_Clch)
        Me.relationFK_POSOMINMAX_CLPH = New Global.System.Data.DataRelation("FK_POSOMINMAX_CLPH", New Global.System.Data.DataColumn() {Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_CODE_SQ_PKColumn}, New Global.System.Data.DataColumn() {Me.tableFPOMMCPH_POSOMINMAX_CLPH.FPOMMCPH_FPO_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_POSOMINMAX_CLPH)
        Me.relationFK1_CPH_CLASSEPHARMTHER = New Global.System.Data.DataRelation("FK1_CPH_CLASSEPHARMTHER", New Global.System.Data.DataColumn() {Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn}, New Global.System.Data.DataColumn() {Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_CPH_CLASSEPHARMTHER)
        Me.relationFK_CPH = New Global.System.Data.DataRelation("FK_CPH", New Global.System.Data.DataColumn() {Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn}, New Global.System.Data.DataColumn() {Me.tableFPOMMCPH_POSOMINMAX_CLPH.FPOMMCPH_CPH_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_CPH)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCDF_CODIF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMM_POSOLOGIE_MIN_MAX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMCCH_POSOMINMAX_CLCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMCPH_POSOMINMAX_CLPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMPR_POSOMINMAX_PROD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCPH_CLASSEPHARMTHER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAC_SUBACTIVE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSP_SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMI_INTERVALLE_MIN_MAX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPODCM_DOSE_CUMUL_MAX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMDO_POSOMINMAX_DOSES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMSAC_POSOMINMAX_SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMSP_POSOMINMAX_SPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPOMMTP_POSOMINMAX_TERPER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CDF_CODIFRowChangeEventHandler(ByVal sender As Object, ByVal e As CDF_CODIFRowChangeEvent)
    
    Public Delegate Sub FPOMM_POSOLOGIE_MIN_MAXRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMM_POSOLOGIE_MIN_MAXRowChangeEvent)
    
    Public Delegate Sub FPOMMCCH_POSOMINMAX_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMCCH_POSOMINMAX_CLCHRowChangeEvent)
    
    Public Delegate Sub FPOMMCPH_POSOMINMAX_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMCPH_POSOMINMAX_CLPHRowChangeEvent)
    
    Public Delegate Sub FPOMMPR_POSOMINMAX_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMPR_POSOMINMAX_PRODRowChangeEvent)
    
    Public Delegate Sub CPH_CLASSEPHARMTHERRowChangeEventHandler(ByVal sender As Object, ByVal e As CPH_CLASSEPHARMTHERRowChangeEvent)
    
    Public Delegate Sub SAC_SUBACTIVERowChangeEventHandler(ByVal sender As Object, ByVal e As SAC_SUBACTIVERowChangeEvent)
    
    Public Delegate Sub SP_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As SP_SPECIALITERowChangeEvent)
    
    Public Delegate Sub FPOMMI_INTERVALLE_MIN_MAXRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMI_INTERVALLE_MIN_MAXRowChangeEvent)
    
    Public Delegate Sub FPODCM_DOSE_CUMUL_MAXRowChangeEventHandler(ByVal sender As Object, ByVal e As FPODCM_DOSE_CUMUL_MAXRowChangeEvent)
    
    Public Delegate Sub FPOMMDO_POSOMINMAX_DOSESRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMDO_POSOMINMAX_DOSESRowChangeEvent)
    
    Public Delegate Sub FPOMMSAC_POSOMINMAX_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMSAC_POSOMINMAX_SUBACTRowChangeEvent)
    
    Public Delegate Sub FPOMMSP_POSOMINMAX_SPERowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMSP_POSOMINMAX_SPERowChangeEvent)
    
    Public Delegate Sub FPOMMTP_POSOMINMAX_TERPERRowChangeEventHandler(ByVal sender As Object, ByVal e As FPOMMTP_POSOMINMAX_TERPERRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CDF_CODIFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCDF_NUMERO_PK As Global.System.Data.DataColumn
        
        Private columnCDF_CODE_PK As Global.System.Data.DataColumn
        
        Private columnCDF_NOM As Global.System.Data.DataColumn
        
        Private columnCDF_DATECR As Global.System.Data.DataColumn
        
        Private columnCDF_DATEMJ As Global.System.Data.DataColumn
        
        Private columnCDF_VAL_NUM As Global.System.Data.DataColumn
        
        Private columnCDF_NOMABRG As Global.System.Data.DataColumn
        
        Private columnCDF_UNIT_NUM As Global.System.Data.DataColumn
        
        Private columnCDF_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CDF_CODIF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NUMERO_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_NUMERO_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_VAL_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_VAL_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_NOMABRGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_NOMABRG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_UNIT_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_UNIT_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CDF_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCDF_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CDF_CODIFRow
            Get
                Return CType(Me.Rows(index),CDF_CODIFRow)
            End Get
        End Property
        
        Public Event CDF_CODIFRowChanging As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowChanged As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowDeleting As CDF_CODIFRowChangeEventHandler
        
        Public Event CDF_CODIFRowDeleted As CDF_CODIFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCDF_CODIFRow(ByVal row As CDF_CODIFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCDF_CODIFRow(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Date, ByVal CDF_VAL_NUM As Decimal, ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String) As CDF_CODIFRow
            Dim rowCDF_CODIFRow As CDF_CODIFRow = CType(Me.NewRow,CDF_CODIFRow)
            Dim columnValuesArray() As Object = New Object() {CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE}
            rowCDF_CODIFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCDF_CODIFRow)
            Return rowCDF_CODIFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCDF_NUMERO_PKCDF_CODE_PK(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String) As CDF_CODIFRow
            Return CType(Me.Rows.Find(New Object() {CDF_NUMERO_PK, CDF_CODE_PK}),CDF_CODIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CDF_CODIFDataTable = CType(MyBase.Clone,CDF_CODIFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CDF_CODIFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCDF_NUMERO_PK = MyBase.Columns("CDF_NUMERO_PK")
            Me.columnCDF_CODE_PK = MyBase.Columns("CDF_CODE_PK")
            Me.columnCDF_NOM = MyBase.Columns("CDF_NOM")
            Me.columnCDF_DATECR = MyBase.Columns("CDF_DATECR")
            Me.columnCDF_DATEMJ = MyBase.Columns("CDF_DATEMJ")
            Me.columnCDF_VAL_NUM = MyBase.Columns("CDF_VAL_NUM")
            Me.columnCDF_NOMABRG = MyBase.Columns("CDF_NOMABRG")
            Me.columnCDF_UNIT_NUM = MyBase.Columns("CDF_UNIT_NUM")
            Me.columnCDF_TEXTE = MyBase.Columns("CDF_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCDF_NUMERO_PK = New Global.System.Data.DataColumn("CDF_NUMERO_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NUMERO_PK)
            Me.columnCDF_CODE_PK = New Global.System.Data.DataColumn("CDF_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_CODE_PK)
            Me.columnCDF_NOM = New Global.System.Data.DataColumn("CDF_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NOM)
            Me.columnCDF_DATECR = New Global.System.Data.DataColumn("CDF_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_DATECR)
            Me.columnCDF_DATEMJ = New Global.System.Data.DataColumn("CDF_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_DATEMJ)
            Me.columnCDF_VAL_NUM = New Global.System.Data.DataColumn("CDF_VAL_NUM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_VAL_NUM)
            Me.columnCDF_NOMABRG = New Global.System.Data.DataColumn("CDF_NOMABRG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_NOMABRG)
            Me.columnCDF_UNIT_NUM = New Global.System.Data.DataColumn("CDF_UNIT_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_UNIT_NUM)
            Me.columnCDF_TEXTE = New Global.System.Data.DataColumn("CDF_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCDF_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCDF_NUMERO_PK, Me.columnCDF_CODE_PK}, true))
            Me.columnCDF_NUMERO_PK.AllowDBNull = false
            Me.columnCDF_NUMERO_PK.MaxLength = 2
            Me.columnCDF_CODE_PK.AllowDBNull = false
            Me.columnCDF_CODE_PK.MaxLength = 10
            Me.columnCDF_NOM.AllowDBNull = false
            Me.columnCDF_NOM.MaxLength = 80
            Me.columnCDF_DATECR.AllowDBNull = false
            Me.columnCDF_NOMABRG.AllowDBNull = false
            Me.columnCDF_NOMABRG.MaxLength = 10
            Me.columnCDF_UNIT_NUM.AllowDBNull = false
            Me.columnCDF_UNIT_NUM.MaxLength = 50
            Me.columnCDF_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCDF_CODIFRow() As CDF_CODIFRow
            Return CType(Me.NewRow,CDF_CODIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CDF_CODIFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CDF_CODIFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CDF_CODIFRowChangedEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowChanged(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CDF_CODIFRowChangingEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowChanging(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CDF_CODIFRowDeletedEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowDeleted(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CDF_CODIFRowDeletingEvent) Is Nothing) Then
                RaiseEvent CDF_CODIFRowDeleting(Me, New CDF_CODIFRowChangeEvent(CType(e.Row,CDF_CODIFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCDF_CODIFRow(ByVal row As CDF_CODIFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CDF_CODIFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMM_POSOLOGIE_MIN_MAXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMM_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFPOMM_DATECR As Global.System.Data.DataColumn
        
        Private columnFPOMM_DATEMJ_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMM_POSOLOGIE_MIN_MAX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMM_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMM_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMM_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMM_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMM_DATEMJ_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMM_DATEMJ_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMM_POSOLOGIE_MIN_MAXRow
            Get
                Return CType(Me.Rows(index),FPOMM_POSOLOGIE_MIN_MAXRow)
            End Get
        End Property
        
        Public Event FPOMM_POSOLOGIE_MIN_MAXRowChanging As FPOMM_POSOLOGIE_MIN_MAXRowChangeEventHandler
        
        Public Event FPOMM_POSOLOGIE_MIN_MAXRowChanged As FPOMM_POSOLOGIE_MIN_MAXRowChangeEventHandler
        
        Public Event FPOMM_POSOLOGIE_MIN_MAXRowDeleting As FPOMM_POSOLOGIE_MIN_MAXRowChangeEventHandler
        
        Public Event FPOMM_POSOLOGIE_MIN_MAXRowDeleted As FPOMM_POSOLOGIE_MIN_MAXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMM_POSOLOGIE_MIN_MAXRow(ByVal row As FPOMM_POSOLOGIE_MIN_MAXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMM_POSOLOGIE_MIN_MAXRow(ByVal FPOMM_CODE_SQ_PK As Integer, ByVal FPOMM_DATECR As Date, ByVal FPOMM_DATEMJ_ As Date) As FPOMM_POSOLOGIE_MIN_MAXRow
            Dim rowFPOMM_POSOLOGIE_MIN_MAXRow As FPOMM_POSOLOGIE_MIN_MAXRow = CType(Me.NewRow,FPOMM_POSOLOGIE_MIN_MAXRow)
            Dim columnValuesArray() As Object = New Object() {FPOMM_CODE_SQ_PK, FPOMM_DATECR, FPOMM_DATEMJ_}
            rowFPOMM_POSOLOGIE_MIN_MAXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMM_POSOLOGIE_MIN_MAXRow)
            Return rowFPOMM_POSOLOGIE_MIN_MAXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMM_CODE_SQ_PK(ByVal FPOMM_CODE_SQ_PK As Integer) As FPOMM_POSOLOGIE_MIN_MAXRow
            Return CType(Me.Rows.Find(New Object() {FPOMM_CODE_SQ_PK}),FPOMM_POSOLOGIE_MIN_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMM_POSOLOGIE_MIN_MAXDataTable = CType(MyBase.Clone,FPOMM_POSOLOGIE_MIN_MAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMM_POSOLOGIE_MIN_MAXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMM_CODE_SQ_PK = MyBase.Columns("FPOMM_CODE_SQ_PK")
            Me.columnFPOMM_DATECR = MyBase.Columns("FPOMM_DATECR")
            Me.columnFPOMM_DATEMJ_ = MyBase.Columns("FPOMM_DATEMJ ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMM_CODE_SQ_PK = New Global.System.Data.DataColumn("FPOMM_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMM_CODE_SQ_PK)
            Me.columnFPOMM_DATECR = New Global.System.Data.DataColumn("FPOMM_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMM_DATECR)
            Me.columnFPOMM_DATEMJ_ = New Global.System.Data.DataColumn("FPOMM_DATEMJ ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMM_DATEMJ_)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMM_CODE_SQ_PK}, true))
            Me.columnFPOMM_CODE_SQ_PK.AllowDBNull = false
            Me.columnFPOMM_CODE_SQ_PK.Unique = true
            Me.columnFPOMM_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMM_POSOLOGIE_MIN_MAXRow() As FPOMM_POSOLOGIE_MIN_MAXRow
            Return CType(Me.NewRow,FPOMM_POSOLOGIE_MIN_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMM_POSOLOGIE_MIN_MAXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMM_POSOLOGIE_MIN_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMM_POSOLOGIE_MIN_MAXRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMM_POSOLOGIE_MIN_MAXRowChanged(Me, New FPOMM_POSOLOGIE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMM_POSOLOGIE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMM_POSOLOGIE_MIN_MAXRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMM_POSOLOGIE_MIN_MAXRowChanging(Me, New FPOMM_POSOLOGIE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMM_POSOLOGIE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMM_POSOLOGIE_MIN_MAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMM_POSOLOGIE_MIN_MAXRowDeleted(Me, New FPOMM_POSOLOGIE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMM_POSOLOGIE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMM_POSOLOGIE_MIN_MAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMM_POSOLOGIE_MIN_MAXRowDeleting(Me, New FPOMM_POSOLOGIE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMM_POSOLOGIE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMM_POSOLOGIE_MIN_MAXRow(ByVal row As FPOMM_POSOLOGIE_MIN_MAXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMM_POSOLOGIE_MIN_MAXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMCCH_POSOMINMAX_CLCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMCCH_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMCCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMCCH_POSOMINMAX_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMCCH_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMCCH_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMCCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMCCH_POSOMINMAX_CLCHRow
            Get
                Return CType(Me.Rows(index),FPOMMCCH_POSOMINMAX_CLCHRow)
            End Get
        End Property
        
        Public Event FPOMMCCH_POSOMINMAX_CLCHRowChanging As FPOMMCCH_POSOMINMAX_CLCHRowChangeEventHandler
        
        Public Event FPOMMCCH_POSOMINMAX_CLCHRowChanged As FPOMMCCH_POSOMINMAX_CLCHRowChangeEventHandler
        
        Public Event FPOMMCCH_POSOMINMAX_CLCHRowDeleting As FPOMMCCH_POSOMINMAX_CLCHRowChangeEventHandler
        
        Public Event FPOMMCCH_POSOMINMAX_CLCHRowDeleted As FPOMMCCH_POSOMINMAX_CLCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMCCH_POSOMINMAX_CLCHRow(ByVal row As FPOMMCCH_POSOMINMAX_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMCCH_POSOMINMAX_CLCHRow(ByVal parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_Posologie_Clch As FPOMM_POSOLOGIE_MIN_MAXRow, ByVal FPOMMCCH_CCH_CODE_FK_PK As String) As FPOMMCCH_POSOMINMAX_CLCHRow
            Dim rowFPOMMCCH_POSOMINMAX_CLCHRow As FPOMMCCH_POSOMINMAX_CLCHRow = CType(Me.NewRow,FPOMMCCH_POSOMINMAX_CLCHRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FPOMMCCH_CCH_CODE_FK_PK}
            If (Not (parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_Posologie_Clch) Is Nothing) Then
                columnValuesArray(0) = parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_Posologie_Clch(0)
            End If
            rowFPOMMCCH_POSOMINMAX_CLCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMCCH_POSOMINMAX_CLCHRow)
            Return rowFPOMMCCH_POSOMINMAX_CLCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMCCH_FPOMM_CODE_FK_PKFPOMMCCH_CCH_CODE_FK_PK(ByVal FPOMMCCH_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMCCH_CCH_CODE_FK_PK As String) As FPOMMCCH_POSOMINMAX_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FPOMMCCH_FPOMM_CODE_FK_PK, FPOMMCCH_CCH_CODE_FK_PK}),FPOMMCCH_POSOMINMAX_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMCCH_POSOMINMAX_CLCHDataTable = CType(MyBase.Clone,FPOMMCCH_POSOMINMAX_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMCCH_POSOMINMAX_CLCHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMCCH_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMCCH_FPOMM_CODE_FK_PK")
            Me.columnFPOMMCCH_CCH_CODE_FK_PK = MyBase.Columns("FPOMMCCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMCCH_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMCCH_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMCCH_FPOMM_CODE_FK_PK)
            Me.columnFPOMMCCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMCCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMCCH_FPOMM_CODE_FK_PK, Me.columnFPOMMCCH_CCH_CODE_FK_PK}, true))
            Me.columnFPOMMCCH_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMCCH_POSOMINMAX_CLCHRow() As FPOMMCCH_POSOMINMAX_CLCHRow
            Return CType(Me.NewRow,FPOMMCCH_POSOMINMAX_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMCCH_POSOMINMAX_CLCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMCCH_POSOMINMAX_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMCCH_POSOMINMAX_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMCCH_POSOMINMAX_CLCHRowChanged(Me, New FPOMMCCH_POSOMINMAX_CLCHRowChangeEvent(CType(e.Row,FPOMMCCH_POSOMINMAX_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMCCH_POSOMINMAX_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMCCH_POSOMINMAX_CLCHRowChanging(Me, New FPOMMCCH_POSOMINMAX_CLCHRowChangeEvent(CType(e.Row,FPOMMCCH_POSOMINMAX_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMCCH_POSOMINMAX_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMCCH_POSOMINMAX_CLCHRowDeleted(Me, New FPOMMCCH_POSOMINMAX_CLCHRowChangeEvent(CType(e.Row,FPOMMCCH_POSOMINMAX_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMCCH_POSOMINMAX_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMCCH_POSOMINMAX_CLCHRowDeleting(Me, New FPOMMCCH_POSOMINMAX_CLCHRowChangeEvent(CType(e.Row,FPOMMCCH_POSOMINMAX_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMCCH_POSOMINMAX_CLCHRow(ByVal row As FPOMMCCH_POSOMINMAX_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMCCH_POSOMINMAX_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMCPH_POSOMINMAX_CLPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMCPH_FPO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMCPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMCPH_POSOMINMAX_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMCPH_FPO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMCPH_FPO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMCPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMCPH_POSOMINMAX_CLPHRow
            Get
                Return CType(Me.Rows(index),FPOMMCPH_POSOMINMAX_CLPHRow)
            End Get
        End Property
        
        Public Event FPOMMCPH_POSOMINMAX_CLPHRowChanging As FPOMMCPH_POSOMINMAX_CLPHRowChangeEventHandler
        
        Public Event FPOMMCPH_POSOMINMAX_CLPHRowChanged As FPOMMCPH_POSOMINMAX_CLPHRowChangeEventHandler
        
        Public Event FPOMMCPH_POSOMINMAX_CLPHRowDeleting As FPOMMCPH_POSOMINMAX_CLPHRowChangeEventHandler
        
        Public Event FPOMMCPH_POSOMINMAX_CLPHRowDeleted As FPOMMCPH_POSOMINMAX_CLPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMCPH_POSOMINMAX_CLPHRow(ByVal row As FPOMMCPH_POSOMINMAX_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMCPH_POSOMINMAX_CLPHRow(ByVal parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_POSOMINMAX_CLPH As FPOMM_POSOLOGIE_MIN_MAXRow, ByVal parentCPH_CLASSEPHARMTHERRowByFK_CPH As CPH_CLASSEPHARMTHERRow) As FPOMMCPH_POSOMINMAX_CLPHRow
            Dim rowFPOMMCPH_POSOMINMAX_CLPHRow As FPOMMCPH_POSOMINMAX_CLPHRow = CType(Me.NewRow,FPOMMCPH_POSOMINMAX_CLPHRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing}
            If (Not (parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_POSOMINMAX_CLPH) Is Nothing) Then
                columnValuesArray(0) = parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_POSOMINMAX_CLPH(0)
            End If
            If (Not (parentCPH_CLASSEPHARMTHERRowByFK_CPH) Is Nothing) Then
                columnValuesArray(1) = parentCPH_CLASSEPHARMTHERRowByFK_CPH(0)
            End If
            rowFPOMMCPH_POSOMINMAX_CLPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMCPH_POSOMINMAX_CLPHRow)
            Return rowFPOMMCPH_POSOMINMAX_CLPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMCPH_FPO_CODE_FK_PKFPOMMCPH_CPH_CODE_FK_PK(ByVal FPOMMCPH_FPO_CODE_FK_PK As Integer, ByVal FPOMMCPH_CPH_CODE_FK_PK As String) As FPOMMCPH_POSOMINMAX_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FPOMMCPH_FPO_CODE_FK_PK, FPOMMCPH_CPH_CODE_FK_PK}),FPOMMCPH_POSOMINMAX_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMCPH_POSOMINMAX_CLPHDataTable = CType(MyBase.Clone,FPOMMCPH_POSOMINMAX_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMCPH_POSOMINMAX_CLPHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMCPH_FPO_CODE_FK_PK = MyBase.Columns("FPOMMCPH_FPO_CODE_FK_PK")
            Me.columnFPOMMCPH_CPH_CODE_FK_PK = MyBase.Columns("FPOMMCPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMCPH_FPO_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMCPH_FPO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMCPH_FPO_CODE_FK_PK)
            Me.columnFPOMMCPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMCPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMCPH_FPO_CODE_FK_PK, Me.columnFPOMMCPH_CPH_CODE_FK_PK}, true))
            Me.columnFPOMMCPH_FPO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMCPH_POSOMINMAX_CLPHRow() As FPOMMCPH_POSOMINMAX_CLPHRow
            Return CType(Me.NewRow,FPOMMCPH_POSOMINMAX_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMCPH_POSOMINMAX_CLPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMCPH_POSOMINMAX_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMCPH_POSOMINMAX_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMCPH_POSOMINMAX_CLPHRowChanged(Me, New FPOMMCPH_POSOMINMAX_CLPHRowChangeEvent(CType(e.Row,FPOMMCPH_POSOMINMAX_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMCPH_POSOMINMAX_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMCPH_POSOMINMAX_CLPHRowChanging(Me, New FPOMMCPH_POSOMINMAX_CLPHRowChangeEvent(CType(e.Row,FPOMMCPH_POSOMINMAX_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMCPH_POSOMINMAX_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMCPH_POSOMINMAX_CLPHRowDeleted(Me, New FPOMMCPH_POSOMINMAX_CLPHRowChangeEvent(CType(e.Row,FPOMMCPH_POSOMINMAX_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMCPH_POSOMINMAX_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMCPH_POSOMINMAX_CLPHRowDeleting(Me, New FPOMMCPH_POSOMINMAX_CLPHRowChangeEvent(CType(e.Row,FPOMMCPH_POSOMINMAX_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMCPH_POSOMINMAX_CLPHRow(ByVal row As FPOMMCPH_POSOMINMAX_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMCPH_POSOMINMAX_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMPR_POSOMINMAX_PRODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMPR_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMPR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMPR_POSOMINMAX_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMPR_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMPR_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMPR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMPR_POSOMINMAX_PRODRow
            Get
                Return CType(Me.Rows(index),FPOMMPR_POSOMINMAX_PRODRow)
            End Get
        End Property
        
        Public Event FPOMMPR_POSOMINMAX_PRODRowChanging As FPOMMPR_POSOMINMAX_PRODRowChangeEventHandler
        
        Public Event FPOMMPR_POSOMINMAX_PRODRowChanged As FPOMMPR_POSOMINMAX_PRODRowChangeEventHandler
        
        Public Event FPOMMPR_POSOMINMAX_PRODRowDeleting As FPOMMPR_POSOMINMAX_PRODRowChangeEventHandler
        
        Public Event FPOMMPR_POSOMINMAX_PRODRowDeleted As FPOMMPR_POSOMINMAX_PRODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMPR_POSOMINMAX_PRODRow(ByVal row As FPOMMPR_POSOMINMAX_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMPR_POSOMINMAX_PRODRow(ByVal parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_FPOMMPR As FPOMM_POSOLOGIE_MIN_MAXRow, ByVal FPOMMPR_PR_CODE_FK_PK As String) As FPOMMPR_POSOMINMAX_PRODRow
            Dim rowFPOMMPR_POSOMINMAX_PRODRow As FPOMMPR_POSOMINMAX_PRODRow = CType(Me.NewRow,FPOMMPR_POSOMINMAX_PRODRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, FPOMMPR_PR_CODE_FK_PK}
            If (Not (parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_FPOMMPR) Is Nothing) Then
                columnValuesArray(0) = parentFPOMM_POSOLOGIE_MIN_MAXRowByFK_FPOMMPR(0)
            End If
            rowFPOMMPR_POSOMINMAX_PRODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMPR_POSOMINMAX_PRODRow)
            Return rowFPOMMPR_POSOMINMAX_PRODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMPR_FPOMM_CODE_FK_PKFPOMMPR_PR_CODE_FK_PK(ByVal FPOMMPR_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMPR_PR_CODE_FK_PK As String) As FPOMMPR_POSOMINMAX_PRODRow
            Return CType(Me.Rows.Find(New Object() {FPOMMPR_FPOMM_CODE_FK_PK, FPOMMPR_PR_CODE_FK_PK}),FPOMMPR_POSOMINMAX_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMPR_POSOMINMAX_PRODDataTable = CType(MyBase.Clone,FPOMMPR_POSOMINMAX_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMPR_POSOMINMAX_PRODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMPR_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMPR_FPOMM_CODE_FK_PK")
            Me.columnFPOMMPR_PR_CODE_FK_PK = MyBase.Columns("FPOMMPR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMPR_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMPR_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMPR_FPOMM_CODE_FK_PK)
            Me.columnFPOMMPR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMPR_PR_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMPR_FPOMM_CODE_FK_PK, Me.columnFPOMMPR_PR_CODE_FK_PK}, true))
            Me.columnFPOMMPR_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMPR_PR_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMPR_PR_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMPR_POSOMINMAX_PRODRow() As FPOMMPR_POSOMINMAX_PRODRow
            Return CType(Me.NewRow,FPOMMPR_POSOMINMAX_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMPR_POSOMINMAX_PRODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMPR_POSOMINMAX_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMPR_POSOMINMAX_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMPR_POSOMINMAX_PRODRowChanged(Me, New FPOMMPR_POSOMINMAX_PRODRowChangeEvent(CType(e.Row,FPOMMPR_POSOMINMAX_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMPR_POSOMINMAX_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMPR_POSOMINMAX_PRODRowChanging(Me, New FPOMMPR_POSOMINMAX_PRODRowChangeEvent(CType(e.Row,FPOMMPR_POSOMINMAX_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMPR_POSOMINMAX_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMPR_POSOMINMAX_PRODRowDeleted(Me, New FPOMMPR_POSOMINMAX_PRODRowChangeEvent(CType(e.Row,FPOMMPR_POSOMINMAX_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMPR_POSOMINMAX_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMPR_POSOMINMAX_PRODRowDeleting(Me, New FPOMMPR_POSOMINMAX_PRODRowChangeEvent(CType(e.Row,FPOMMPR_POSOMINMAX_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMPR_POSOMINMAX_PRODRow(ByVal row As FPOMMPR_POSOMINMAX_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMPR_POSOMINMAX_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CPH_CLASSEPHARMTHERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCPH_CODE_PK As Global.System.Data.DataColumn
        
        Private columnCPH_CPH_CODE_FK As Global.System.Data.DataColumn
        
        Private columnCPH_NOM As Global.System.Data.DataColumn
        
        Private columnCPH_DATECR As Global.System.Data.DataColumn
        
        Private columnCPH_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CPH_CLASSEPHARMTHER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCPH_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_CPH_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCPH_CPH_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCPH_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCPH_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CPH_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCPH_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CPH_CLASSEPHARMTHERRow
            Get
                Return CType(Me.Rows(index),CPH_CLASSEPHARMTHERRow)
            End Get
        End Property
        
        Public Event CPH_CLASSEPHARMTHERRowChanging As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event CPH_CLASSEPHARMTHERRowChanged As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event CPH_CLASSEPHARMTHERRowDeleting As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        Public Event CPH_CLASSEPHARMTHERRowDeleted As CPH_CLASSEPHARMTHERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCPH_CLASSEPHARMTHERRow(ByVal row As CPH_CLASSEPHARMTHERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCPH_CLASSEPHARMTHERRow(ByVal CPH_CODE_PK As String, ByVal parentCPH_CLASSEPHARMTHERRowByFK1_CPH_CLASSEPHARMTHER As CPH_CLASSEPHARMTHERRow, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As Date) As CPH_CLASSEPHARMTHERRow
            Dim rowCPH_CLASSEPHARMTHERRow As CPH_CLASSEPHARMTHERRow = CType(Me.NewRow,CPH_CLASSEPHARMTHERRow)
            Dim columnValuesArray() As Object = New Object() {CPH_CODE_PK, Nothing, CPH_NOM, CPH_DATECR, CPH_DATEMJ}
            If (Not (parentCPH_CLASSEPHARMTHERRowByFK1_CPH_CLASSEPHARMTHER) Is Nothing) Then
                columnValuesArray(1) = parentCPH_CLASSEPHARMTHERRowByFK1_CPH_CLASSEPHARMTHER(0)
            End If
            rowCPH_CLASSEPHARMTHERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCPH_CLASSEPHARMTHERRow)
            Return rowCPH_CLASSEPHARMTHERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCPH_CODE_PK(ByVal CPH_CODE_PK As String) As CPH_CLASSEPHARMTHERRow
            Return CType(Me.Rows.Find(New Object() {CPH_CODE_PK}),CPH_CLASSEPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CPH_CLASSEPHARMTHERDataTable = CType(MyBase.Clone,CPH_CLASSEPHARMTHERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CPH_CLASSEPHARMTHERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCPH_CODE_PK = MyBase.Columns("CPH_CODE_PK")
            Me.columnCPH_CPH_CODE_FK = MyBase.Columns("CPH_CPH_CODE_FK")
            Me.columnCPH_NOM = MyBase.Columns("CPH_NOM")
            Me.columnCPH_DATECR = MyBase.Columns("CPH_DATECR")
            Me.columnCPH_DATEMJ = MyBase.Columns("CPH_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCPH_CODE_PK = New Global.System.Data.DataColumn("CPH_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_CODE_PK)
            Me.columnCPH_CPH_CODE_FK = New Global.System.Data.DataColumn("CPH_CPH_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_CPH_CODE_FK)
            Me.columnCPH_NOM = New Global.System.Data.DataColumn("CPH_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_NOM)
            Me.columnCPH_DATECR = New Global.System.Data.DataColumn("CPH_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_DATECR)
            Me.columnCPH_DATEMJ = New Global.System.Data.DataColumn("CPH_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCPH_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCPH_CODE_PK}, true))
            Me.columnCPH_CODE_PK.AllowDBNull = false
            Me.columnCPH_CODE_PK.Unique = true
            Me.columnCPH_CODE_PK.MaxLength = 10
            Me.columnCPH_CPH_CODE_FK.MaxLength = 10
            Me.columnCPH_NOM.AllowDBNull = false
            Me.columnCPH_NOM.MaxLength = 40
            Me.columnCPH_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCPH_CLASSEPHARMTHERRow() As CPH_CLASSEPHARMTHERRow
            Return CType(Me.NewRow,CPH_CLASSEPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CPH_CLASSEPHARMTHERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CPH_CLASSEPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowChangedEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowChanged(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowChangingEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowChanging(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowDeletedEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowDeleted(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CPH_CLASSEPHARMTHERRowDeletingEvent) Is Nothing) Then
                RaiseEvent CPH_CLASSEPHARMTHERRowDeleting(Me, New CPH_CLASSEPHARMTHERRowChangeEvent(CType(e.Row,CPH_CLASSEPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCPH_CLASSEPHARMTHERRow(ByVal row As CPH_CLASSEPHARMTHERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CPH_CLASSEPHARMTHERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAC_SUBACTIVEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSAC_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSAC_CDF_ORN_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSAC_SAU_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSAC_GSAC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSAC_NOM As Global.System.Data.DataColumn
        
        Private columnSAC_NOMA As Global.System.Data.DataColumn
        
        Private columnSAC_DATECR As Global.System.Data.DataColumn
        
        Private columnSAC_DATEMJ As Global.System.Data.DataColumn
        
        Private columnSAC_ETAT_COMMER As Global.System.Data.DataColumn
        
        Private columnSAC_DATECOMMER As Global.System.Data.DataColumn
        
        Private columnSAC_CODE_REF As Global.System.Data.DataColumn
        
        Private columnSAC_LIBELLE_REF As Global.System.Data.DataColumn
        
        Private columnSAC_TYPE_REF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAC_SUBACTIVE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_CDF_ORN_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_CDF_ORN_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_SAU_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_SAU_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_GSAC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_GSAC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_NOMAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_NOMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_ETAT_COMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_ETAT_COMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_DATECOMMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_DATECOMMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_CODE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_CODE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_LIBELLE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_LIBELLE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAC_TYPE_REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAC_TYPE_REF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAC_SUBACTIVERow
            Get
                Return CType(Me.Rows(index),SAC_SUBACTIVERow)
            End Get
        End Property
        
        Public Event SAC_SUBACTIVERowChanging As SAC_SUBACTIVERowChangeEventHandler
        
        Public Event SAC_SUBACTIVERowChanged As SAC_SUBACTIVERowChangeEventHandler
        
        Public Event SAC_SUBACTIVERowDeleting As SAC_SUBACTIVERowChangeEventHandler
        
        Public Event SAC_SUBACTIVERowDeleted As SAC_SUBACTIVERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAC_SUBACTIVERow(ByVal row As SAC_SUBACTIVERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAC_SUBACTIVERow(ByVal SAC_CODE_SQ_PK As Integer, ByVal SAC_CDF_ORN_CODE_FK As String, ByVal SAC_SAU_CODE_FK As Integer, ByVal SAC_GSAC_CODE_FK As Integer, ByVal SAC_NOM As String, ByVal SAC_NOMA As String, ByVal SAC_DATECR As Date, ByVal SAC_DATEMJ As Date, ByVal SAC_ETAT_COMMER As String, ByVal SAC_DATECOMMER As Date, ByVal SAC_CODE_REF As String, ByVal SAC_LIBELLE_REF As String, ByVal SAC_TYPE_REF As String) As SAC_SUBACTIVERow
            Dim rowSAC_SUBACTIVERow As SAC_SUBACTIVERow = CType(Me.NewRow,SAC_SUBACTIVERow)
            Dim columnValuesArray() As Object = New Object() {SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF}
            rowSAC_SUBACTIVERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAC_SUBACTIVERow)
            Return rowSAC_SUBACTIVERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAC_CODE_SQ_PK(ByVal SAC_CODE_SQ_PK As Integer) As SAC_SUBACTIVERow
            Return CType(Me.Rows.Find(New Object() {SAC_CODE_SQ_PK}),SAC_SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAC_SUBACTIVEDataTable = CType(MyBase.Clone,SAC_SUBACTIVEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAC_SUBACTIVEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAC_CODE_SQ_PK = MyBase.Columns("SAC_CODE_SQ_PK")
            Me.columnSAC_CDF_ORN_CODE_FK = MyBase.Columns("SAC_CDF_ORN_CODE_FK")
            Me.columnSAC_SAU_CODE_FK = MyBase.Columns("SAC_SAU_CODE_FK")
            Me.columnSAC_GSAC_CODE_FK = MyBase.Columns("SAC_GSAC_CODE_FK")
            Me.columnSAC_NOM = MyBase.Columns("SAC_NOM")
            Me.columnSAC_NOMA = MyBase.Columns("SAC_NOMA")
            Me.columnSAC_DATECR = MyBase.Columns("SAC_DATECR")
            Me.columnSAC_DATEMJ = MyBase.Columns("SAC_DATEMJ")
            Me.columnSAC_ETAT_COMMER = MyBase.Columns("SAC_ETAT_COMMER")
            Me.columnSAC_DATECOMMER = MyBase.Columns("SAC_DATECOMMER")
            Me.columnSAC_CODE_REF = MyBase.Columns("SAC_CODE_REF")
            Me.columnSAC_LIBELLE_REF = MyBase.Columns("SAC_LIBELLE_REF")
            Me.columnSAC_TYPE_REF = MyBase.Columns("SAC_TYPE_REF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAC_CODE_SQ_PK = New Global.System.Data.DataColumn("SAC_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_CODE_SQ_PK)
            Me.columnSAC_CDF_ORN_CODE_FK = New Global.System.Data.DataColumn("SAC_CDF_ORN_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_CDF_ORN_CODE_FK)
            Me.columnSAC_SAU_CODE_FK = New Global.System.Data.DataColumn("SAC_SAU_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_SAU_CODE_FK)
            Me.columnSAC_GSAC_CODE_FK = New Global.System.Data.DataColumn("SAC_GSAC_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_GSAC_CODE_FK)
            Me.columnSAC_NOM = New Global.System.Data.DataColumn("SAC_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_NOM)
            Me.columnSAC_NOMA = New Global.System.Data.DataColumn("SAC_NOMA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_NOMA)
            Me.columnSAC_DATECR = New Global.System.Data.DataColumn("SAC_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_DATECR)
            Me.columnSAC_DATEMJ = New Global.System.Data.DataColumn("SAC_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_DATEMJ)
            Me.columnSAC_ETAT_COMMER = New Global.System.Data.DataColumn("SAC_ETAT_COMMER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_ETAT_COMMER)
            Me.columnSAC_DATECOMMER = New Global.System.Data.DataColumn("SAC_DATECOMMER", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_DATECOMMER)
            Me.columnSAC_CODE_REF = New Global.System.Data.DataColumn("SAC_CODE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_CODE_REF)
            Me.columnSAC_LIBELLE_REF = New Global.System.Data.DataColumn("SAC_LIBELLE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_LIBELLE_REF)
            Me.columnSAC_TYPE_REF = New Global.System.Data.DataColumn("SAC_TYPE_REF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAC_TYPE_REF)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSAC_CODE_SQ_PK}, true))
            Me.columnSAC_CODE_SQ_PK.AllowDBNull = false
            Me.columnSAC_CODE_SQ_PK.Unique = true
            Me.columnSAC_CDF_ORN_CODE_FK.MaxLength = 10
            Me.columnSAC_NOM.AllowDBNull = false
            Me.columnSAC_NOM.MaxLength = 40
            Me.columnSAC_NOMA.MaxLength = 36
            Me.columnSAC_DATECR.AllowDBNull = false
            Me.columnSAC_ETAT_COMMER.MaxLength = 2
            Me.columnSAC_CODE_REF.MaxLength = 50
            Me.columnSAC_LIBELLE_REF.MaxLength = 255
            Me.columnSAC_TYPE_REF.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAC_SUBACTIVERow() As SAC_SUBACTIVERow
            Return CType(Me.NewRow,SAC_SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAC_SUBACTIVERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAC_SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAC_SUBACTIVERowChangedEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowChanged(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAC_SUBACTIVERowChangingEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowChanging(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAC_SUBACTIVERowDeletedEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowDeleted(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAC_SUBACTIVERowDeletingEvent) Is Nothing) Then
                RaiseEvent SAC_SUBACTIVERowDeleting(Me, New SAC_SUBACTIVERowChangeEvent(CType(e.Row,SAC_SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAC_SUBACTIVERow(ByVal row As SAC_SUBACTIVERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAC_SUBACTIVEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SP_SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSP_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnSP_GSP_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CDF_SLAB_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CDF_LI_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CATC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CEPH_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_CGE_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_PR_CODE_FK As Global.System.Data.DataColumn
        
        Private columnSP_TYPE_SPE As Global.System.Data.DataColumn
        
        Private columnSP_GREF_FK As Global.System.Data.DataColumn
        
        Private columnSP_GREF_DATECR_FK As Global.System.Data.DataColumn
        
        Private columnSP_NOM As Global.System.Data.DataColumn
        
        Private columnSP_NOMCOMP As Global.System.Data.DataColumn
        
        Private columnSP_PH As Global.System.Data.DataColumn
        
        Private columnSP_CIPUCD As Global.System.Data.DataColumn
        
        Private columnSP_DATECR As Global.System.Data.DataColumn
        
        Private columnSP_DATEMJ As Global.System.Data.DataColumn
        
        Private columnSP_NL As Global.System.Data.DataColumn
        
        Private columnSP_APHP As Global.System.Data.DataColumn
        
        Private columnSP_DATEJOGENE As Global.System.Data.DataColumn
        
        Private columnSP_ORIGINE_GENE As Global.System.Data.DataColumn
        
        Private columnSP_NOMLONG As Global.System.Data.DataColumn
        
        Private columnSP_CDT_PRESCR_TEXTE As Global.System.Data.DataColumn
        
        Private columnSP_ATC_DDD_TEXTE As Global.System.Data.DataColumn
        
        Private columnSP_MONO_VIRTUELLE As Global.System.Data.DataColumn
        
        Private columnSP_CIPUCD13 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SP_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GSP_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_GSP_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_SLAB_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_SLAB_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_LI_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_LI_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CATC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CATC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CEPH_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CEPH_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CGE_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CGE_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PR_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_PR_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_TYPE_SPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_TYPE_SPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_DATECR_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_DATECR_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMCOMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NOMCOMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_PH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CIPUCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CIPUCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_APHPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_APHP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEJOGENEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_DATEJOGENE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ORIGINE_GENEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_ORIGINE_GENE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMLONGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_NOMLONG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDT_PRESCR_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CDT_PRESCR_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ATC_DDD_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_ATC_DDD_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_MONO_VIRTUELLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_MONO_VIRTUELLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CIPUCD13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSP_CIPUCD13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_SPECIALITERow
            Get
                Return CType(Me.Rows(index),SP_SPECIALITERow)
            End Get
        End Property
        
        Public Event SP_SPECIALITERowChanging As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowChanged As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleting As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleted As SP_SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSP_SPECIALITERow( _
                    ByVal SP_CODE_SQ_PK As Integer,  _
                    ByVal SP_GSP_CODE_FK As Integer,  _
                    ByVal SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal SP_CDF_LI_CODE_FK As String,  _
                    ByVal SP_CATC_CODE_FK As String,  _
                    ByVal SP_CEPH_CODE_FK As String,  _
                    ByVal SP_CGE_CODE_FK As Integer,  _
                    ByVal SP_PR_CODE_FK As Integer,  _
                    ByVal SP_TYPE_SPE As String,  _
                    ByVal SP_GREF_FK As Integer,  _
                    ByVal SP_GREF_DATECR_FK As Date,  _
                    ByVal SP_NOM As String,  _
                    ByVal SP_NOMCOMP As String,  _
                    ByVal SP_PH As String,  _
                    ByVal SP_CIPUCD As String,  _
                    ByVal SP_DATECR As Date,  _
                    ByVal SP_DATEMJ As Date,  _
                    ByVal SP_NL As String,  _
                    ByVal SP_APHP As String,  _
                    ByVal SP_DATEJOGENE As Date,  _
                    ByVal SP_ORIGINE_GENE As String,  _
                    ByVal SP_NOMLONG As String,  _
                    ByVal SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal SP_ATC_DDD_TEXTE As String,  _
                    ByVal SP_MONO_VIRTUELLE As Boolean,  _
                    ByVal SP_CIPUCD13 As String) As SP_SPECIALITERow
            Dim rowSP_SPECIALITERow As SP_SPECIALITERow = CType(Me.NewRow,SP_SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13}
            rowSP_SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSP_SPECIALITERow)
            Return rowSP_SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySP_CODE_SQ_PK(ByVal SP_CODE_SQ_PK As Integer) As SP_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {SP_CODE_SQ_PK}),SP_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SP_SPECIALITEDataTable = CType(MyBase.Clone,SP_SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SP_SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSP_CODE_SQ_PK = MyBase.Columns("SP_CODE_SQ_PK")
            Me.columnSP_GSP_CODE_FK = MyBase.Columns("SP_GSP_CODE_FK")
            Me.columnSP_CDF_SLAB_CODE_FK = MyBase.Columns("SP_CDF_SLAB_CODE_FK")
            Me.columnSP_CDF_LI_CODE_FK = MyBase.Columns("SP_CDF_LI_CODE_FK")
            Me.columnSP_CATC_CODE_FK = MyBase.Columns("SP_CATC_CODE_FK")
            Me.columnSP_CEPH_CODE_FK = MyBase.Columns("SP_CEPH_CODE_FK")
            Me.columnSP_CGE_CODE_FK = MyBase.Columns("SP_CGE_CODE_FK")
            Me.columnSP_PR_CODE_FK = MyBase.Columns("SP_PR_CODE_FK")
            Me.columnSP_TYPE_SPE = MyBase.Columns("SP_TYPE_SPE")
            Me.columnSP_GREF_FK = MyBase.Columns("SP_GREF_FK")
            Me.columnSP_GREF_DATECR_FK = MyBase.Columns("SP_GREF_DATECR_FK")
            Me.columnSP_NOM = MyBase.Columns("SP_NOM")
            Me.columnSP_NOMCOMP = MyBase.Columns("SP_NOMCOMP")
            Me.columnSP_PH = MyBase.Columns("SP_PH")
            Me.columnSP_CIPUCD = MyBase.Columns("SP_CIPUCD")
            Me.columnSP_DATECR = MyBase.Columns("SP_DATECR")
            Me.columnSP_DATEMJ = MyBase.Columns("SP_DATEMJ")
            Me.columnSP_NL = MyBase.Columns("SP_NL")
            Me.columnSP_APHP = MyBase.Columns("SP_APHP")
            Me.columnSP_DATEJOGENE = MyBase.Columns("SP_DATEJOGENE")
            Me.columnSP_ORIGINE_GENE = MyBase.Columns("SP_ORIGINE_GENE")
            Me.columnSP_NOMLONG = MyBase.Columns("SP_NOMLONG")
            Me.columnSP_CDT_PRESCR_TEXTE = MyBase.Columns("SP_CDT_PRESCR_TEXTE")
            Me.columnSP_ATC_DDD_TEXTE = MyBase.Columns("SP_ATC_DDD_TEXTE")
            Me.columnSP_MONO_VIRTUELLE = MyBase.Columns("SP_MONO_VIRTUELLE")
            Me.columnSP_CIPUCD13 = MyBase.Columns("SP_CIPUCD13")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSP_CODE_SQ_PK = New Global.System.Data.DataColumn("SP_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CODE_SQ_PK)
            Me.columnSP_GSP_CODE_FK = New Global.System.Data.DataColumn("SP_GSP_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GSP_CODE_FK)
            Me.columnSP_CDF_SLAB_CODE_FK = New Global.System.Data.DataColumn("SP_CDF_SLAB_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_SLAB_CODE_FK)
            Me.columnSP_CDF_LI_CODE_FK = New Global.System.Data.DataColumn("SP_CDF_LI_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_LI_CODE_FK)
            Me.columnSP_CATC_CODE_FK = New Global.System.Data.DataColumn("SP_CATC_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CATC_CODE_FK)
            Me.columnSP_CEPH_CODE_FK = New Global.System.Data.DataColumn("SP_CEPH_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CEPH_CODE_FK)
            Me.columnSP_CGE_CODE_FK = New Global.System.Data.DataColumn("SP_CGE_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CGE_CODE_FK)
            Me.columnSP_PR_CODE_FK = New Global.System.Data.DataColumn("SP_PR_CODE_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PR_CODE_FK)
            Me.columnSP_TYPE_SPE = New Global.System.Data.DataColumn("SP_TYPE_SPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_TYPE_SPE)
            Me.columnSP_GREF_FK = New Global.System.Data.DataColumn("SP_GREF_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_FK)
            Me.columnSP_GREF_DATECR_FK = New Global.System.Data.DataColumn("SP_GREF_DATECR_FK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_DATECR_FK)
            Me.columnSP_NOM = New Global.System.Data.DataColumn("SP_NOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOM)
            Me.columnSP_NOMCOMP = New Global.System.Data.DataColumn("SP_NOMCOMP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMCOMP)
            Me.columnSP_PH = New Global.System.Data.DataColumn("SP_PH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PH)
            Me.columnSP_CIPUCD = New Global.System.Data.DataColumn("SP_CIPUCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CIPUCD)
            Me.columnSP_DATECR = New Global.System.Data.DataColumn("SP_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATECR)
            Me.columnSP_DATEMJ = New Global.System.Data.DataColumn("SP_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEMJ)
            Me.columnSP_NL = New Global.System.Data.DataColumn("SP_NL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NL)
            Me.columnSP_APHP = New Global.System.Data.DataColumn("SP_APHP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_APHP)
            Me.columnSP_DATEJOGENE = New Global.System.Data.DataColumn("SP_DATEJOGENE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEJOGENE)
            Me.columnSP_ORIGINE_GENE = New Global.System.Data.DataColumn("SP_ORIGINE_GENE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ORIGINE_GENE)
            Me.columnSP_NOMLONG = New Global.System.Data.DataColumn("SP_NOMLONG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMLONG)
            Me.columnSP_CDT_PRESCR_TEXTE = New Global.System.Data.DataColumn("SP_CDT_PRESCR_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDT_PRESCR_TEXTE)
            Me.columnSP_ATC_DDD_TEXTE = New Global.System.Data.DataColumn("SP_ATC_DDD_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ATC_DDD_TEXTE)
            Me.columnSP_MONO_VIRTUELLE = New Global.System.Data.DataColumn("SP_MONO_VIRTUELLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_MONO_VIRTUELLE)
            Me.columnSP_CIPUCD13 = New Global.System.Data.DataColumn("SP_CIPUCD13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CIPUCD13)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSP_CODE_SQ_PK}, true))
            Me.columnSP_CODE_SQ_PK.AllowDBNull = false
            Me.columnSP_CODE_SQ_PK.Unique = true
            Me.columnSP_CDF_SLAB_CODE_FK.AllowDBNull = false
            Me.columnSP_CDF_SLAB_CODE_FK.MaxLength = 10
            Me.columnSP_CDF_LI_CODE_FK.AllowDBNull = false
            Me.columnSP_CDF_LI_CODE_FK.MaxLength = 10
            Me.columnSP_CATC_CODE_FK.MaxLength = 10
            Me.columnSP_CEPH_CODE_FK.MaxLength = 10
            Me.columnSP_PR_CODE_FK.AllowDBNull = false
            Me.columnSP_TYPE_SPE.MaxLength = 1
            Me.columnSP_NOM.AllowDBNull = false
            Me.columnSP_NOM.MaxLength = 36
            Me.columnSP_NOMCOMP.MaxLength = 255
            Me.columnSP_PH.MaxLength = 10
            Me.columnSP_CIPUCD.MaxLength = 7
            Me.columnSP_DATECR.AllowDBNull = false
            Me.columnSP_NL.MaxLength = 13
            Me.columnSP_APHP.MaxLength = 7
            Me.columnSP_ORIGINE_GENE.MaxLength = 1
            Me.columnSP_NOMLONG.MaxLength = 255
            Me.columnSP_CDT_PRESCR_TEXTE.MaxLength = 4000
            Me.columnSP_ATC_DDD_TEXTE.MaxLength = 255
            Me.columnSP_CIPUCD13.MaxLength = 13
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSP_SPECIALITERow() As SP_SPECIALITERow
            Return CType(Me.NewRow,SP_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SP_SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SP_SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanged(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanging(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleted(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleting(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SP_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMI_INTERVALLE_MIN_MAXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMI_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMI_INT_MIN As Global.System.Data.DataColumn
        
        Private columnFPOMMI_UNIT_MIN As Global.System.Data.DataColumn
        
        Private columnFPOMMI_INT_MAX As Global.System.Data.DataColumn
        
        Private columnFPOMMI_UNIT_MAX As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMI_INTERVALLE_MIN_MAX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMI_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMI_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMI_INT_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMI_INT_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMI_UNIT_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMI_UNIT_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMI_INT_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMI_INT_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMI_UNIT_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMI_UNIT_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMI_INTERVALLE_MIN_MAXRow
            Get
                Return CType(Me.Rows(index),FPOMMI_INTERVALLE_MIN_MAXRow)
            End Get
        End Property
        
        Public Event FPOMMI_INTERVALLE_MIN_MAXRowChanging As FPOMMI_INTERVALLE_MIN_MAXRowChangeEventHandler
        
        Public Event FPOMMI_INTERVALLE_MIN_MAXRowChanged As FPOMMI_INTERVALLE_MIN_MAXRowChangeEventHandler
        
        Public Event FPOMMI_INTERVALLE_MIN_MAXRowDeleting As FPOMMI_INTERVALLE_MIN_MAXRowChangeEventHandler
        
        Public Event FPOMMI_INTERVALLE_MIN_MAXRowDeleted As FPOMMI_INTERVALLE_MIN_MAXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMI_INTERVALLE_MIN_MAXRow(ByVal row As FPOMMI_INTERVALLE_MIN_MAXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMI_INTERVALLE_MIN_MAXRow(ByVal FPOMMI_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMI_INT_MIN As Decimal, ByVal FPOMMI_UNIT_MIN As String, ByVal FPOMMI_INT_MAX As Decimal, ByVal FPOMMI_UNIT_MAX As String) As FPOMMI_INTERVALLE_MIN_MAXRow
            Dim rowFPOMMI_INTERVALLE_MIN_MAXRow As FPOMMI_INTERVALLE_MIN_MAXRow = CType(Me.NewRow,FPOMMI_INTERVALLE_MIN_MAXRow)
            Dim columnValuesArray() As Object = New Object() {FPOMMI_FPOMM_CODE_FK_PK, FPOMMI_INT_MIN, FPOMMI_UNIT_MIN, FPOMMI_INT_MAX, FPOMMI_UNIT_MAX}
            rowFPOMMI_INTERVALLE_MIN_MAXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMI_INTERVALLE_MIN_MAXRow)
            Return rowFPOMMI_INTERVALLE_MIN_MAXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMI_FPOMM_CODE_FK_PK(ByVal FPOMMI_FPOMM_CODE_FK_PK As Integer) As FPOMMI_INTERVALLE_MIN_MAXRow
            Return CType(Me.Rows.Find(New Object() {FPOMMI_FPOMM_CODE_FK_PK}),FPOMMI_INTERVALLE_MIN_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMI_INTERVALLE_MIN_MAXDataTable = CType(MyBase.Clone,FPOMMI_INTERVALLE_MIN_MAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMI_INTERVALLE_MIN_MAXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMI_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMI_FPOMM_CODE_FK_PK")
            Me.columnFPOMMI_INT_MIN = MyBase.Columns("FPOMMI_INT_MIN")
            Me.columnFPOMMI_UNIT_MIN = MyBase.Columns("FPOMMI_UNIT_MIN")
            Me.columnFPOMMI_INT_MAX = MyBase.Columns("FPOMMI_INT_MAX")
            Me.columnFPOMMI_UNIT_MAX = MyBase.Columns("FPOMMI_UNIT_MAX")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMI_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMI_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMI_FPOMM_CODE_FK_PK)
            Me.columnFPOMMI_INT_MIN = New Global.System.Data.DataColumn("FPOMMI_INT_MIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMI_INT_MIN)
            Me.columnFPOMMI_UNIT_MIN = New Global.System.Data.DataColumn("FPOMMI_UNIT_MIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMI_UNIT_MIN)
            Me.columnFPOMMI_INT_MAX = New Global.System.Data.DataColumn("FPOMMI_INT_MAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMI_INT_MAX)
            Me.columnFPOMMI_UNIT_MAX = New Global.System.Data.DataColumn("FPOMMI_UNIT_MAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMI_UNIT_MAX)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMI_FPOMM_CODE_FK_PK}, true))
            Me.columnFPOMMI_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMI_FPOMM_CODE_FK_PK.Unique = true
            Me.columnFPOMMI_UNIT_MIN.MaxLength = 10
            Me.columnFPOMMI_UNIT_MAX.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMI_INTERVALLE_MIN_MAXRow() As FPOMMI_INTERVALLE_MIN_MAXRow
            Return CType(Me.NewRow,FPOMMI_INTERVALLE_MIN_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMI_INTERVALLE_MIN_MAXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMI_INTERVALLE_MIN_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMI_INTERVALLE_MIN_MAXRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMI_INTERVALLE_MIN_MAXRowChanged(Me, New FPOMMI_INTERVALLE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMMI_INTERVALLE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMI_INTERVALLE_MIN_MAXRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMI_INTERVALLE_MIN_MAXRowChanging(Me, New FPOMMI_INTERVALLE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMMI_INTERVALLE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMI_INTERVALLE_MIN_MAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMI_INTERVALLE_MIN_MAXRowDeleted(Me, New FPOMMI_INTERVALLE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMMI_INTERVALLE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMI_INTERVALLE_MIN_MAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMI_INTERVALLE_MIN_MAXRowDeleting(Me, New FPOMMI_INTERVALLE_MIN_MAXRowChangeEvent(CType(e.Row,FPOMMI_INTERVALLE_MIN_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMI_INTERVALLE_MIN_MAXRow(ByVal row As FPOMMI_INTERVALLE_MIN_MAXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMI_INTERVALLE_MIN_MAXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPODCM_DOSE_CUMUL_MAXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPODCM_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPODCM_DCM As Global.System.Data.DataColumn
        
        Private columnFPODCM_UNIT As Global.System.Data.DataColumn
        
        Private columnFPODCM_UNIT_CDF_NUM_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPODCM_DOSE_CUMUL_MAX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPODCM_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPODCM_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPODCM_DCMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPODCM_DCM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPODCM_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPODCM_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPODCM_UNIT_CDF_NUM_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPODCM_UNIT_CDF_NUM_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPODCM_DOSE_CUMUL_MAXRow
            Get
                Return CType(Me.Rows(index),FPODCM_DOSE_CUMUL_MAXRow)
            End Get
        End Property
        
        Public Event FPODCM_DOSE_CUMUL_MAXRowChanging As FPODCM_DOSE_CUMUL_MAXRowChangeEventHandler
        
        Public Event FPODCM_DOSE_CUMUL_MAXRowChanged As FPODCM_DOSE_CUMUL_MAXRowChangeEventHandler
        
        Public Event FPODCM_DOSE_CUMUL_MAXRowDeleting As FPODCM_DOSE_CUMUL_MAXRowChangeEventHandler
        
        Public Event FPODCM_DOSE_CUMUL_MAXRowDeleted As FPODCM_DOSE_CUMUL_MAXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPODCM_DOSE_CUMUL_MAXRow(ByVal row As FPODCM_DOSE_CUMUL_MAXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPODCM_DOSE_CUMUL_MAXRow(ByVal FPODCM_FPOMM_CODE_FK_PK As Integer, ByVal FPODCM_DCM As Decimal, ByVal FPODCM_UNIT As String, ByVal FPODCM_UNIT_CDF_NUM_FK As String) As FPODCM_DOSE_CUMUL_MAXRow
            Dim rowFPODCM_DOSE_CUMUL_MAXRow As FPODCM_DOSE_CUMUL_MAXRow = CType(Me.NewRow,FPODCM_DOSE_CUMUL_MAXRow)
            Dim columnValuesArray() As Object = New Object() {FPODCM_FPOMM_CODE_FK_PK, FPODCM_DCM, FPODCM_UNIT, FPODCM_UNIT_CDF_NUM_FK}
            rowFPODCM_DOSE_CUMUL_MAXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPODCM_DOSE_CUMUL_MAXRow)
            Return rowFPODCM_DOSE_CUMUL_MAXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPODCM_FPOMM_CODE_FK_PK(ByVal FPODCM_FPOMM_CODE_FK_PK As Integer) As FPODCM_DOSE_CUMUL_MAXRow
            Return CType(Me.Rows.Find(New Object() {FPODCM_FPOMM_CODE_FK_PK}),FPODCM_DOSE_CUMUL_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPODCM_DOSE_CUMUL_MAXDataTable = CType(MyBase.Clone,FPODCM_DOSE_CUMUL_MAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPODCM_DOSE_CUMUL_MAXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPODCM_FPOMM_CODE_FK_PK = MyBase.Columns("FPODCM_FPOMM_CODE_FK_PK")
            Me.columnFPODCM_DCM = MyBase.Columns("FPODCM_DCM")
            Me.columnFPODCM_UNIT = MyBase.Columns("FPODCM_UNIT")
            Me.columnFPODCM_UNIT_CDF_NUM_FK = MyBase.Columns("FPODCM_UNIT_CDF_NUM_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPODCM_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPODCM_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPODCM_FPOMM_CODE_FK_PK)
            Me.columnFPODCM_DCM = New Global.System.Data.DataColumn("FPODCM_DCM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPODCM_DCM)
            Me.columnFPODCM_UNIT = New Global.System.Data.DataColumn("FPODCM_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPODCM_UNIT)
            Me.columnFPODCM_UNIT_CDF_NUM_FK = New Global.System.Data.DataColumn("FPODCM_UNIT_CDF_NUM_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPODCM_UNIT_CDF_NUM_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPODCM_FPOMM_CODE_FK_PK}, true))
            Me.columnFPODCM_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPODCM_FPOMM_CODE_FK_PK.Unique = true
            Me.columnFPODCM_DCM.AllowDBNull = false
            Me.columnFPODCM_UNIT.AllowDBNull = false
            Me.columnFPODCM_UNIT.MaxLength = 10
            Me.columnFPODCM_UNIT_CDF_NUM_FK.AllowDBNull = false
            Me.columnFPODCM_UNIT_CDF_NUM_FK.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPODCM_DOSE_CUMUL_MAXRow() As FPODCM_DOSE_CUMUL_MAXRow
            Return CType(Me.NewRow,FPODCM_DOSE_CUMUL_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPODCM_DOSE_CUMUL_MAXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPODCM_DOSE_CUMUL_MAXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPODCM_DOSE_CUMUL_MAXRowChangedEvent) Is Nothing) Then
                RaiseEvent FPODCM_DOSE_CUMUL_MAXRowChanged(Me, New FPODCM_DOSE_CUMUL_MAXRowChangeEvent(CType(e.Row,FPODCM_DOSE_CUMUL_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPODCM_DOSE_CUMUL_MAXRowChangingEvent) Is Nothing) Then
                RaiseEvent FPODCM_DOSE_CUMUL_MAXRowChanging(Me, New FPODCM_DOSE_CUMUL_MAXRowChangeEvent(CType(e.Row,FPODCM_DOSE_CUMUL_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPODCM_DOSE_CUMUL_MAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPODCM_DOSE_CUMUL_MAXRowDeleted(Me, New FPODCM_DOSE_CUMUL_MAXRowChangeEvent(CType(e.Row,FPODCM_DOSE_CUMUL_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPODCM_DOSE_CUMUL_MAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPODCM_DOSE_CUMUL_MAXRowDeleting(Me, New FPODCM_DOSE_CUMUL_MAXRowChangeEvent(CType(e.Row,FPODCM_DOSE_CUMUL_MAXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPODCM_DOSE_CUMUL_MAXRow(ByVal row As FPODCM_DOSE_CUMUL_MAXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPODCM_DOSE_CUMUL_MAXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMDO_POSOMINMAX_DOSESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMDO_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_NUM_SEQ As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_DP_MIN As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_DP_MAX As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_DJ_MIN As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_DJ_MAX As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_UNIT_CDF_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_UNITE_CDF_NUM_FK As Global.System.Data.DataColumn
        
        Private columnFPOMMDO_DONANTH_CDF_CODE_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMDO_POSOMINMAX_DOSES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_NUM_SEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_NUM_SEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_DP_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_DP_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_DP_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_DP_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_DJ_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_DJ_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_DJ_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_DJ_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_UNIT_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_UNIT_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_UNITE_CDF_NUM_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_UNITE_CDF_NUM_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMDO_DONANTH_CDF_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMDO_DONANTH_CDF_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMDO_POSOMINMAX_DOSESRow
            Get
                Return CType(Me.Rows(index),FPOMMDO_POSOMINMAX_DOSESRow)
            End Get
        End Property
        
        Public Event FPOMMDO_POSOMINMAX_DOSESRowChanging As FPOMMDO_POSOMINMAX_DOSESRowChangeEventHandler
        
        Public Event FPOMMDO_POSOMINMAX_DOSESRowChanged As FPOMMDO_POSOMINMAX_DOSESRowChangeEventHandler
        
        Public Event FPOMMDO_POSOMINMAX_DOSESRowDeleting As FPOMMDO_POSOMINMAX_DOSESRowChangeEventHandler
        
        Public Event FPOMMDO_POSOMINMAX_DOSESRowDeleted As FPOMMDO_POSOMINMAX_DOSESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMDO_POSOMINMAX_DOSESRow(ByVal row As FPOMMDO_POSOMINMAX_DOSESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMDO_POSOMINMAX_DOSESRow(ByVal FPOMMDO_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMDO_NUM_SEQ As Integer, ByVal FPOMMDO_DP_MIN As Decimal, ByVal FPOMMDO_DP_MAX As Decimal, ByVal FPOMMDO_DJ_MIN As Decimal, ByVal FPOMMDO_DJ_MAX As Decimal, ByVal FPOMMDO_UNIT_CDF_CODE_FK As String, ByVal FPOMMDO_UNITE_CDF_NUM_FK As String, ByVal FPOMMDO_DONANTH_CDF_CODE_FK As String) As FPOMMDO_POSOMINMAX_DOSESRow
            Dim rowFPOMMDO_POSOMINMAX_DOSESRow As FPOMMDO_POSOMINMAX_DOSESRow = CType(Me.NewRow,FPOMMDO_POSOMINMAX_DOSESRow)
            Dim columnValuesArray() As Object = New Object() {FPOMMDO_FPOMM_CODE_FK_PK, FPOMMDO_NUM_SEQ, FPOMMDO_DP_MIN, FPOMMDO_DP_MAX, FPOMMDO_DJ_MIN, FPOMMDO_DJ_MAX, FPOMMDO_UNIT_CDF_CODE_FK, FPOMMDO_UNITE_CDF_NUM_FK, FPOMMDO_DONANTH_CDF_CODE_FK}
            rowFPOMMDO_POSOMINMAX_DOSESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMDO_POSOMINMAX_DOSESRow)
            Return rowFPOMMDO_POSOMINMAX_DOSESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMDO_FPOMM_CODE_FK_PKFPOMMDO_NUM_SEQ(ByVal FPOMMDO_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMDO_NUM_SEQ As Integer) As FPOMMDO_POSOMINMAX_DOSESRow
            Return CType(Me.Rows.Find(New Object() {FPOMMDO_FPOMM_CODE_FK_PK, FPOMMDO_NUM_SEQ}),FPOMMDO_POSOMINMAX_DOSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMDO_POSOMINMAX_DOSESDataTable = CType(MyBase.Clone,FPOMMDO_POSOMINMAX_DOSESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMDO_POSOMINMAX_DOSESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMDO_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMDO_FPOMM_CODE_FK_PK")
            Me.columnFPOMMDO_NUM_SEQ = MyBase.Columns("FPOMMDO_NUM_SEQ")
            Me.columnFPOMMDO_DP_MIN = MyBase.Columns("FPOMMDO_DP_MIN")
            Me.columnFPOMMDO_DP_MAX = MyBase.Columns("FPOMMDO_DP_MAX")
            Me.columnFPOMMDO_DJ_MIN = MyBase.Columns("FPOMMDO_DJ_MIN")
            Me.columnFPOMMDO_DJ_MAX = MyBase.Columns("FPOMMDO_DJ_MAX")
            Me.columnFPOMMDO_UNIT_CDF_CODE_FK = MyBase.Columns("FPOMMDO_UNIT_CDF_CODE_FK")
            Me.columnFPOMMDO_UNITE_CDF_NUM_FK = MyBase.Columns("FPOMMDO_UNITE_CDF_NUM_FK")
            Me.columnFPOMMDO_DONANTH_CDF_CODE_FK = MyBase.Columns("FPOMMDO_DONANTH_CDF_CODE_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMDO_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMDO_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_FPOMM_CODE_FK_PK)
            Me.columnFPOMMDO_NUM_SEQ = New Global.System.Data.DataColumn("FPOMMDO_NUM_SEQ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_NUM_SEQ)
            Me.columnFPOMMDO_DP_MIN = New Global.System.Data.DataColumn("FPOMMDO_DP_MIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_DP_MIN)
            Me.columnFPOMMDO_DP_MAX = New Global.System.Data.DataColumn("FPOMMDO_DP_MAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_DP_MAX)
            Me.columnFPOMMDO_DJ_MIN = New Global.System.Data.DataColumn("FPOMMDO_DJ_MIN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_DJ_MIN)
            Me.columnFPOMMDO_DJ_MAX = New Global.System.Data.DataColumn("FPOMMDO_DJ_MAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_DJ_MAX)
            Me.columnFPOMMDO_UNIT_CDF_CODE_FK = New Global.System.Data.DataColumn("FPOMMDO_UNIT_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_UNIT_CDF_CODE_FK)
            Me.columnFPOMMDO_UNITE_CDF_NUM_FK = New Global.System.Data.DataColumn("FPOMMDO_UNITE_CDF_NUM_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_UNITE_CDF_NUM_FK)
            Me.columnFPOMMDO_DONANTH_CDF_CODE_FK = New Global.System.Data.DataColumn("FPOMMDO_DONANTH_CDF_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMDO_DONANTH_CDF_CODE_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMDO_FPOMM_CODE_FK_PK, Me.columnFPOMMDO_NUM_SEQ}, true))
            Me.columnFPOMMDO_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMDO_NUM_SEQ.AllowDBNull = false
            Me.columnFPOMMDO_UNIT_CDF_CODE_FK.MaxLength = 10
            Me.columnFPOMMDO_UNITE_CDF_NUM_FK.MaxLength = 2
            Me.columnFPOMMDO_DONANTH_CDF_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMDO_POSOMINMAX_DOSESRow() As FPOMMDO_POSOMINMAX_DOSESRow
            Return CType(Me.NewRow,FPOMMDO_POSOMINMAX_DOSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMDO_POSOMINMAX_DOSESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMDO_POSOMINMAX_DOSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMDO_POSOMINMAX_DOSESRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMDO_POSOMINMAX_DOSESRowChanged(Me, New FPOMMDO_POSOMINMAX_DOSESRowChangeEvent(CType(e.Row,FPOMMDO_POSOMINMAX_DOSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMDO_POSOMINMAX_DOSESRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMDO_POSOMINMAX_DOSESRowChanging(Me, New FPOMMDO_POSOMINMAX_DOSESRowChangeEvent(CType(e.Row,FPOMMDO_POSOMINMAX_DOSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMDO_POSOMINMAX_DOSESRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMDO_POSOMINMAX_DOSESRowDeleted(Me, New FPOMMDO_POSOMINMAX_DOSESRowChangeEvent(CType(e.Row,FPOMMDO_POSOMINMAX_DOSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMDO_POSOMINMAX_DOSESRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMDO_POSOMINMAX_DOSESRowDeleting(Me, New FPOMMDO_POSOMINMAX_DOSESRowChangeEvent(CType(e.Row,FPOMMDO_POSOMINMAX_DOSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMDO_POSOMINMAX_DOSESRow(ByVal row As FPOMMDO_POSOMINMAX_DOSESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMDO_POSOMINMAX_DOSESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMSAC_POSOMINMAX_SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMSAC_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMSAC_SAC_CODE_FK_PK_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMSAC_POSOMINMAX_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMSAC_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMSAC_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMSAC_SAC_CODE_FK_PK_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMSAC_SAC_CODE_FK_PK_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMSAC_POSOMINMAX_SUBACTRow
            Get
                Return CType(Me.Rows(index),FPOMMSAC_POSOMINMAX_SUBACTRow)
            End Get
        End Property
        
        Public Event FPOMMSAC_POSOMINMAX_SUBACTRowChanging As FPOMMSAC_POSOMINMAX_SUBACTRowChangeEventHandler
        
        Public Event FPOMMSAC_POSOMINMAX_SUBACTRowChanged As FPOMMSAC_POSOMINMAX_SUBACTRowChangeEventHandler
        
        Public Event FPOMMSAC_POSOMINMAX_SUBACTRowDeleting As FPOMMSAC_POSOMINMAX_SUBACTRowChangeEventHandler
        
        Public Event FPOMMSAC_POSOMINMAX_SUBACTRowDeleted As FPOMMSAC_POSOMINMAX_SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMSAC_POSOMINMAX_SUBACTRow(ByVal row As FPOMMSAC_POSOMINMAX_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMSAC_POSOMINMAX_SUBACTRow(ByVal FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSAC_SAC_CODE_FK_PK_ As Integer) As FPOMMSAC_POSOMINMAX_SUBACTRow
            Dim rowFPOMMSAC_POSOMINMAX_SUBACTRow As FPOMMSAC_POSOMINMAX_SUBACTRow = CType(Me.NewRow,FPOMMSAC_POSOMINMAX_SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {FPOMMSAC_FPOMM_CODE_FK_PK, FPOMMSAC_SAC_CODE_FK_PK_}
            rowFPOMMSAC_POSOMINMAX_SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMSAC_POSOMINMAX_SUBACTRow)
            Return rowFPOMMSAC_POSOMINMAX_SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMSAC_FPOMM_CODE_FK_PKFPOMMSAC_SAC_CODE_FK_PK_(ByVal FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSAC_SAC_CODE_FK_PK_ As Integer) As FPOMMSAC_POSOMINMAX_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {FPOMMSAC_FPOMM_CODE_FK_PK, FPOMMSAC_SAC_CODE_FK_PK_}),FPOMMSAC_POSOMINMAX_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMSAC_POSOMINMAX_SUBACTDataTable = CType(MyBase.Clone,FPOMMSAC_POSOMINMAX_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMSAC_POSOMINMAX_SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMSAC_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMSAC_FPOMM_CODE_FK_PK")
            Me.columnFPOMMSAC_SAC_CODE_FK_PK_ = MyBase.Columns("FPOMMSAC_SAC_CODE_FK_PK ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMSAC_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMSAC_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMSAC_FPOMM_CODE_FK_PK)
            Me.columnFPOMMSAC_SAC_CODE_FK_PK_ = New Global.System.Data.DataColumn("FPOMMSAC_SAC_CODE_FK_PK ", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMSAC_SAC_CODE_FK_PK_)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMSAC_FPOMM_CODE_FK_PK, Me.columnFPOMMSAC_SAC_CODE_FK_PK_}, true))
            Me.columnFPOMMSAC_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMSAC_SAC_CODE_FK_PK_.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMSAC_POSOMINMAX_SUBACTRow() As FPOMMSAC_POSOMINMAX_SUBACTRow
            Return CType(Me.NewRow,FPOMMSAC_POSOMINMAX_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMSAC_POSOMINMAX_SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMSAC_POSOMINMAX_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMSAC_POSOMINMAX_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMSAC_POSOMINMAX_SUBACTRowChanged(Me, New FPOMMSAC_POSOMINMAX_SUBACTRowChangeEvent(CType(e.Row,FPOMMSAC_POSOMINMAX_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMSAC_POSOMINMAX_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMSAC_POSOMINMAX_SUBACTRowChanging(Me, New FPOMMSAC_POSOMINMAX_SUBACTRowChangeEvent(CType(e.Row,FPOMMSAC_POSOMINMAX_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMSAC_POSOMINMAX_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMSAC_POSOMINMAX_SUBACTRowDeleted(Me, New FPOMMSAC_POSOMINMAX_SUBACTRowChangeEvent(CType(e.Row,FPOMMSAC_POSOMINMAX_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMSAC_POSOMINMAX_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMSAC_POSOMINMAX_SUBACTRowDeleting(Me, New FPOMMSAC_POSOMINMAX_SUBACTRowChangeEvent(CType(e.Row,FPOMMSAC_POSOMINMAX_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMSAC_POSOMINMAX_SUBACTRow(ByVal row As FPOMMSAC_POSOMINMAX_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMSAC_POSOMINMAX_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMSP_POSOMINMAX_SPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMSP_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMSP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMSP_POSOMINMAX_SPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMSP_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMSP_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMSP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMSP_POSOMINMAX_SPERow
            Get
                Return CType(Me.Rows(index),FPOMMSP_POSOMINMAX_SPERow)
            End Get
        End Property
        
        Public Event FPOMMSP_POSOMINMAX_SPERowChanging As FPOMMSP_POSOMINMAX_SPERowChangeEventHandler
        
        Public Event FPOMMSP_POSOMINMAX_SPERowChanged As FPOMMSP_POSOMINMAX_SPERowChangeEventHandler
        
        Public Event FPOMMSP_POSOMINMAX_SPERowDeleting As FPOMMSP_POSOMINMAX_SPERowChangeEventHandler
        
        Public Event FPOMMSP_POSOMINMAX_SPERowDeleted As FPOMMSP_POSOMINMAX_SPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMSP_POSOMINMAX_SPERow(ByVal row As FPOMMSP_POSOMINMAX_SPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMSP_POSOMINMAX_SPERow(ByVal FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSP_SP_CODE_FK_PK As Integer) As FPOMMSP_POSOMINMAX_SPERow
            Dim rowFPOMMSP_POSOMINMAX_SPERow As FPOMMSP_POSOMINMAX_SPERow = CType(Me.NewRow,FPOMMSP_POSOMINMAX_SPERow)
            Dim columnValuesArray() As Object = New Object() {FPOMMSP_FPOMM_CODE_FK_PK, FPOMMSP_SP_CODE_FK_PK}
            rowFPOMMSP_POSOMINMAX_SPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMSP_POSOMINMAX_SPERow)
            Return rowFPOMMSP_POSOMINMAX_SPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMSP_FPOMM_CODE_FK_PKFPOMMSP_SP_CODE_FK_PK(ByVal FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSP_SP_CODE_FK_PK As Integer) As FPOMMSP_POSOMINMAX_SPERow
            Return CType(Me.Rows.Find(New Object() {FPOMMSP_FPOMM_CODE_FK_PK, FPOMMSP_SP_CODE_FK_PK}),FPOMMSP_POSOMINMAX_SPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMSP_POSOMINMAX_SPEDataTable = CType(MyBase.Clone,FPOMMSP_POSOMINMAX_SPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMSP_POSOMINMAX_SPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMSP_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMSP_FPOMM_CODE_FK_PK")
            Me.columnFPOMMSP_SP_CODE_FK_PK = MyBase.Columns("FPOMMSP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMSP_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMSP_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMSP_FPOMM_CODE_FK_PK)
            Me.columnFPOMMSP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMSP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMSP_FPOMM_CODE_FK_PK, Me.columnFPOMMSP_SP_CODE_FK_PK}, true))
            Me.columnFPOMMSP_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMSP_POSOMINMAX_SPERow() As FPOMMSP_POSOMINMAX_SPERow
            Return CType(Me.NewRow,FPOMMSP_POSOMINMAX_SPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMSP_POSOMINMAX_SPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMSP_POSOMINMAX_SPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMSP_POSOMINMAX_SPERowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMSP_POSOMINMAX_SPERowChanged(Me, New FPOMMSP_POSOMINMAX_SPERowChangeEvent(CType(e.Row,FPOMMSP_POSOMINMAX_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMSP_POSOMINMAX_SPERowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMSP_POSOMINMAX_SPERowChanging(Me, New FPOMMSP_POSOMINMAX_SPERowChangeEvent(CType(e.Row,FPOMMSP_POSOMINMAX_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMSP_POSOMINMAX_SPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMSP_POSOMINMAX_SPERowDeleted(Me, New FPOMMSP_POSOMINMAX_SPERowChangeEvent(CType(e.Row,FPOMMSP_POSOMINMAX_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMSP_POSOMINMAX_SPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMSP_POSOMINMAX_SPERowDeleting(Me, New FPOMMSP_POSOMINMAX_SPERowChangeEvent(CType(e.Row,FPOMMSP_POSOMINMAX_SPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMSP_POSOMINMAX_SPERow(ByVal row As FPOMMSP_POSOMINMAX_SPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMSP_POSOMINMAX_SPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPOMMTP_POSOMINMAX_TERPERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPOMMTP_FPOMM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMTP_CODEP_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPOMMTP_NUMEROP_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPOMMTP_POSOMINMAX_TERPER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMTP_FPOMM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMTP_FPOMM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMTP_CODEP_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMTP_CODEP_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPOMMTP_NUMEROP_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOMMTP_NUMEROP_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPOMMTP_POSOMINMAX_TERPERRow
            Get
                Return CType(Me.Rows(index),FPOMMTP_POSOMINMAX_TERPERRow)
            End Get
        End Property
        
        Public Event FPOMMTP_POSOMINMAX_TERPERRowChanging As FPOMMTP_POSOMINMAX_TERPERRowChangeEventHandler
        
        Public Event FPOMMTP_POSOMINMAX_TERPERRowChanged As FPOMMTP_POSOMINMAX_TERPERRowChangeEventHandler
        
        Public Event FPOMMTP_POSOMINMAX_TERPERRowDeleting As FPOMMTP_POSOMINMAX_TERPERRowChangeEventHandler
        
        Public Event FPOMMTP_POSOMINMAX_TERPERRowDeleted As FPOMMTP_POSOMINMAX_TERPERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPOMMTP_POSOMINMAX_TERPERRow(ByVal row As FPOMMTP_POSOMINMAX_TERPERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPOMMTP_POSOMINMAX_TERPERRow(ByVal FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMTP_CODEP_FK_PK As String, ByVal FPOMMTP_NUMEROP_FK_PK As String) As FPOMMTP_POSOMINMAX_TERPERRow
            Dim rowFPOMMTP_POSOMINMAX_TERPERRow As FPOMMTP_POSOMINMAX_TERPERRow = CType(Me.NewRow,FPOMMTP_POSOMINMAX_TERPERRow)
            Dim columnValuesArray() As Object = New Object() {FPOMMTP_FPOMM_CODE_FK_PK, FPOMMTP_CODEP_FK_PK, FPOMMTP_NUMEROP_FK_PK}
            rowFPOMMTP_POSOMINMAX_TERPERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPOMMTP_POSOMINMAX_TERPERRow)
            Return rowFPOMMTP_POSOMINMAX_TERPERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPOMMTP_FPOMM_CODE_FK_PKFPOMMTP_CODEP_FK_PKFPOMMTP_NUMEROP_FK_PK(ByVal FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMTP_CODEP_FK_PK As String, ByVal FPOMMTP_NUMEROP_FK_PK As String) As FPOMMTP_POSOMINMAX_TERPERRow
            Return CType(Me.Rows.Find(New Object() {FPOMMTP_FPOMM_CODE_FK_PK, FPOMMTP_CODEP_FK_PK, FPOMMTP_NUMEROP_FK_PK}),FPOMMTP_POSOMINMAX_TERPERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPOMMTP_POSOMINMAX_TERPERDataTable = CType(MyBase.Clone,FPOMMTP_POSOMINMAX_TERPERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPOMMTP_POSOMINMAX_TERPERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPOMMTP_FPOMM_CODE_FK_PK = MyBase.Columns("FPOMMTP_FPOMM_CODE_FK_PK")
            Me.columnFPOMMTP_CODEP_FK_PK = MyBase.Columns("FPOMMTP_CODEP_FK_PK")
            Me.columnFPOMMTP_NUMEROP_FK_PK = MyBase.Columns("FPOMMTP_NUMEROP_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPOMMTP_FPOMM_CODE_FK_PK = New Global.System.Data.DataColumn("FPOMMTP_FPOMM_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMTP_FPOMM_CODE_FK_PK)
            Me.columnFPOMMTP_CODEP_FK_PK = New Global.System.Data.DataColumn("FPOMMTP_CODEP_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMTP_CODEP_FK_PK)
            Me.columnFPOMMTP_NUMEROP_FK_PK = New Global.System.Data.DataColumn("FPOMMTP_NUMEROP_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOMMTP_NUMEROP_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPOMMTP_FPOMM_CODE_FK_PK, Me.columnFPOMMTP_CODEP_FK_PK, Me.columnFPOMMTP_NUMEROP_FK_PK}, true))
            Me.columnFPOMMTP_FPOMM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPOMMTP_CODEP_FK_PK.AllowDBNull = false
            Me.columnFPOMMTP_CODEP_FK_PK.MaxLength = 10
            Me.columnFPOMMTP_NUMEROP_FK_PK.AllowDBNull = false
            Me.columnFPOMMTP_NUMEROP_FK_PK.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPOMMTP_POSOMINMAX_TERPERRow() As FPOMMTP_POSOMINMAX_TERPERRow
            Return CType(Me.NewRow,FPOMMTP_POSOMINMAX_TERPERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPOMMTP_POSOMINMAX_TERPERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPOMMTP_POSOMINMAX_TERPERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPOMMTP_POSOMINMAX_TERPERRowChangedEvent) Is Nothing) Then
                RaiseEvent FPOMMTP_POSOMINMAX_TERPERRowChanged(Me, New FPOMMTP_POSOMINMAX_TERPERRowChangeEvent(CType(e.Row,FPOMMTP_POSOMINMAX_TERPERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPOMMTP_POSOMINMAX_TERPERRowChangingEvent) Is Nothing) Then
                RaiseEvent FPOMMTP_POSOMINMAX_TERPERRowChanging(Me, New FPOMMTP_POSOMINMAX_TERPERRowChangeEvent(CType(e.Row,FPOMMTP_POSOMINMAX_TERPERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPOMMTP_POSOMINMAX_TERPERRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPOMMTP_POSOMINMAX_TERPERRowDeleted(Me, New FPOMMTP_POSOMINMAX_TERPERRowChangeEvent(CType(e.Row,FPOMMTP_POSOMINMAX_TERPERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPOMMTP_POSOMINMAX_TERPERRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPOMMTP_POSOMINMAX_TERPERRowDeleting(Me, New FPOMMTP_POSOMINMAX_TERPERRowChangeEvent(CType(e.Row,FPOMMTP_POSOMINMAX_TERPERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPOMMTP_POSOMINMAX_TERPERRow(ByVal row As FPOMMTP_POSOMINMAX_TERPERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pos_Min_Max = New dsTheriaque_Pos_Min_Max
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPOMMTP_POSOMINMAX_TERPERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CDF_CODIFRow
        Inherits Global.System.Data.DataRow
        
        Private tableCDF_CODIF As CDF_CODIFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCDF_CODIF = CType(Me.Table,CDF_CODIFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NOM() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_DATECR() As Date
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCDF_CODIF.CDF_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDF_DATEMJ' dans la table 'CDF_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_VAL_NUM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDF_VAL_NUM' dans la table 'CDF_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_NOMABRG() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_NOMABRGColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_NOMABRGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_UNIT_NUM() As String
            Get
                Return CType(Me(Me.tableCDF_CODIF.CDF_UNIT_NUMColumn),String)
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_UNIT_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CDF_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCDF_CODIF.CDF_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CDF_TEXTE' dans la table 'CDF_CODIF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCDF_CODIF.CDF_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDF_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCDF_CODIF.CDF_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDF_DATEMJNull()
            Me(Me.tableCDF_CODIF.CDF_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDF_VAL_NUMNull() As Boolean
            Return Me.IsNull(Me.tableCDF_CODIF.CDF_VAL_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDF_VAL_NUMNull()
            Me(Me.tableCDF_CODIF.CDF_VAL_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCDF_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableCDF_CODIF.CDF_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCDF_TEXTENull()
            Me(Me.tableCDF_CODIF.CDF_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMM_POSOLOGIE_MIN_MAXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMM_POSOLOGIE_MIN_MAX As FPOMM_POSOLOGIE_MIN_MAXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMM_POSOLOGIE_MIN_MAX = CType(Me.Table,FPOMM_POSOLOGIE_MIN_MAXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMM_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMM_DATECR() As Date
            Get
                Return CType(Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMM_DATEMJ_() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_DATEMJ_Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMM_DATEMJ ' dans la table 'FPOMM_POSOLOGIE_MIN_MAX'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_DATEMJ_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMM_DATEMJ_Null() As Boolean
            Return Me.IsNull(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_DATEMJ_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMM_DATEMJ_Null()
            Me(Me.tableFPOMM_POSOLOGIE_MIN_MAX.FPOMM_DATEMJ_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFPOMMPR_POSOMINMAX_PRODRows() As FPOMMPR_POSOMINMAX_PRODRow()
            If (Me.Table.ChildRelations("FK_FPOMMPR") Is Nothing) Then
                Return New FPOMMPR_POSOMINMAX_PRODRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FPOMMPR")),FPOMMPR_POSOMINMAX_PRODRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFPOMMCCH_POSOMINMAX_CLCHRows() As FPOMMCCH_POSOMINMAX_CLCHRow()
            If (Me.Table.ChildRelations("FK_Posologie_Clch") Is Nothing) Then
                Return New FPOMMCCH_POSOMINMAX_CLCHRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Posologie_Clch")),FPOMMCCH_POSOMINMAX_CLCHRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFPOMMCPH_POSOMINMAX_CLPHRows() As FPOMMCPH_POSOMINMAX_CLPHRow()
            If (Me.Table.ChildRelations("FK_POSOMINMAX_CLPH") Is Nothing) Then
                Return New FPOMMCPH_POSOMINMAX_CLPHRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_POSOMINMAX_CLPH")),FPOMMCPH_POSOMINMAX_CLPHRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMCCH_POSOMINMAX_CLCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMCCH_POSOMINMAX_CLCH As FPOMMCCH_POSOMINMAX_CLCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMCCH_POSOMINMAX_CLCH = CType(Me.Table,FPOMMCCH_POSOMINMAX_CLCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMCCH_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMCCH_POSOMINMAX_CLCH.FPOMMCCH_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMCCH_POSOMINMAX_CLCH.FPOMMCCH_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOMMCCH_POSOMINMAX_CLCH.FPOMMCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOMMCCH_POSOMINMAX_CLCH.FPOMMCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMM_POSOLOGIE_MIN_MAXRow() As FPOMM_POSOLOGIE_MIN_MAXRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Posologie_Clch")),FPOMM_POSOLOGIE_MIN_MAXRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Posologie_Clch"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMCPH_POSOMINMAX_CLPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMCPH_POSOMINMAX_CLPH As FPOMMCPH_POSOMINMAX_CLPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMCPH_POSOMINMAX_CLPH = CType(Me.Table,FPOMMCPH_POSOMINMAX_CLPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMCPH_FPO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMCPH_POSOMINMAX_CLPH.FPOMMCPH_FPO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMCPH_POSOMINMAX_CLPH.FPOMMCPH_FPO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOMMCPH_POSOMINMAX_CLPH.FPOMMCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOMMCPH_POSOMINMAX_CLPH.FPOMMCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMM_POSOLOGIE_MIN_MAXRow() As FPOMM_POSOLOGIE_MIN_MAXRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_POSOMINMAX_CLPH")),FPOMM_POSOLOGIE_MIN_MAXRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_POSOMINMAX_CLPH"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CLASSEPHARMTHERRow() As CPH_CLASSEPHARMTHERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CPH")),CPH_CLASSEPHARMTHERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CPH"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMPR_POSOMINMAX_PRODRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMPR_POSOMINMAX_PROD As FPOMMPR_POSOMINMAX_PRODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMPR_POSOMINMAX_PROD = CType(Me.Table,FPOMMPR_POSOMINMAX_PRODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMPR_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMPR_POSOMINMAX_PROD.FPOMMPR_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMPR_POSOMINMAX_PROD.FPOMMPR_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMPR_PR_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOMMPR_POSOMINMAX_PROD.FPOMMPR_PR_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOMMPR_POSOMINMAX_PROD.FPOMMPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMM_POSOLOGIE_MIN_MAXRow() As FPOMM_POSOLOGIE_MIN_MAXRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FPOMMPR")),FPOMM_POSOLOGIE_MIN_MAXRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FPOMMPR"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CPH_CLASSEPHARMTHERRow
        Inherits Global.System.Data.DataRow
        
        Private tableCPH_CLASSEPHARMTHER As CPH_CLASSEPHARMTHERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCPH_CLASSEPHARMTHER = CType(Me.Table,CPH_CLASSEPHARMTHERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CPH_CPH_CODE_FK' dans la table 'CPH_CLASSEPHARMTHER' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_NOM() As String
            Get
                Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_NOMColumn),String)
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_DATECR() As Date
            Get
                Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'CPH_DATEMJ' dans la table 'CPH_CLASSEPHARMTHER' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CPH_CLASSEPHARMTHERRowParent() As CPH_CLASSEPHARMTHERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_CPH_CLASSEPHARMTHER")),CPH_CLASSEPHARMTHERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_CPH_CLASSEPHARMTHER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCPH_CPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCPH_CPH_CODE_FKNull()
            Me(Me.tableCPH_CLASSEPHARMTHER.CPH_CPH_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCPH_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCPH_DATEMJNull()
            Me(Me.tableCPH_CLASSEPHARMTHER.CPH_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCPH_CLASSEPHARMTHERRows() As CPH_CLASSEPHARMTHERRow()
            If (Me.Table.ChildRelations("FK1_CPH_CLASSEPHARMTHER") Is Nothing) Then
                Return New CPH_CLASSEPHARMTHERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_CPH_CLASSEPHARMTHER")),CPH_CLASSEPHARMTHERRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFPOMMCPH_POSOMINMAX_CLPHRows() As FPOMMCPH_POSOMINMAX_CLPHRow()
            If (Me.Table.ChildRelations("FK_CPH") Is Nothing) Then
                Return New FPOMMCPH_POSOMINMAX_CLPHRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CPH")),FPOMMCPH_POSOMINMAX_CLPHRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAC_SUBACTIVERow
        Inherits Global.System.Data.DataRow
        
        Private tableSAC_SUBACTIVE As SAC_SUBACTIVEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAC_SUBACTIVE = CType(Me.Table,SAC_SUBACTIVEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_CDF_ORN_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_CDF_ORN_CODE_FK' dans la table 'SAC_SUBACTIVE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_SAU_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_SAU_CODE_FK' dans la table 'SAC_SUBACTIVE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_GSAC_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_GSAC_CODE_FK' dans la table 'SAC_SUBACTIVE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_NOM() As String
            Get
                Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_NOMA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_NOMA' dans la table 'SAC_SUBACTIVE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_DATECR() As Date
            Get
                Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_DATEMJ' dans la table 'SAC_SUBACTIVE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_ETAT_COMMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_ETAT_COMMER' dans la table 'SAC_SUBACTIVE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_DATECOMMER() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_DATECOMMER' dans la table 'SAC_SUBACTIVE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_CODE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_CODE_REF' dans la table 'SAC_SUBACTIVE' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_LIBELLE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_LIBELLE_REF' dans la table 'SAC_SUBACTIVE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAC_TYPE_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SAC_TYPE_REF' dans la table 'SAC_SUBACTIVE' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_CDF_ORN_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_CDF_ORN_CODE_FKNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_CDF_ORN_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_SAU_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_SAU_CODE_FKNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_SAU_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_GSAC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_GSAC_CODE_FKNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_GSAC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_NOMANull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_NOMANull()
            Me(Me.tableSAC_SUBACTIVE.SAC_NOMAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_DATEMJNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_ETAT_COMMERNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_ETAT_COMMERNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_ETAT_COMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_DATECOMMERNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_DATECOMMERNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_DATECOMMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_CODE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_CODE_REFNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_CODE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_LIBELLE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_LIBELLE_REFNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_LIBELLE_REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAC_TYPE_REFNull() As Boolean
            Return Me.IsNull(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAC_TYPE_REFNull()
            Me(Me.tableSAC_SUBACTIVE.SAC_TYPE_REFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SP_SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_SPECIALITE = CType(Me.Table,SP_SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GSP_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_GSP_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_SLAB_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_LI_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CATC_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CEPH_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CGE_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CGE_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PR_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_TYPE_SPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_TYPE_SPE' dans la table 'SP_SPECIALITE' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_FK' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_DATECR_FK' dans la table 'SP_SPECIALITE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOM() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMCOMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMCOMP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_PHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_PH' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CIPUCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CIPUCD' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATECR() As Date
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEMJ' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_NL' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_APHP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_APHPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_APHP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEJOGENE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEJOGENE' dans la table 'SP_SPECIALITE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ORIGINE_GENE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_ORIGINE_GENE' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMLONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMLONG' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDT_PRESCR_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CDT_PRESCR_TEXTE' dans la table 'SP_SPECIALITE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ATC_DDD_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_ATC_DDD_TEXTE' dans la table 'SP_SPECIALITE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_MONO_VIRTUELLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_MONO_VIRTUELLE' dans la table 'SP_SPECIALITE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CIPUCD13() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CIPUCD13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_CIPUCD13' dans la table 'SP_SPECIALITE' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CIPUCD13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GSP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GSP_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CATC_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CEPH_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CGE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CGE_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_TYPE_SPENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_TYPE_SPENull()
            Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_DATECR_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMCOMPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMCOMPNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_PHNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_PHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_PHNull()
            Me(Me.tableSP_SPECIALITE.SP_PHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CIPUCDNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CIPUCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CIPUCDNull()
            Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEMJNull()
            Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NLNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NLNull()
            Me(Me.tableSP_SPECIALITE.SP_NLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_APHPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_APHPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_APHPNull()
            Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEJOGENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEJOGENENull()
            Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ORIGINE_GENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ORIGINE_GENENull()
            Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMLONGNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMLONGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMLONGNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CDT_PRESCR_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CDT_PRESCR_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ATC_DDD_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ATC_DDD_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_MONO_VIRTUELLENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_MONO_VIRTUELLENull()
            Me(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CIPUCD13Null() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CIPUCD13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CIPUCD13Null()
            Me(Me.tableSP_SPECIALITE.SP_CIPUCD13Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMI_INTERVALLE_MIN_MAXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMI_INTERVALLE_MIN_MAX As FPOMMI_INTERVALLE_MIN_MAXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMI_INTERVALLE_MIN_MAX = CType(Me.Table,FPOMMI_INTERVALLE_MIN_MAXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMI_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMI_INT_MIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMI_INT_MIN' dans la table 'FPOMMI_INTERVALLE_MIN_M"& _ 
                            "AX' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMI_UNIT_MIN() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMI_UNIT_MIN' dans la table 'FPOMMI_INTERVALLE_MIN_"& _ 
                            "MAX' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMI_INT_MAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMI_INT_MAX' dans la table 'FPOMMI_INTERVALLE_MIN_M"& _ 
                            "AX' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMI_UNIT_MAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMI_UNIT_MAX' dans la table 'FPOMMI_INTERVALLE_MIN_"& _ 
                            "MAX' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMI_INT_MINNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMI_INT_MINNull()
            Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMI_UNIT_MINNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMI_UNIT_MINNull()
            Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMI_INT_MAXNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMI_INT_MAXNull()
            Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_INT_MAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMI_UNIT_MAXNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMI_UNIT_MAXNull()
            Me(Me.tableFPOMMI_INTERVALLE_MIN_MAX.FPOMMI_UNIT_MAXColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPODCM_DOSE_CUMUL_MAXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPODCM_DOSE_CUMUL_MAX As FPODCM_DOSE_CUMUL_MAXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPODCM_DOSE_CUMUL_MAX = CType(Me.Table,FPODCM_DOSE_CUMUL_MAXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPODCM_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPODCM_DCM() As Decimal
            Get
                Return CType(Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_DCMColumn),Decimal)
            End Get
            Set
                Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_DCMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPODCM_UNIT() As String
            Get
                Return CType(Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_UNITColumn),String)
            End Get
            Set
                Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPODCM_UNIT_CDF_NUM_FK() As String
            Get
                Return CType(Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_UNIT_CDF_NUM_FKColumn),String)
            End Get
            Set
                Me(Me.tableFPODCM_DOSE_CUMUL_MAX.FPODCM_UNIT_CDF_NUM_FKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMDO_POSOMINMAX_DOSESRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMDO_POSOMINMAX_DOSES As FPOMMDO_POSOMINMAX_DOSESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMDO_POSOMINMAX_DOSES = CType(Me.Table,FPOMMDO_POSOMINMAX_DOSESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_NUM_SEQ() As Integer
            Get
                Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_NUM_SEQColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_NUM_SEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_DP_MIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_DP_MIN' dans la table 'FPOMMDO_POSOMINMAX_DOSE"& _ 
                            "S' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_DP_MAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_DP_MAX' dans la table 'FPOMMDO_POSOMINMAX_DOSE"& _ 
                            "S' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_DJ_MIN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MINColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_DJ_MIN' dans la table 'FPOMMDO_POSOMINMAX_DOSE"& _ 
                            "S' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_DJ_MAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_DJ_MAX' dans la table 'FPOMMDO_POSOMINMAX_DOSE"& _ 
                            "S' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_UNIT_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNIT_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_UNIT_CDF_CODE_FK' dans la table 'FPOMMDO_POSOM"& _ 
                            "INMAX_DOSES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNIT_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_UNITE_CDF_NUM_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNITE_CDF_NUM_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_UNITE_CDF_NUM_FK' dans la table 'FPOMMDO_POSOM"& _ 
                            "INMAX_DOSES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNITE_CDF_NUM_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMDO_DONANTH_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DONANTH_CDF_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPOMMDO_DONANTH_CDF_CODE_FK' dans la table 'FPOMMDO_PO"& _ 
                            "SOMINMAX_DOSES' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DONANTH_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_DP_MINNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_DP_MINNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_DP_MAXNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_DP_MAXNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DP_MAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_DJ_MINNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_DJ_MINNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_DJ_MAXNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_DJ_MAXNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DJ_MAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_UNIT_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNIT_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_UNIT_CDF_CODE_FKNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNIT_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_UNITE_CDF_NUM_FKNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNITE_CDF_NUM_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_UNITE_CDF_NUM_FKNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_UNITE_CDF_NUM_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPOMMDO_DONANTH_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DONANTH_CDF_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPOMMDO_DONANTH_CDF_CODE_FKNull()
            Me(Me.tableFPOMMDO_POSOMINMAX_DOSES.FPOMMDO_DONANTH_CDF_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMSAC_POSOMINMAX_SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMSAC_POSOMINMAX_SUBACT As FPOMMSAC_POSOMINMAX_SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMSAC_POSOMINMAX_SUBACT = CType(Me.Table,FPOMMSAC_POSOMINMAX_SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMSAC_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMSAC_POSOMINMAX_SUBACT.FPOMMSAC_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMSAC_POSOMINMAX_SUBACT.FPOMMSAC_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMSAC_SAC_CODE_FK_PK_() As Integer
            Get
                Return CType(Me(Me.tableFPOMMSAC_POSOMINMAX_SUBACT.FPOMMSAC_SAC_CODE_FK_PK_Column),Integer)
            End Get
            Set
                Me(Me.tableFPOMMSAC_POSOMINMAX_SUBACT.FPOMMSAC_SAC_CODE_FK_PK_Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMSP_POSOMINMAX_SPERow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMSP_POSOMINMAX_SPE As FPOMMSP_POSOMINMAX_SPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMSP_POSOMINMAX_SPE = CType(Me.Table,FPOMMSP_POSOMINMAX_SPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMSP_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMSP_POSOMINMAX_SPE.FPOMMSP_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMSP_POSOMINMAX_SPE.FPOMMSP_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMSP_POSOMINMAX_SPE.FPOMMSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMSP_POSOMINMAX_SPE.FPOMMSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPOMMTP_POSOMINMAX_TERPERRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPOMMTP_POSOMINMAX_TERPER As FPOMMTP_POSOMINMAX_TERPERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPOMMTP_POSOMINMAX_TERPER = CType(Me.Table,FPOMMTP_POSOMINMAX_TERPERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMTP_FPOMM_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPOMMTP_POSOMINMAX_TERPER.FPOMMTP_FPOMM_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPOMMTP_POSOMINMAX_TERPER.FPOMMTP_FPOMM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMTP_CODEP_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOMMTP_POSOMINMAX_TERPER.FPOMMTP_CODEP_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOMMTP_POSOMINMAX_TERPER.FPOMMTP_CODEP_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOMMTP_NUMEROP_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPOMMTP_POSOMINMAX_TERPER.FPOMMTP_NUMEROP_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPOMMTP_POSOMINMAX_TERPER.FPOMMTP_NUMEROP_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CDF_CODIFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CDF_CODIFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CDF_CODIFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CDF_CODIFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMM_POSOLOGIE_MIN_MAXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMM_POSOLOGIE_MIN_MAXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMM_POSOLOGIE_MIN_MAXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMM_POSOLOGIE_MIN_MAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMCCH_POSOMINMAX_CLCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMCCH_POSOMINMAX_CLCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMCCH_POSOMINMAX_CLCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMCCH_POSOMINMAX_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMCPH_POSOMINMAX_CLPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMCPH_POSOMINMAX_CLPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMCPH_POSOMINMAX_CLPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMCPH_POSOMINMAX_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMPR_POSOMINMAX_PRODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMPR_POSOMINMAX_PRODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMPR_POSOMINMAX_PRODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMPR_POSOMINMAX_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CPH_CLASSEPHARMTHERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CPH_CLASSEPHARMTHERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CPH_CLASSEPHARMTHERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CPH_CLASSEPHARMTHERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAC_SUBACTIVERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAC_SUBACTIVERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAC_SUBACTIVERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAC_SUBACTIVERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SP_SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SP_SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SP_SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SP_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMI_INTERVALLE_MIN_MAXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMI_INTERVALLE_MIN_MAXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMI_INTERVALLE_MIN_MAXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMI_INTERVALLE_MIN_MAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPODCM_DOSE_CUMUL_MAXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPODCM_DOSE_CUMUL_MAXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPODCM_DOSE_CUMUL_MAXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPODCM_DOSE_CUMUL_MAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMDO_POSOMINMAX_DOSESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMDO_POSOMINMAX_DOSESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMDO_POSOMINMAX_DOSESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMDO_POSOMINMAX_DOSESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMSAC_POSOMINMAX_SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMSAC_POSOMINMAX_SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMSAC_POSOMINMAX_SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMSAC_POSOMINMAX_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMSP_POSOMINMAX_SPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMSP_POSOMINMAX_SPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMSP_POSOMINMAX_SPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMSP_POSOMINMAX_SPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPOMMTP_POSOMINMAX_TERPERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPOMMTP_POSOMINMAX_TERPERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPOMMTP_POSOMINMAX_TERPERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPOMMTP_POSOMINMAX_TERPERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Pos_Min_MaxTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CDF_CODIFTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CDF_CODIF"
            tableMapping.ColumnMappings.Add("CDF_NUMERO_PK", "CDF_NUMERO_PK")
            tableMapping.ColumnMappings.Add("CDF_CODE_PK", "CDF_CODE_PK")
            tableMapping.ColumnMappings.Add("CDF_NOM", "CDF_NOM")
            tableMapping.ColumnMappings.Add("CDF_DATECR", "CDF_DATECR")
            tableMapping.ColumnMappings.Add("CDF_DATEMJ", "CDF_DATEMJ")
            tableMapping.ColumnMappings.Add("CDF_VAL_NUM", "CDF_VAL_NUM")
            tableMapping.ColumnMappings.Add("CDF_NOMABRG", "CDF_NOMABRG")
            tableMapping.ColumnMappings.Add("CDF_UNIT_NUM", "CDF_UNIT_NUM")
            tableMapping.ColumnMappings.Add("CDF_TEXTE", "CDF_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[CDF_CODIF] WHERE (([CDF_NUMERO_PK] = @Original_CDF_NUMER"& _ 
                "O_PK) AND ([CDF_CODE_PK] = @Original_CDF_CODE_PK) AND ([CDF_NOM] = @Original_CDF"& _ 
                "_NOM) AND ([CDF_DATECR] = @Original_CDF_DATECR) AND ((@IsNull_CDF_DATEMJ = 1 AND"& _ 
                " [CDF_DATEMJ] IS NULL) OR ([CDF_DATEMJ] = @Original_CDF_DATEMJ)) AND ((@IsNull_C"& _ 
                "DF_VAL_NUM = 1 AND [CDF_VAL_NUM] IS NULL) OR ([CDF_VAL_NUM] = @Original_CDF_VAL_"& _ 
                "NUM)) AND ([CDF_NOMABRG] = @Original_CDF_NOMABRG) AND ([CDF_UNIT_NUM] = @Origina"& _ 
                "l_CDF_UNIT_NUM))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_VAL_NUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CDF_CODIF] ([CDF_NUMERO_PK], [CDF_CODE_PK], [CDF_NOM], ["& _ 
                "CDF_DATECR], [CDF_DATEMJ], [CDF_VAL_NUM], [CDF_NOMABRG], [CDF_UNIT_NUM], [CDF_TE"& _ 
                "XTE]) VALUES (@CDF_NUMERO_PK, @CDF_CODE_PK, @CDF_NOM, @CDF_DATECR, @CDF_DATEMJ, "& _ 
                "@CDF_VAL_NUM, @CDF_NOMABRG, @CDF_UNIT_NUM, @CDF_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDF_NUMERO_PK, C"& _ 
                "DF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_"& _ 
                "NUM, CDF_TEXTE FROM theriaque.CDF_CODIF WHERE (CDF_CODE_PK = @CDF_CODE_PK) AND ("& _ 
                "CDF_NUMERO_PK = @CDF_NUMERO_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[CDF_CODIF] SET [CDF_NUMERO_PK] = @CDF_NUMERO_PK, [CDF_CODE_PK"& _ 
                "] = @CDF_CODE_PK, [CDF_NOM] = @CDF_NOM, [CDF_DATECR] = @CDF_DATECR, [CDF_DATEMJ]"& _ 
                " = @CDF_DATEMJ, [CDF_VAL_NUM] = @CDF_VAL_NUM, [CDF_NOMABRG] = @CDF_NOMABRG, [CDF"& _ 
                "_UNIT_NUM] = @CDF_UNIT_NUM, [CDF_TEXTE] = @CDF_TEXTE WHERE (([CDF_NUMERO_PK] = @"& _ 
                "Original_CDF_NUMERO_PK) AND ([CDF_CODE_PK] = @Original_CDF_CODE_PK) AND ([CDF_NO"& _ 
                "M] = @Original_CDF_NOM) AND ([CDF_DATECR] = @Original_CDF_DATECR) AND ((@IsNull_"& _ 
                "CDF_DATEMJ = 1 AND [CDF_DATEMJ] IS NULL) OR ([CDF_DATEMJ] = @Original_CDF_DATEMJ"& _ 
                ")) AND ((@IsNull_CDF_VAL_NUM = 1 AND [CDF_VAL_NUM] IS NULL) OR ([CDF_VAL_NUM] = "& _ 
                "@Original_CDF_VAL_NUM)) AND ([CDF_NOMABRG] = @Original_CDF_NOMABRG) AND ([CDF_UN"& _ 
                "IT_NUM] = @Original_CDF_UNIT_NUM));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM,"& _ 
                " CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM "& _ 
                "theriaque.CDF_CODIF WHERE (CDF_CODE_PK = @CDF_CODE_PK) AND (CDF_NUMERO_PK = @CDF"& _ 
                "_NUMERO_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CDF_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NUMERO_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NUMERO_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CDF_VAL_NUM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_VAL_NUM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 10, "CDF_VAL_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_NOMABRG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_NOMABRG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CDF_UNIT_NUM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CDF_UNIT_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CDF_NUMERO_PK, CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, "& _ 
                "CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE FROM theriaque.CDF_CODIF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.CDF_CODIFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.CDF_CODIFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.CDF_CODIFDataTable = New dsTheriaque_Pos_Min_Max.CDF_CODIFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.CDF_CODIFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "CDF_CODIF")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CDF_NUMERO_PK As String, ByVal Original_CDF_CODE_PK As String, ByVal Original_CDF_NOM As String, ByVal Original_CDF_DATECR As Date, ByVal Original_CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal Original_CDF_NOMABRG As String, ByVal Original_CDF_UNIT_NUM As String) As Integer
            If (Original_CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CDF_NUMERO_PK,String)
            End If
            If (Original_CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CDF_CODE_PK,String)
            End If
            If (Original_CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CDF_NOM,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CDF_DATECR,Date)
            If (Original_CDF_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CDF_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_VAL_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CDF_VAL_NUM.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOMABRG")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CDF_NOMABRG,String)
            End If
            If (Original_CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_UNIT_NUM")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CDF_UNIT_NUM,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CDF_NUMERO_PK As String, ByVal CDF_CODE_PK As String, ByVal CDF_NOM As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String) As Integer
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CDF_NUMERO_PK,String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CDF_CODE_PK,String)
            End If
            If (CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CDF_NOM,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CDF_DATECR,Date)
            If (CDF_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CDF_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CDF_VAL_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CDF_VAL_NUM.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOMABRG")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CDF_NOMABRG,String)
            End If
            If (CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_UNIT_NUM")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CDF_UNIT_NUM,String)
            End If
            If (CDF_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CDF_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CDF_NUMERO_PK As String,  _
                    ByVal CDF_CODE_PK As String,  _
                    ByVal CDF_NOM As String,  _
                    ByVal CDF_DATECR As Date,  _
                    ByVal CDF_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal CDF_VAL_NUM As Global.System.Nullable(Of Decimal),  _
                    ByVal CDF_NOMABRG As String,  _
                    ByVal CDF_UNIT_NUM As String,  _
                    ByVal CDF_TEXTE As String,  _
                    ByVal Original_CDF_NUMERO_PK As String,  _
                    ByVal Original_CDF_CODE_PK As String,  _
                    ByVal Original_CDF_NOM As String,  _
                    ByVal Original_CDF_DATECR As Date,  _
                    ByVal Original_CDF_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_CDF_VAL_NUM As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CDF_NOMABRG As String,  _
                    ByVal Original_CDF_UNIT_NUM As String) As Integer
            If (CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CDF_NUMERO_PK,String)
            End If
            If (CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CDF_CODE_PK,String)
            End If
            If (CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CDF_NOM,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CDF_DATECR,Date)
            If (CDF_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CDF_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CDF_VAL_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CDF_VAL_NUM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_NOMABRG")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CDF_NOMABRG,String)
            End If
            If (CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CDF_UNIT_NUM")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CDF_UNIT_NUM,String)
            End If
            If (CDF_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CDF_TEXTE,String)
            End If
            If (Original_CDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CDF_NUMERO_PK,String)
            End If
            If (Original_CDF_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CDF_CODE_PK,String)
            End If
            If (Original_CDF_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CDF_NOM,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CDF_DATECR,Date)
            If (Original_CDF_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CDF_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_VAL_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CDF_VAL_NUM.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CDF_NOMABRG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_NOMABRG")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CDF_NOMABRG,String)
            End If
            If (Original_CDF_UNIT_NUM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CDF_UNIT_NUM")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CDF_UNIT_NUM,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CDF_NOM As String, ByVal CDF_DATECR As Date, ByVal CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal CDF_NOMABRG As String, ByVal CDF_UNIT_NUM As String, ByVal CDF_TEXTE As String, ByVal Original_CDF_NUMERO_PK As String, ByVal Original_CDF_CODE_PK As String, ByVal Original_CDF_NOM As String, ByVal Original_CDF_DATECR As Date, ByVal Original_CDF_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CDF_VAL_NUM As Global.System.Nullable(Of Decimal), ByVal Original_CDF_NOMABRG As String, ByVal Original_CDF_UNIT_NUM As String) As Integer
            Return Me.Update(Original_CDF_NUMERO_PK, Original_CDF_CODE_PK, CDF_NOM, CDF_DATECR, CDF_DATEMJ, CDF_VAL_NUM, CDF_NOMABRG, CDF_UNIT_NUM, CDF_TEXTE, Original_CDF_NUMERO_PK, Original_CDF_CODE_PK, Original_CDF_NOM, Original_CDF_DATECR, Original_CDF_DATEMJ, Original_CDF_VAL_NUM, Original_CDF_NOMABRG, Original_CDF_UNIT_NUM)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMM_POSOLOGIE_MIN_MAXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMM_POSOLOGIE_MIN_MAX"
            tableMapping.ColumnMappings.Add("FPOMM_CODE_SQ_PK", "FPOMM_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FPOMM_DATECR", "FPOMM_DATECR")
            tableMapping.ColumnMappings.Add("FPOMM_DATEMJ ", "FPOMM_DATEMJ ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMM_POSOLOGIE_MIN_MAX] WHERE (([FPOMM_CODE_SQ_PK] = @O"& _ 
                "riginal_FPOMM_CODE_SQ_PK) AND ([FPOMM_DATECR] = @Original_FPOMM_DATECR) AND ((@I"& _ 
                "sNull_FPOMM_DATEMJ_ = 1 AND [FPOMM_DATEMJ ] IS NULL) OR ([FPOMM_DATEMJ ] = @Orig"& _ 
                "inal_FPOMM_DATEMJ_)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMM_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMM_DATEMJ_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATEMJ ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMM_DATEMJ_", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATEMJ ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMM_POSOLOGIE_MIN_MAX] ([FPOMM_CODE_SQ_PK], [FPOMM_DAT"& _ 
                "ECR], [FPOMM_DATEMJ ]) VALUES (@FPOMM_CODE_SQ_PK, @FPOMM_DATECR, @FPOMM_DATEMJ_)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMM_CODE_SQ_PK, FPOMM_DATECR, [FPOMM_DATEMJ ] FROM theriaque.FPOMM_P"& _ 
                "OSOLOGIE_MIN_MAX WHERE (FPOMM_CODE_SQ_PK = @FPOMM_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_DATEMJ_", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATEMJ ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMM_POSOLOGIE_MIN_MAX] SET [FPOMM_CODE_SQ_PK] = @FPOMM_CODE"& _ 
                "_SQ_PK, [FPOMM_DATECR] = @FPOMM_DATECR, [FPOMM_DATEMJ ] = @FPOMM_DATEMJ_ WHERE ("& _ 
                "([FPOMM_CODE_SQ_PK] = @Original_FPOMM_CODE_SQ_PK) AND ([FPOMM_DATECR] = @Origina"& _ 
                "l_FPOMM_DATECR) AND ((@IsNull_FPOMM_DATEMJ_ = 1 AND [FPOMM_DATEMJ ] IS NULL) OR "& _ 
                "([FPOMM_DATEMJ ] = @Original_FPOMM_DATEMJ_)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMM_CODE_SQ_PK, FPOMM_D"& _ 
                "ATECR, [FPOMM_DATEMJ ] FROM theriaque.FPOMM_POSOLOGIE_MIN_MAX WHERE (FPOMM_CODE_"& _ 
                "SQ_PK = @FPOMM_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_DATEMJ_", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATEMJ ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMM_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMM_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMM_DATEMJ_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATEMJ ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMM_DATEMJ_", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_DATEMJ ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMM_CODE_SQ_PK, FPOMM_DATECR, [FPOMM_DATEMJ ] FROM theriaque.FPOMM_POSOL"& _ 
                "OGIE_MIN_MAX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMM_CODE_SQ_PK, FPOMM_DATECR, [FPOMM_DATEMJ ] FROM theriaque.FPOMM_POSOL"& _ 
                "OGIE_MIN_MAX "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where FPOMM_CODE_SQ_PK = @FPOMM_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMM_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMM_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable = New dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable, ByVal FPOMM_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMM_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMM_CODE_SQ_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMM_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable = New dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMM_POSOLOGIE_MIN_MAXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMM_POSOLOGIE_MIN_MAX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMM_CODE_SQ_PK As Integer, ByVal Original_FPOMM_DATECR As Date, ByVal Original_FPOMM_DATEMJ_ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMM_CODE_SQ_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMM_DATECR,Date)
            If (Original_FPOMM_DATEMJ_.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPOMM_DATEMJ_.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMM_CODE_SQ_PK As Integer, ByVal FPOMM_DATECR As Date, ByVal FPOMM_DATEMJ_ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMM_CODE_SQ_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMM_DATECR,Date)
            If (FPOMM_DATEMJ_.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOMM_DATEMJ_.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMM_CODE_SQ_PK As Integer, ByVal FPOMM_DATECR As Date, ByVal FPOMM_DATEMJ_ As Global.System.Nullable(Of Date), ByVal Original_FPOMM_CODE_SQ_PK As Integer, ByVal Original_FPOMM_DATECR As Date, ByVal Original_FPOMM_DATEMJ_ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMM_CODE_SQ_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMM_DATECR,Date)
            If (FPOMM_DATEMJ_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOMM_DATEMJ_.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMM_CODE_SQ_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOMM_DATECR,Date)
            If (Original_FPOMM_DATEMJ_.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPOMM_DATEMJ_.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMM_DATECR As Date, ByVal FPOMM_DATEMJ_ As Global.System.Nullable(Of Date), ByVal Original_FPOMM_CODE_SQ_PK As Integer, ByVal Original_FPOMM_DATECR As Date, ByVal Original_FPOMM_DATEMJ_ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FPOMM_CODE_SQ_PK, FPOMM_DATECR, FPOMM_DATEMJ_, Original_FPOMM_CODE_SQ_PK, Original_FPOMM_DATECR, Original_FPOMM_DATEMJ_)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMCCH_POSOMINMAX_CLCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMCCH_POSOMINMAX_CLCH"
            tableMapping.ColumnMappings.Add("FPOMMCCH_FPOMM_CODE_FK_PK", "FPOMMCCH_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMCCH_CCH_CODE_FK_PK", "FPOMMCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMCCH_POSOMINMAX_CLCH] WHERE (([FPOMMCCH_FPOMM_CODE_F"& _ 
                "K_PK] = @Original_FPOMMCCH_FPOMM_CODE_FK_PK) AND ([FPOMMCCH_CCH_CODE_FK_PK] = @O"& _ 
                "riginal_FPOMMCCH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMCCH_POSOMINMAX_CLCH] ([FPOMMCCH_FPOMM_CODE_FK_PK], "& _ 
                "[FPOMMCCH_CCH_CODE_FK_PK]) VALUES (@FPOMMCCH_FPOMM_CODE_FK_PK, @FPOMMCCH_CCH_COD"& _ 
                "E_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMCCH_FPOMM_CODE_FK_PK, FPOMMCCH_CCH_CODE_FK_PK FROM theria"& _ 
                "que.FPOMMCCH_POSOMINMAX_CLCH WHERE (FPOMMCCH_CCH_CODE_FK_PK = @FPOMMCCH_CCH_CODE"& _ 
                "_FK_PK) AND (FPOMMCCH_FPOMM_CODE_FK_PK = @FPOMMCCH_FPOMM_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMCCH_POSOMINMAX_CLCH] SET [FPOMMCCH_FPOMM_CODE_FK_PK] = @"& _ 
                "FPOMMCCH_FPOMM_CODE_FK_PK, [FPOMMCCH_CCH_CODE_FK_PK] = @FPOMMCCH_CCH_CODE_FK_PK "& _ 
                "WHERE (([FPOMMCCH_FPOMM_CODE_FK_PK] = @Original_FPOMMCCH_FPOMM_CODE_FK_PK) AND ("& _ 
                "[FPOMMCCH_CCH_CODE_FK_PK] = @Original_FPOMMCCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMCC"& _ 
                "H_FPOMM_CODE_FK_PK, FPOMMCCH_CCH_CODE_FK_PK FROM theriaque.FPOMMCCH_POSOMINMAX_C"& _ 
                "LCH WHERE (FPOMMCCH_CCH_CODE_FK_PK = @FPOMMCCH_CCH_CODE_FK_PK) AND (FPOMMCCH_FPO"& _ 
                "MM_CODE_FK_PK = @FPOMMCCH_FPOMM_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMCCH_FPOMM_CODE_FK_PK, FPOMMCCH_CCH_CODE_FK_PK FROM theriaque.FPOMMCCH"& _ 
                "_POSOMINMAX_CLCH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMCCH_FPOMM_CODE_FK_PK, FPOMMCCH_CCH_CODE_FK_PK FROM theriaque.FPOMMCCH"& _ 
                "_POSOMINMAX_CLCH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FPOMMCCH_FPOMM_CODE_FK_PK = @FPOMMCCH_FPOMM_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCCH_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable = New dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable, ByVal FPOMMCCH_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMCCH_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMCCH_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMCCH_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable = New dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMCCH_POSOMINMAX_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMCCH_POSOMINMAX_CLCH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMCCH_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMCCH_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMCCH_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMCCH_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMCCH_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMCCH_CCH_CODE_FK_PK As String, ByVal Original_FPOMMCCH_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMCCH_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOMMCCH_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMMCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPOMMCCH_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMCCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPOMMCCH_FPOMM_CODE_FK_PK, Original_FPOMMCCH_CCH_CODE_FK_PK, Original_FPOMMCCH_FPOMM_CODE_FK_PK, Original_FPOMMCCH_CCH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMCPH_POSOMINMAX_CLPHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMCPH_POSOMINMAX_CLPH"
            tableMapping.ColumnMappings.Add("FPOMMCPH_FPO_CODE_FK_PK", "FPOMMCPH_FPO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMCPH_CPH_CODE_FK_PK", "FPOMMCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMCPH_POSOMINMAX_CLPH] WHERE (([FPOMMCPH_FPO_CODE_FK_"& _ 
                "PK] = @Original_FPOMMCPH_FPO_CODE_FK_PK) AND ([FPOMMCPH_CPH_CODE_FK_PK] = @Origi"& _ 
                "nal_FPOMMCPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMCPH_POSOMINMAX_CLPH] ([FPOMMCPH_FPO_CODE_FK_PK], [F"& _ 
                "POMMCPH_CPH_CODE_FK_PK]) VALUES (@FPOMMCPH_FPO_CODE_FK_PK, @FPOMMCPH_CPH_CODE_FK"& _ 
                "_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMCPH_FPO_CODE_FK_PK, FPOMMCPH_CPH_CODE_FK_PK FROM theriaque.FP"& _ 
                "OMMCPH_POSOMINMAX_CLPH WHERE (FPOMMCPH_CPH_CODE_FK_PK = @FPOMMCPH_CPH_CODE_FK_PK"& _ 
                ") AND (FPOMMCPH_FPO_CODE_FK_PK = @FPOMMCPH_FPO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMCPH_POSOMINMAX_CLPH] SET [FPOMMCPH_FPO_CODE_FK_PK] = @FP"& _ 
                "OMMCPH_FPO_CODE_FK_PK, [FPOMMCPH_CPH_CODE_FK_PK] = @FPOMMCPH_CPH_CODE_FK_PK WHER"& _ 
                "E (([FPOMMCPH_FPO_CODE_FK_PK] = @Original_FPOMMCPH_FPO_CODE_FK_PK) AND ([FPOMMCP"& _ 
                "H_CPH_CODE_FK_PK] = @Original_FPOMMCPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMCPH_FPO_CO"& _ 
                "DE_FK_PK, FPOMMCPH_CPH_CODE_FK_PK FROM theriaque.FPOMMCPH_POSOMINMAX_CLPH WHERE "& _ 
                "(FPOMMCPH_CPH_CODE_FK_PK = @FPOMMCPH_CPH_CODE_FK_PK) AND (FPOMMCPH_FPO_CODE_FK_P"& _ 
                "K = @FPOMMCPH_FPO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMCPH_FPO_CODE_FK_PK, FPOMMCPH_CPH_CODE_FK_PK FROM theriaque.FPOMMCPH_P"& _ 
                "OSOMINMAX_CLPH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMCPH_FPO_CODE_FK_PK, FPOMMCPH_CPH_CODE_FK_PK FROM theriaque.FPOMMCPH_P"& _ 
                "OSOMINMAX_CLPH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FPOMMCPH_FPO_CODE_FK_PK = @FPOMMCPH_FPO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMCPH_FPO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable = New dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable, ByVal FPOMMCPH_FPO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMCPH_FPO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMCPH_FPO_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMCPH_FPO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable = New dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMCPH_POSOMINMAX_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMCPH_POSOMINMAX_CLPH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMCPH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOMMCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMCPH_FPO_CODE_FK_PK,Integer)
            If (Original_FPOMMCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMCPH_FPO_CODE_FK_PK As Integer, ByVal FPOMMCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMCPH_FPO_CODE_FK_PK,Integer)
            If (FPOMMCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMCPH_FPO_CODE_FK_PK As Integer, ByVal FPOMMCPH_CPH_CODE_FK_PK As String, ByVal Original_FPOMMCPH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOMMCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMCPH_FPO_CODE_FK_PK,Integer)
            If (FPOMMCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOMMCPH_FPO_CODE_FK_PK,Integer)
            If (Original_FPOMMCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMMCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPOMMCPH_FPO_CODE_FK_PK As Integer, ByVal Original_FPOMMCPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPOMMCPH_FPO_CODE_FK_PK, Original_FPOMMCPH_CPH_CODE_FK_PK, Original_FPOMMCPH_FPO_CODE_FK_PK, Original_FPOMMCPH_CPH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMPR_POSOMINMAX_PRODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMPR_POSOMINMAX_PROD"
            tableMapping.ColumnMappings.Add("FPOMMPR_FPOMM_CODE_FK_PK", "FPOMMPR_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMPR_PR_CODE_FK_PK", "FPOMMPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMPR_POSOMINMAX_PROD] WHERE (([FPOMMPR_FPOMM_CODE_FK_"& _ 
                "PK] = @Original_FPOMMPR_FPOMM_CODE_FK_PK) AND ([FPOMMPR_PR_CODE_FK_PK] = @Origin"& _ 
                "al_FPOMMPR_PR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMPR_POSOMINMAX_PROD] ([FPOMMPR_FPOMM_CODE_FK_PK], [F"& _ 
                "POMMPR_PR_CODE_FK_PK]) VALUES (@FPOMMPR_FPOMM_CODE_FK_PK, @FPOMMPR_PR_CODE_FK_PK"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMPR_FPOMM_CODE_FK_PK, FPOMMPR_PR_CODE_FK_PK FROM theriaque.FPOMMP"& _ 
                "R_POSOMINMAX_PROD WHERE (FPOMMPR_FPOMM_CODE_FK_PK = @FPOMMPR_FPOMM_CODE_FK_PK) A"& _ 
                "ND (FPOMMPR_PR_CODE_FK_PK = @FPOMMPR_PR_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMPR_POSOMINMAX_PROD] SET [FPOMMPR_FPOMM_CODE_FK_PK] = @FP"& _ 
                "OMMPR_FPOMM_CODE_FK_PK, [FPOMMPR_PR_CODE_FK_PK] = @FPOMMPR_PR_CODE_FK_PK WHERE ("& _ 
                "([FPOMMPR_FPOMM_CODE_FK_PK] = @Original_FPOMMPR_FPOMM_CODE_FK_PK) AND ([FPOMMPR_"& _ 
                "PR_CODE_FK_PK] = @Original_FPOMMPR_PR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMPR_FPOMM_CODE_F"& _ 
                "K_PK, FPOMMPR_PR_CODE_FK_PK FROM theriaque.FPOMMPR_POSOMINMAX_PROD WHERE (FPOMMP"& _ 
                "R_FPOMM_CODE_FK_PK = @FPOMMPR_FPOMM_CODE_FK_PK) AND (FPOMMPR_PR_CODE_FK_PK = @FP"& _ 
                "OMMPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMPR_FPOMM_CODE_FK_PK, FPOMMPR_PR_CODE_FK_PK FROM theriaque.FPOMMPR_POS"& _ 
                "OMINMAX_PROD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMPR_FPOMM_CODE_FK_PK, FPOMMPR_PR_CODE_FK_PK FROM theriaque.FPOMMPR_POS"& _ 
                "OMINMAX_PROD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FPOMMPR_FPOMM_CODE_FK_PK = @FPOMMPR_FPOMM_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMPR_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable = New dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable, ByVal FPOMMPR_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMPR_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMPR_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMPR_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable = New dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMPR_POSOMINMAX_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMPR_POSOMINMAX_PROD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMPR_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMPR_PR_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMPR_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMPR_PR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMPR_PR_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMPR_PR_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMPR_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMPR_PR_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMPR_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMPR_PR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMPR_PR_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMPR_PR_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMPR_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMPR_PR_CODE_FK_PK As String, ByVal Original_FPOMMPR_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMPR_PR_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMPR_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMPR_PR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMPR_PR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMPR_PR_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOMMPR_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMPR_PR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMPR_PR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMMPR_PR_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPOMMPR_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMPR_PR_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPOMMPR_FPOMM_CODE_FK_PK, Original_FPOMMPR_PR_CODE_FK_PK, Original_FPOMMPR_FPOMM_CODE_FK_PK, Original_FPOMMPR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CPH_CLASSEPHARMTHERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CPH_CLASSEPHARMTHER"
            tableMapping.ColumnMappings.Add("CPH_CODE_PK", "CPH_CODE_PK")
            tableMapping.ColumnMappings.Add("CPH_CPH_CODE_FK", "CPH_CPH_CODE_FK")
            tableMapping.ColumnMappings.Add("CPH_NOM", "CPH_NOM")
            tableMapping.ColumnMappings.Add("CPH_DATECR", "CPH_DATECR")
            tableMapping.ColumnMappings.Add("CPH_DATEMJ", "CPH_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[CPH_CLASSEPHARMTHER] WHERE (([CPH_CODE_PK] = @Original_C"& _ 
                "PH_CODE_PK) AND ((@IsNull_CPH_CPH_CODE_FK = 1 AND [CPH_CPH_CODE_FK] IS NULL) OR "& _ 
                "([CPH_CPH_CODE_FK] = @Original_CPH_CPH_CODE_FK)) AND ([CPH_NOM] = @Original_CPH_"& _ 
                "NOM) AND ([CPH_DATECR] = @Original_CPH_DATECR) AND ((@IsNull_CPH_DATEMJ = 1 AND "& _ 
                "[CPH_DATEMJ] IS NULL) OR ([CPH_DATEMJ] = @Original_CPH_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CPH_CPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_CPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CPH_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[CPH_CLASSEPHARMTHER] ([CPH_CODE_PK], [CPH_CPH_CODE_FK], "& _ 
                "[CPH_NOM], [CPH_DATECR], [CPH_DATEMJ]) VALUES (@CPH_CODE_PK, @CPH_CPH_CODE_FK, @"& _ 
                "CPH_NOM, @CPH_DATECR, @CPH_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NO"& _ 
                "M, CPH_DATECR, CPH_DATEMJ FROM theriaque.CPH_CLASSEPHARMTHER WHERE (CPH_CODE_PK "& _ 
                "= @CPH_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_CPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[CPH_CLASSEPHARMTHER] SET [CPH_CODE_PK] = @CPH_CODE_PK, [CPH_C"& _ 
                "PH_CODE_FK] = @CPH_CPH_CODE_FK, [CPH_NOM] = @CPH_NOM, [CPH_DATECR] = @CPH_DATECR"& _ 
                ", [CPH_DATEMJ] = @CPH_DATEMJ WHERE (([CPH_CODE_PK] = @Original_CPH_CODE_PK) AND "& _ 
                "((@IsNull_CPH_CPH_CODE_FK = 1 AND [CPH_CPH_CODE_FK] IS NULL) OR ([CPH_CPH_CODE_F"& _ 
                "K] = @Original_CPH_CPH_CODE_FK)) AND ([CPH_NOM] = @Original_CPH_NOM) AND ([CPH_D"& _ 
                "ATECR] = @Original_CPH_DATECR) AND ((@IsNull_CPH_DATEMJ = 1 AND [CPH_DATEMJ] IS "& _ 
                "NULL) OR ([CPH_DATEMJ] = @Original_CPH_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CPH_CODE_PK, CPH_CPH_C"& _ 
                "ODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ FROM theriaque.CPH_CLASSEPHARMTHER WHERE"& _ 
                " (CPH_CODE_PK = @CPH_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_CPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CPH_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CPH_CPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_CPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_CPH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CPH_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CPH_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CPH_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ FROM theriaq"& _ 
                "ue.CPH_CLASSEPHARMTHER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.CPH_CLASSEPHARMTHERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.CPH_CLASSEPHARMTHERDataTable = New dsTheriaque_Pos_Min_Max.CPH_CLASSEPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.CPH_CLASSEPHARMTHERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "CPH_CLASSEPHARMTHER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CPH_CODE_PK As String, ByVal Original_CPH_CPH_CODE_FK As String, ByVal Original_CPH_NOM As String, ByVal Original_CPH_DATECR As Date, ByVal Original_CPH_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (Original_CPH_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CPH_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CPH_CODE_PK,String)
            End If
            If (Original_CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CPH_CPH_CODE_FK,String)
            End If
            If (Original_CPH_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CPH_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CPH_NOM,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CPH_DATECR,Date)
            If (Original_CPH_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CPH_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CPH_CODE_PK As String, ByVal CPH_CPH_CODE_FK As String, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (CPH_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CPH_CODE_PK,String)
            End If
            If (CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CPH_CPH_CODE_FK,String)
            End If
            If (CPH_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CPH_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CPH_NOM,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CPH_DATECR,Date)
            If (CPH_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CPH_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CPH_CODE_PK As String, ByVal CPH_CPH_CODE_FK As String, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CPH_CODE_PK As String, ByVal Original_CPH_CPH_CODE_FK As String, ByVal Original_CPH_NOM As String, ByVal Original_CPH_DATECR As Date, ByVal Original_CPH_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            If (CPH_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CPH_CODE_PK,String)
            End If
            If (CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CPH_CPH_CODE_FK,String)
            End If
            If (CPH_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CPH_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CPH_NOM,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CPH_DATECR,Date)
            If (CPH_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CPH_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_CPH_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CPH_CODE_PK,String)
            End If
            If (Original_CPH_CPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CPH_CPH_CODE_FK,String)
            End If
            If (Original_CPH_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CPH_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CPH_NOM,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CPH_DATECR,Date)
            If (Original_CPH_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CPH_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CPH_CPH_CODE_FK As String, ByVal CPH_NOM As String, ByVal CPH_DATECR As Date, ByVal CPH_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_CPH_CODE_PK As String, ByVal Original_CPH_CPH_CODE_FK As String, ByVal Original_CPH_NOM As String, ByVal Original_CPH_DATECR As Date, ByVal Original_CPH_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CPH_CODE_PK, CPH_CPH_CODE_FK, CPH_NOM, CPH_DATECR, CPH_DATEMJ, Original_CPH_CODE_PK, Original_CPH_CPH_CODE_FK, Original_CPH_NOM, Original_CPH_DATECR, Original_CPH_DATEMJ)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAC_SUBACTIVETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAC_SUBACTIVE"
            tableMapping.ColumnMappings.Add("SAC_CODE_SQ_PK", "SAC_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SAC_CDF_ORN_CODE_FK", "SAC_CDF_ORN_CODE_FK")
            tableMapping.ColumnMappings.Add("SAC_SAU_CODE_FK", "SAC_SAU_CODE_FK")
            tableMapping.ColumnMappings.Add("SAC_GSAC_CODE_FK", "SAC_GSAC_CODE_FK")
            tableMapping.ColumnMappings.Add("SAC_NOM", "SAC_NOM")
            tableMapping.ColumnMappings.Add("SAC_NOMA", "SAC_NOMA")
            tableMapping.ColumnMappings.Add("SAC_DATECR", "SAC_DATECR")
            tableMapping.ColumnMappings.Add("SAC_DATEMJ", "SAC_DATEMJ")
            tableMapping.ColumnMappings.Add("SAC_ETAT_COMMER", "SAC_ETAT_COMMER")
            tableMapping.ColumnMappings.Add("SAC_DATECOMMER", "SAC_DATECOMMER")
            tableMapping.ColumnMappings.Add("SAC_CODE_REF", "SAC_CODE_REF")
            tableMapping.ColumnMappings.Add("SAC_LIBELLE_REF", "SAC_LIBELLE_REF")
            tableMapping.ColumnMappings.Add("SAC_TYPE_REF", "SAC_TYPE_REF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SAC_SUBACTIVE] WHERE (([SAC_CODE_SQ_PK] = @Original_SAC_"& _ 
                "CODE_SQ_PK) AND ((@IsNull_SAC_CDF_ORN_CODE_FK = 1 AND [SAC_CDF_ORN_CODE_FK] IS N"& _ 
                "ULL) OR ([SAC_CDF_ORN_CODE_FK] = @Original_SAC_CDF_ORN_CODE_FK)) AND ((@IsNull_S"& _ 
                "AC_SAU_CODE_FK = 1 AND [SAC_SAU_CODE_FK] IS NULL) OR ([SAC_SAU_CODE_FK] = @Origi"& _ 
                "nal_SAC_SAU_CODE_FK)) AND ((@IsNull_SAC_GSAC_CODE_FK = 1 AND [SAC_GSAC_CODE_FK] "& _ 
                "IS NULL) OR ([SAC_GSAC_CODE_FK] = @Original_SAC_GSAC_CODE_FK)) AND ([SAC_NOM] = "& _ 
                "@Original_SAC_NOM) AND ((@IsNull_SAC_NOMA = 1 AND [SAC_NOMA] IS NULL) OR ([SAC_N"& _ 
                "OMA] = @Original_SAC_NOMA)) AND ([SAC_DATECR] = @Original_SAC_DATECR) AND ((@IsN"& _ 
                "ull_SAC_DATEMJ = 1 AND [SAC_DATEMJ] IS NULL) OR ([SAC_DATEMJ] = @Original_SAC_DA"& _ 
                "TEMJ)) AND ((@IsNull_SAC_ETAT_COMMER = 1 AND [SAC_ETAT_COMMER] IS NULL) OR ([SAC"& _ 
                "_ETAT_COMMER] = @Original_SAC_ETAT_COMMER)) AND ((@IsNull_SAC_DATECOMMER = 1 AND"& _ 
                " [SAC_DATECOMMER] IS NULL) OR ([SAC_DATECOMMER] = @Original_SAC_DATECOMMER)) AND"& _ 
                " ((@IsNull_SAC_CODE_REF = 1 AND [SAC_CODE_REF] IS NULL) OR ([SAC_CODE_REF] = @Or"& _ 
                "iginal_SAC_CODE_REF)) AND ((@IsNull_SAC_LIBELLE_REF = 1 AND [SAC_LIBELLE_REF] IS"& _ 
                " NULL) OR ([SAC_LIBELLE_REF] = @Original_SAC_LIBELLE_REF)) AND ((@IsNull_SAC_TYP"& _ 
                "E_REF = 1 AND [SAC_TYPE_REF] IS NULL) OR ([SAC_TYPE_REF] = @Original_SAC_TYPE_RE"& _ 
                "F)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_NOMA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATECOMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_TYPE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SAC_SUBACTIVE] ([SAC_CODE_SQ_PK], [SAC_CDF_ORN_CODE_FK],"& _ 
                " [SAC_SAU_CODE_FK], [SAC_GSAC_CODE_FK], [SAC_NOM], [SAC_NOMA], [SAC_DATECR], [SA"& _ 
                "C_DATEMJ], [SAC_ETAT_COMMER], [SAC_DATECOMMER], [SAC_CODE_REF], [SAC_LIBELLE_REF"& _ 
                "], [SAC_TYPE_REF]) VALUES (@SAC_CODE_SQ_PK, @SAC_CDF_ORN_CODE_FK, @SAC_SAU_CODE_"& _ 
                "FK, @SAC_GSAC_CODE_FK, @SAC_NOM, @SAC_NOMA, @SAC_DATECR, @SAC_DATEMJ, @SAC_ETAT_"& _ 
                "COMMER, @SAC_DATECOMMER, @SAC_CODE_REF, @SAC_LIBELLE_REF, @SAC_TYPE_REF);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NO"& _ 
                "M, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_R"& _ 
                "EF, SAC_LIBELLE_REF, SAC_TYPE_REF FROM theriaque.SAC_SUBACTIVE WHERE (SAC_CODE_S"& _ 
                "Q_PK = @SAC_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SAC_SUBACTIVE] SET [SAC_CODE_SQ_PK] = @SAC_CODE_SQ_PK, [SAC_C"& _ 
                "DF_ORN_CODE_FK] = @SAC_CDF_ORN_CODE_FK, [SAC_SAU_CODE_FK] = @SAC_SAU_CODE_FK, [S"& _ 
                "AC_GSAC_CODE_FK] = @SAC_GSAC_CODE_FK, [SAC_NOM] = @SAC_NOM, [SAC_NOMA] = @SAC_NO"& _ 
                "MA, [SAC_DATECR] = @SAC_DATECR, [SAC_DATEMJ] = @SAC_DATEMJ, [SAC_ETAT_COMMER] = "& _ 
                "@SAC_ETAT_COMMER, [SAC_DATECOMMER] = @SAC_DATECOMMER, [SAC_CODE_REF] = @SAC_CODE"& _ 
                "_REF, [SAC_LIBELLE_REF] = @SAC_LIBELLE_REF, [SAC_TYPE_REF] = @SAC_TYPE_REF WHERE"& _ 
                " (([SAC_CODE_SQ_PK] = @Original_SAC_CODE_SQ_PK) AND ((@IsNull_SAC_CDF_ORN_CODE_F"& _ 
                "K = 1 AND [SAC_CDF_ORN_CODE_FK] IS NULL) OR ([SAC_CDF_ORN_CODE_FK] = @Original_S"& _ 
                "AC_CDF_ORN_CODE_FK)) AND ((@IsNull_SAC_SAU_CODE_FK = 1 AND [SAC_SAU_CODE_FK] IS "& _ 
                "NULL) OR ([SAC_SAU_CODE_FK] = @Original_SAC_SAU_CODE_FK)) AND ((@IsNull_SAC_GSAC"& _ 
                "_CODE_FK = 1 AND [SAC_GSAC_CODE_FK] IS NULL) OR ([SAC_GSAC_CODE_FK] = @Original_"& _ 
                "SAC_GSAC_CODE_FK)) AND ([SAC_NOM] = @Original_SAC_NOM) AND ((@IsNull_SAC_NOMA = "& _ 
                "1 AND [SAC_NOMA] IS NULL) OR ([SAC_NOMA] = @Original_SAC_NOMA)) AND ([SAC_DATECR"& _ 
                "] = @Original_SAC_DATECR) AND ((@IsNull_SAC_DATEMJ = 1 AND [SAC_DATEMJ] IS NULL)"& _ 
                " OR ([SAC_DATEMJ] = @Original_SAC_DATEMJ)) AND ((@IsNull_SAC_ETAT_COMMER = 1 AND"& _ 
                " [SAC_ETAT_COMMER] IS NULL) OR ([SAC_ETAT_COMMER] = @Original_SAC_ETAT_COMMER)) "& _ 
                "AND ((@IsNull_SAC_DATECOMMER = 1 AND [SAC_DATECOMMER] IS NULL) OR ([SAC_DATECOMM"& _ 
                "ER] = @Original_SAC_DATECOMMER)) AND ((@IsNull_SAC_CODE_REF = 1 AND [SAC_CODE_RE"& _ 
                "F] IS NULL) OR ([SAC_CODE_REF] = @Original_SAC_CODE_REF)) AND ((@IsNull_SAC_LIBE"& _ 
                "LLE_REF = 1 AND [SAC_LIBELLE_REF] IS NULL) OR ([SAC_LIBELLE_REF] = @Original_SAC"& _ 
                "_LIBELLE_REF)) AND ((@IsNull_SAC_TYPE_REF = 1 AND [SAC_TYPE_REF] IS NULL) OR ([S"& _ 
                "AC_TYPE_REF] = @Original_SAC_TYPE_REF)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAC_CODE_SQ_PK, SAC_CDF_ORN_CO"& _ 
                "DE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NOM, SAC_NOMA, SAC_DATECR, SAC_DAT"& _ 
                "EMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_REF, SAC_LIBELLE_REF, SAC_TYPE_RE"& _ 
                "F FROM theriaque.SAC_SUBACTIVE WHERE (SAC_CODE_SQ_PK = @SAC_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CDF_ORN_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CDF_ORN_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_SAU_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_SAU_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_GSAC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_GSAC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_NOMA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_NOMA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_NOMA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_ETAT_COMMER", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_ETAT_COMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_DATECOMMER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_DATECOMMER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_DATECOMMER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_CODE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_CODE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_CODE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_LIBELLE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_LIBELLE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SAC_TYPE_REF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SAC_TYPE_REF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SAC_TYPE_REF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SA"& _ 
                "C_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CO"& _ 
                "DE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF FROM theriaque.SAC_SUBACTIVE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.SAC_SUBACTIVEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.SAC_SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.SAC_SUBACTIVEDataTable = New dsTheriaque_Pos_Min_Max.SAC_SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.SAC_SUBACTIVEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "SAC_SUBACTIVE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SAC_CODE_SQ_PK As Integer, ByVal Original_SAC_CDF_ORN_CODE_FK As String, ByVal Original_SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal Original_SAC_NOM As String, ByVal Original_SAC_NOMA As String, ByVal Original_SAC_DATECR As Date, ByVal Original_SAC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_SAC_ETAT_COMMER As String, ByVal Original_SAC_DATECOMMER As Global.System.Nullable(Of Date), ByVal Original_SAC_CODE_REF As String, ByVal Original_SAC_LIBELLE_REF As String, ByVal Original_SAC_TYPE_REF As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAC_CODE_SQ_PK,Integer)
            If (Original_SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAC_CDF_ORN_CODE_FK,String)
            End If
            If (Original_SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAC_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_SAC_NOM,String)
            End If
            If (Original_SAC_NOMA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_SAC_NOMA,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SAC_DATECR,Date)
            If (Original_SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SAC_ETAT_COMMER,String)
            End If
            If (Original_SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_CODE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SAC_CODE_REF,String)
            End If
            If (Original_SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SAC_LIBELLE_REF,String)
            End If
            If (Original_SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SAC_TYPE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SAC_CODE_SQ_PK As Integer, ByVal SAC_CDF_ORN_CODE_FK As String, ByVal SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer), ByVal SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer), ByVal SAC_NOM As String, ByVal SAC_NOMA As String, ByVal SAC_DATECR As Date, ByVal SAC_DATEMJ As Global.System.Nullable(Of Date), ByVal SAC_ETAT_COMMER As String, ByVal SAC_DATECOMMER As Global.System.Nullable(Of Date), ByVal SAC_CODE_REF As String, ByVal SAC_LIBELLE_REF As String, ByVal SAC_TYPE_REF As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAC_CODE_SQ_PK,Integer)
            If (SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAC_CDF_ORN_CODE_FK,String)
            End If
            If (SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAC_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SAC_NOM,String)
            End If
            If (SAC_NOMA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SAC_NOMA,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(SAC_DATECR,Date)
            If (SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SAC_ETAT_COMMER,String)
            End If
            If (SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SAC_CODE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SAC_CODE_REF,String)
            End If
            If (SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SAC_LIBELLE_REF,String)
            End If
            If (SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SAC_TYPE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SAC_CODE_SQ_PK As Integer,  _
                    ByVal SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_NOM As String,  _
                    ByVal SAC_NOMA As String,  _
                    ByVal SAC_DATECR As Date,  _
                    ByVal SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SAC_ETAT_COMMER As String,  _
                    ByVal SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal SAC_CODE_REF As String,  _
                    ByVal SAC_LIBELLE_REF As String,  _
                    ByVal SAC_TYPE_REF As String,  _
                    ByVal Original_SAC_CODE_SQ_PK As Integer,  _
                    ByVal Original_SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal Original_SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_NOM As String,  _
                    ByVal Original_SAC_NOMA As String,  _
                    ByVal Original_SAC_DATECR As Date,  _
                    ByVal Original_SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_ETAT_COMMER As String,  _
                    ByVal Original_SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_CODE_REF As String,  _
                    ByVal Original_SAC_LIBELLE_REF As String,  _
                    ByVal Original_SAC_TYPE_REF As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAC_CODE_SQ_PK,Integer)
            If (SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAC_CDF_ORN_CODE_FK,String)
            End If
            If (SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SAC_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SAC_NOM,String)
            End If
            If (SAC_NOMA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SAC_NOMA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SAC_DATECR,Date)
            If (SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SAC_ETAT_COMMER,String)
            End If
            If (SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SAC_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SAC_CODE_REF,String)
            End If
            If (SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SAC_LIBELLE_REF,String)
            End If
            If (SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SAC_TYPE_REF,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SAC_CODE_SQ_PK,Integer)
            If (Original_SAC_CDF_ORN_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_SAC_CDF_ORN_CODE_FK,String)
            End If
            If (Original_SAC_SAU_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SAC_SAU_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_GSAC_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_SAC_GSAC_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SAC_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_SAC_NOM,String)
            End If
            If (Original_SAC_NOMA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SAC_NOMA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_SAC_DATECR,Date)
            If (Original_SAC_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_SAC_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SAC_ETAT_COMMER,String)
            End If
            If (Original_SAC_DATECOMMER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_SAC_DATECOMMER.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_SAC_CODE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_SAC_CODE_REF,String)
            End If
            If (Original_SAC_LIBELLE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SAC_LIBELLE_REF,String)
            End If
            If (Original_SAC_TYPE_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_SAC_TYPE_REF,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SAC_NOM As String,  _
                    ByVal SAC_NOMA As String,  _
                    ByVal SAC_DATECR As Date,  _
                    ByVal SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SAC_ETAT_COMMER As String,  _
                    ByVal SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal SAC_CODE_REF As String,  _
                    ByVal SAC_LIBELLE_REF As String,  _
                    ByVal SAC_TYPE_REF As String,  _
                    ByVal Original_SAC_CODE_SQ_PK As Integer,  _
                    ByVal Original_SAC_CDF_ORN_CODE_FK As String,  _
                    ByVal Original_SAC_SAU_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_GSAC_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SAC_NOM As String,  _
                    ByVal Original_SAC_NOMA As String,  _
                    ByVal Original_SAC_DATECR As Date,  _
                    ByVal Original_SAC_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_ETAT_COMMER As String,  _
                    ByVal Original_SAC_DATECOMMER As Global.System.Nullable(Of Date),  _
                    ByVal Original_SAC_CODE_REF As String,  _
                    ByVal Original_SAC_LIBELLE_REF As String,  _
                    ByVal Original_SAC_TYPE_REF As String) As Integer
            Return Me.Update(Original_SAC_CODE_SQ_PK, SAC_CDF_ORN_CODE_FK, SAC_SAU_CODE_FK, SAC_GSAC_CODE_FK, SAC_NOM, SAC_NOMA, SAC_DATECR, SAC_DATEMJ, SAC_ETAT_COMMER, SAC_DATECOMMER, SAC_CODE_REF, SAC_LIBELLE_REF, SAC_TYPE_REF, Original_SAC_CODE_SQ_PK, Original_SAC_CDF_ORN_CODE_FK, Original_SAC_SAU_CODE_FK, Original_SAC_GSAC_CODE_FK, Original_SAC_NOM, Original_SAC_NOMA, Original_SAC_DATECR, Original_SAC_DATEMJ, Original_SAC_ETAT_COMMER, Original_SAC_DATECOMMER, Original_SAC_CODE_REF, Original_SAC_LIBELLE_REF, Original_SAC_TYPE_REF)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SP_SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SP_SPECIALITE"
            tableMapping.ColumnMappings.Add("SP_CODE_SQ_PK", "SP_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SP_GSP_CODE_FK", "SP_GSP_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_SLAB_CODE_FK", "SP_CDF_SLAB_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_LI_CODE_FK", "SP_CDF_LI_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CATC_CODE_FK", "SP_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CEPH_CODE_FK", "SP_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CGE_CODE_FK", "SP_CGE_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_PR_CODE_FK", "SP_PR_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_TYPE_SPE", "SP_TYPE_SPE")
            tableMapping.ColumnMappings.Add("SP_GREF_FK", "SP_GREF_FK")
            tableMapping.ColumnMappings.Add("SP_GREF_DATECR_FK", "SP_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("SP_NOM", "SP_NOM")
            tableMapping.ColumnMappings.Add("SP_NOMCOMP", "SP_NOMCOMP")
            tableMapping.ColumnMappings.Add("SP_PH", "SP_PH")
            tableMapping.ColumnMappings.Add("SP_CIPUCD", "SP_CIPUCD")
            tableMapping.ColumnMappings.Add("SP_DATECR", "SP_DATECR")
            tableMapping.ColumnMappings.Add("SP_DATEMJ", "SP_DATEMJ")
            tableMapping.ColumnMappings.Add("SP_NL", "SP_NL")
            tableMapping.ColumnMappings.Add("SP_APHP", "SP_APHP")
            tableMapping.ColumnMappings.Add("SP_DATEJOGENE", "SP_DATEJOGENE")
            tableMapping.ColumnMappings.Add("SP_ORIGINE_GENE", "SP_ORIGINE_GENE")
            tableMapping.ColumnMappings.Add("SP_NOMLONG", "SP_NOMLONG")
            tableMapping.ColumnMappings.Add("SP_CDT_PRESCR_TEXTE", "SP_CDT_PRESCR_TEXTE")
            tableMapping.ColumnMappings.Add("SP_ATC_DDD_TEXTE", "SP_ATC_DDD_TEXTE")
            tableMapping.ColumnMappings.Add("SP_MONO_VIRTUELLE", "SP_MONO_VIRTUELLE")
            tableMapping.ColumnMappings.Add("SP_CIPUCD13", "SP_CIPUCD13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[SP_SPECIALITE] WHERE (([SP_CODE_SQ_PK] = @Original_SP_CO"& _ 
                "DE_SQ_PK) AND ((@IsNull_SP_GSP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP"& _ 
                "_GSP_CODE_FK] = @Original_SP_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Origina"& _ 
                "l_SP_CDF_SLAB_CODE_FK) AND ([SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) A"& _ 
                "ND ((@IsNull_SP_CATC_CODE_FK = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_COD"& _ 
                "E_FK] = @Original_SP_CATC_CODE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CE"& _ 
                "PH_CODE_FK] IS NULL) OR ([SP_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@"& _ 
                "IsNull_SP_CGE_CODE_FK = 1 AND [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @"& _ 
                "Original_SP_CGE_CODE_FK)) AND ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND (("& _ 
                "@IsNull_SP_TYPE_SPE = 1 AND [SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original"& _ 
                "_SP_TYPE_SPE)) AND ((@IsNull_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GR"& _ 
                "EF_FK] = @Original_SP_GREF_FK)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF"& _ 
                "_DATECR_FK] IS NULL) OR ([SP_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND"& _ 
                " ([SP_NOM] = @Original_SP_NOM) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS "& _ 
                "NULL) OR ([SP_NOMCOMP] = @Original_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_"& _ 
                "PH] IS NULL) OR ([SP_PH] = @Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP"& _ 
                "_CIPUCD] IS NULL) OR ([SP_CIPUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Or"& _ 
                "iginal_SP_DATECR) AND ((@IsNull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_D"& _ 
                "ATEMJ] = @Original_SP_DATEMJ)) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR ("& _ 
                "[SP_NL] = @Original_SP_NL)) AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR "& _ 
                "([SP_APHP] = @Original_SP_APHP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOG"& _ 
                "ENE] IS NULL) OR ([SP_DATEJOGENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_O"& _ 
                "RIGINE_GENE = 1 AND [SP_ORIGINE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original"& _ 
                "_SP_ORIGINE_GENE)) AND ((@IsNull_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([S"& _ 
                "P_NOMLONG] = @Original_SP_NOMLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [S"& _ 
                "P_CDT_PRESCR_TEXTE] IS NULL) OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR"& _ 
                "_TEXTE)) AND ((@IsNull_SP_ATC_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR ("& _ 
                "[SP_ATC_DDD_TEXTE] = @Original_SP_ATC_DDD_TEXTE)) AND ((@IsNull_SP_MONO_VIRTUELL"& _ 
                "E = 1 AND [SP_MONO_VIRTUELLE] IS NULL) OR ([SP_MONO_VIRTUELLE] = @Original_SP_MO"& _ 
                "NO_VIRTUELLE)) AND ((@IsNull_SP_CIPUCD13 = 1 AND [SP_CIPUCD13] IS NULL) OR ([SP_"& _ 
                "CIPUCD13] = @Original_SP_CIPUCD13)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[SP_SPECIALITE] ([SP_CODE_SQ_PK], [SP_GSP_CODE_FK], [SP_C"& _ 
                "DF_SLAB_CODE_FK], [SP_CDF_LI_CODE_FK], [SP_CATC_CODE_FK], [SP_CEPH_CODE_FK], [SP"& _ 
                "_CGE_CODE_FK], [SP_PR_CODE_FK], [SP_TYPE_SPE], [SP_GREF_FK], [SP_GREF_DATECR_FK]"& _ 
                ", [SP_NOM], [SP_NOMCOMP], [SP_PH], [SP_CIPUCD], [SP_DATECR], [SP_DATEMJ], [SP_NL"& _ 
                "], [SP_APHP], [SP_DATEJOGENE], [SP_ORIGINE_GENE], [SP_NOMLONG], [SP_CDT_PRESCR_T"& _ 
                "EXTE], [SP_ATC_DDD_TEXTE], [SP_MONO_VIRTUELLE], [SP_CIPUCD13]) VALUES (@SP_CODE_"& _ 
                "SQ_PK, @SP_GSP_CODE_FK, @SP_CDF_SLAB_CODE_FK, @SP_CDF_LI_CODE_FK, @SP_CATC_CODE_"& _ 
                "FK, @SP_CEPH_CODE_FK, @SP_CGE_CODE_FK, @SP_PR_CODE_FK, @SP_TYPE_SPE, @SP_GREF_FK"& _ 
                ", @SP_GREF_DATECR_FK, @SP_NOM, @SP_NOMCOMP, @SP_PH, @SP_CIPUCD, @SP_DATECR, @SP_"& _ 
                "DATEMJ, @SP_NL, @SP_APHP, @SP_DATEJOGENE, @SP_ORIGINE_GENE, @SP_NOMLONG, @SP_CDT"& _ 
                "_PRESCR_TEXTE, @SP_ATC_DDD_TEXTE, @SP_MONO_VIRTUELLE, @SP_CIPUCD13);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SP_"& _ 
                "CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE"& _ 
                "_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP"& _ 
                "_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_"& _ 
                "NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP"& _ 
                "_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13 FROM theriaque.SP_SPECIALITE WHER"& _ 
                "E (SP_CODE_SQ_PK = @SP_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CIPUCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[SP_SPECIALITE] SET [SP_CODE_SQ_PK] = @SP_CODE_SQ_PK, [SP_GSP_"& _ 
                "CODE_FK] = @SP_GSP_CODE_FK, [SP_CDF_SLAB_CODE_FK] = @SP_CDF_SLAB_CODE_FK, [SP_CD"& _ 
                "F_LI_CODE_FK] = @SP_CDF_LI_CODE_FK, [SP_CATC_CODE_FK] = @SP_CATC_CODE_FK, [SP_CE"& _ 
                "PH_CODE_FK] = @SP_CEPH_CODE_FK, [SP_CGE_CODE_FK] = @SP_CGE_CODE_FK, [SP_PR_CODE_"& _ 
                "FK] = @SP_PR_CODE_FK, [SP_TYPE_SPE] = @SP_TYPE_SPE, [SP_GREF_FK] = @SP_GREF_FK, "& _ 
                "[SP_GREF_DATECR_FK] = @SP_GREF_DATECR_FK, [SP_NOM] = @SP_NOM, [SP_NOMCOMP] = @SP"& _ 
                "_NOMCOMP, [SP_PH] = @SP_PH, [SP_CIPUCD] = @SP_CIPUCD, [SP_DATECR] = @SP_DATECR, "& _ 
                "[SP_DATEMJ] = @SP_DATEMJ, [SP_NL] = @SP_NL, [SP_APHP] = @SP_APHP, [SP_DATEJOGENE"& _ 
                "] = @SP_DATEJOGENE, [SP_ORIGINE_GENE] = @SP_ORIGINE_GENE, [SP_NOMLONG] = @SP_NOM"& _ 
                "LONG, [SP_CDT_PRESCR_TEXTE] = @SP_CDT_PRESCR_TEXTE, [SP_ATC_DDD_TEXTE] = @SP_ATC"& _ 
                "_DDD_TEXTE, [SP_MONO_VIRTUELLE] = @SP_MONO_VIRTUELLE, [SP_CIPUCD13] = @SP_CIPUCD"& _ 
                "13 WHERE (([SP_CODE_SQ_PK] = @Original_SP_CODE_SQ_PK) AND ((@IsNull_SP_GSP_CODE_"& _ 
                "FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP_GSP_CODE_FK] = @Original_SP_GSP_COD"& _ 
                "E_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Original_SP_CDF_SLAB_CODE_FK) AND ([SP_CDF_"& _ 
                "LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) AND ((@IsNull_SP_CATC_CODE_FK = 1 AND"& _ 
                " [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_CODE_FK] = @Original_SP_CATC_CODE_FK)) "& _ 
                "AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CEPH_CODE_FK] IS NULL) OR ([SP_CEPH_CO"& _ 
                "DE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@IsNull_SP_CGE_CODE_FK = 1 AND [SP_CG"& _ 
                "E_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @Original_SP_CGE_CODE_FK)) AND ([SP_P"& _ 
                "R_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((@IsNull_SP_TYPE_SPE = 1 AND [SP_TYPE"& _ 
                "_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original_SP_TYPE_SPE)) AND ((@IsNull_SP_GREF"& _ 
                "_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GREF_FK] = @Original_SP_GREF_FK)) AND "& _ 
                "((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF_DATECR_FK] IS NULL) OR ([SP_GREF_DA"& _ 
                "TECR_FK] = @Original_SP_GREF_DATECR_FK)) AND ([SP_NOM] = @Original_SP_NOM) AND ("& _ 
                "(@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS NULL) OR ([SP_NOMCOMP] = @Original_S"& _ 
                "P_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_PH] IS NULL) OR ([SP_PH] = @Original"& _ 
                "_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP_CIPUCD] IS NULL) OR ([SP_CIPUCD] = "& _ 
                "@Original_SP_CIPUCD)) AND ([SP_DATECR] = @Original_SP_DATECR) AND ((@IsNull_SP_D"& _ 
                "ATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_DATEMJ] = @Original_SP_DATEMJ)) AND ("& _ 
                "(@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR ([SP_NL] = @Original_SP_NL)) AND ((@I"& _ 
                "sNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR ([SP_APHP] = @Original_SP_APHP)) AND"& _ 
                " ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOGENE] IS NULL) OR ([SP_DATEJOGENE] = "& _ 
                "@Original_SP_DATEJOGENE)) AND ((@IsNull_SP_ORIGINE_GENE = 1 AND [SP_ORIGINE_GENE"& _ 
                "] IS NULL) OR ([SP_ORIGINE_GENE] = @Original_SP_ORIGINE_GENE)) AND ((@IsNull_SP_"& _ 
                "NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([SP_NOMLONG] = @Original_SP_NOMLONG)) "& _ 
                "AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [SP_CDT_PRESCR_TEXTE] IS NULL) OR ([SP"& _ 
                "_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR_TEXTE)) AND ((@IsNull_SP_ATC_DDD_TE"& _ 
                "XTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR ([SP_ATC_DDD_TEXTE] = @Original_SP_AT"& _ 
                "C_DDD_TEXTE)) AND ((@IsNull_SP_MONO_VIRTUELLE = 1 AND [SP_MONO_VIRTUELLE] IS NUL"& _ 
                "L) OR ([SP_MONO_VIRTUELLE] = @Original_SP_MONO_VIRTUELLE)) AND ((@IsNull_SP_CIPU"& _ 
                "CD13 = 1 AND [SP_CIPUCD13] IS NULL) OR ([SP_CIPUCD13] = @Original_SP_CIPUCD13)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK,"& _ 
                " SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, S"& _ 
                "P_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, S"& _ 
                "P_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRE"& _ 
                "SCR_TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13 FROM theriaque.SP_SP"& _ 
                "ECIALITE WHERE (SP_CODE_SQ_PK = @SP_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SP_CIPUCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOM", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_PH", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_PH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_APHP", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD13", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_"& _ 
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR"& _ 
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA"& _ 
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_"& _ 
                "TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13 FROM theriaque.SP_SPECIA"& _ 
                "LITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.SP_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.SP_SPECIALITEDataTable = New dsTheriaque_Pos_Min_Max.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.SP_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "SP_SPECIALITE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_SP_CODE_SQ_PK As Integer,  _
                    ByVal Original_SP_GSP_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal Original_SP_CDF_LI_CODE_FK As String,  _
                    ByVal Original_SP_CATC_CODE_FK As String,  _
                    ByVal Original_SP_CEPH_CODE_FK As String,  _
                    ByVal Original_SP_CGE_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_PR_CODE_FK As Integer,  _
                    ByVal Original_SP_TYPE_SPE As String,  _
                    ByVal Original_SP_GREF_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_NOM As String,  _
                    ByVal Original_SP_NOMCOMP As String,  _
                    ByVal Original_SP_PH As String,  _
                    ByVal Original_SP_CIPUCD As String,  _
                    ByVal Original_SP_DATECR As Date,  _
                    ByVal Original_SP_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_NL As String,  _
                    ByVal Original_SP_APHP As String,  _
                    ByVal Original_SP_DATEJOGENE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_ORIGINE_GENE As String,  _
                    ByVal Original_SP_NOMLONG As String,  _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal Original_SP_ATC_DDD_TEXTE As String,  _
                    ByVal Original_SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SP_CIPUCD13 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SP_CODE_SQ_PK,Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SP_GSP_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SP_CDF_SLAB_CODE_FK,String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SP_CDF_LI_CODE_FK,String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SP_CATC_CODE_FK,String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SP_CEPH_CODE_FK,String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SP_CGE_CODE_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SP_PR_CODE_FK,Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SP_TYPE_SPE,String)
            End If
            If (Original_SP_GREF_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SP_GREF_FK.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SP_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SP_NOM,String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SP_NOMCOMP,String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SP_PH,String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SP_CIPUCD,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_SP_DATECR,Date)
            If (Original_SP_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SP_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SP_NL,String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_SP_APHP,String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_SP_DATEJOGENE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_SP_ORIGINE_GENE,String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_SP_NOMLONG,String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_SP_CDT_PRESCR_TEXTE,String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_SP_ATC_DDD_TEXTE,String)
            End If
            If (Original_SP_MONO_VIRTUELLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_SP_MONO_VIRTUELLE.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_SP_CIPUCD13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal SP_CODE_SQ_PK As Integer,  _
                    ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal SP_CDF_LI_CODE_FK As String,  _
                    ByVal SP_CATC_CODE_FK As String,  _
                    ByVal SP_CEPH_CODE_FK As String,  _
                    ByVal SP_CGE_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_PR_CODE_FK As Integer,  _
                    ByVal SP_TYPE_SPE As String,  _
                    ByVal SP_GREF_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal SP_NOM As String,  _
                    ByVal SP_NOMCOMP As String,  _
                    ByVal SP_PH As String,  _
                    ByVal SP_CIPUCD As String,  _
                    ByVal SP_DATECR As Date,  _
                    ByVal SP_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SP_NL As String,  _
                    ByVal SP_APHP As String,  _
                    ByVal SP_DATEJOGENE As Global.System.Nullable(Of Date),  _
                    ByVal SP_ORIGINE_GENE As String,  _
                    ByVal SP_NOMLONG As String,  _
                    ByVal SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal SP_ATC_DDD_TEXTE As String,  _
                    ByVal SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean),  _
                    ByVal SP_CIPUCD13 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK,Integer)
            If (SP_GSP_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK,String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK,String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK,String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK,String)
            End If
            If (SP_CGE_CODE_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(SP_PR_CODE_FK,Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SP_TYPE_SPE,String)
            End If
            If (SP_GREF_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SP_GREF_FK.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SP_NOM,String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SP_NOMCOMP,String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SP_PH,String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SP_CIPUCD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(SP_DATECR,Date)
            If (SP_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SP_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SP_NL,String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SP_APHP,String)
            End If
            If (SP_DATEJOGENE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE,String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SP_NOMLONG,String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE,String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE,String)
            End If
            If (SP_MONO_VIRTUELLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SP_MONO_VIRTUELLE.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SP_CIPUCD13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SP_CODE_SQ_PK As Integer,  _
                    ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal SP_CDF_LI_CODE_FK As String,  _
                    ByVal SP_CATC_CODE_FK As String,  _
                    ByVal SP_CEPH_CODE_FK As String,  _
                    ByVal SP_CGE_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_PR_CODE_FK As Integer,  _
                    ByVal SP_TYPE_SPE As String,  _
                    ByVal SP_GREF_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal SP_NOM As String,  _
                    ByVal SP_NOMCOMP As String,  _
                    ByVal SP_PH As String,  _
                    ByVal SP_CIPUCD As String,  _
                    ByVal SP_DATECR As Date,  _
                    ByVal SP_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SP_NL As String,  _
                    ByVal SP_APHP As String,  _
                    ByVal SP_DATEJOGENE As Global.System.Nullable(Of Date),  _
                    ByVal SP_ORIGINE_GENE As String,  _
                    ByVal SP_NOMLONG As String,  _
                    ByVal SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal SP_ATC_DDD_TEXTE As String,  _
                    ByVal SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean),  _
                    ByVal SP_CIPUCD13 As String,  _
                    ByVal Original_SP_CODE_SQ_PK As Integer,  _
                    ByVal Original_SP_GSP_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal Original_SP_CDF_LI_CODE_FK As String,  _
                    ByVal Original_SP_CATC_CODE_FK As String,  _
                    ByVal Original_SP_CEPH_CODE_FK As String,  _
                    ByVal Original_SP_CGE_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_PR_CODE_FK As Integer,  _
                    ByVal Original_SP_TYPE_SPE As String,  _
                    ByVal Original_SP_GREF_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_NOM As String,  _
                    ByVal Original_SP_NOMCOMP As String,  _
                    ByVal Original_SP_PH As String,  _
                    ByVal Original_SP_CIPUCD As String,  _
                    ByVal Original_SP_DATECR As Date,  _
                    ByVal Original_SP_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_NL As String,  _
                    ByVal Original_SP_APHP As String,  _
                    ByVal Original_SP_DATEJOGENE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_ORIGINE_GENE As String,  _
                    ByVal Original_SP_NOMLONG As String,  _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal Original_SP_ATC_DDD_TEXTE As String,  _
                    ByVal Original_SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SP_CIPUCD13 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK,Integer)
            If (SP_GSP_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK,String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK,String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK,String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK,String)
            End If
            If (SP_CGE_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SP_PR_CODE_FK,Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SP_TYPE_SPE,String)
            End If
            If (SP_GREF_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SP_GREF_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SP_NOM,String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SP_NOMCOMP,String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SP_PH,String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SP_CIPUCD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SP_DATECR,Date)
            If (SP_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SP_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SP_NL,String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SP_APHP,String)
            End If
            If (SP_DATEJOGENE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE,String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SP_NOMLONG,String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE,String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE,String)
            End If
            If (SP_MONO_VIRTUELLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SP_MONO_VIRTUELLE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SP_CIPUCD13,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SP_CODE_SQ_PK,Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SP_GSP_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_SP_CDF_SLAB_CODE_FK,String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SP_CDF_LI_CODE_FK,String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SP_CATC_CODE_FK,String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SP_CEPH_CODE_FK,String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_SP_CGE_CODE_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_SP_PR_CODE_FK,Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SP_TYPE_SPE,String)
            End If
            If (Original_SP_GREF_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_SP_GREF_FK.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_SP_GREF_DATECR_FK.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_SP_NOM,String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_SP_NOMCOMP,String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_SP_PH,String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_SP_CIPUCD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_SP_DATECR,Date)
            If (Original_SP_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SP_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_SP_NL,String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_SP_APHP,String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_SP_DATEJOGENE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_SP_ORIGINE_GENE,String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_SP_NOMLONG,String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_SP_CDT_PRESCR_TEXTE,String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_SP_ATC_DDD_TEXTE,String)
            End If
            If (Original_SP_MONO_VIRTUELLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_SP_MONO_VIRTUELLE.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_SP_CIPUCD13,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SP_GSP_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal SP_CDF_LI_CODE_FK As String,  _
                    ByVal SP_CATC_CODE_FK As String,  _
                    ByVal SP_CEPH_CODE_FK As String,  _
                    ByVal SP_CGE_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_PR_CODE_FK As Integer,  _
                    ByVal SP_TYPE_SPE As String,  _
                    ByVal SP_GREF_FK As Global.System.Nullable(Of Integer),  _
                    ByVal SP_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal SP_NOM As String,  _
                    ByVal SP_NOMCOMP As String,  _
                    ByVal SP_PH As String,  _
                    ByVal SP_CIPUCD As String,  _
                    ByVal SP_DATECR As Date,  _
                    ByVal SP_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal SP_NL As String,  _
                    ByVal SP_APHP As String,  _
                    ByVal SP_DATEJOGENE As Global.System.Nullable(Of Date),  _
                    ByVal SP_ORIGINE_GENE As String,  _
                    ByVal SP_NOMLONG As String,  _
                    ByVal SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal SP_ATC_DDD_TEXTE As String,  _
                    ByVal SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean),  _
                    ByVal SP_CIPUCD13 As String,  _
                    ByVal Original_SP_CODE_SQ_PK As Integer,  _
                    ByVal Original_SP_GSP_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal Original_SP_CDF_LI_CODE_FK As String,  _
                    ByVal Original_SP_CATC_CODE_FK As String,  _
                    ByVal Original_SP_CEPH_CODE_FK As String,  _
                    ByVal Original_SP_CGE_CODE_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_PR_CODE_FK As Integer,  _
                    ByVal Original_SP_TYPE_SPE As String,  _
                    ByVal Original_SP_GREF_FK As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SP_GREF_DATECR_FK As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_NOM As String,  _
                    ByVal Original_SP_NOMCOMP As String,  _
                    ByVal Original_SP_PH As String,  _
                    ByVal Original_SP_CIPUCD As String,  _
                    ByVal Original_SP_DATECR As Date,  _
                    ByVal Original_SP_DATEMJ As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_NL As String,  _
                    ByVal Original_SP_APHP As String,  _
                    ByVal Original_SP_DATEJOGENE As Global.System.Nullable(Of Date),  _
                    ByVal Original_SP_ORIGINE_GENE As String,  _
                    ByVal Original_SP_NOMLONG As String,  _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal Original_SP_ATC_DDD_TEXTE As String,  _
                    ByVal Original_SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SP_CIPUCD13 As String) As Integer
            Return Me.Update(Original_SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13, Original_SP_CODE_SQ_PK, Original_SP_GSP_CODE_FK, Original_SP_CDF_SLAB_CODE_FK, Original_SP_CDF_LI_CODE_FK, Original_SP_CATC_CODE_FK, Original_SP_CEPH_CODE_FK, Original_SP_CGE_CODE_FK, Original_SP_PR_CODE_FK, Original_SP_TYPE_SPE, Original_SP_GREF_FK, Original_SP_GREF_DATECR_FK, Original_SP_NOM, Original_SP_NOMCOMP, Original_SP_PH, Original_SP_CIPUCD, Original_SP_DATECR, Original_SP_DATEMJ, Original_SP_NL, Original_SP_APHP, Original_SP_DATEJOGENE, Original_SP_ORIGINE_GENE, Original_SP_NOMLONG, Original_SP_CDT_PRESCR_TEXTE, Original_SP_ATC_DDD_TEXTE, Original_SP_MONO_VIRTUELLE, Original_SP_CIPUCD13)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMI_INTERVALLE_MIN_MAXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMI_INTERVALLE_MIN_MAX"
            tableMapping.ColumnMappings.Add("FPOMMI_FPOMM_CODE_FK_PK", "FPOMMI_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMI_INT_MIN", "FPOMMI_INT_MIN")
            tableMapping.ColumnMappings.Add("FPOMMI_UNIT_MIN", "FPOMMI_UNIT_MIN")
            tableMapping.ColumnMappings.Add("FPOMMI_INT_MAX", "FPOMMI_INT_MAX")
            tableMapping.ColumnMappings.Add("FPOMMI_UNIT_MAX", "FPOMMI_UNIT_MAX")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMI_INTERVALLE_MIN_MAX] WHERE (([FPOMMI_FPOMM_CODE_FK"& _ 
                "_PK] = @Original_FPOMMI_FPOMM_CODE_FK_PK) AND ((@IsNull_FPOMMI_INT_MIN = 1 AND ["& _ 
                "FPOMMI_INT_MIN] IS NULL) OR ([FPOMMI_INT_MIN] = @Original_FPOMMI_INT_MIN)) AND ("& _ 
                "(@IsNull_FPOMMI_UNIT_MIN = 1 AND [FPOMMI_UNIT_MIN] IS NULL) OR ([FPOMMI_UNIT_MIN"& _ 
                "] = @Original_FPOMMI_UNIT_MIN)) AND ((@IsNull_FPOMMI_INT_MAX = 1 AND [FPOMMI_INT"& _ 
                "_MAX] IS NULL) OR ([FPOMMI_INT_MAX] = @Original_FPOMMI_INT_MAX)) AND ((@IsNull_F"& _ 
                "POMMI_UNIT_MAX = 1 AND [FPOMMI_UNIT_MAX] IS NULL) OR ([FPOMMI_UNIT_MAX] = @Origi"& _ 
                "nal_FPOMMI_UNIT_MAX)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_INT_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_INT_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_INT_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_UNIT_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_UNIT_MIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_INT_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_INT_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_INT_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_UNIT_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_UNIT_MAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMI_INTERVALLE_MIN_MAX] ([FPOMMI_FPOMM_CODE_FK_PK], ["& _ 
                "FPOMMI_INT_MIN], [FPOMMI_UNIT_MIN], [FPOMMI_INT_MAX], [FPOMMI_UNIT_MAX]) VALUES "& _ 
                "(@FPOMMI_FPOMM_CODE_FK_PK, @FPOMMI_INT_MIN, @FPOMMI_UNIT_MIN, @FPOMMI_INT_MAX, @"& _ 
                "FPOMMI_UNIT_MAX);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMI_FPOMM_CODE_FK_PK, FPOMMI_INT_MIN, FPOMMI_UNIT_M"& _ 
                "IN, FPOMMI_INT_MAX, FPOMMI_UNIT_MAX FROM theriaque.FPOMMI_INTERVALLE_MIN_MAX WHE"& _ 
                "RE (FPOMMI_FPOMM_CODE_FK_PK = @FPOMMI_FPOMM_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_INT_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_UNIT_MIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_INT_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_UNIT_MAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMI_INTERVALLE_MIN_MAX] SET [FPOMMI_FPOMM_CODE_FK_PK] = @F"& _ 
                "POMMI_FPOMM_CODE_FK_PK, [FPOMMI_INT_MIN] = @FPOMMI_INT_MIN, [FPOMMI_UNIT_MIN] = "& _ 
                "@FPOMMI_UNIT_MIN, [FPOMMI_INT_MAX] = @FPOMMI_INT_MAX, [FPOMMI_UNIT_MAX] = @FPOMM"& _ 
                "I_UNIT_MAX WHERE (([FPOMMI_FPOMM_CODE_FK_PK] = @Original_FPOMMI_FPOMM_CODE_FK_PK"& _ 
                ") AND ((@IsNull_FPOMMI_INT_MIN = 1 AND [FPOMMI_INT_MIN] IS NULL) OR ([FPOMMI_INT"& _ 
                "_MIN] = @Original_FPOMMI_INT_MIN)) AND ((@IsNull_FPOMMI_UNIT_MIN = 1 AND [FPOMMI"& _ 
                "_UNIT_MIN] IS NULL) OR ([FPOMMI_UNIT_MIN] = @Original_FPOMMI_UNIT_MIN)) AND ((@I"& _ 
                "sNull_FPOMMI_INT_MAX = 1 AND [FPOMMI_INT_MAX] IS NULL) OR ([FPOMMI_INT_MAX] = @O"& _ 
                "riginal_FPOMMI_INT_MAX)) AND ((@IsNull_FPOMMI_UNIT_MAX = 1 AND [FPOMMI_UNIT_MAX]"& _ 
                " IS NULL) OR ([FPOMMI_UNIT_MAX] = @Original_FPOMMI_UNIT_MAX)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMI_F"& _ 
                "POMM_CODE_FK_PK, FPOMMI_INT_MIN, FPOMMI_UNIT_MIN, FPOMMI_INT_MAX, FPOMMI_UNIT_MA"& _ 
                "X FROM theriaque.FPOMMI_INTERVALLE_MIN_MAX WHERE (FPOMMI_FPOMM_CODE_FK_PK = @FPO"& _ 
                "MMI_FPOMM_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_INT_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_UNIT_MIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_INT_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_UNIT_MAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_INT_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_INT_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_INT_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_UNIT_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_UNIT_MIN", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_INT_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_INT_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_INT_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMI_INT_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMI_UNIT_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMI_UNIT_MAX", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_UNIT_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.theriaqueDSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMI_FPOMM_CODE_FK_PK, FPOMMI_INT_MIN, FPOMMI_UNIT_MIN, FPOMMI_INT_MAX, "& _ 
                "FPOMMI_UNIT_MAX FROM theriaque.FPOMMI_INTERVALLE_MIN_MAX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMI_FPOMM_CODE_FK_PK, FPOMMI_INT_MIN, FPOMMI_UNIT_MIN, FPOMMI_INT_MAX, "& _ 
                "FPOMMI_UNIT_MAX FROM theriaque.FPOMMI_INTERVALLE_MIN_MAX "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPOMMI_FPOMM_CO"& _ 
                "DE_FK_PK=@FPOMMI_FPOMM_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMI_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable = New dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable, ByVal FPOMMI_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMI_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMI_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMI_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable = New dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMI_INTERVALLE_MIN_MAXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMI_INTERVALLE_MIN_MAX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMI_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMI_INT_MIN As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMI_UNIT_MIN As String, ByVal Original_FPOMMI_INT_MAX As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMI_UNIT_MAX As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMI_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMI_INT_MIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOMMI_INT_MIN.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMI_UNIT_MIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FPOMMI_UNIT_MIN,String)
            End If
            If (Original_FPOMMI_INT_MAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FPOMMI_INT_MAX.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMI_UNIT_MAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FPOMMI_UNIT_MAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMI_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMI_INT_MIN As Global.System.Nullable(Of Decimal), ByVal FPOMMI_UNIT_MIN As String, ByVal FPOMMI_INT_MAX As Global.System.Nullable(Of Decimal), ByVal FPOMMI_UNIT_MAX As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMI_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMI_INT_MIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMI_INT_MIN.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FPOMMI_UNIT_MIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOMMI_UNIT_MIN,String)
            End If
            If (FPOMMI_INT_MAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPOMMI_INT_MAX.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FPOMMI_UNIT_MAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FPOMMI_UNIT_MAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMI_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMI_INT_MIN As Global.System.Nullable(Of Decimal), ByVal FPOMMI_UNIT_MIN As String, ByVal FPOMMI_INT_MAX As Global.System.Nullable(Of Decimal), ByVal FPOMMI_UNIT_MAX As String, ByVal Original_FPOMMI_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMI_INT_MIN As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMI_UNIT_MIN As String, ByVal Original_FPOMMI_INT_MAX As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMI_UNIT_MAX As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMI_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMI_INT_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMI_INT_MIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (FPOMMI_UNIT_MIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOMMI_UNIT_MIN,String)
            End If
            If (FPOMMI_INT_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPOMMI_INT_MAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FPOMMI_UNIT_MAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FPOMMI_UNIT_MAX,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOMMI_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMI_INT_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FPOMMI_INT_MIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMI_UNIT_MIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FPOMMI_UNIT_MIN,String)
            End If
            If (Original_FPOMMI_INT_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FPOMMI_INT_MAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMI_UNIT_MAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FPOMMI_UNIT_MAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMI_INT_MIN As Global.System.Nullable(Of Decimal), ByVal FPOMMI_UNIT_MIN As String, ByVal FPOMMI_INT_MAX As Global.System.Nullable(Of Decimal), ByVal FPOMMI_UNIT_MAX As String, ByVal Original_FPOMMI_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMI_INT_MIN As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMI_UNIT_MIN As String, ByVal Original_FPOMMI_INT_MAX As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMI_UNIT_MAX As String) As Integer
            Return Me.Update(Original_FPOMMI_FPOMM_CODE_FK_PK, FPOMMI_INT_MIN, FPOMMI_UNIT_MIN, FPOMMI_INT_MAX, FPOMMI_UNIT_MAX, Original_FPOMMI_FPOMM_CODE_FK_PK, Original_FPOMMI_INT_MIN, Original_FPOMMI_UNIT_MIN, Original_FPOMMI_INT_MAX, Original_FPOMMI_UNIT_MAX)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPODCM_DOSE_CUMUL_MAXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPODCM_DOSE_CUMUL_MAX"
            tableMapping.ColumnMappings.Add("FPODCM_FPOMM_CODE_FK_PK", "FPODCM_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPODCM_DCM", "FPODCM_DCM")
            tableMapping.ColumnMappings.Add("FPODCM_UNIT", "FPODCM_UNIT")
            tableMapping.ColumnMappings.Add("FPODCM_UNIT_CDF_NUM_FK", "FPODCM_UNIT_CDF_NUM_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPODCM_DOSE_CUMUL_MAX] WHERE (([FPODCM_FPOMM_CODE_FK_PK]"& _ 
                " = @Original_FPODCM_FPOMM_CODE_FK_PK) AND ([FPODCM_DCM] = @Original_FPODCM_DCM) "& _ 
                "AND ([FPODCM_UNIT] = @Original_FPODCM_UNIT) AND ([FPODCM_UNIT_CDF_NUM_FK] = @Ori"& _ 
                "ginal_FPODCM_UNIT_CDF_NUM_FK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_DCM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPODCM_DCM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPODCM_DOSE_CUMUL_MAX] ([FPODCM_FPOMM_CODE_FK_PK], [FPOD"& _ 
                "CM_DCM], [FPODCM_UNIT], [FPODCM_UNIT_CDF_NUM_FK]) VALUES (@FPODCM_FPOMM_CODE_FK_"& _ 
                "PK, @FPODCM_DCM, @FPODCM_UNIT, @FPODCM_UNIT_CDF_NUM_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPODCM_FPOMM_CO"& _ 
                "DE_FK_PK, FPODCM_DCM, FPODCM_UNIT, FPODCM_UNIT_CDF_NUM_FK FROM theriaque.FPODCM_"& _ 
                "DOSE_CUMUL_MAX WHERE (FPODCM_FPOMM_CODE_FK_PK = @FPODCM_FPOMM_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_DCM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPODCM_DCM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPODCM_DOSE_CUMUL_MAX] SET [FPODCM_FPOMM_CODE_FK_PK] = @FPODC"& _ 
                "M_FPOMM_CODE_FK_PK, [FPODCM_DCM] = @FPODCM_DCM, [FPODCM_UNIT] = @FPODCM_UNIT, [F"& _ 
                "PODCM_UNIT_CDF_NUM_FK] = @FPODCM_UNIT_CDF_NUM_FK WHERE (([FPODCM_FPOMM_CODE_FK_P"& _ 
                "K] = @Original_FPODCM_FPOMM_CODE_FK_PK) AND ([FPODCM_DCM] = @Original_FPODCM_DCM"& _ 
                ") AND ([FPODCM_UNIT] = @Original_FPODCM_UNIT) AND ([FPODCM_UNIT_CDF_NUM_FK] = @O"& _ 
                "riginal_FPODCM_UNIT_CDF_NUM_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPODCM_FPOMM_CODE_FK_PK, FPODCM_DCM, F"& _ 
                "PODCM_UNIT, FPODCM_UNIT_CDF_NUM_FK FROM theriaque.FPODCM_DOSE_CUMUL_MAX WHERE (F"& _ 
                "PODCM_FPOMM_CODE_FK_PK = @FPODCM_FPOMM_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_DCM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPODCM_DCM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_DCM", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPODCM_DCM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_UNIT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_UNIT_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.theriaqueDSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPODCM_FPOMM_CODE_FK_PK, FPODCM_DCM, FPODCM_UNIT, FPODCM_UNIT_CDF_NUM_FK F"& _ 
                "ROM theriaque.FPODCM_DOSE_CUMUL_MAX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPODCM_FPOMM_CODE_FK_PK, FPODCM_DCM, FPODCM_UNIT, FPODCM_UNIT_CDF_NUM_FK F"& _ 
                "ROM theriaque.FPODCM_DOSE_CUMUL_MAX "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPODCM_FPOMM_CODE_FK_PK=@FPODCM_FPOM"& _ 
                "M_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPODCM_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable = New dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable, ByVal FPODCM_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPODCM_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPODCM_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPODCM_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable = New dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPODCM_DOSE_CUMUL_MAXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPODCM_DOSE_CUMUL_MAX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPODCM_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPODCM_DCM As Decimal, ByVal Original_FPODCM_UNIT As String, ByVal Original_FPODCM_UNIT_CDF_NUM_FK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPODCM_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPODCM_DCM,Decimal)
            If (Original_FPODCM_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPODCM_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPODCM_UNIT,String)
            End If
            If (Original_FPODCM_UNIT_CDF_NUM_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPODCM_UNIT_CDF_NUM_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPODCM_UNIT_CDF_NUM_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPODCM_FPOMM_CODE_FK_PK As Integer, ByVal FPODCM_DCM As Decimal, ByVal FPODCM_UNIT As String, ByVal FPODCM_UNIT_CDF_NUM_FK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPODCM_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPODCM_DCM,Decimal)
            If (FPODCM_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPODCM_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPODCM_UNIT,String)
            End If
            If (FPODCM_UNIT_CDF_NUM_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPODCM_UNIT_CDF_NUM_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPODCM_UNIT_CDF_NUM_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPODCM_FPOMM_CODE_FK_PK As Integer, ByVal FPODCM_DCM As Decimal, ByVal FPODCM_UNIT As String, ByVal FPODCM_UNIT_CDF_NUM_FK As String, ByVal Original_FPODCM_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPODCM_DCM As Decimal, ByVal Original_FPODCM_UNIT As String, ByVal Original_FPODCM_UNIT_CDF_NUM_FK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPODCM_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPODCM_DCM,Decimal)
            If (FPODCM_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPODCM_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPODCM_UNIT,String)
            End If
            If (FPODCM_UNIT_CDF_NUM_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPODCM_UNIT_CDF_NUM_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPODCM_UNIT_CDF_NUM_FK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPODCM_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPODCM_DCM,Decimal)
            If (Original_FPODCM_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPODCM_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPODCM_UNIT,String)
            End If
            If (Original_FPODCM_UNIT_CDF_NUM_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPODCM_UNIT_CDF_NUM_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FPODCM_UNIT_CDF_NUM_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPODCM_DCM As Decimal, ByVal FPODCM_UNIT As String, ByVal FPODCM_UNIT_CDF_NUM_FK As String, ByVal Original_FPODCM_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPODCM_DCM As Decimal, ByVal Original_FPODCM_UNIT As String, ByVal Original_FPODCM_UNIT_CDF_NUM_FK As String) As Integer
            Return Me.Update(Original_FPODCM_FPOMM_CODE_FK_PK, FPODCM_DCM, FPODCM_UNIT, FPODCM_UNIT_CDF_NUM_FK, Original_FPODCM_FPOMM_CODE_FK_PK, Original_FPODCM_DCM, Original_FPODCM_UNIT, Original_FPODCM_UNIT_CDF_NUM_FK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMDO_POSOMINMAX_DOSESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMDO_POSOMINMAX_DOSES"
            tableMapping.ColumnMappings.Add("FPOMMDO_FPOMM_CODE_FK_PK", "FPOMMDO_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMDO_NUM_SEQ", "FPOMMDO_NUM_SEQ")
            tableMapping.ColumnMappings.Add("FPOMMDO_DP_MIN", "FPOMMDO_DP_MIN")
            tableMapping.ColumnMappings.Add("FPOMMDO_DP_MAX", "FPOMMDO_DP_MAX")
            tableMapping.ColumnMappings.Add("FPOMMDO_DJ_MIN", "FPOMMDO_DJ_MIN")
            tableMapping.ColumnMappings.Add("FPOMMDO_DJ_MAX", "FPOMMDO_DJ_MAX")
            tableMapping.ColumnMappings.Add("FPOMMDO_UNIT_CDF_CODE_FK", "FPOMMDO_UNIT_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("FPOMMDO_UNITE_CDF_NUM_FK", "FPOMMDO_UNITE_CDF_NUM_FK")
            tableMapping.ColumnMappings.Add("FPOMMDO_DONANTH_CDF_CODE_FK", "FPOMMDO_DONANTH_CDF_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMDO_POSOMINMAX_DOSES] WHERE (([FPOMMDO_FPOMM_CODE_FK"& _ 
                "_PK] = @Original_FPOMMDO_FPOMM_CODE_FK_PK) AND ([FPOMMDO_NUM_SEQ] = @Original_FP"& _ 
                "OMMDO_NUM_SEQ) AND ((@IsNull_FPOMMDO_DP_MIN = 1 AND [FPOMMDO_DP_MIN] IS NULL) OR"& _ 
                " ([FPOMMDO_DP_MIN] = @Original_FPOMMDO_DP_MIN)) AND ((@IsNull_FPOMMDO_DP_MAX = 1"& _ 
                " AND [FPOMMDO_DP_MAX] IS NULL) OR ([FPOMMDO_DP_MAX] = @Original_FPOMMDO_DP_MAX))"& _ 
                " AND ((@IsNull_FPOMMDO_DJ_MIN = 1 AND [FPOMMDO_DJ_MIN] IS NULL) OR ([FPOMMDO_DJ_"& _ 
                "MIN] = @Original_FPOMMDO_DJ_MIN)) AND ((@IsNull_FPOMMDO_DJ_MAX = 1 AND [FPOMMDO_"& _ 
                "DJ_MAX] IS NULL) OR ([FPOMMDO_DJ_MAX] = @Original_FPOMMDO_DJ_MAX)) AND ((@IsNull"& _ 
                "_FPOMMDO_UNIT_CDF_CODE_FK = 1 AND [FPOMMDO_UNIT_CDF_CODE_FK] IS NULL) OR ([FPOMM"& _ 
                "DO_UNIT_CDF_CODE_FK] = @Original_FPOMMDO_UNIT_CDF_CODE_FK)) AND ((@IsNull_FPOMMD"& _ 
                "O_UNITE_CDF_NUM_FK = 1 AND [FPOMMDO_UNITE_CDF_NUM_FK] IS NULL) OR ([FPOMMDO_UNIT"& _ 
                "E_CDF_NUM_FK] = @Original_FPOMMDO_UNITE_CDF_NUM_FK)) AND ((@IsNull_FPOMMDO_DONAN"& _ 
                "TH_CDF_CODE_FK = 1 AND [FPOMMDO_DONANTH_CDF_CODE_FK] IS NULL) OR ([FPOMMDO_DONAN"& _ 
                "TH_CDF_CODE_FK] = @Original_FPOMMDO_DONANTH_CDF_CODE_FK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_NUM_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_NUM_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DP_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DP_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DP_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DP_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DP_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DP_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DJ_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DJ_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DJ_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DJ_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DJ_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DJ_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMDO_POSOMINMAX_DOSES] ([FPOMMDO_FPOMM_CODE_FK_PK], ["& _ 
                "FPOMMDO_NUM_SEQ], [FPOMMDO_DP_MIN], [FPOMMDO_DP_MAX], [FPOMMDO_DJ_MIN], [FPOMMDO"& _ 
                "_DJ_MAX], [FPOMMDO_UNIT_CDF_CODE_FK], [FPOMMDO_UNITE_CDF_NUM_FK], [FPOMMDO_DONAN"& _ 
                "TH_CDF_CODE_FK]) VALUES (@FPOMMDO_FPOMM_CODE_FK_PK, @FPOMMDO_NUM_SEQ, @FPOMMDO_D"& _ 
                "P_MIN, @FPOMMDO_DP_MAX, @FPOMMDO_DJ_MIN, @FPOMMDO_DJ_MAX, @FPOMMDO_UNIT_CDF_CODE"& _ 
                "_FK, @FPOMMDO_UNITE_CDF_NUM_FK, @FPOMMDO_DONANTH_CDF_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMDO_F"& _ 
                "POMM_CODE_FK_PK, FPOMMDO_NUM_SEQ, FPOMMDO_DP_MIN, FPOMMDO_DP_MAX, FPOMMDO_DJ_MIN"& _ 
                ", FPOMMDO_DJ_MAX, FPOMMDO_UNIT_CDF_CODE_FK, FPOMMDO_UNITE_CDF_NUM_FK, FPOMMDO_DO"& _ 
                "NANTH_CDF_CODE_FK FROM theriaque.FPOMMDO_POSOMINMAX_DOSES WHERE (FPOMMDO_FPOMM_C"& _ 
                "ODE_FK_PK = @FPOMMDO_FPOMM_CODE_FK_PK) AND (FPOMMDO_NUM_SEQ = @FPOMMDO_NUM_SEQ)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_NUM_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_NUM_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DP_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DP_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DJ_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DJ_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMDO_POSOMINMAX_DOSES] SET [FPOMMDO_FPOMM_CODE_FK_PK] = @F"& _ 
                "POMMDO_FPOMM_CODE_FK_PK, [FPOMMDO_NUM_SEQ] = @FPOMMDO_NUM_SEQ, [FPOMMDO_DP_MIN] "& _ 
                "= @FPOMMDO_DP_MIN, [FPOMMDO_DP_MAX] = @FPOMMDO_DP_MAX, [FPOMMDO_DJ_MIN] = @FPOMM"& _ 
                "DO_DJ_MIN, [FPOMMDO_DJ_MAX] = @FPOMMDO_DJ_MAX, [FPOMMDO_UNIT_CDF_CODE_FK] = @FPO"& _ 
                "MMDO_UNIT_CDF_CODE_FK, [FPOMMDO_UNITE_CDF_NUM_FK] = @FPOMMDO_UNITE_CDF_NUM_FK, ["& _ 
                "FPOMMDO_DONANTH_CDF_CODE_FK] = @FPOMMDO_DONANTH_CDF_CODE_FK WHERE (([FPOMMDO_FPO"& _ 
                "MM_CODE_FK_PK] = @Original_FPOMMDO_FPOMM_CODE_FK_PK) AND ([FPOMMDO_NUM_SEQ] = @O"& _ 
                "riginal_FPOMMDO_NUM_SEQ) AND ((@IsNull_FPOMMDO_DP_MIN = 1 AND [FPOMMDO_DP_MIN] I"& _ 
                "S NULL) OR ([FPOMMDO_DP_MIN] = @Original_FPOMMDO_DP_MIN)) AND ((@IsNull_FPOMMDO_"& _ 
                "DP_MAX = 1 AND [FPOMMDO_DP_MAX] IS NULL) OR ([FPOMMDO_DP_MAX] = @Original_FPOMMD"& _ 
                "O_DP_MAX)) AND ((@IsNull_FPOMMDO_DJ_MIN = 1 AND [FPOMMDO_DJ_MIN] IS NULL) OR ([F"& _ 
                "POMMDO_DJ_MIN] = @Original_FPOMMDO_DJ_MIN)) AND ((@IsNull_FPOMMDO_DJ_MAX = 1 AND"& _ 
                " [FPOMMDO_DJ_MAX] IS NULL) OR ([FPOMMDO_DJ_MAX] = @Original_FPOMMDO_DJ_MAX)) AND"& _ 
                " ((@IsNull_FPOMMDO_UNIT_CDF_CODE_FK = 1 AND [FPOMMDO_UNIT_CDF_CODE_FK] IS NULL) "& _ 
                "OR ([FPOMMDO_UNIT_CDF_CODE_FK] = @Original_FPOMMDO_UNIT_CDF_CODE_FK)) AND ((@IsN"& _ 
                "ull_FPOMMDO_UNITE_CDF_NUM_FK = 1 AND [FPOMMDO_UNITE_CDF_NUM_FK] IS NULL) OR ([FP"& _ 
                "OMMDO_UNITE_CDF_NUM_FK] = @Original_FPOMMDO_UNITE_CDF_NUM_FK)) AND ((@IsNull_FPO"& _ 
                "MMDO_DONANTH_CDF_CODE_FK = 1 AND [FPOMMDO_DONANTH_CDF_CODE_FK] IS NULL) OR ([FPO"& _ 
                "MMDO_DONANTH_CDF_CODE_FK] = @Original_FPOMMDO_DONANTH_CDF_CODE_FK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FP"& _ 
                "OMMDO_FPOMM_CODE_FK_PK, FPOMMDO_NUM_SEQ, FPOMMDO_DP_MIN, FPOMMDO_DP_MAX, FPOMMDO"& _ 
                "_DJ_MIN, FPOMMDO_DJ_MAX, FPOMMDO_UNIT_CDF_CODE_FK, FPOMMDO_UNITE_CDF_NUM_FK, FPO"& _ 
                "MMDO_DONANTH_CDF_CODE_FK FROM theriaque.FPOMMDO_POSOMINMAX_DOSES WHERE (FPOMMDO_"& _ 
                "FPOMM_CODE_FK_PK = @FPOMMDO_FPOMM_CODE_FK_PK) AND (FPOMMDO_NUM_SEQ = @FPOMMDO_NU"& _ 
                "M_SEQ)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_NUM_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_NUM_SEQ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DP_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DP_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DJ_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DJ_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_NUM_SEQ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_NUM_SEQ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DP_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DP_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DP_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DP_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DP_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DP_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DP_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DJ_MIN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DJ_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DJ_MIN", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DJ_MAX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DJ_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DJ_MAX", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 20, 5, "FPOMMDO_DJ_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNIT_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_UNITE_CDF_NUM_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_DONANTH_CDF_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.tempConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMDO_FPOMM_CODE_FK_PK, FPOMMDO_NUM_SEQ, FPOMMDO_DP_MIN, FPOMMDO_DP_MAX,"& _ 
                " FPOMMDO_DJ_MIN, FPOMMDO_DJ_MAX, FPOMMDO_UNIT_CDF_CODE_FK, FPOMMDO_UNITE_CDF_NUM"& _ 
                "_FK, FPOMMDO_DONANTH_CDF_CODE_FK FROM theriaque.FPOMMDO_POSOMINMAX_DOSES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMDO_DJ_MAX, FPOMMDO_DJ_MIN, FPOMMDO_DONANTH_CDF_CODE_FK, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FPOMMDO_DP_"& _ 
                "MAX, FPOMMDO_DP_MIN, FPOMMDO_FPOMM_CODE_FK_PK,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FPOMMDO_NUM_SEQ, FPOMMDO_UNITE_C"& _ 
                "DF_NUM_FK, FPOMMDO_UNIT_CDF_CODE_FK,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FPOMMDO_UNIT_CDF_CODE_FK + ',' + FPOMMDO_U"& _ 
                "NITE_CDF_NUM_FK AS temp "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM theriaque.FPOMMDO_POSOMINMAX_DOSES "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (FPOMM"& _ 
                "DO_FPOMM_CODE_FK_PK = @FPOMMDO_FPOMM_CODE_FK_PK)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMDO_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable = New dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable, ByVal FPOMMDO_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMDO_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMDO_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMDO_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable = New dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMDO_POSOMINMAX_DOSESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMDO_POSOMINMAX_DOSES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMDO_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMDO_NUM_SEQ As Integer, ByVal Original_FPOMMDO_DP_MIN As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMDO_DP_MAX As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMDO_DJ_MIN As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMDO_DJ_MAX As Global.System.Nullable(Of Decimal), ByVal Original_FPOMMDO_UNIT_CDF_CODE_FK As String, ByVal Original_FPOMMDO_UNITE_CDF_NUM_FK As String, ByVal Original_FPOMMDO_DONANTH_CDF_CODE_FK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMDO_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMDO_NUM_SEQ,Integer)
            If (Original_FPOMMDO_DP_MIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPOMMDO_DP_MIN.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_DP_MAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FPOMMDO_DP_MAX.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_DJ_MIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FPOMMDO_DJ_MIN.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_DJ_MAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_FPOMMDO_DJ_MAX.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_UNIT_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_FPOMMDO_UNIT_CDF_CODE_FK,String)
            End If
            If (Original_FPOMMDO_UNITE_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_FPOMMDO_UNITE_CDF_NUM_FK,String)
            End If
            If (Original_FPOMMDO_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_FPOMMDO_DONANTH_CDF_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMDO_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMDO_NUM_SEQ As Integer, ByVal FPOMMDO_DP_MIN As Global.System.Nullable(Of Decimal), ByVal FPOMMDO_DP_MAX As Global.System.Nullable(Of Decimal), ByVal FPOMMDO_DJ_MIN As Global.System.Nullable(Of Decimal), ByVal FPOMMDO_DJ_MAX As Global.System.Nullable(Of Decimal), ByVal FPOMMDO_UNIT_CDF_CODE_FK As String, ByVal FPOMMDO_UNITE_CDF_NUM_FK As String, ByVal FPOMMDO_DONANTH_CDF_CODE_FK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMDO_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMDO_NUM_SEQ,Integer)
            If (FPOMMDO_DP_MIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOMMDO_DP_MIN.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_DP_MAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPOMMDO_DP_MAX.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_DJ_MIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FPOMMDO_DJ_MIN.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_DJ_MAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FPOMMDO_DJ_MAX.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_UNIT_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FPOMMDO_UNIT_CDF_CODE_FK,String)
            End If
            If (FPOMMDO_UNITE_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FPOMMDO_UNITE_CDF_NUM_FK,String)
            End If
            If (FPOMMDO_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FPOMMDO_DONANTH_CDF_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FPOMMDO_FPOMM_CODE_FK_PK As Integer,  _
                    ByVal FPOMMDO_NUM_SEQ As Integer,  _
                    ByVal FPOMMDO_DP_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_DP_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_DJ_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_DJ_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_UNIT_CDF_CODE_FK As String,  _
                    ByVal FPOMMDO_UNITE_CDF_NUM_FK As String,  _
                    ByVal FPOMMDO_DONANTH_CDF_CODE_FK As String,  _
                    ByVal Original_FPOMMDO_FPOMM_CODE_FK_PK As Integer,  _
                    ByVal Original_FPOMMDO_NUM_SEQ As Integer,  _
                    ByVal Original_FPOMMDO_DP_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_DP_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_DJ_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_DJ_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_UNIT_CDF_CODE_FK As String,  _
                    ByVal Original_FPOMMDO_UNITE_CDF_NUM_FK As String,  _
                    ByVal Original_FPOMMDO_DONANTH_CDF_CODE_FK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMDO_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMDO_NUM_SEQ,Integer)
            If (FPOMMDO_DP_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOMMDO_DP_MIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_DP_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPOMMDO_DP_MAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_DJ_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FPOMMDO_DJ_MIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_DJ_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FPOMMDO_DJ_MAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FPOMMDO_UNIT_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FPOMMDO_UNIT_CDF_CODE_FK,String)
            End If
            If (FPOMMDO_UNITE_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FPOMMDO_UNITE_CDF_NUM_FK,String)
            End If
            If (FPOMMDO_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FPOMMDO_DONANTH_CDF_CODE_FK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FPOMMDO_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FPOMMDO_NUM_SEQ,Integer)
            If (Original_FPOMMDO_DP_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FPOMMDO_DP_MIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_DP_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FPOMMDO_DP_MAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_DJ_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_FPOMMDO_DJ_MIN.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_DJ_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_FPOMMDO_DJ_MAX.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_FPOMMDO_UNIT_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_FPOMMDO_UNIT_CDF_CODE_FK,String)
            End If
            If (Original_FPOMMDO_UNITE_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_FPOMMDO_UNITE_CDF_NUM_FK,String)
            End If
            If (Original_FPOMMDO_DONANTH_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_FPOMMDO_DONANTH_CDF_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FPOMMDO_DP_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_DP_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_DJ_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_DJ_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal FPOMMDO_UNIT_CDF_CODE_FK As String,  _
                    ByVal FPOMMDO_UNITE_CDF_NUM_FK As String,  _
                    ByVal FPOMMDO_DONANTH_CDF_CODE_FK As String,  _
                    ByVal Original_FPOMMDO_FPOMM_CODE_FK_PK As Integer,  _
                    ByVal Original_FPOMMDO_NUM_SEQ As Integer,  _
                    ByVal Original_FPOMMDO_DP_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_DP_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_DJ_MIN As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_DJ_MAX As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_FPOMMDO_UNIT_CDF_CODE_FK As String,  _
                    ByVal Original_FPOMMDO_UNITE_CDF_NUM_FK As String,  _
                    ByVal Original_FPOMMDO_DONANTH_CDF_CODE_FK As String) As Integer
            Return Me.Update(Original_FPOMMDO_FPOMM_CODE_FK_PK, Original_FPOMMDO_NUM_SEQ, FPOMMDO_DP_MIN, FPOMMDO_DP_MAX, FPOMMDO_DJ_MIN, FPOMMDO_DJ_MAX, FPOMMDO_UNIT_CDF_CODE_FK, FPOMMDO_UNITE_CDF_NUM_FK, FPOMMDO_DONANTH_CDF_CODE_FK, Original_FPOMMDO_FPOMM_CODE_FK_PK, Original_FPOMMDO_NUM_SEQ, Original_FPOMMDO_DP_MIN, Original_FPOMMDO_DP_MAX, Original_FPOMMDO_DJ_MIN, Original_FPOMMDO_DJ_MAX, Original_FPOMMDO_UNIT_CDF_CODE_FK, Original_FPOMMDO_UNITE_CDF_NUM_FK, Original_FPOMMDO_DONANTH_CDF_CODE_FK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMSAC_POSOMINMAX_SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMSAC_POSOMINMAX_SUBACT"
            tableMapping.ColumnMappings.Add("FPOMMSAC_FPOMM_CODE_FK_PK", "FPOMMSAC_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMSAC_SAC_CODE_FK_PK ", "FPOMMSAC_SAC_CODE_FK_PK ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMSAC_POSOMINMAX_SUBACT] WHERE (([FPOMMSAC_FPOMM_CODE"& _ 
                "_FK_PK] = @Original_FPOMMSAC_FPOMM_CODE_FK_PK) AND ([FPOMMSAC_SAC_CODE_FK_PK ] ="& _ 
                " @Original_FPOMMSAC_SAC_CODE_FK_PK_))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSAC_SAC_CODE_FK_PK_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_SAC_CODE_FK_PK ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMSAC_POSOMINMAX_SUBACT] ([FPOMMSAC_FPOMM_CODE_FK_PK]"& _ 
                ", [FPOMMSAC_SAC_CODE_FK_PK ]) VALUES (@FPOMMSAC_FPOMM_CODE_FK_PK, @FPOMMSAC_SAC_"& _ 
                "CODE_FK_PK_);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMSAC_FPOMM_CODE_FK_PK, [FPOMMSAC_SAC_CODE_FK_PK ] FROM"& _ 
                " theriaque.FPOMMSAC_POSOMINMAX_SUBACT WHERE (FPOMMSAC_FPOMM_CODE_FK_PK = @FPOMMS"& _ 
                "AC_FPOMM_CODE_FK_PK) AND (FPOMMSAC_SAC_CODE_FK_PK = @FPOMMSAC_SAC_CODE_FK_PK_)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSAC_SAC_CODE_FK_PK_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_SAC_CODE_FK_PK ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMSAC_POSOMINMAX_SUBACT] SET [FPOMMSAC_FPOMM_CODE_FK_PK] ="& _ 
                " @FPOMMSAC_FPOMM_CODE_FK_PK, [FPOMMSAC_SAC_CODE_FK_PK ] = @FPOMMSAC_SAC_CODE_FK_"& _ 
                "PK_ WHERE (([FPOMMSAC_FPOMM_CODE_FK_PK] = @Original_FPOMMSAC_FPOMM_CODE_FK_PK) A"& _ 
                "ND ([FPOMMSAC_SAC_CODE_FK_PK ] = @Original_FPOMMSAC_SAC_CODE_FK_PK_));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT F"& _ 
                "POMMSAC_FPOMM_CODE_FK_PK, [FPOMMSAC_SAC_CODE_FK_PK ] FROM theriaque.FPOMMSAC_POS"& _ 
                "OMINMAX_SUBACT WHERE (FPOMMSAC_FPOMM_CODE_FK_PK = @FPOMMSAC_FPOMM_CODE_FK_PK) AN"& _ 
                "D (FPOMMSAC_SAC_CODE_FK_PK = @FPOMMSAC_SAC_CODE_FK_PK_)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSAC_SAC_CODE_FK_PK_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_SAC_CODE_FK_PK ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSAC_SAC_CODE_FK_PK_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_SAC_CODE_FK_PK ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.tempConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMSAC_FPOMM_CODE_FK_PK, [FPOMMSAC_SAC_CODE_FK_PK ] FROM theriaque.FPOMM"& _ 
                "SAC_POSOMINMAX_SUBACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMSAC_FPOMM_CODE_FK_PK, [FPOMMSAC_SAC_CODE_FK_PK ] FROM theriaque.FPOMM"& _ 
                "SAC_POSOMINMAX_SUBACT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPOMMSAC_FPOMM_CODE_FK_PK=@FPOMMSAC_FPOMM_CODE_FK_P"& _ 
                "K"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSAC_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable = New dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable, ByVal FPOMMSAC_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMSAC_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMSAC_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMSAC_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable = New dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMSAC_POSOMINMAX_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMSAC_POSOMINMAX_SUBACT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMSAC_SAC_CODE_FK_PK_ As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMSAC_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMSAC_SAC_CODE_FK_PK_,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSAC_SAC_CODE_FK_PK_ As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMSAC_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMSAC_SAC_CODE_FK_PK_,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSAC_SAC_CODE_FK_PK_ As Integer, ByVal Original_FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMSAC_SAC_CODE_FK_PK_ As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMSAC_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMSAC_SAC_CODE_FK_PK_,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOMMSAC_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMMSAC_SAC_CODE_FK_PK_,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPOMMSAC_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMSAC_SAC_CODE_FK_PK_ As Integer) As Integer
            Return Me.Update(Original_FPOMMSAC_FPOMM_CODE_FK_PK, Original_FPOMMSAC_SAC_CODE_FK_PK_, Original_FPOMMSAC_FPOMM_CODE_FK_PK, Original_FPOMMSAC_SAC_CODE_FK_PK_)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMSP_POSOMINMAX_SPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMSP_POSOMINMAX_SPE"
            tableMapping.ColumnMappings.Add("FPOMMSP_FPOMM_CODE_FK_PK", "FPOMMSP_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMSP_SP_CODE_FK_PK", "FPOMMSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMSP_POSOMINMAX_SPE] WHERE (([FPOMMSP_FPOMM_CODE_FK_P"& _ 
                "K] = @Original_FPOMMSP_FPOMM_CODE_FK_PK) AND ([FPOMMSP_SP_CODE_FK_PK] = @Origina"& _ 
                "l_FPOMMSP_SP_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMSP_POSOMINMAX_SPE] ([FPOMMSP_FPOMM_CODE_FK_PK], [FP"& _ 
                "OMMSP_SP_CODE_FK_PK]) VALUES (@FPOMMSP_FPOMM_CODE_FK_PK, @FPOMMSP_SP_CODE_FK_PK)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMSP_FPOMM_CODE_FK_PK, FPOMMSP_SP_CODE_FK_PK FROM theriaque.FPOMMSP"& _ 
                "_POSOMINMAX_SPE WHERE (FPOMMSP_FPOMM_CODE_FK_PK = @FPOMMSP_FPOMM_CODE_FK_PK) AND"& _ 
                " (FPOMMSP_SP_CODE_FK_PK = @FPOMMSP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMSP_POSOMINMAX_SPE] SET [FPOMMSP_FPOMM_CODE_FK_PK] = @FPO"& _ 
                "MMSP_FPOMM_CODE_FK_PK, [FPOMMSP_SP_CODE_FK_PK] = @FPOMMSP_SP_CODE_FK_PK WHERE (("& _ 
                "[FPOMMSP_FPOMM_CODE_FK_PK] = @Original_FPOMMSP_FPOMM_CODE_FK_PK) AND ([FPOMMSP_S"& _ 
                "P_CODE_FK_PK] = @Original_FPOMMSP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMSP_FPOMM_CODE_FK"& _ 
                "_PK, FPOMMSP_SP_CODE_FK_PK FROM theriaque.FPOMMSP_POSOMINMAX_SPE WHERE (FPOMMSP_"& _ 
                "FPOMM_CODE_FK_PK = @FPOMMSP_FPOMM_CODE_FK_PK) AND (FPOMMSP_SP_CODE_FK_PK = @FPOM"& _ 
                "MSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.tempConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMSP_FPOMM_CODE_FK_PK, FPOMMSP_SP_CODE_FK_PK FROM theriaque.FPOMMSP_POS"& _ 
                "OMINMAX_SPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMSP_FPOMM_CODE_FK_PK, FPOMMSP_SP_CODE_FK_PK FROM theriaque.FPOMMSP_POS"& _ 
                "OMINMAX_SPE "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where FPOMMSP_FPOMM_CODE_FK_PK=@FPOMMSP_FPOMM_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMSP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable = New dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable, ByVal FPOMMSP_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMSP_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMSP_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMSP_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable = New dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMSP_POSOMINMAX_SPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMSP_POSOMINMAX_SPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMSP_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMSP_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMSP_SP_CODE_FK_PK As Integer, ByVal Original_FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMSP_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPOMMSP_FPOMM_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMMSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPOMMSP_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMSP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPOMMSP_FPOMM_CODE_FK_PK, Original_FPOMMSP_SP_CODE_FK_PK, Original_FPOMMSP_FPOMM_CODE_FK_PK, Original_FPOMMSP_SP_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPOMMTP_POSOMINMAX_TERPERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPOMMTP_POSOMINMAX_TERPER"
            tableMapping.ColumnMappings.Add("FPOMMTP_FPOMM_CODE_FK_PK", "FPOMMTP_FPOMM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMTP_CODEP_FK_PK", "FPOMMTP_CODEP_FK_PK")
            tableMapping.ColumnMappings.Add("FPOMMTP_NUMEROP_FK_PK", "FPOMMTP_NUMEROP_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FPOMMTP_POSOMINMAX_TERPER] WHERE (([FPOMMTP_FPOMM_CODE_F"& _ 
                "K_PK] = @Original_FPOMMTP_FPOMM_CODE_FK_PK) AND ([FPOMMTP_CODEP_FK_PK] = @Origin"& _ 
                "al_FPOMMTP_CODEP_FK_PK) AND ([FPOMMTP_NUMEROP_FK_PK] = @Original_FPOMMTP_NUMEROP"& _ 
                "_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMTP_CODEP_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_CODEP_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMTP_NUMEROP_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_NUMEROP_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FPOMMTP_POSOMINMAX_TERPER] ([FPOMMTP_FPOMM_CODE_FK_PK], "& _ 
                "[FPOMMTP_CODEP_FK_PK], [FPOMMTP_NUMEROP_FK_PK]) VALUES (@FPOMMTP_FPOMM_CODE_FK_P"& _ 
                "K, @FPOMMTP_CODEP_FK_PK, @FPOMMTP_NUMEROP_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMTP_FPOMM_CODE_FK_"& _ 
                "PK, FPOMMTP_CODEP_FK_PK, FPOMMTP_NUMEROP_FK_PK FROM theriaque.FPOMMTP_POSOMINMAX"& _ 
                "_TERPER WHERE (FPOMMTP_CODEP_FK_PK = @FPOMMTP_CODEP_FK_PK) AND (FPOMMTP_FPOMM_CO"& _ 
                "DE_FK_PK = @FPOMMTP_FPOMM_CODE_FK_PK) AND (FPOMMTP_NUMEROP_FK_PK = @FPOMMTP_NUME"& _ 
                "ROP_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_CODEP_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_CODEP_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_NUMEROP_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_NUMEROP_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FPOMMTP_POSOMINMAX_TERPER] SET [FPOMMTP_FPOMM_CODE_FK_PK] = @"& _ 
                "FPOMMTP_FPOMM_CODE_FK_PK, [FPOMMTP_CODEP_FK_PK] = @FPOMMTP_CODEP_FK_PK, [FPOMMTP"& _ 
                "_NUMEROP_FK_PK] = @FPOMMTP_NUMEROP_FK_PK WHERE (([FPOMMTP_FPOMM_CODE_FK_PK] = @O"& _ 
                "riginal_FPOMMTP_FPOMM_CODE_FK_PK) AND ([FPOMMTP_CODEP_FK_PK] = @Original_FPOMMTP"& _ 
                "_CODEP_FK_PK) AND ([FPOMMTP_NUMEROP_FK_PK] = @Original_FPOMMTP_NUMEROP_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPOMMTP_FPOMM_CODE_FK_PK, FPOMMTP_CODEP_FK_PK, FPOMMTP_NUMEROP_FK_PK FRO"& _ 
                "M theriaque.FPOMMTP_POSOMINMAX_TERPER WHERE (FPOMMTP_CODEP_FK_PK = @FPOMMTP_CODE"& _ 
                "P_FK_PK) AND (FPOMMTP_FPOMM_CODE_FK_PK = @FPOMMTP_FPOMM_CODE_FK_PK) AND (FPOMMTP"& _ 
                "_NUMEROP_FK_PK = @FPOMMTP_NUMEROP_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_CODEP_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_CODEP_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_NUMEROP_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_NUMEROP_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMTP_CODEP_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_CODEP_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPOMMTP_NUMEROP_FK_PK", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_NUMEROP_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.tempConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPOMMTP_FPOMM_CODE_FK_PK, FPOMMTP_CODEP_FK_PK, FPOMMTP_NUMEROP_FK_PK FROM "& _ 
                "theriaque.FPOMMTP_POSOMINMAX_TERPER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPOMMTP_FPOMM_CODE_FK_PK, FPOMMTP_CODEP_FK_PK, FPOMMTP_NUMEROP_FK_PK FROM "& _ 
                "theriaque.FPOMMTP_POSOMINMAX_TERPER"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPOMMTP_FPOMM_CODE_FK_PK=@FPOMMTP_FPO"& _ 
                "MM_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPOMMTP_FPOMM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable = New dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable, ByVal FPOMMTP_FPOMM_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMTP_FPOMM_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPOMMTP_FPOMM_CODE_FK_PK As Integer) As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPOMMTP_FPOMM_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable = New dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pos_Min_Max.FPOMMTP_POSOMINMAX_TERPERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pos_Min_Max) As Integer
            Return Me.Adapter.Update(dataSet, "FPOMMTP_POSOMINMAX_TERPER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMTP_CODEP_FK_PK As String, ByVal Original_FPOMMTP_NUMEROP_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPOMMTP_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMTP_CODEP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMTP_CODEP_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPOMMTP_CODEP_FK_PK,String)
            End If
            If (Original_FPOMMTP_NUMEROP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMTP_NUMEROP_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPOMMTP_NUMEROP_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMTP_CODEP_FK_PK As String, ByVal FPOMMTP_NUMEROP_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPOMMTP_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMTP_CODEP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMTP_CODEP_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPOMMTP_CODEP_FK_PK,String)
            End If
            If (FPOMMTP_NUMEROP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMTP_NUMEROP_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPOMMTP_NUMEROP_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal FPOMMTP_CODEP_FK_PK As String, ByVal FPOMMTP_NUMEROP_FK_PK As String, ByVal Original_FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMTP_CODEP_FK_PK As String, ByVal Original_FPOMMTP_NUMEROP_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPOMMTP_FPOMM_CODE_FK_PK,Integer)
            If (FPOMMTP_CODEP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMTP_CODEP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPOMMTP_CODEP_FK_PK,String)
            End If
            If (FPOMMTP_NUMEROP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPOMMTP_NUMEROP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPOMMTP_NUMEROP_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPOMMTP_FPOMM_CODE_FK_PK,Integer)
            If (Original_FPOMMTP_CODEP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMTP_CODEP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPOMMTP_CODEP_FK_PK,String)
            End If
            If (Original_FPOMMTP_NUMEROP_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPOMMTP_NUMEROP_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPOMMTP_NUMEROP_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPOMMTP_FPOMM_CODE_FK_PK As Integer, ByVal Original_FPOMMTP_CODEP_FK_PK As String, ByVal Original_FPOMMTP_NUMEROP_FK_PK As String) As Integer
            Return Me.Update(Original_FPOMMTP_FPOMM_CODE_FK_PK, Original_FPOMMTP_CODEP_FK_PK, Original_FPOMMTP_NUMEROP_FK_PK, Original_FPOMMTP_FPOMM_CODE_FK_PK, Original_FPOMMTP_CODEP_FK_PK, Original_FPOMMTP_NUMEROP_FK_PK)
        End Function
    End Class
End Namespace
