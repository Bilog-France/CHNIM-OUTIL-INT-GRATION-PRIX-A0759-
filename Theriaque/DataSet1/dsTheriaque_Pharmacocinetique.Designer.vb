'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Pharmacocinetique"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Pharmacocinetique
    Inherits Global.System.Data.DataSet
    
    Private tableFPHCO_PHARMACOCINETIQUE As FPHCO_PHARMACOCINETIQUEDataTable
    
    Private tableFPHCOCPH_FPHCO_CLPH As FPHCOCPH_FPHCO_CLPHDataTable
    
    Private tableFPHCOCCH_FPHCO_CLCH As FPHCOCCH_FPHCO_CLCHDataTable
    
    Private tableFPHCOSAC_FPHCO_SUBACT As FPHCOSAC_FPHCO_SUBACTDataTable
    
    Private tableFPHCOSAU_FPHCO_SUBAUX As FPHCOSAU_FPHCO_SUBAUXDataTable
    
    Private tableFPHCOPR_FPHCO_PROD As FPHCOPR_FPHCO_PRODDataTable
    
    Private tableFPHCOSP_PHARMACOCIN_SPEC As FPHCOSP_PHARMACOCIN_SPECDataTable
    
    Private tableFPHCOCOM_FPHCO_COM As FPHCOCOM_FPHCO_COMDataTable
    
    Private tableFPHCOAFS_FPHCO_AFSSAPS As FPHCOAFS_FPHCO_AFSSAPSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FPHCO_PHARMACOCINETIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCO_PHARMACOCINETIQUEDataTable(ds.Tables("FPHCO_PHARMACOCINETIQUE")))
            End If
            If (Not (ds.Tables("FPHCOCPH_FPHCO_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOCPH_FPHCO_CLPHDataTable(ds.Tables("FPHCOCPH_FPHCO_CLPH")))
            End If
            If (Not (ds.Tables("FPHCOCCH_FPHCO_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOCCH_FPHCO_CLCHDataTable(ds.Tables("FPHCOCCH_FPHCO_CLCH")))
            End If
            If (Not (ds.Tables("FPHCOSAC_FPHCO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOSAC_FPHCO_SUBACTDataTable(ds.Tables("FPHCOSAC_FPHCO_SUBACT")))
            End If
            If (Not (ds.Tables("FPHCOSAU_FPHCO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOSAU_FPHCO_SUBAUXDataTable(ds.Tables("FPHCOSAU_FPHCO_SUBAUX")))
            End If
            If (Not (ds.Tables("FPHCOPR_FPHCO_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOPR_FPHCO_PRODDataTable(ds.Tables("FPHCOPR_FPHCO_PROD")))
            End If
            If (Not (ds.Tables("FPHCOSP_PHARMACOCIN_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOSP_PHARMACOCIN_SPECDataTable(ds.Tables("FPHCOSP_PHARMACOCIN_SPEC")))
            End If
            If (Not (ds.Tables("FPHCOCOM_FPHCO_COM")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOCOM_FPHCO_COMDataTable(ds.Tables("FPHCOCOM_FPHCO_COM")))
            End If
            If (Not (ds.Tables("FPHCOAFS_FPHCO_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOAFS_FPHCO_AFSSAPSDataTable(ds.Tables("FPHCOAFS_FPHCO_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCO_PHARMACOCINETIQUE() As FPHCO_PHARMACOCINETIQUEDataTable
        Get
            Return Me.tableFPHCO_PHARMACOCINETIQUE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOCPH_FPHCO_CLPH() As FPHCOCPH_FPHCO_CLPHDataTable
        Get
            Return Me.tableFPHCOCPH_FPHCO_CLPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOCCH_FPHCO_CLCH() As FPHCOCCH_FPHCO_CLCHDataTable
        Get
            Return Me.tableFPHCOCCH_FPHCO_CLCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOSAC_FPHCO_SUBACT() As FPHCOSAC_FPHCO_SUBACTDataTable
        Get
            Return Me.tableFPHCOSAC_FPHCO_SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOSAU_FPHCO_SUBAUX() As FPHCOSAU_FPHCO_SUBAUXDataTable
        Get
            Return Me.tableFPHCOSAU_FPHCO_SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOPR_FPHCO_PROD() As FPHCOPR_FPHCO_PRODDataTable
        Get
            Return Me.tableFPHCOPR_FPHCO_PROD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOSP_PHARMACOCIN_SPEC() As FPHCOSP_PHARMACOCIN_SPECDataTable
        Get
            Return Me.tableFPHCOSP_PHARMACOCIN_SPEC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOCOM_FPHCO_COM() As FPHCOCOM_FPHCO_COMDataTable
        Get
            Return Me.tableFPHCOCOM_FPHCO_COM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FPHCOAFS_FPHCO_AFSSAPS() As FPHCOAFS_FPHCO_AFSSAPSDataTable
        Get
            Return Me.tableFPHCOAFS_FPHCO_AFSSAPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Pharmacocinetique = CType(MyBase.Clone,dsTheriaque_Pharmacocinetique)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FPHCO_PHARMACOCINETIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCO_PHARMACOCINETIQUEDataTable(ds.Tables("FPHCO_PHARMACOCINETIQUE")))
            End If
            If (Not (ds.Tables("FPHCOCPH_FPHCO_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOCPH_FPHCO_CLPHDataTable(ds.Tables("FPHCOCPH_FPHCO_CLPH")))
            End If
            If (Not (ds.Tables("FPHCOCCH_FPHCO_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOCCH_FPHCO_CLCHDataTable(ds.Tables("FPHCOCCH_FPHCO_CLCH")))
            End If
            If (Not (ds.Tables("FPHCOSAC_FPHCO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOSAC_FPHCO_SUBACTDataTable(ds.Tables("FPHCOSAC_FPHCO_SUBACT")))
            End If
            If (Not (ds.Tables("FPHCOSAU_FPHCO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOSAU_FPHCO_SUBAUXDataTable(ds.Tables("FPHCOSAU_FPHCO_SUBAUX")))
            End If
            If (Not (ds.Tables("FPHCOPR_FPHCO_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOPR_FPHCO_PRODDataTable(ds.Tables("FPHCOPR_FPHCO_PROD")))
            End If
            If (Not (ds.Tables("FPHCOSP_PHARMACOCIN_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOSP_PHARMACOCIN_SPECDataTable(ds.Tables("FPHCOSP_PHARMACOCIN_SPEC")))
            End If
            If (Not (ds.Tables("FPHCOCOM_FPHCO_COM")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOCOM_FPHCO_COMDataTable(ds.Tables("FPHCOCOM_FPHCO_COM")))
            End If
            If (Not (ds.Tables("FPHCOAFS_FPHCO_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FPHCOAFS_FPHCO_AFSSAPSDataTable(ds.Tables("FPHCOAFS_FPHCO_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFPHCO_PHARMACOCINETIQUE = CType(MyBase.Tables("FPHCO_PHARMACOCINETIQUE"),FPHCO_PHARMACOCINETIQUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCO_PHARMACOCINETIQUE) Is Nothing) Then
                Me.tableFPHCO_PHARMACOCINETIQUE.InitVars
            End If
        End If
        Me.tableFPHCOCPH_FPHCO_CLPH = CType(MyBase.Tables("FPHCOCPH_FPHCO_CLPH"),FPHCOCPH_FPHCO_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOCPH_FPHCO_CLPH) Is Nothing) Then
                Me.tableFPHCOCPH_FPHCO_CLPH.InitVars
            End If
        End If
        Me.tableFPHCOCCH_FPHCO_CLCH = CType(MyBase.Tables("FPHCOCCH_FPHCO_CLCH"),FPHCOCCH_FPHCO_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOCCH_FPHCO_CLCH) Is Nothing) Then
                Me.tableFPHCOCCH_FPHCO_CLCH.InitVars
            End If
        End If
        Me.tableFPHCOSAC_FPHCO_SUBACT = CType(MyBase.Tables("FPHCOSAC_FPHCO_SUBACT"),FPHCOSAC_FPHCO_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOSAC_FPHCO_SUBACT) Is Nothing) Then
                Me.tableFPHCOSAC_FPHCO_SUBACT.InitVars
            End If
        End If
        Me.tableFPHCOSAU_FPHCO_SUBAUX = CType(MyBase.Tables("FPHCOSAU_FPHCO_SUBAUX"),FPHCOSAU_FPHCO_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOSAU_FPHCO_SUBAUX) Is Nothing) Then
                Me.tableFPHCOSAU_FPHCO_SUBAUX.InitVars
            End If
        End If
        Me.tableFPHCOPR_FPHCO_PROD = CType(MyBase.Tables("FPHCOPR_FPHCO_PROD"),FPHCOPR_FPHCO_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOPR_FPHCO_PROD) Is Nothing) Then
                Me.tableFPHCOPR_FPHCO_PROD.InitVars
            End If
        End If
        Me.tableFPHCOSP_PHARMACOCIN_SPEC = CType(MyBase.Tables("FPHCOSP_PHARMACOCIN_SPEC"),FPHCOSP_PHARMACOCIN_SPECDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOSP_PHARMACOCIN_SPEC) Is Nothing) Then
                Me.tableFPHCOSP_PHARMACOCIN_SPEC.InitVars
            End If
        End If
        Me.tableFPHCOCOM_FPHCO_COM = CType(MyBase.Tables("FPHCOCOM_FPHCO_COM"),FPHCOCOM_FPHCO_COMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOCOM_FPHCO_COM) Is Nothing) Then
                Me.tableFPHCOCOM_FPHCO_COM.InitVars
            End If
        End If
        Me.tableFPHCOAFS_FPHCO_AFSSAPS = CType(MyBase.Tables("FPHCOAFS_FPHCO_AFSSAPS"),FPHCOAFS_FPHCO_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFPHCOAFS_FPHCO_AFSSAPS) Is Nothing) Then
                Me.tableFPHCOAFS_FPHCO_AFSSAPS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Pharmacocinetique"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Pharmacocinetique.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFPHCO_PHARMACOCINETIQUE = New FPHCO_PHARMACOCINETIQUEDataTable
        MyBase.Tables.Add(Me.tableFPHCO_PHARMACOCINETIQUE)
        Me.tableFPHCOCPH_FPHCO_CLPH = New FPHCOCPH_FPHCO_CLPHDataTable
        MyBase.Tables.Add(Me.tableFPHCOCPH_FPHCO_CLPH)
        Me.tableFPHCOCCH_FPHCO_CLCH = New FPHCOCCH_FPHCO_CLCHDataTable
        MyBase.Tables.Add(Me.tableFPHCOCCH_FPHCO_CLCH)
        Me.tableFPHCOSAC_FPHCO_SUBACT = New FPHCOSAC_FPHCO_SUBACTDataTable
        MyBase.Tables.Add(Me.tableFPHCOSAC_FPHCO_SUBACT)
        Me.tableFPHCOSAU_FPHCO_SUBAUX = New FPHCOSAU_FPHCO_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableFPHCOSAU_FPHCO_SUBAUX)
        Me.tableFPHCOPR_FPHCO_PROD = New FPHCOPR_FPHCO_PRODDataTable
        MyBase.Tables.Add(Me.tableFPHCOPR_FPHCO_PROD)
        Me.tableFPHCOSP_PHARMACOCIN_SPEC = New FPHCOSP_PHARMACOCIN_SPECDataTable
        MyBase.Tables.Add(Me.tableFPHCOSP_PHARMACOCIN_SPEC)
        Me.tableFPHCOCOM_FPHCO_COM = New FPHCOCOM_FPHCO_COMDataTable
        MyBase.Tables.Add(Me.tableFPHCOCOM_FPHCO_COM)
        Me.tableFPHCOAFS_FPHCO_AFSSAPS = New FPHCOAFS_FPHCO_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFPHCOAFS_FPHCO_AFSSAPS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCO_PHARMACOCINETIQUE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOCPH_FPHCO_CLPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOCCH_FPHCO_CLCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOSAC_FPHCO_SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOSAU_FPHCO_SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOPR_FPHCO_PROD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOSP_PHARMACOCIN_SPEC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOCOM_FPHCO_COM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFPHCOAFS_FPHCO_AFSSAPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FPHCO_PHARMACOCINETIQUERowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCO_PHARMACOCINETIQUERowChangeEvent)
    
    Public Delegate Sub FPHCOCPH_FPHCO_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOCPH_FPHCO_CLPHRowChangeEvent)
    
    Public Delegate Sub FPHCOCCH_FPHCO_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOCCH_FPHCO_CLCHRowChangeEvent)
    
    Public Delegate Sub FPHCOSAC_FPHCO_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOSAC_FPHCO_SUBACTRowChangeEvent)
    
    Public Delegate Sub FPHCOSAU_FPHCO_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOSAU_FPHCO_SUBAUXRowChangeEvent)
    
    Public Delegate Sub FPHCOPR_FPHCO_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOPR_FPHCO_PRODRowChangeEvent)
    
    Public Delegate Sub FPHCOSP_PHARMACOCIN_SPECRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOSP_PHARMACOCIN_SPECRowChangeEvent)
    
    Public Delegate Sub FPHCOCOM_FPHCO_COMRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOCOM_FPHCO_COMRowChangeEvent)
    
    Public Delegate Sub FPHCOAFS_FPHCO_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FPHCOAFS_FPHCO_AFSSAPSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCO_PHARMACOCINETIQUEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCO_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFPHCO_TXT As Global.System.Data.DataColumn
        
        Private columnFPHCO_DATECR As Global.System.Data.DataColumn
        
        Private columnFPHCO_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCO_PHARMACOCINETIQUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCO_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCO_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCO_TXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCO_TXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCO_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCO_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCO_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCO_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCO_PHARMACOCINETIQUERow
            Get
                Return CType(Me.Rows(index),FPHCO_PHARMACOCINETIQUERow)
            End Get
        End Property
        
        Public Event FPHCO_PHARMACOCINETIQUERowChanging As FPHCO_PHARMACOCINETIQUERowChangeEventHandler
        
        Public Event FPHCO_PHARMACOCINETIQUERowChanged As FPHCO_PHARMACOCINETIQUERowChangeEventHandler
        
        Public Event FPHCO_PHARMACOCINETIQUERowDeleting As FPHCO_PHARMACOCINETIQUERowChangeEventHandler
        
        Public Event FPHCO_PHARMACOCINETIQUERowDeleted As FPHCO_PHARMACOCINETIQUERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCO_PHARMACOCINETIQUERow(ByVal row As FPHCO_PHARMACOCINETIQUERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCO_PHARMACOCINETIQUERow(ByVal FPHCO_CODE_SQ_PK As Integer, ByVal FPHCO_TXT As String, ByVal FPHCO_DATECR As Date, ByVal FPHCO_DATEMJ As Date) As FPHCO_PHARMACOCINETIQUERow
            Dim rowFPHCO_PHARMACOCINETIQUERow As FPHCO_PHARMACOCINETIQUERow = CType(Me.NewRow,FPHCO_PHARMACOCINETIQUERow)
            Dim columnValuesArray() As Object = New Object() {FPHCO_CODE_SQ_PK, FPHCO_TXT, FPHCO_DATECR, FPHCO_DATEMJ}
            rowFPHCO_PHARMACOCINETIQUERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCO_PHARMACOCINETIQUERow)
            Return rowFPHCO_PHARMACOCINETIQUERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCO_CODE_SQ_PK(ByVal FPHCO_CODE_SQ_PK As Integer) As FPHCO_PHARMACOCINETIQUERow
            Return CType(Me.Rows.Find(New Object() {FPHCO_CODE_SQ_PK}),FPHCO_PHARMACOCINETIQUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCO_PHARMACOCINETIQUEDataTable = CType(MyBase.Clone,FPHCO_PHARMACOCINETIQUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCO_PHARMACOCINETIQUEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCO_CODE_SQ_PK = MyBase.Columns("FPHCO_CODE_SQ_PK")
            Me.columnFPHCO_TXT = MyBase.Columns("FPHCO_TXT")
            Me.columnFPHCO_DATECR = MyBase.Columns("FPHCO_DATECR")
            Me.columnFPHCO_DATEMJ = MyBase.Columns("FPHCO_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCO_CODE_SQ_PK = New Global.System.Data.DataColumn("FPHCO_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCO_CODE_SQ_PK)
            Me.columnFPHCO_TXT = New Global.System.Data.DataColumn("FPHCO_TXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCO_TXT)
            Me.columnFPHCO_DATECR = New Global.System.Data.DataColumn("FPHCO_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCO_DATECR)
            Me.columnFPHCO_DATEMJ = New Global.System.Data.DataColumn("FPHCO_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCO_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCO_CODE_SQ_PK}, true))
            Me.columnFPHCO_CODE_SQ_PK.AllowDBNull = false
            Me.columnFPHCO_CODE_SQ_PK.Unique = true
            Me.columnFPHCO_TXT.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCO_PHARMACOCINETIQUERow() As FPHCO_PHARMACOCINETIQUERow
            Return CType(Me.NewRow,FPHCO_PHARMACOCINETIQUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCO_PHARMACOCINETIQUERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCO_PHARMACOCINETIQUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCO_PHARMACOCINETIQUERowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCO_PHARMACOCINETIQUERowChanged(Me, New FPHCO_PHARMACOCINETIQUERowChangeEvent(CType(e.Row,FPHCO_PHARMACOCINETIQUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCO_PHARMACOCINETIQUERowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCO_PHARMACOCINETIQUERowChanging(Me, New FPHCO_PHARMACOCINETIQUERowChangeEvent(CType(e.Row,FPHCO_PHARMACOCINETIQUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCO_PHARMACOCINETIQUERowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCO_PHARMACOCINETIQUERowDeleted(Me, New FPHCO_PHARMACOCINETIQUERowChangeEvent(CType(e.Row,FPHCO_PHARMACOCINETIQUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCO_PHARMACOCINETIQUERowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCO_PHARMACOCINETIQUERowDeleting(Me, New FPHCO_PHARMACOCINETIQUERowChangeEvent(CType(e.Row,FPHCO_PHARMACOCINETIQUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCO_PHARMACOCINETIQUERow(ByVal row As FPHCO_PHARMACOCINETIQUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCO_PHARMACOCINETIQUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOCPH_FPHCO_CLPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOCPH_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOCPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOCPH_FPHCO_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCPH_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCPH_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOCPH_FPHCO_CLPHRow
            Get
                Return CType(Me.Rows(index),FPHCOCPH_FPHCO_CLPHRow)
            End Get
        End Property
        
        Public Event FPHCOCPH_FPHCO_CLPHRowChanging As FPHCOCPH_FPHCO_CLPHRowChangeEventHandler
        
        Public Event FPHCOCPH_FPHCO_CLPHRowChanged As FPHCOCPH_FPHCO_CLPHRowChangeEventHandler
        
        Public Event FPHCOCPH_FPHCO_CLPHRowDeleting As FPHCOCPH_FPHCO_CLPHRowChangeEventHandler
        
        Public Event FPHCOCPH_FPHCO_CLPHRowDeleted As FPHCOCPH_FPHCO_CLPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOCPH_FPHCO_CLPHRow(ByVal row As FPHCOCPH_FPHCO_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOCPH_FPHCO_CLPHRow(ByVal FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCPH_CPH_CODE_FK_PK As String) As FPHCOCPH_FPHCO_CLPHRow
            Dim rowFPHCOCPH_FPHCO_CLPHRow As FPHCOCPH_FPHCO_CLPHRow = CType(Me.NewRow,FPHCOCPH_FPHCO_CLPHRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOCPH_FPHCO_CODE_FK_PK, FPHCOCPH_CPH_CODE_FK_PK}
            rowFPHCOCPH_FPHCO_CLPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOCPH_FPHCO_CLPHRow)
            Return rowFPHCOCPH_FPHCO_CLPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOCPH_FPHCO_CODE_FK_PKFPHCOCPH_CPH_CODE_FK_PK(ByVal FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCPH_CPH_CODE_FK_PK As String) As FPHCOCPH_FPHCO_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FPHCOCPH_FPHCO_CODE_FK_PK, FPHCOCPH_CPH_CODE_FK_PK}),FPHCOCPH_FPHCO_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOCPH_FPHCO_CLPHDataTable = CType(MyBase.Clone,FPHCOCPH_FPHCO_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOCPH_FPHCO_CLPHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOCPH_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOCPH_FPHCO_CODE_FK_PK")
            Me.columnFPHCOCPH_CPH_CODE_FK_PK = MyBase.Columns("FPHCOCPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOCPH_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOCPH_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCPH_FPHCO_CODE_FK_PK)
            Me.columnFPHCOCPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOCPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOCPH_FPHCO_CODE_FK_PK, Me.columnFPHCOCPH_CPH_CODE_FK_PK}, true))
            Me.columnFPHCOCPH_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOCPH_FPHCO_CLPHRow() As FPHCOCPH_FPHCO_CLPHRow
            Return CType(Me.NewRow,FPHCOCPH_FPHCO_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOCPH_FPHCO_CLPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOCPH_FPHCO_CLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOCPH_FPHCO_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOCPH_FPHCO_CLPHRowChanged(Me, New FPHCOCPH_FPHCO_CLPHRowChangeEvent(CType(e.Row,FPHCOCPH_FPHCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOCPH_FPHCO_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOCPH_FPHCO_CLPHRowChanging(Me, New FPHCOCPH_FPHCO_CLPHRowChangeEvent(CType(e.Row,FPHCOCPH_FPHCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOCPH_FPHCO_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOCPH_FPHCO_CLPHRowDeleted(Me, New FPHCOCPH_FPHCO_CLPHRowChangeEvent(CType(e.Row,FPHCOCPH_FPHCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOCPH_FPHCO_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOCPH_FPHCO_CLPHRowDeleting(Me, New FPHCOCPH_FPHCO_CLPHRowChangeEvent(CType(e.Row,FPHCOCPH_FPHCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOCPH_FPHCO_CLPHRow(ByVal row As FPHCOCPH_FPHCO_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOCPH_FPHCO_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOCCH_FPHCO_CLCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOCCH_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOCCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOCCH_FPHCO_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCCH_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCCH_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOCCH_FPHCO_CLCHRow
            Get
                Return CType(Me.Rows(index),FPHCOCCH_FPHCO_CLCHRow)
            End Get
        End Property
        
        Public Event FPHCOCCH_FPHCO_CLCHRowChanging As FPHCOCCH_FPHCO_CLCHRowChangeEventHandler
        
        Public Event FPHCOCCH_FPHCO_CLCHRowChanged As FPHCOCCH_FPHCO_CLCHRowChangeEventHandler
        
        Public Event FPHCOCCH_FPHCO_CLCHRowDeleting As FPHCOCCH_FPHCO_CLCHRowChangeEventHandler
        
        Public Event FPHCOCCH_FPHCO_CLCHRowDeleted As FPHCOCCH_FPHCO_CLCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOCCH_FPHCO_CLCHRow(ByVal row As FPHCOCCH_FPHCO_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOCCH_FPHCO_CLCHRow(ByVal FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCCH_CCH_CODE_FK_PK As String) As FPHCOCCH_FPHCO_CLCHRow
            Dim rowFPHCOCCH_FPHCO_CLCHRow As FPHCOCCH_FPHCO_CLCHRow = CType(Me.NewRow,FPHCOCCH_FPHCO_CLCHRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOCCH_FPHCO_CODE_FK_PK, FPHCOCCH_CCH_CODE_FK_PK}
            rowFPHCOCCH_FPHCO_CLCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOCCH_FPHCO_CLCHRow)
            Return rowFPHCOCCH_FPHCO_CLCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOCCH_FPHCO_CODE_FK_PKFPHCOCCH_CCH_CODE_FK_PK(ByVal FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCCH_CCH_CODE_FK_PK As String) As FPHCOCCH_FPHCO_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FPHCOCCH_FPHCO_CODE_FK_PK, FPHCOCCH_CCH_CODE_FK_PK}),FPHCOCCH_FPHCO_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOCCH_FPHCO_CLCHDataTable = CType(MyBase.Clone,FPHCOCCH_FPHCO_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOCCH_FPHCO_CLCHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOCCH_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOCCH_FPHCO_CODE_FK_PK")
            Me.columnFPHCOCCH_CCH_CODE_FK_PK = MyBase.Columns("FPHCOCCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOCCH_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOCCH_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCCH_FPHCO_CODE_FK_PK)
            Me.columnFPHCOCCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOCCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOCCH_FPHCO_CODE_FK_PK, Me.columnFPHCOCCH_CCH_CODE_FK_PK}, true))
            Me.columnFPHCOCCH_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOCCH_FPHCO_CLCHRow() As FPHCOCCH_FPHCO_CLCHRow
            Return CType(Me.NewRow,FPHCOCCH_FPHCO_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOCCH_FPHCO_CLCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOCCH_FPHCO_CLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOCCH_FPHCO_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOCCH_FPHCO_CLCHRowChanged(Me, New FPHCOCCH_FPHCO_CLCHRowChangeEvent(CType(e.Row,FPHCOCCH_FPHCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOCCH_FPHCO_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOCCH_FPHCO_CLCHRowChanging(Me, New FPHCOCCH_FPHCO_CLCHRowChangeEvent(CType(e.Row,FPHCOCCH_FPHCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOCCH_FPHCO_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOCCH_FPHCO_CLCHRowDeleted(Me, New FPHCOCCH_FPHCO_CLCHRowChangeEvent(CType(e.Row,FPHCOCCH_FPHCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOCCH_FPHCO_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOCCH_FPHCO_CLCHRowDeleting(Me, New FPHCOCCH_FPHCO_CLCHRowChangeEvent(CType(e.Row,FPHCOCCH_FPHCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOCCH_FPHCO_CLCHRow(ByVal row As FPHCOCCH_FPHCO_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOCCH_FPHCO_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOSAC_FPHCO_SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOSAC_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOSAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOSAC_FPHCO_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOSAC_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOSAC_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOSAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOSAC_FPHCO_SUBACTRow
            Get
                Return CType(Me.Rows(index),FPHCOSAC_FPHCO_SUBACTRow)
            End Get
        End Property
        
        Public Event FPHCOSAC_FPHCO_SUBACTRowChanging As FPHCOSAC_FPHCO_SUBACTRowChangeEventHandler
        
        Public Event FPHCOSAC_FPHCO_SUBACTRowChanged As FPHCOSAC_FPHCO_SUBACTRowChangeEventHandler
        
        Public Event FPHCOSAC_FPHCO_SUBACTRowDeleting As FPHCOSAC_FPHCO_SUBACTRowChangeEventHandler
        
        Public Event FPHCOSAC_FPHCO_SUBACTRowDeleted As FPHCOSAC_FPHCO_SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOSAC_FPHCO_SUBACTRow(ByVal row As FPHCOSAC_FPHCO_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOSAC_FPHCO_SUBACTRow(ByVal FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAC_SAC_CODE_FK_PK As Integer) As FPHCOSAC_FPHCO_SUBACTRow
            Dim rowFPHCOSAC_FPHCO_SUBACTRow As FPHCOSAC_FPHCO_SUBACTRow = CType(Me.NewRow,FPHCOSAC_FPHCO_SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOSAC_FPHCO_CODE_FK_PK, FPHCOSAC_SAC_CODE_FK_PK}
            rowFPHCOSAC_FPHCO_SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOSAC_FPHCO_SUBACTRow)
            Return rowFPHCOSAC_FPHCO_SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOSAC_FPHCO_CODE_FK_PKFPHCOSAC_SAC_CODE_FK_PK(ByVal FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAC_SAC_CODE_FK_PK As Integer) As FPHCOSAC_FPHCO_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {FPHCOSAC_FPHCO_CODE_FK_PK, FPHCOSAC_SAC_CODE_FK_PK}),FPHCOSAC_FPHCO_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOSAC_FPHCO_SUBACTDataTable = CType(MyBase.Clone,FPHCOSAC_FPHCO_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOSAC_FPHCO_SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOSAC_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOSAC_FPHCO_CODE_FK_PK")
            Me.columnFPHCOSAC_SAC_CODE_FK_PK = MyBase.Columns("FPHCOSAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOSAC_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOSAC_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOSAC_FPHCO_CODE_FK_PK)
            Me.columnFPHCOSAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOSAC_FPHCO_CODE_FK_PK, Me.columnFPHCOSAC_SAC_CODE_FK_PK}, true))
            Me.columnFPHCOSAC_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOSAC_FPHCO_SUBACTRow() As FPHCOSAC_FPHCO_SUBACTRow
            Return CType(Me.NewRow,FPHCOSAC_FPHCO_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOSAC_FPHCO_SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOSAC_FPHCO_SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOSAC_FPHCO_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOSAC_FPHCO_SUBACTRowChanged(Me, New FPHCOSAC_FPHCO_SUBACTRowChangeEvent(CType(e.Row,FPHCOSAC_FPHCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOSAC_FPHCO_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOSAC_FPHCO_SUBACTRowChanging(Me, New FPHCOSAC_FPHCO_SUBACTRowChangeEvent(CType(e.Row,FPHCOSAC_FPHCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOSAC_FPHCO_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOSAC_FPHCO_SUBACTRowDeleted(Me, New FPHCOSAC_FPHCO_SUBACTRowChangeEvent(CType(e.Row,FPHCOSAC_FPHCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOSAC_FPHCO_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOSAC_FPHCO_SUBACTRowDeleting(Me, New FPHCOSAC_FPHCO_SUBACTRowChangeEvent(CType(e.Row,FPHCOSAC_FPHCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOSAC_FPHCO_SUBACTRow(ByVal row As FPHCOSAC_FPHCO_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOSAC_FPHCO_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOSAU_FPHCO_SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOSAU_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOSAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOSAU_FPHCO_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOSAU_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOSAU_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOSAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOSAU_FPHCO_SUBAUXRow
            Get
                Return CType(Me.Rows(index),FPHCOSAU_FPHCO_SUBAUXRow)
            End Get
        End Property
        
        Public Event FPHCOSAU_FPHCO_SUBAUXRowChanging As FPHCOSAU_FPHCO_SUBAUXRowChangeEventHandler
        
        Public Event FPHCOSAU_FPHCO_SUBAUXRowChanged As FPHCOSAU_FPHCO_SUBAUXRowChangeEventHandler
        
        Public Event FPHCOSAU_FPHCO_SUBAUXRowDeleting As FPHCOSAU_FPHCO_SUBAUXRowChangeEventHandler
        
        Public Event FPHCOSAU_FPHCO_SUBAUXRowDeleted As FPHCOSAU_FPHCO_SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOSAU_FPHCO_SUBAUXRow(ByVal row As FPHCOSAU_FPHCO_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOSAU_FPHCO_SUBAUXRow(ByVal FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAU_SAU_CODE_FK_PK As Integer) As FPHCOSAU_FPHCO_SUBAUXRow
            Dim rowFPHCOSAU_FPHCO_SUBAUXRow As FPHCOSAU_FPHCO_SUBAUXRow = CType(Me.NewRow,FPHCOSAU_FPHCO_SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOSAU_FPHCO_CODE_FK_PK, FPHCOSAU_SAU_CODE_FK_PK}
            rowFPHCOSAU_FPHCO_SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOSAU_FPHCO_SUBAUXRow)
            Return rowFPHCOSAU_FPHCO_SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOSAU_FPHCO_CODE_FK_PKFPHCOSAU_SAU_CODE_FK_PK(ByVal FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAU_SAU_CODE_FK_PK As Integer) As FPHCOSAU_FPHCO_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {FPHCOSAU_FPHCO_CODE_FK_PK, FPHCOSAU_SAU_CODE_FK_PK}),FPHCOSAU_FPHCO_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOSAU_FPHCO_SUBAUXDataTable = CType(MyBase.Clone,FPHCOSAU_FPHCO_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOSAU_FPHCO_SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOSAU_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOSAU_FPHCO_CODE_FK_PK")
            Me.columnFPHCOSAU_SAU_CODE_FK_PK = MyBase.Columns("FPHCOSAU_SAU_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOSAU_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOSAU_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOSAU_FPHCO_CODE_FK_PK)
            Me.columnFPHCOSAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOSAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOSAU_FPHCO_CODE_FK_PK, Me.columnFPHCOSAU_SAU_CODE_FK_PK}, true))
            Me.columnFPHCOSAU_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOSAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOSAU_FPHCO_SUBAUXRow() As FPHCOSAU_FPHCO_SUBAUXRow
            Return CType(Me.NewRow,FPHCOSAU_FPHCO_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOSAU_FPHCO_SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOSAU_FPHCO_SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOSAU_FPHCO_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOSAU_FPHCO_SUBAUXRowChanged(Me, New FPHCOSAU_FPHCO_SUBAUXRowChangeEvent(CType(e.Row,FPHCOSAU_FPHCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOSAU_FPHCO_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOSAU_FPHCO_SUBAUXRowChanging(Me, New FPHCOSAU_FPHCO_SUBAUXRowChangeEvent(CType(e.Row,FPHCOSAU_FPHCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOSAU_FPHCO_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOSAU_FPHCO_SUBAUXRowDeleted(Me, New FPHCOSAU_FPHCO_SUBAUXRowChangeEvent(CType(e.Row,FPHCOSAU_FPHCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOSAU_FPHCO_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOSAU_FPHCO_SUBAUXRowDeleting(Me, New FPHCOSAU_FPHCO_SUBAUXRowChangeEvent(CType(e.Row,FPHCOSAU_FPHCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOSAU_FPHCO_SUBAUXRow(ByVal row As FPHCOSAU_FPHCO_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOSAU_FPHCO_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOPR_FPHCO_PRODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOPR_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOPR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOPR_FPHCO_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOPR_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOPR_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOPR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOPR_FPHCO_PRODRow
            Get
                Return CType(Me.Rows(index),FPHCOPR_FPHCO_PRODRow)
            End Get
        End Property
        
        Public Event FPHCOPR_FPHCO_PRODRowChanging As FPHCOPR_FPHCO_PRODRowChangeEventHandler
        
        Public Event FPHCOPR_FPHCO_PRODRowChanged As FPHCOPR_FPHCO_PRODRowChangeEventHandler
        
        Public Event FPHCOPR_FPHCO_PRODRowDeleting As FPHCOPR_FPHCO_PRODRowChangeEventHandler
        
        Public Event FPHCOPR_FPHCO_PRODRowDeleted As FPHCOPR_FPHCO_PRODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOPR_FPHCO_PRODRow(ByVal row As FPHCOPR_FPHCO_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOPR_FPHCO_PRODRow(ByVal FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOPR_PR_CODE_FK_PK As Integer) As FPHCOPR_FPHCO_PRODRow
            Dim rowFPHCOPR_FPHCO_PRODRow As FPHCOPR_FPHCO_PRODRow = CType(Me.NewRow,FPHCOPR_FPHCO_PRODRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOPR_FPHCO_CODE_FK_PK, FPHCOPR_PR_CODE_FK_PK}
            rowFPHCOPR_FPHCO_PRODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOPR_FPHCO_PRODRow)
            Return rowFPHCOPR_FPHCO_PRODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOPR_FPHCO_CODE_FK_PKFPHCOPR_PR_CODE_FK_PK(ByVal FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOPR_PR_CODE_FK_PK As Integer) As FPHCOPR_FPHCO_PRODRow
            Return CType(Me.Rows.Find(New Object() {FPHCOPR_FPHCO_CODE_FK_PK, FPHCOPR_PR_CODE_FK_PK}),FPHCOPR_FPHCO_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOPR_FPHCO_PRODDataTable = CType(MyBase.Clone,FPHCOPR_FPHCO_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOPR_FPHCO_PRODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOPR_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOPR_FPHCO_CODE_FK_PK")
            Me.columnFPHCOPR_PR_CODE_FK_PK = MyBase.Columns("FPHCOPR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOPR_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOPR_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOPR_FPHCO_CODE_FK_PK)
            Me.columnFPHCOPR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOPR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOPR_FPHCO_CODE_FK_PK, Me.columnFPHCOPR_PR_CODE_FK_PK}, true))
            Me.columnFPHCOPR_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOPR_FPHCO_PRODRow() As FPHCOPR_FPHCO_PRODRow
            Return CType(Me.NewRow,FPHCOPR_FPHCO_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOPR_FPHCO_PRODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOPR_FPHCO_PRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOPR_FPHCO_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOPR_FPHCO_PRODRowChanged(Me, New FPHCOPR_FPHCO_PRODRowChangeEvent(CType(e.Row,FPHCOPR_FPHCO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOPR_FPHCO_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOPR_FPHCO_PRODRowChanging(Me, New FPHCOPR_FPHCO_PRODRowChangeEvent(CType(e.Row,FPHCOPR_FPHCO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOPR_FPHCO_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOPR_FPHCO_PRODRowDeleted(Me, New FPHCOPR_FPHCO_PRODRowChangeEvent(CType(e.Row,FPHCOPR_FPHCO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOPR_FPHCO_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOPR_FPHCO_PRODRowDeleting(Me, New FPHCOPR_FPHCO_PRODRowChangeEvent(CType(e.Row,FPHCOPR_FPHCO_PRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOPR_FPHCO_PRODRow(ByVal row As FPHCOPR_FPHCO_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOPR_FPHCO_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOSP_PHARMACOCIN_SPECDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOSP_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOSP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOSP_PHARMACOCIN_SPEC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOSP_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOSP_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOSP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOSP_PHARMACOCIN_SPECRow
            Get
                Return CType(Me.Rows(index),FPHCOSP_PHARMACOCIN_SPECRow)
            End Get
        End Property
        
        Public Event FPHCOSP_PHARMACOCIN_SPECRowChanging As FPHCOSP_PHARMACOCIN_SPECRowChangeEventHandler
        
        Public Event FPHCOSP_PHARMACOCIN_SPECRowChanged As FPHCOSP_PHARMACOCIN_SPECRowChangeEventHandler
        
        Public Event FPHCOSP_PHARMACOCIN_SPECRowDeleting As FPHCOSP_PHARMACOCIN_SPECRowChangeEventHandler
        
        Public Event FPHCOSP_PHARMACOCIN_SPECRowDeleted As FPHCOSP_PHARMACOCIN_SPECRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOSP_PHARMACOCIN_SPECRow(ByVal row As FPHCOSP_PHARMACOCIN_SPECRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOSP_PHARMACOCIN_SPECRow(ByVal FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSP_SP_CODE_FK_PK As Integer) As FPHCOSP_PHARMACOCIN_SPECRow
            Dim rowFPHCOSP_PHARMACOCIN_SPECRow As FPHCOSP_PHARMACOCIN_SPECRow = CType(Me.NewRow,FPHCOSP_PHARMACOCIN_SPECRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOSP_FPHCO_CODE_FK_PK, FPHCOSP_SP_CODE_FK_PK}
            rowFPHCOSP_PHARMACOCIN_SPECRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOSP_PHARMACOCIN_SPECRow)
            Return rowFPHCOSP_PHARMACOCIN_SPECRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOSP_FPHCO_CODE_FK_PKFPHCOSP_SP_CODE_FK_PK(ByVal FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSP_SP_CODE_FK_PK As Integer) As FPHCOSP_PHARMACOCIN_SPECRow
            Return CType(Me.Rows.Find(New Object() {FPHCOSP_FPHCO_CODE_FK_PK, FPHCOSP_SP_CODE_FK_PK}),FPHCOSP_PHARMACOCIN_SPECRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOSP_PHARMACOCIN_SPECDataTable = CType(MyBase.Clone,FPHCOSP_PHARMACOCIN_SPECDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOSP_PHARMACOCIN_SPECDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOSP_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOSP_FPHCO_CODE_FK_PK")
            Me.columnFPHCOSP_SP_CODE_FK_PK = MyBase.Columns("FPHCOSP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOSP_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOSP_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOSP_FPHCO_CODE_FK_PK)
            Me.columnFPHCOSP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOSP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOSP_FPHCO_CODE_FK_PK, Me.columnFPHCOSP_SP_CODE_FK_PK}, true))
            Me.columnFPHCOSP_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOSP_PHARMACOCIN_SPECRow() As FPHCOSP_PHARMACOCIN_SPECRow
            Return CType(Me.NewRow,FPHCOSP_PHARMACOCIN_SPECRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOSP_PHARMACOCIN_SPECRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOSP_PHARMACOCIN_SPECRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOSP_PHARMACOCIN_SPECRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOSP_PHARMACOCIN_SPECRowChanged(Me, New FPHCOSP_PHARMACOCIN_SPECRowChangeEvent(CType(e.Row,FPHCOSP_PHARMACOCIN_SPECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOSP_PHARMACOCIN_SPECRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOSP_PHARMACOCIN_SPECRowChanging(Me, New FPHCOSP_PHARMACOCIN_SPECRowChangeEvent(CType(e.Row,FPHCOSP_PHARMACOCIN_SPECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOSP_PHARMACOCIN_SPECRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOSP_PHARMACOCIN_SPECRowDeleted(Me, New FPHCOSP_PHARMACOCIN_SPECRowChangeEvent(CType(e.Row,FPHCOSP_PHARMACOCIN_SPECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOSP_PHARMACOCIN_SPECRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOSP_PHARMACOCIN_SPECRowDeleting(Me, New FPHCOSP_PHARMACOCIN_SPECRowChangeEvent(CType(e.Row,FPHCOSP_PHARMACOCIN_SPECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOSP_PHARMACOCIN_SPECRow(ByVal row As FPHCOSP_PHARMACOCIN_SPECRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOSP_PHARMACOCIN_SPECDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOCOM_FPHCO_COMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOCOM_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOCOM_CDF_COM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOCOM_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOCOM_FPHCO_COM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCOM_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCOM_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCOM_CDF_COM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOCOM_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOCOM_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOCOM_FPHCO_COMRow
            Get
                Return CType(Me.Rows(index),FPHCOCOM_FPHCO_COMRow)
            End Get
        End Property
        
        Public Event FPHCOCOM_FPHCO_COMRowChanging As FPHCOCOM_FPHCO_COMRowChangeEventHandler
        
        Public Event FPHCOCOM_FPHCO_COMRowChanged As FPHCOCOM_FPHCO_COMRowChangeEventHandler
        
        Public Event FPHCOCOM_FPHCO_COMRowDeleting As FPHCOCOM_FPHCO_COMRowChangeEventHandler
        
        Public Event FPHCOCOM_FPHCO_COMRowDeleted As FPHCOCOM_FPHCO_COMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOCOM_FPHCO_COMRow(ByVal row As FPHCOCOM_FPHCO_COMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOCOM_FPHCO_COMRow(ByVal FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCOM_CDF_COM_CODE_FK_PK As String, ByVal FPHCOCOM_NUMORD As Short) As FPHCOCOM_FPHCO_COMRow
            Dim rowFPHCOCOM_FPHCO_COMRow As FPHCOCOM_FPHCO_COMRow = CType(Me.NewRow,FPHCOCOM_FPHCO_COMRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOCOM_FPHCO_CODE_FK_PK, FPHCOCOM_CDF_COM_CODE_FK_PK, FPHCOCOM_NUMORD}
            rowFPHCOCOM_FPHCO_COMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOCOM_FPHCO_COMRow)
            Return rowFPHCOCOM_FPHCO_COMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOCOM_FPHCO_CODE_FK_PKFPHCOCOM_CDF_COM_CODE_FK_PK(ByVal FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCOM_CDF_COM_CODE_FK_PK As String) As FPHCOCOM_FPHCO_COMRow
            Return CType(Me.Rows.Find(New Object() {FPHCOCOM_FPHCO_CODE_FK_PK, FPHCOCOM_CDF_COM_CODE_FK_PK}),FPHCOCOM_FPHCO_COMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOCOM_FPHCO_COMDataTable = CType(MyBase.Clone,FPHCOCOM_FPHCO_COMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOCOM_FPHCO_COMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOCOM_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOCOM_FPHCO_CODE_FK_PK")
            Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK = MyBase.Columns("FPHCOCOM_CDF_COM_CODE_FK_PK")
            Me.columnFPHCOCOM_NUMORD = MyBase.Columns("FPHCOCOM_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOCOM_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOCOM_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCOM_FPHCO_CODE_FK_PK)
            Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOCOM_CDF_COM_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK)
            Me.columnFPHCOCOM_NUMORD = New Global.System.Data.DataColumn("FPHCOCOM_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOCOM_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOCOM_FPHCO_CODE_FK_PK, Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK}, true))
            Me.columnFPHCOCOM_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOCOM_CDF_COM_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOCOM_FPHCO_COMRow() As FPHCOCOM_FPHCO_COMRow
            Return CType(Me.NewRow,FPHCOCOM_FPHCO_COMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOCOM_FPHCO_COMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOCOM_FPHCO_COMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOCOM_FPHCO_COMRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOCOM_FPHCO_COMRowChanged(Me, New FPHCOCOM_FPHCO_COMRowChangeEvent(CType(e.Row,FPHCOCOM_FPHCO_COMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOCOM_FPHCO_COMRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOCOM_FPHCO_COMRowChanging(Me, New FPHCOCOM_FPHCO_COMRowChangeEvent(CType(e.Row,FPHCOCOM_FPHCO_COMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOCOM_FPHCO_COMRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOCOM_FPHCO_COMRowDeleted(Me, New FPHCOCOM_FPHCO_COMRowChangeEvent(CType(e.Row,FPHCOCOM_FPHCO_COMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOCOM_FPHCO_COMRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOCOM_FPHCO_COMRowDeleting(Me, New FPHCOCOM_FPHCO_COMRowChangeEvent(CType(e.Row,FPHCOCOM_FPHCO_COMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOCOM_FPHCO_COMRow(ByVal row As FPHCOCOM_FPHCO_COMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOCOM_FPHCO_COMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FPHCOAFS_FPHCO_AFSSAPSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFPHCOAFS_FPHCO_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOAFS_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOAFS_DATE_PK As Global.System.Data.DataColumn
        
        Private columnFPHCOAFS_CDF_DOCUMENT_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FPHCOAFS_FPHCO_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOAFS_FPHCO_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOAFS_FPHCO_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOAFS_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOAFS_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOAFS_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPHCOAFS_CDF_DOCUMENT_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FPHCOAFS_FPHCO_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FPHCOAFS_FPHCO_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FPHCOAFS_FPHCO_AFSSAPSRowChanging As FPHCOAFS_FPHCO_AFSSAPSRowChangeEventHandler
        
        Public Event FPHCOAFS_FPHCO_AFSSAPSRowChanged As FPHCOAFS_FPHCO_AFSSAPSRowChangeEventHandler
        
        Public Event FPHCOAFS_FPHCO_AFSSAPSRowDeleting As FPHCOAFS_FPHCO_AFSSAPSRowChangeEventHandler
        
        Public Event FPHCOAFS_FPHCO_AFSSAPSRowDeleted As FPHCOAFS_FPHCO_AFSSAPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFPHCOAFS_FPHCO_AFSSAPSRow(ByVal row As FPHCOAFS_FPHCO_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFPHCOAFS_FPHCO_AFSSAPSRow(ByVal FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal FPHCOAFS_DATE_PK As Date, ByVal FPHCOAFS_CDF_DOCUMENT_FK_PK As String) As FPHCOAFS_FPHCO_AFSSAPSRow
            Dim rowFPHCOAFS_FPHCO_AFSSAPSRow As FPHCOAFS_FPHCO_AFSSAPSRow = CType(Me.NewRow,FPHCOAFS_FPHCO_AFSSAPSRow)
            Dim columnValuesArray() As Object = New Object() {FPHCOAFS_FPHCO_CODE_FK_PK, FPHCOAFS_SP_CODE_FK_PK, FPHCOAFS_DATE_PK, FPHCOAFS_CDF_DOCUMENT_FK_PK}
            rowFPHCOAFS_FPHCO_AFSSAPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFPHCOAFS_FPHCO_AFSSAPSRow)
            Return rowFPHCOAFS_FPHCO_AFSSAPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFPHCOAFS_FPHCO_CODE_FK_PKFPHCOAFS_SP_CODE_FK_PKFPHCOAFS_DATE_PKFPHCOAFS_CDF_DOCUMENT_FK_PK(ByVal FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal FPHCOAFS_DATE_PK As Date, ByVal FPHCOAFS_CDF_DOCUMENT_FK_PK As String) As FPHCOAFS_FPHCO_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FPHCOAFS_FPHCO_CODE_FK_PK, FPHCOAFS_SP_CODE_FK_PK, FPHCOAFS_DATE_PK, FPHCOAFS_CDF_DOCUMENT_FK_PK}),FPHCOAFS_FPHCO_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FPHCOAFS_FPHCO_AFSSAPSDataTable = CType(MyBase.Clone,FPHCOAFS_FPHCO_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FPHCOAFS_FPHCO_AFSSAPSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFPHCOAFS_FPHCO_CODE_FK_PK = MyBase.Columns("FPHCOAFS_FPHCO_CODE_FK_PK")
            Me.columnFPHCOAFS_SP_CODE_FK_PK = MyBase.Columns("FPHCOAFS_SP_CODE_FK_PK")
            Me.columnFPHCOAFS_DATE_PK = MyBase.Columns("FPHCOAFS_DATE_PK")
            Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FPHCOAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFPHCOAFS_FPHCO_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOAFS_FPHCO_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOAFS_FPHCO_CODE_FK_PK)
            Me.columnFPHCOAFS_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FPHCOAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOAFS_SP_CODE_FK_PK)
            Me.columnFPHCOAFS_DATE_PK = New Global.System.Data.DataColumn("FPHCOAFS_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOAFS_DATE_PK)
            Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK = New Global.System.Data.DataColumn("FPHCOAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFPHCOAFS_FPHCO_CODE_FK_PK, Me.columnFPHCOAFS_SP_CODE_FK_PK, Me.columnFPHCOAFS_DATE_PK, Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFPHCOAFS_FPHCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFPHCOAFS_DATE_PK.AllowDBNull = false
            Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFPHCOAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFPHCOAFS_FPHCO_AFSSAPSRow() As FPHCOAFS_FPHCO_AFSSAPSRow
            Return CType(Me.NewRow,FPHCOAFS_FPHCO_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FPHCOAFS_FPHCO_AFSSAPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FPHCOAFS_FPHCO_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FPHCOAFS_FPHCO_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FPHCOAFS_FPHCO_AFSSAPSRowChanged(Me, New FPHCOAFS_FPHCO_AFSSAPSRowChangeEvent(CType(e.Row,FPHCOAFS_FPHCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FPHCOAFS_FPHCO_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FPHCOAFS_FPHCO_AFSSAPSRowChanging(Me, New FPHCOAFS_FPHCO_AFSSAPSRowChangeEvent(CType(e.Row,FPHCOAFS_FPHCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FPHCOAFS_FPHCO_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FPHCOAFS_FPHCO_AFSSAPSRowDeleted(Me, New FPHCOAFS_FPHCO_AFSSAPSRowChangeEvent(CType(e.Row,FPHCOAFS_FPHCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FPHCOAFS_FPHCO_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FPHCOAFS_FPHCO_AFSSAPSRowDeleting(Me, New FPHCOAFS_FPHCO_AFSSAPSRowChangeEvent(CType(e.Row,FPHCOAFS_FPHCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFPHCOAFS_FPHCO_AFSSAPSRow(ByVal row As FPHCOAFS_FPHCO_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Pharmacocinetique = New dsTheriaque_Pharmacocinetique
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FPHCOAFS_FPHCO_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCO_PHARMACOCINETIQUERow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCO_PHARMACOCINETIQUE As FPHCO_PHARMACOCINETIQUEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCO_PHARMACOCINETIQUE = CType(Me.Table,FPHCO_PHARMACOCINETIQUEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCO_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCO_TXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_TXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPHCO_TXT' dans la table 'FPHCO_PHARMACOCINETIQUE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_TXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCO_DATECR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATECRColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPHCO_DATECR' dans la table 'FPHCO_PHARMACOCINETIQUE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCO_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPHCO_DATEMJ' dans la table 'FPHCO_PHARMACOCINETIQUE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPHCO_TXTNull() As Boolean
            Return Me.IsNull(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_TXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPHCO_TXTNull()
            Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_TXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPHCO_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATECRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPHCO_DATECRNull()
            Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATECRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPHCO_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPHCO_DATEMJNull()
            Me(Me.tableFPHCO_PHARMACOCINETIQUE.FPHCO_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOCPH_FPHCO_CLPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOCPH_FPHCO_CLPH As FPHCOCPH_FPHCO_CLPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOCPH_FPHCO_CLPH = CType(Me.Table,FPHCOCPH_FPHCO_CLPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCPH_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOCPH_FPHCO_CLPH.FPHCOCPH_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOCPH_FPHCO_CLPH.FPHCOCPH_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPHCOCPH_FPHCO_CLPH.FPHCOCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPHCOCPH_FPHCO_CLPH.FPHCOCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOCCH_FPHCO_CLCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOCCH_FPHCO_CLCH As FPHCOCCH_FPHCO_CLCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOCCH_FPHCO_CLCH = CType(Me.Table,FPHCOCCH_FPHCO_CLCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCCH_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOCCH_FPHCO_CLCH.FPHCOCCH_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOCCH_FPHCO_CLCH.FPHCOCCH_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPHCOCCH_FPHCO_CLCH.FPHCOCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPHCOCCH_FPHCO_CLCH.FPHCOCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOSAC_FPHCO_SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOSAC_FPHCO_SUBACT As FPHCOSAC_FPHCO_SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOSAC_FPHCO_SUBACT = CType(Me.Table,FPHCOSAC_FPHCO_SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOSAC_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOSAC_FPHCO_SUBACT.FPHCOSAC_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOSAC_FPHCO_SUBACT.FPHCOSAC_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOSAC_FPHCO_SUBACT.FPHCOSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOSAC_FPHCO_SUBACT.FPHCOSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOSAU_FPHCO_SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOSAU_FPHCO_SUBAUX As FPHCOSAU_FPHCO_SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOSAU_FPHCO_SUBAUX = CType(Me.Table,FPHCOSAU_FPHCO_SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOSAU_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOSAU_FPHCO_SUBAUX.FPHCOSAU_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOSAU_FPHCO_SUBAUX.FPHCOSAU_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOSAU_FPHCO_SUBAUX.FPHCOSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOSAU_FPHCO_SUBAUX.FPHCOSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOPR_FPHCO_PRODRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOPR_FPHCO_PROD As FPHCOPR_FPHCO_PRODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOPR_FPHCO_PROD = CType(Me.Table,FPHCOPR_FPHCO_PRODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOPR_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOPR_FPHCO_PROD.FPHCOPR_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOPR_FPHCO_PROD.FPHCOPR_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOPR_FPHCO_PROD.FPHCOPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOPR_FPHCO_PROD.FPHCOPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOSP_PHARMACOCIN_SPECRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOSP_PHARMACOCIN_SPEC As FPHCOSP_PHARMACOCIN_SPECDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOSP_PHARMACOCIN_SPEC = CType(Me.Table,FPHCOSP_PHARMACOCIN_SPECDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOSP_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOSP_PHARMACOCIN_SPEC.FPHCOSP_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOSP_PHARMACOCIN_SPEC.FPHCOSP_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOSP_PHARMACOCIN_SPEC.FPHCOSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOSP_PHARMACOCIN_SPEC.FPHCOSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOCOM_FPHCO_COMRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOCOM_FPHCO_COM As FPHCOCOM_FPHCO_COMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOCOM_FPHCO_COM = CType(Me.Table,FPHCOCOM_FPHCO_COMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCOM_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCOM_CDF_COM_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_CDF_COM_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_CDF_COM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOCOM_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FPHCOCOM_NUMORD' dans la table 'FPHCOCOM_FPHCO_COM' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPHCOCOM_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPHCOCOM_NUMORDNull()
            Me(Me.tableFPHCOCOM_FPHCO_COM.FPHCOCOM_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FPHCOAFS_FPHCO_AFSSAPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFPHCOAFS_FPHCO_AFSSAPS As FPHCOAFS_FPHCO_AFSSAPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFPHCOAFS_FPHCO_AFSSAPS = CType(Me.Table,FPHCOAFS_FPHCO_AFSSAPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOAFS_FPHCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_FPHCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_FPHCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPHCOAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFPHCOAFS_FPHCO_AFSSAPS.FPHCOAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCO_PHARMACOCINETIQUERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCO_PHARMACOCINETIQUERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCO_PHARMACOCINETIQUERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCO_PHARMACOCINETIQUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOCPH_FPHCO_CLPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOCPH_FPHCO_CLPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOCPH_FPHCO_CLPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOCPH_FPHCO_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOCCH_FPHCO_CLCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOCCH_FPHCO_CLCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOCCH_FPHCO_CLCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOCCH_FPHCO_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOSAC_FPHCO_SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOSAC_FPHCO_SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOSAC_FPHCO_SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOSAC_FPHCO_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOSAU_FPHCO_SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOSAU_FPHCO_SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOSAU_FPHCO_SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOSAU_FPHCO_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOPR_FPHCO_PRODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOPR_FPHCO_PRODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOPR_FPHCO_PRODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOPR_FPHCO_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOSP_PHARMACOCIN_SPECRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOSP_PHARMACOCIN_SPECRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOSP_PHARMACOCIN_SPECRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOSP_PHARMACOCIN_SPECRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOCOM_FPHCO_COMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOCOM_FPHCO_COMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOCOM_FPHCO_COMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOCOM_FPHCO_COMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FPHCOAFS_FPHCO_AFSSAPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FPHCOAFS_FPHCO_AFSSAPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FPHCOAFS_FPHCO_AFSSAPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FPHCOAFS_FPHCO_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_PharmacocinetiqueTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCO_PHARMACOCINETIQUETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCO_PHARMACOCINETIQUE"
            tableMapping.ColumnMappings.Add("FPHCO_CODE_SQ_PK", "FPHCO_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FPHCO_TXT", "FPHCO_TXT")
            tableMapping.ColumnMappings.Add("FPHCO_DATECR", "FPHCO_DATECR")
            tableMapping.ColumnMappings.Add("FPHCO_DATEMJ", "FPHCO_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCO_PHARMACOCINETIQUE] WHERE (([FPHCO_CODE_SQ_PK] = @O"& _ 
                "riginal_FPHCO_CODE_SQ_PK) AND ((@IsNull_FPHCO_DATECR = 1 AND [FPHCO_DATECR] IS N"& _ 
                "ULL) OR ([FPHCO_DATECR] = @Original_FPHCO_DATECR)) AND ((@IsNull_FPHCO_DATEMJ = "& _ 
                "1 AND [FPHCO_DATEMJ] IS NULL) OR ([FPHCO_DATEMJ] = @Original_FPHCO_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPHCO_DATECR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATECR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPHCO_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCO_PHARMACOCINETIQUE] ([FPHCO_CODE_SQ_PK], [FPHCO_TXT"& _ 
                "], [FPHCO_DATECR], [FPHCO_DATEMJ]) VALUES (@FPHCO_CODE_SQ_PK, @FPHCO_TXT, @FPHCO"& _ 
                "_DATECR, @FPHCO_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCO_CODE_SQ_PK, FPHCO_TXT, FPHCO_DATECR, FPHC"& _ 
                "O_DATEMJ FROM THERIAQUE.FPHCO_PHARMACOCINETIQUE WHERE (FPHCO_CODE_SQ_PK = @FPHCO"& _ 
                "_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_TXT", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_TXT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCO_PHARMACOCINETIQUE] SET [FPHCO_CODE_SQ_PK] = @FPHCO_CODE"& _ 
                "_SQ_PK, [FPHCO_TXT] = @FPHCO_TXT, [FPHCO_DATECR] = @FPHCO_DATECR, [FPHCO_DATEMJ]"& _ 
                " = @FPHCO_DATEMJ WHERE (([FPHCO_CODE_SQ_PK] = @Original_FPHCO_CODE_SQ_PK) AND (("& _ 
                "@IsNull_FPHCO_DATECR = 1 AND [FPHCO_DATECR] IS NULL) OR ([FPHCO_DATECR] = @Origi"& _ 
                "nal_FPHCO_DATECR)) AND ((@IsNull_FPHCO_DATEMJ = 1 AND [FPHCO_DATEMJ] IS NULL) OR"& _ 
                " ([FPHCO_DATEMJ] = @Original_FPHCO_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCO_CODE_SQ_PK, FPHCO_TX"& _ 
                "T, FPHCO_DATECR, FPHCO_DATEMJ FROM THERIAQUE.FPHCO_PHARMACOCINETIQUE WHERE (FPHC"& _ 
                "O_CODE_SQ_PK = @FPHCO_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_TXT", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_TXT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPHCO_DATECR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATECR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCO_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPHCO_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCO_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCO_CODE_SQ_PK, FPHCO_TXT, FPHCO_DATECR, FPHCO_DATEMJ FROM THERIAQUE.FPH"& _ 
                "CO_PHARMACOCINETIQUE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCO_CODE_SQ_PK, FPHCO_TXT, FPHCO_DATECR, FPHCO_DATEMJ FROM THERIAQUE.FPH"& _ 
                "CO_PHARMACOCINETIQUE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCO_CODE_SQ_PK = @FPHCO_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCO_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCO_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable = New dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable, ByVal FPHCO_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCO_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCO_CODE_SQ_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCO_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable = New dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCO_PHARMACOCINETIQUEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCO_PHARMACOCINETIQUE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCO_CODE_SQ_PK As Integer, ByVal Original_FPHCO_DATECR As Global.System.Nullable(Of Date), ByVal Original_FPHCO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCO_CODE_SQ_PK,Integer)
            If (Original_FPHCO_DATECR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPHCO_DATECR.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_FPHCO_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FPHCO_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCO_CODE_SQ_PK As Integer, ByVal FPHCO_TXT As String, ByVal FPHCO_DATECR As Global.System.Nullable(Of Date), ByVal FPHCO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCO_CODE_SQ_PK,Integer)
            If (FPHCO_TXT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCO_TXT,String)
            End If
            If (FPHCO_DATECR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPHCO_DATECR.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FPHCO_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPHCO_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCO_CODE_SQ_PK As Integer, ByVal FPHCO_TXT As String, ByVal FPHCO_DATECR As Global.System.Nullable(Of Date), ByVal FPHCO_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FPHCO_CODE_SQ_PK As Integer, ByVal Original_FPHCO_DATECR As Global.System.Nullable(Of Date), ByVal Original_FPHCO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCO_CODE_SQ_PK,Integer)
            If (FPHCO_TXT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCO_TXT,String)
            End If
            If (FPHCO_DATECR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPHCO_DATECR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (FPHCO_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPHCO_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPHCO_CODE_SQ_PK,Integer)
            If (Original_FPHCO_DATECR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPHCO_DATECR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_FPHCO_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FPHCO_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCO_TXT As String, ByVal FPHCO_DATECR As Global.System.Nullable(Of Date), ByVal FPHCO_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FPHCO_CODE_SQ_PK As Integer, ByVal Original_FPHCO_DATECR As Global.System.Nullable(Of Date), ByVal Original_FPHCO_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FPHCO_CODE_SQ_PK, FPHCO_TXT, FPHCO_DATECR, FPHCO_DATEMJ, Original_FPHCO_CODE_SQ_PK, Original_FPHCO_DATECR, Original_FPHCO_DATEMJ)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOCPH_FPHCO_CLPHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOCPH_FPHCO_CLPH"
            tableMapping.ColumnMappings.Add("FPHCOCPH_FPHCO_CODE_FK_PK", "FPHCOCPH_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOCPH_CPH_CODE_FK_PK", "FPHCOCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOCPH_FPHCO_CLPH] WHERE (([FPHCOCPH_FPHCO_CODE_FK_PK]"& _ 
                " = @Original_FPHCOCPH_FPHCO_CODE_FK_PK) AND ([FPHCOCPH_CPH_CODE_FK_PK] = @Origin"& _ 
                "al_FPHCOCPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOCPH_FPHCO_CLPH] ([FPHCOCPH_FPHCO_CODE_FK_PK], [FPHC"& _ 
                "OCPH_CPH_CODE_FK_PK]) VALUES (@FPHCOCPH_FPHCO_CODE_FK_PK, @FPHCOCPH_CPH_CODE_FK_"& _ 
                "PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOCPH_FPHCO_CODE_FK_PK, FPHCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.F"& _ 
                "PHCOCPH_FPHCO_CLPH WHERE (FPHCOCPH_CPH_CODE_FK_PK = @FPHCOCPH_CPH_CODE_FK_PK) AN"& _ 
                "D (FPHCOCPH_FPHCO_CODE_FK_PK = @FPHCOCPH_FPHCO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOCPH_FPHCO_CLPH] SET [FPHCOCPH_FPHCO_CODE_FK_PK] = @FPHCO"& _ 
                "CPH_FPHCO_CODE_FK_PK, [FPHCOCPH_CPH_CODE_FK_PK] = @FPHCOCPH_CPH_CODE_FK_PK WHERE"& _ 
                " (([FPHCOCPH_FPHCO_CODE_FK_PK] = @Original_FPHCOCPH_FPHCO_CODE_FK_PK) AND ([FPHC"& _ 
                "OCPH_CPH_CODE_FK_PK] = @Original_FPHCOCPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOCPH_FPH"& _ 
                "CO_CODE_FK_PK, FPHCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPHCOCPH_FPHCO_CLPH WHERE "& _ 
                "(FPHCOCPH_CPH_CODE_FK_PK = @FPHCOCPH_CPH_CODE_FK_PK) AND (FPHCOCPH_FPHCO_CODE_FK"& _ 
                "_PK = @FPHCOCPH_FPHCO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOCPH_FPHCO_CODE_FK_PK, FPHCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPHCOCPH"& _ 
                "_FPHCO_CLPH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOCPH_FPHCO_CODE_FK_PK, FPHCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FPHCOCPH"& _ 
                "_FPHCO_CLPH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOCPH_FPHCO_CODE_FK_PK = @FPHCOCPH_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCPH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable = New dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable, ByVal FPHCOCPH_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOCPH_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOCPH_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOCPH_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable = New dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCPH_FPHCO_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOCPH_FPHCO_CLPH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOCPH_FPHCO_CODE_FK_PK,Integer)
            If (Original_FPHCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOCPH_FPHCO_CODE_FK_PK,Integer)
            If (FPHCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCPH_CPH_CODE_FK_PK As String, ByVal Original_FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOCPH_FPHCO_CODE_FK_PK,Integer)
            If (FPHCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPHCOCPH_FPHCO_CODE_FK_PK,Integer)
            If (Original_FPHCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOCPH_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPHCOCPH_FPHCO_CODE_FK_PK, Original_FPHCOCPH_CPH_CODE_FK_PK, Original_FPHCOCPH_FPHCO_CODE_FK_PK, Original_FPHCOCPH_CPH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOCCH_FPHCO_CLCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOCCH_FPHCO_CLCH"
            tableMapping.ColumnMappings.Add("FPHCOCCH_FPHCO_CODE_FK_PK", "FPHCOCCH_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOCCH_CCH_CODE_FK_PK", "FPHCOCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOCCH_FPHCO_CLCH] WHERE (([FPHCOCCH_FPHCO_CODE_FK_PK]"& _ 
                " = @Original_FPHCOCCH_FPHCO_CODE_FK_PK) AND ([FPHCOCCH_CCH_CODE_FK_PK] = @Origin"& _ 
                "al_FPHCOCCH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOCCH_FPHCO_CLCH] ([FPHCOCCH_FPHCO_CODE_FK_PK], [FPHC"& _ 
                "OCCH_CCH_CODE_FK_PK]) VALUES (@FPHCOCCH_FPHCO_CODE_FK_PK, @FPHCOCCH_CCH_CODE_FK_"& _ 
                "PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOCCH_FPHCO_CODE_FK_PK, FPHCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.F"& _ 
                "PHCOCCH_FPHCO_CLCH WHERE (FPHCOCCH_CCH_CODE_FK_PK = @FPHCOCCH_CCH_CODE_FK_PK) AN"& _ 
                "D (FPHCOCCH_FPHCO_CODE_FK_PK = @FPHCOCCH_FPHCO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOCCH_FPHCO_CLCH] SET [FPHCOCCH_FPHCO_CODE_FK_PK] = @FPHCO"& _ 
                "CCH_FPHCO_CODE_FK_PK, [FPHCOCCH_CCH_CODE_FK_PK] = @FPHCOCCH_CCH_CODE_FK_PK WHERE"& _ 
                " (([FPHCOCCH_FPHCO_CODE_FK_PK] = @Original_FPHCOCCH_FPHCO_CODE_FK_PK) AND ([FPHC"& _ 
                "OCCH_CCH_CODE_FK_PK] = @Original_FPHCOCCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOCCH_FPH"& _ 
                "CO_CODE_FK_PK, FPHCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPHCOCCH_FPHCO_CLCH WHERE "& _ 
                "(FPHCOCCH_CCH_CODE_FK_PK = @FPHCOCCH_CCH_CODE_FK_PK) AND (FPHCOCCH_FPHCO_CODE_FK"& _ 
                "_PK = @FPHCOCCH_FPHCO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOCCH_FPHCO_CODE_FK_PK, FPHCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPHCOCCH"& _ 
                "_FPHCO_CLCH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOCCH_FPHCO_CODE_FK_PK, FPHCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FPHCOCCH"& _ 
                "_FPHCO_CLCH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOCCH_FPHCO_CODE_FK_PK = @FPHCOCCH_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCCH_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable = New dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable, ByVal FPHCOCCH_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOCCH_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOCCH_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOCCH_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable = New dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCCH_FPHCO_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOCCH_FPHCO_CLCH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOCCH_FPHCO_CODE_FK_PK,Integer)
            If (Original_FPHCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOCCH_FPHCO_CODE_FK_PK,Integer)
            If (FPHCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCCH_CCH_CODE_FK_PK As String, ByVal Original_FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOCCH_FPHCO_CODE_FK_PK,Integer)
            If (FPHCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPHCOCCH_FPHCO_CODE_FK_PK,Integer)
            If (Original_FPHCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOCCH_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FPHCOCCH_FPHCO_CODE_FK_PK, Original_FPHCOCCH_CCH_CODE_FK_PK, Original_FPHCOCCH_FPHCO_CODE_FK_PK, Original_FPHCOCCH_CCH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOSAC_FPHCO_SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOSAC_FPHCO_SUBACT"
            tableMapping.ColumnMappings.Add("FPHCOSAC_FPHCO_CODE_FK_PK", "FPHCOSAC_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOSAC_SAC_CODE_FK_PK", "FPHCOSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOSAC_FPHCO_SUBACT] WHERE (([FPHCOSAC_FPHCO_CODE_FK_P"& _ 
                "K] = @Original_FPHCOSAC_FPHCO_CODE_FK_PK) AND ([FPHCOSAC_SAC_CODE_FK_PK] = @Orig"& _ 
                "inal_FPHCOSAC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOSAC_FPHCO_SUBACT] ([FPHCOSAC_FPHCO_CODE_FK_PK], [FP"& _ 
                "HCOSAC_SAC_CODE_FK_PK]) VALUES (@FPHCOSAC_FPHCO_CODE_FK_PK, @FPHCOSAC_SAC_CODE_F"& _ 
                "K_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOSAC_FPHCO_CODE_FK_PK, FPHCOSAC_SAC_CODE_FK_PK FROM THERIAQUE"& _ 
                ".FPHCOSAC_FPHCO_SUBACT WHERE (FPHCOSAC_FPHCO_CODE_FK_PK = @FPHCOSAC_FPHCO_CODE_F"& _ 
                "K_PK) AND (FPHCOSAC_SAC_CODE_FK_PK = @FPHCOSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOSAC_FPHCO_SUBACT] SET [FPHCOSAC_FPHCO_CODE_FK_PK] = @FPH"& _ 
                "COSAC_FPHCO_CODE_FK_PK, [FPHCOSAC_SAC_CODE_FK_PK] = @FPHCOSAC_SAC_CODE_FK_PK WHE"& _ 
                "RE (([FPHCOSAC_FPHCO_CODE_FK_PK] = @Original_FPHCOSAC_FPHCO_CODE_FK_PK) AND ([FP"& _ 
                "HCOSAC_SAC_CODE_FK_PK] = @Original_FPHCOSAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOSAC_F"& _ 
                "PHCO_CODE_FK_PK, FPHCOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPHCOSAC_FPHCO_SUBACT WH"& _ 
                "ERE (FPHCOSAC_FPHCO_CODE_FK_PK = @FPHCOSAC_FPHCO_CODE_FK_PK) AND (FPHCOSAC_SAC_C"& _ 
                "ODE_FK_PK = @FPHCOSAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOSAC_FPHCO_CODE_FK_PK, FPHCOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPHCOSAC"& _ 
                "_FPHCO_SUBACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOSAC_FPHCO_CODE_FK_PK, FPHCOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FPHCOSAC"& _ 
                "_FPHCO_SUBACT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOSAC_FPHCO_CODE_FK_PK = @FPHCOSAC_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAC_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable = New dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable, ByVal FPHCOSAC_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOSAC_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOSAC_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOSAC_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable = New dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAC_FPHCO_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOSAC_FPHCO_SUBACT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOSAC_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOSAC_SAC_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOSAC_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOSAC_SAC_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOSAC_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOSAC_SAC_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPHCOSAC_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOSAC_SAC_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOSAC_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPHCOSAC_FPHCO_CODE_FK_PK, Original_FPHCOSAC_SAC_CODE_FK_PK, Original_FPHCOSAC_FPHCO_CODE_FK_PK, Original_FPHCOSAC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOSAU_FPHCO_SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOSAU_FPHCO_SUBAUX"
            tableMapping.ColumnMappings.Add("FPHCOSAU_FPHCO_CODE_FK_PK", "FPHCOSAU_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOSAU_SAU_CODE_FK_PK", "FPHCOSAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOSAU_FPHCO_SUBAUX] WHERE (([FPHCOSAU_FPHCO_CODE_FK_P"& _ 
                "K] = @Original_FPHCOSAU_FPHCO_CODE_FK_PK) AND ([FPHCOSAU_SAU_CODE_FK_PK] = @Orig"& _ 
                "inal_FPHCOSAU_SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOSAU_FPHCO_SUBAUX] ([FPHCOSAU_FPHCO_CODE_FK_PK], [FP"& _ 
                "HCOSAU_SAU_CODE_FK_PK]) VALUES (@FPHCOSAU_FPHCO_CODE_FK_PK, @FPHCOSAU_SAU_CODE_F"& _ 
                "K_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOSAU_FPHCO_CODE_FK_PK, FPHCOSAU_SAU_CODE_FK_PK FROM THERIAQUE"& _ 
                ".FPHCOSAU_FPHCO_SUBAUX WHERE (FPHCOSAU_FPHCO_CODE_FK_PK = @FPHCOSAU_FPHCO_CODE_F"& _ 
                "K_PK) AND (FPHCOSAU_SAU_CODE_FK_PK = @FPHCOSAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOSAU_FPHCO_SUBAUX] SET [FPHCOSAU_FPHCO_CODE_FK_PK] = @FPH"& _ 
                "COSAU_FPHCO_CODE_FK_PK, [FPHCOSAU_SAU_CODE_FK_PK] = @FPHCOSAU_SAU_CODE_FK_PK WHE"& _ 
                "RE (([FPHCOSAU_FPHCO_CODE_FK_PK] = @Original_FPHCOSAU_FPHCO_CODE_FK_PK) AND ([FP"& _ 
                "HCOSAU_SAU_CODE_FK_PK] = @Original_FPHCOSAU_SAU_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOSAU_F"& _ 
                "PHCO_CODE_FK_PK, FPHCOSAU_SAU_CODE_FK_PK FROM THERIAQUE.FPHCOSAU_FPHCO_SUBAUX WH"& _ 
                "ERE (FPHCOSAU_FPHCO_CODE_FK_PK = @FPHCOSAU_FPHCO_CODE_FK_PK) AND (FPHCOSAU_SAU_C"& _ 
                "ODE_FK_PK = @FPHCOSAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOSAU_FPHCO_CODE_FK_PK, FPHCOSAU_SAU_CODE_FK_PK FROM THERIAQUE.FPHCOSAU"& _ 
                "_FPHCO_SUBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOSAU_FPHCO_CODE_FK_PK, FPHCOSAU_SAU_CODE_FK_PK FROM THERIAQUE.FPHCOSAU"& _ 
                "_FPHCO_SUBAUX"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOSAU_FPHCO_CODE_FK_PK = @FPHCOSAU_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSAU_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable = New dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable, ByVal FPHCOSAU_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOSAU_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOSAU_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOSAU_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable = New dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSAU_FPHCO_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOSAU_FPHCO_SUBAUX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOSAU_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOSAU_SAU_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOSAU_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOSAU_SAU_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSAU_SAU_CODE_FK_PK As Integer, ByVal Original_FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOSAU_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOSAU_SAU_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPHCOSAU_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOSAU_SAU_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOSAU_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPHCOSAU_FPHCO_CODE_FK_PK, Original_FPHCOSAU_SAU_CODE_FK_PK, Original_FPHCOSAU_FPHCO_CODE_FK_PK, Original_FPHCOSAU_SAU_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOPR_FPHCO_PRODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOPR_FPHCO_PROD"
            tableMapping.ColumnMappings.Add("FPHCOPR_FPHCO_CODE_FK_PK", "FPHCOPR_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOPR_PR_CODE_FK_PK", "FPHCOPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOPR_FPHCO_PROD] WHERE (([FPHCOPR_FPHCO_CODE_FK_PK] ="& _ 
                " @Original_FPHCOPR_FPHCO_CODE_FK_PK) AND ([FPHCOPR_PR_CODE_FK_PK] = @Original_FP"& _ 
                "HCOPR_PR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOPR_FPHCO_PROD] ([FPHCOPR_FPHCO_CODE_FK_PK], [FPHCOP"& _ 
                "R_PR_CODE_FK_PK]) VALUES (@FPHCOPR_FPHCO_CODE_FK_PK, @FPHCOPR_PR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT FPHCOPR_FPHCO_CODE_FK_PK, FPHCOPR_PR_CODE_FK_PK FROM THERIAQUE.FPHCOPR_FPH"& _ 
                "CO_PROD WHERE (FPHCOPR_FPHCO_CODE_FK_PK = @FPHCOPR_FPHCO_CODE_FK_PK) AND (FPHCOP"& _ 
                "R_PR_CODE_FK_PK = @FPHCOPR_PR_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOPR_FPHCO_PROD] SET [FPHCOPR_FPHCO_CODE_FK_PK] = @FPHCOPR"& _ 
                "_FPHCO_CODE_FK_PK, [FPHCOPR_PR_CODE_FK_PK] = @FPHCOPR_PR_CODE_FK_PK WHERE (([FPH"& _ 
                "COPR_FPHCO_CODE_FK_PK] = @Original_FPHCOPR_FPHCO_CODE_FK_PK) AND ([FPHCOPR_PR_CO"& _ 
                "DE_FK_PK] = @Original_FPHCOPR_PR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOPR_FPHCO_CODE_FK_PK,"& _ 
                " FPHCOPR_PR_CODE_FK_PK FROM THERIAQUE.FPHCOPR_FPHCO_PROD WHERE (FPHCOPR_FPHCO_CO"& _ 
                "DE_FK_PK = @FPHCOPR_FPHCO_CODE_FK_PK) AND (FPHCOPR_PR_CODE_FK_PK = @FPHCOPR_PR_C"& _ 
                "ODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOPR_FPHCO_CODE_FK_PK, FPHCOPR_PR_CODE_FK_PK FROM THERIAQUE.FPHCOPR_FPH"& _ 
                "CO_PROD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOPR_FPHCO_CODE_FK_PK, FPHCOPR_PR_CODE_FK_PK FROM THERIAQUE.FPHCOPR_FPH"& _ 
                "CO_PROD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOPR_FPHCO_CODE_FK_PK = @FPHCOPR_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOPR_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable = New dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable, ByVal FPHCOPR_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOPR_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOPR_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOPR_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable = New dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOPR_FPHCO_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOPR_FPHCO_PROD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOPR_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOPR_PR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOPR_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOPR_PR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOPR_PR_CODE_FK_PK As Integer, ByVal Original_FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOPR_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOPR_PR_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPHCOPR_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOPR_PR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOPR_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOPR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPHCOPR_FPHCO_CODE_FK_PK, Original_FPHCOPR_PR_CODE_FK_PK, Original_FPHCOPR_FPHCO_CODE_FK_PK, Original_FPHCOPR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOSP_PHARMACOCIN_SPECTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOSP_PHARMACOCIN_SPEC"
            tableMapping.ColumnMappings.Add("FPHCOSP_FPHCO_CODE_FK_PK", "FPHCOSP_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOSP_SP_CODE_FK_PK", "FPHCOSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOSP_PHARMACOCIN_SPEC] WHERE (([FPHCOSP_FPHCO_CODE_FK"& _ 
                "_PK] = @Original_FPHCOSP_FPHCO_CODE_FK_PK) AND ([FPHCOSP_SP_CODE_FK_PK] = @Origi"& _ 
                "nal_FPHCOSP_SP_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOSP_PHARMACOCIN_SPEC] ([FPHCOSP_FPHCO_CODE_FK_PK], ["& _ 
                "FPHCOSP_SP_CODE_FK_PK]) VALUES (@FPHCOSP_FPHCO_CODE_FK_PK, @FPHCOSP_SP_CODE_FK_P"& _ 
                "K);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOSP_FPHCO_CODE_FK_PK, FPHCOSP_SP_CODE_FK_PK FROM THERIAQUE.FPHCO"& _ 
                "SP_PHARMACOCIN_SPEC WHERE (FPHCOSP_FPHCO_CODE_FK_PK = @FPHCOSP_FPHCO_CODE_FK_PK)"& _ 
                " AND (FPHCOSP_SP_CODE_FK_PK = @FPHCOSP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOSP_PHARMACOCIN_SPEC] SET [FPHCOSP_FPHCO_CODE_FK_PK] = @F"& _ 
                "PHCOSP_FPHCO_CODE_FK_PK, [FPHCOSP_SP_CODE_FK_PK] = @FPHCOSP_SP_CODE_FK_PK WHERE "& _ 
                "(([FPHCOSP_FPHCO_CODE_FK_PK] = @Original_FPHCOSP_FPHCO_CODE_FK_PK) AND ([FPHCOSP"& _ 
                "_SP_CODE_FK_PK] = @Original_FPHCOSP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOSP_FPHCO_CODE_"& _ 
                "FK_PK, FPHCOSP_SP_CODE_FK_PK FROM THERIAQUE.FPHCOSP_PHARMACOCIN_SPEC WHERE (FPHC"& _ 
                "OSP_FPHCO_CODE_FK_PK = @FPHCOSP_FPHCO_CODE_FK_PK) AND (FPHCOSP_SP_CODE_FK_PK = @"& _ 
                "FPHCOSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOSP_FPHCO_CODE_FK_PK, FPHCOSP_SP_CODE_FK_PK FROM THERIAQUE.FPHCOSP_PHA"& _ 
                "RMACOCIN_SPEC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOSP_FPHCO_CODE_FK_PK, FPHCOSP_SP_CODE_FK_PK FROM THERIAQUE.FPHCOSP_PHA"& _ 
                "RMACOCIN_SPEC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOSP_FPHCO_CODE_FK_PK = @FPHCOSP_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOSP_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable = New dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable, ByVal FPHCOSP_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOSP_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOSP_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOSP_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable = New dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOSP_PHARMACOCIN_SPECDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOSP_PHARMACOCIN_SPEC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOSP_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOSP_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOSP_SP_CODE_FK_PK As Integer, ByVal Original_FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOSP_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FPHCOSP_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOSP_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOSP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FPHCOSP_FPHCO_CODE_FK_PK, Original_FPHCOSP_SP_CODE_FK_PK, Original_FPHCOSP_FPHCO_CODE_FK_PK, Original_FPHCOSP_SP_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOCOM_FPHCO_COMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOCOM_FPHCO_COM"
            tableMapping.ColumnMappings.Add("FPHCOCOM_FPHCO_CODE_FK_PK", "FPHCOCOM_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOCOM_CDF_COM_CODE_FK_PK", "FPHCOCOM_CDF_COM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOCOM_NUMORD", "FPHCOCOM_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOCOM_FPHCO_COM] WHERE (([FPHCOCOM_FPHCO_CODE_FK_PK] "& _ 
                "= @Original_FPHCOCOM_FPHCO_CODE_FK_PK) AND ([FPHCOCOM_CDF_COM_CODE_FK_PK] = @Ori"& _ 
                "ginal_FPHCOCOM_CDF_COM_CODE_FK_PK) AND ((@IsNull_FPHCOCOM_NUMORD = 1 AND [FPHCOC"& _ 
                "OM_NUMORD] IS NULL) OR ([FPHCOCOM_NUMORD] = @Original_FPHCOCOM_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPHCOCOM_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCOM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOCOM_FPHCO_COM] ([FPHCOCOM_FPHCO_CODE_FK_PK], [FPHCO"& _ 
                "COM_CDF_COM_CODE_FK_PK], [FPHCOCOM_NUMORD]) VALUES (@FPHCOCOM_FPHCO_CODE_FK_PK, "& _ 
                "@FPHCOCOM_CDF_COM_CODE_FK_PK, @FPHCOCOM_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOCOM_FPHCO_CODE_FK_"& _ 
                "PK, FPHCOCOM_CDF_COM_CODE_FK_PK, FPHCOCOM_NUMORD FROM THERIAQUE.FPHCOCOM_FPHCO_C"& _ 
                "OM WHERE (FPHCOCOM_CDF_COM_CODE_FK_PK = @FPHCOCOM_CDF_COM_CODE_FK_PK) AND (FPHCO"& _ 
                "COM_FPHCO_CODE_FK_PK = @FPHCOCOM_FPHCO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOCOM_FPHCO_COM] SET [FPHCOCOM_FPHCO_CODE_FK_PK] = @FPHCOC"& _ 
                "OM_FPHCO_CODE_FK_PK, [FPHCOCOM_CDF_COM_CODE_FK_PK] = @FPHCOCOM_CDF_COM_CODE_FK_P"& _ 
                "K, [FPHCOCOM_NUMORD] = @FPHCOCOM_NUMORD WHERE (([FPHCOCOM_FPHCO_CODE_FK_PK] = @O"& _ 
                "riginal_FPHCOCOM_FPHCO_CODE_FK_PK) AND ([FPHCOCOM_CDF_COM_CODE_FK_PK] = @Origina"& _ 
                "l_FPHCOCOM_CDF_COM_CODE_FK_PK) AND ((@IsNull_FPHCOCOM_NUMORD = 1 AND [FPHCOCOM_N"& _ 
                "UMORD] IS NULL) OR ([FPHCOCOM_NUMORD] = @Original_FPHCOCOM_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FP"& _ 
                "HCOCOM_FPHCO_CODE_FK_PK, FPHCOCOM_CDF_COM_CODE_FK_PK, FPHCOCOM_NUMORD FROM THERI"& _ 
                "AQUE.FPHCOCOM_FPHCO_COM WHERE (FPHCOCOM_CDF_COM_CODE_FK_PK = @FPHCOCOM_CDF_COM_C"& _ 
                "ODE_FK_PK) AND (FPHCOCOM_FPHCO_CODE_FK_PK = @FPHCOCOM_FPHCO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_CDF_COM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FPHCOCOM_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOCOM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOCOM_FPHCO_CODE_FK_PK, FPHCOCOM_CDF_COM_CODE_FK_PK, FPHCOCOM_NUMORD FR"& _ 
                "OM THERIAQUE.FPHCOCOM_FPHCO_COM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOCOM_FPHCO_CODE_FK_PK, FPHCOCOM_CDF_COM_CODE_FK_PK, FPHCOCOM_NUMORD FR"& _ 
                "OM THERIAQUE.FPHCOCOM_FPHCO_COM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOCOM_FPHCO_CODE_FK_PK = @FPHCOCOM_FPH"& _ 
                "CO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOCOM_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable = New dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable, ByVal FPHCOCOM_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOCOM_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOCOM_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOCOM_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable = New dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOCOM_FPHCO_COMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOCOM_FPHCO_COM")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCOM_CDF_COM_CODE_FK_PK As String, ByVal Original_FPHCOCOM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOCOM_FPHCO_CODE_FK_PK,Integer)
            If (Original_FPHCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOCOM_CDF_COM_CODE_FK_PK,String)
            End If
            If (Original_FPHCOCOM_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPHCOCOM_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCOM_CDF_COM_CODE_FK_PK As String, ByVal FPHCOCOM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOCOM_FPHCO_CODE_FK_PK,Integer)
            If (FPHCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOCOM_CDF_COM_CODE_FK_PK,String)
            End If
            If (FPHCOCOM_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPHCOCOM_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOCOM_CDF_COM_CODE_FK_PK As String, ByVal FPHCOCOM_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCOM_CDF_COM_CODE_FK_PK As String, ByVal Original_FPHCOCOM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOCOM_FPHCO_CODE_FK_PK,Integer)
            If (FPHCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOCOM_CDF_COM_CODE_FK_PK,String)
            End If
            If (FPHCOCOM_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPHCOCOM_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FPHCOCOM_FPHCO_CODE_FK_PK,Integer)
            If (Original_FPHCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPHCOCOM_CDF_COM_CODE_FK_PK,String)
            End If
            If (Original_FPHCOCOM_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPHCOCOM_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOCOM_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FPHCOCOM_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOCOM_CDF_COM_CODE_FK_PK As String, ByVal Original_FPHCOCOM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FPHCOCOM_FPHCO_CODE_FK_PK, Original_FPHCOCOM_CDF_COM_CODE_FK_PK, FPHCOCOM_NUMORD, Original_FPHCOCOM_FPHCO_CODE_FK_PK, Original_FPHCOCOM_CDF_COM_CODE_FK_PK, Original_FPHCOCOM_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FPHCOAFS_FPHCO_AFSSAPSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FPHCOAFS_FPHCO_AFSSAPS"
            tableMapping.ColumnMappings.Add("FPHCOAFS_FPHCO_CODE_FK_PK", "FPHCOAFS_FPHCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOAFS_SP_CODE_FK_PK", "FPHCOAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FPHCOAFS_DATE_PK", "FPHCOAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FPHCOAFS_CDF_DOCUMENT_FK_PK", "FPHCOAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FPHCOAFS_FPHCO_AFSSAPS] WHERE (([FPHCOAFS_FPHCO_CODE_FK_"& _ 
                "PK] = @Original_FPHCOAFS_FPHCO_CODE_FK_PK) AND ([FPHCOAFS_SP_CODE_FK_PK] = @Orig"& _ 
                "inal_FPHCOAFS_SP_CODE_FK_PK) AND ([FPHCOAFS_DATE_PK] = @Original_FPHCOAFS_DATE_P"& _ 
                "K) AND ([FPHCOAFS_CDF_DOCUMENT_FK_PK] = @Original_FPHCOAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FPHCOAFS_FPHCO_AFSSAPS] ([FPHCOAFS_FPHCO_CODE_FK_PK], [F"& _ 
                "PHCOAFS_SP_CODE_FK_PK], [FPHCOAFS_DATE_PK], [FPHCOAFS_CDF_DOCUMENT_FK_PK]) VALUE"& _ 
                "S (@FPHCOAFS_FPHCO_CODE_FK_PK, @FPHCOAFS_SP_CODE_FK_PK, @FPHCOAFS_DATE_PK, @FPHC"& _ 
                "OAFS_CDF_DOCUMENT_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOAFS_FPHCO_CODE_FK_PK, FPHCOAFS_SP_CODE_FK"& _ 
                "_PK, FPHCOAFS_DATE_PK, FPHCOAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPHCOAFS_FPHCO"& _ 
                "_AFSSAPS WHERE (FPHCOAFS_CDF_DOCUMENT_FK_PK = @FPHCOAFS_CDF_DOCUMENT_FK_PK) AND "& _ 
                "(FPHCOAFS_DATE_PK = @FPHCOAFS_DATE_PK) AND (FPHCOAFS_FPHCO_CODE_FK_PK = @FPHCOAF"& _ 
                "S_FPHCO_CODE_FK_PK) AND (FPHCOAFS_SP_CODE_FK_PK = @FPHCOAFS_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FPHCOAFS_FPHCO_AFSSAPS] SET [FPHCOAFS_FPHCO_CODE_FK_PK] = @FP"& _ 
                "HCOAFS_FPHCO_CODE_FK_PK, [FPHCOAFS_SP_CODE_FK_PK] = @FPHCOAFS_SP_CODE_FK_PK, [FP"& _ 
                "HCOAFS_DATE_PK] = @FPHCOAFS_DATE_PK, [FPHCOAFS_CDF_DOCUMENT_FK_PK] = @FPHCOAFS_C"& _ 
                "DF_DOCUMENT_FK_PK WHERE (([FPHCOAFS_FPHCO_CODE_FK_PK] = @Original_FPHCOAFS_FPHCO"& _ 
                "_CODE_FK_PK) AND ([FPHCOAFS_SP_CODE_FK_PK] = @Original_FPHCOAFS_SP_CODE_FK_PK) A"& _ 
                "ND ([FPHCOAFS_DATE_PK] = @Original_FPHCOAFS_DATE_PK) AND ([FPHCOAFS_CDF_DOCUMENT"& _ 
                "_FK_PK] = @Original_FPHCOAFS_CDF_DOCUMENT_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FPHCOAFS_FPHCO_CODE_F"& _ 
                "K_PK, FPHCOAFS_SP_CODE_FK_PK, FPHCOAFS_DATE_PK, FPHCOAFS_CDF_DOCUMENT_FK_PK FROM"& _ 
                " THERIAQUE.FPHCOAFS_FPHCO_AFSSAPS WHERE (FPHCOAFS_CDF_DOCUMENT_FK_PK = @FPHCOAFS"& _ 
                "_CDF_DOCUMENT_FK_PK) AND (FPHCOAFS_DATE_PK = @FPHCOAFS_DATE_PK) AND (FPHCOAFS_FP"& _ 
                "HCO_CODE_FK_PK = @FPHCOAFS_FPHCO_CODE_FK_PK) AND (FPHCOAFS_SP_CODE_FK_PK = @FPHC"& _ 
                "OAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FPHCOAFS_FPHCO_CODE_FK_PK, FPHCOAFS_SP_CODE_FK_PK, FPHCOAFS_DATE_PK, FPHCO"& _ 
                "AFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPHCOAFS_FPHCO_AFSSAPS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FPHCOAFS_FPHCO_CODE_FK_PK, FPHCOAFS_SP_CODE_FK_PK, FPHCOAFS_DATE_PK, FPHCO"& _ 
                "AFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FPHCOAFS_FPHCO_AFSSAPS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FPHCOAFS_FPH"& _ 
                "CO_CODE_FK_PK = @FPHCOAFS_FPHCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FPHCOAFS_FPHCO_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable = New dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable, ByVal FPHCOAFS_FPHCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOAFS_FPHCO_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FPHCOAFS_FPHCO_CODE_FK_PK As Integer) As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FPHCOAFS_FPHCO_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable = New dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Pharmacocinetique.FPHCOAFS_FPHCO_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Pharmacocinetique) As Integer
            Return Me.Adapter.Update(dataSet, "FPHCOAFS_FPHCO_AFSSAPS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPHCOAFS_DATE_PK As Date, ByVal Original_FPHCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FPHCOAFS_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FPHCOAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FPHCOAFS_DATE_PK,Date)
            If (Original_FPHCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FPHCOAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal FPHCOAFS_DATE_PK As Date, ByVal FPHCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FPHCOAFS_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FPHCOAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FPHCOAFS_DATE_PK,Date)
            If (FPHCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FPHCOAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal FPHCOAFS_DATE_PK As Date, ByVal FPHCOAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPHCOAFS_DATE_PK As Date, ByVal Original_FPHCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FPHCOAFS_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FPHCOAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FPHCOAFS_DATE_PK,Date)
            If (FPHCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FPHCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FPHCOAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FPHCOAFS_FPHCO_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FPHCOAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FPHCOAFS_DATE_PK,Date)
            If (Original_FPHCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FPHCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FPHCOAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FPHCOAFS_FPHCO_CODE_FK_PK As Integer, ByVal Original_FPHCOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FPHCOAFS_DATE_PK As Date, ByVal Original_FPHCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Return Me.Update(Original_FPHCOAFS_FPHCO_CODE_FK_PK, Original_FPHCOAFS_SP_CODE_FK_PK, Original_FPHCOAFS_DATE_PK, Original_FPHCOAFS_CDF_DOCUMENT_FK_PK, Original_FPHCOAFS_FPHCO_CODE_FK_PK, Original_FPHCOAFS_SP_CODE_FK_PK, Original_FPHCOAFS_DATE_PK, Original_FPHCOAFS_CDF_DOCUMENT_FK_PK)
        End Function
    End Class
End Namespace
