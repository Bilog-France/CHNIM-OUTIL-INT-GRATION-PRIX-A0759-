'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Indication"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Indication
    Inherits Global.System.Data.DataSet
    
    Private tableFINCPH_INDCPH As FINCPH_INDCPHDataTable
    
    Private tableFINCCH_INDCCH As FINCCH_INDCCHDataTable
    
    Private tableFINSAC_SUBAC As FINSAC_SUBACDataTable
    
    Private tableFINPR_INDPROD As FINPR_INDPRODDataTable
    
    Private tableFINCH_INDCHOIX As FINCH_INDCHOIXDataTable
    
    Private tableFINSP_INDSPE As FINSP_INDSPEDataTable
    
    Private tableFINTY_FINDTYPE As FINTY_FINDTYPEDataTable
    
    Private tableFINCON_FINDCOMMENT_NATURE As FINCON_FINDCOMMENT_NATUREDataTable
    
    Private tableNAIN_NATURE_INDICATION As NAIN_NATURE_INDICATIONDataTable
    
    Private tableFINTSS_INDICATION_TAUXSECU As FINTSS_INDICATION_TAUXSECUDataTable
    
    Private tableFINSMR_INDIC_SMR_ATR As FINSMR_INDIC_SMR_ATRDataTable
    
    Private tableFINET_FINDETIOL As FINET_FINDETIOLDataTable
    
    Private tableFINCO_FINDCOMMENT As FINCO_FINDCOMMENTDataTable
    
    Private tableFINBIB_REFERENCE_BIBLIO As FINBIB_REFERENCE_BIBLIODataTable
    
    Private tableFINAFS_FIN_AFSSAPS As FINAFS_FIN_AFSSAPSDataTable
    
    Private tableSPAFS_SPECIALITE_AFSSAPS As SPAFS_SPECIALITE_AFSSAPSDataTable
    
    Private tableFIN_FICHEINDIC As FIN_FICHEINDICDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FINCPH_INDCPH")) Is Nothing) Then
                MyBase.Tables.Add(New FINCPH_INDCPHDataTable(ds.Tables("FINCPH_INDCPH")))
            End If
            If (Not (ds.Tables("FINCCH_INDCCH")) Is Nothing) Then
                MyBase.Tables.Add(New FINCCH_INDCCHDataTable(ds.Tables("FINCCH_INDCCH")))
            End If
            If (Not (ds.Tables("FINSAC_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FINSAC_SUBACDataTable(ds.Tables("FINSAC_SUBAC")))
            End If
            If (Not (ds.Tables("FINPR_INDPROD")) Is Nothing) Then
                MyBase.Tables.Add(New FINPR_INDPRODDataTable(ds.Tables("FINPR_INDPROD")))
            End If
            If (Not (ds.Tables("FINCH_INDCHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New FINCH_INDCHOIXDataTable(ds.Tables("FINCH_INDCHOIX")))
            End If
            If (Not (ds.Tables("FINSP_INDSPE")) Is Nothing) Then
                MyBase.Tables.Add(New FINSP_INDSPEDataTable(ds.Tables("FINSP_INDSPE")))
            End If
            If (Not (ds.Tables("FINTY_FINDTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New FINTY_FINDTYPEDataTable(ds.Tables("FINTY_FINDTYPE")))
            End If
            If (Not (ds.Tables("FINCON_FINDCOMMENT_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New FINCON_FINDCOMMENT_NATUREDataTable(ds.Tables("FINCON_FINDCOMMENT_NATURE")))
            End If
            If (Not (ds.Tables("NAIN_NATURE_INDICATION")) Is Nothing) Then
                MyBase.Tables.Add(New NAIN_NATURE_INDICATIONDataTable(ds.Tables("NAIN_NATURE_INDICATION")))
            End If
            If (Not (ds.Tables("FINTSS_INDICATION_TAUXSECU")) Is Nothing) Then
                MyBase.Tables.Add(New FINTSS_INDICATION_TAUXSECUDataTable(ds.Tables("FINTSS_INDICATION_TAUXSECU")))
            End If
            If (Not (ds.Tables("FINSMR_INDIC_SMR_ATR")) Is Nothing) Then
                MyBase.Tables.Add(New FINSMR_INDIC_SMR_ATRDataTable(ds.Tables("FINSMR_INDIC_SMR_ATR")))
            End If
            If (Not (ds.Tables("FINET_FINDETIOL")) Is Nothing) Then
                MyBase.Tables.Add(New FINET_FINDETIOLDataTable(ds.Tables("FINET_FINDETIOL")))
            End If
            If (Not (ds.Tables("FINCO_FINDCOMMENT")) Is Nothing) Then
                MyBase.Tables.Add(New FINCO_FINDCOMMENTDataTable(ds.Tables("FINCO_FINDCOMMENT")))
            End If
            If (Not (ds.Tables("FINBIB_REFERENCE_BIBLIO")) Is Nothing) Then
                MyBase.Tables.Add(New FINBIB_REFERENCE_BIBLIODataTable(ds.Tables("FINBIB_REFERENCE_BIBLIO")))
            End If
            If (Not (ds.Tables("FINAFS_FIN_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FINAFS_FIN_AFSSAPSDataTable(ds.Tables("FINAFS_FIN_AFSSAPS")))
            End If
            If (Not (ds.Tables("SPAFS_SPECIALITE_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New SPAFS_SPECIALITE_AFSSAPSDataTable(ds.Tables("SPAFS_SPECIALITE_AFSSAPS")))
            End If
            If (Not (ds.Tables("FIN_FICHEINDIC")) Is Nothing) Then
                MyBase.Tables.Add(New FIN_FICHEINDICDataTable(ds.Tables("FIN_FICHEINDIC")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINCPH_INDCPH() As FINCPH_INDCPHDataTable
        Get
            Return Me.tableFINCPH_INDCPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINCCH_INDCCH() As FINCCH_INDCCHDataTable
        Get
            Return Me.tableFINCCH_INDCCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINSAC_SUBAC() As FINSAC_SUBACDataTable
        Get
            Return Me.tableFINSAC_SUBAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINPR_INDPROD() As FINPR_INDPRODDataTable
        Get
            Return Me.tableFINPR_INDPROD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINCH_INDCHOIX() As FINCH_INDCHOIXDataTable
        Get
            Return Me.tableFINCH_INDCHOIX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINSP_INDSPE() As FINSP_INDSPEDataTable
        Get
            Return Me.tableFINSP_INDSPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINTY_FINDTYPE() As FINTY_FINDTYPEDataTable
        Get
            Return Me.tableFINTY_FINDTYPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINCON_FINDCOMMENT_NATURE() As FINCON_FINDCOMMENT_NATUREDataTable
        Get
            Return Me.tableFINCON_FINDCOMMENT_NATURE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NAIN_NATURE_INDICATION() As NAIN_NATURE_INDICATIONDataTable
        Get
            Return Me.tableNAIN_NATURE_INDICATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINTSS_INDICATION_TAUXSECU() As FINTSS_INDICATION_TAUXSECUDataTable
        Get
            Return Me.tableFINTSS_INDICATION_TAUXSECU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINSMR_INDIC_SMR_ATR() As FINSMR_INDIC_SMR_ATRDataTable
        Get
            Return Me.tableFINSMR_INDIC_SMR_ATR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINET_FINDETIOL() As FINET_FINDETIOLDataTable
        Get
            Return Me.tableFINET_FINDETIOL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINCO_FINDCOMMENT() As FINCO_FINDCOMMENTDataTable
        Get
            Return Me.tableFINCO_FINDCOMMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINBIB_REFERENCE_BIBLIO() As FINBIB_REFERENCE_BIBLIODataTable
        Get
            Return Me.tableFINBIB_REFERENCE_BIBLIO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINAFS_FIN_AFSSAPS() As FINAFS_FIN_AFSSAPSDataTable
        Get
            Return Me.tableFINAFS_FIN_AFSSAPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPAFS_SPECIALITE_AFSSAPS() As SPAFS_SPECIALITE_AFSSAPSDataTable
        Get
            Return Me.tableSPAFS_SPECIALITE_AFSSAPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FIN_FICHEINDIC() As FIN_FICHEINDICDataTable
        Get
            Return Me.tableFIN_FICHEINDIC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Indication = CType(MyBase.Clone,dsTheriaque_Indication)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FINCPH_INDCPH")) Is Nothing) Then
                MyBase.Tables.Add(New FINCPH_INDCPHDataTable(ds.Tables("FINCPH_INDCPH")))
            End If
            If (Not (ds.Tables("FINCCH_INDCCH")) Is Nothing) Then
                MyBase.Tables.Add(New FINCCH_INDCCHDataTable(ds.Tables("FINCCH_INDCCH")))
            End If
            If (Not (ds.Tables("FINSAC_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FINSAC_SUBACDataTable(ds.Tables("FINSAC_SUBAC")))
            End If
            If (Not (ds.Tables("FINPR_INDPROD")) Is Nothing) Then
                MyBase.Tables.Add(New FINPR_INDPRODDataTable(ds.Tables("FINPR_INDPROD")))
            End If
            If (Not (ds.Tables("FINCH_INDCHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New FINCH_INDCHOIXDataTable(ds.Tables("FINCH_INDCHOIX")))
            End If
            If (Not (ds.Tables("FINSP_INDSPE")) Is Nothing) Then
                MyBase.Tables.Add(New FINSP_INDSPEDataTable(ds.Tables("FINSP_INDSPE")))
            End If
            If (Not (ds.Tables("FINTY_FINDTYPE")) Is Nothing) Then
                MyBase.Tables.Add(New FINTY_FINDTYPEDataTable(ds.Tables("FINTY_FINDTYPE")))
            End If
            If (Not (ds.Tables("FINCON_FINDCOMMENT_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New FINCON_FINDCOMMENT_NATUREDataTable(ds.Tables("FINCON_FINDCOMMENT_NATURE")))
            End If
            If (Not (ds.Tables("NAIN_NATURE_INDICATION")) Is Nothing) Then
                MyBase.Tables.Add(New NAIN_NATURE_INDICATIONDataTable(ds.Tables("NAIN_NATURE_INDICATION")))
            End If
            If (Not (ds.Tables("FINTSS_INDICATION_TAUXSECU")) Is Nothing) Then
                MyBase.Tables.Add(New FINTSS_INDICATION_TAUXSECUDataTable(ds.Tables("FINTSS_INDICATION_TAUXSECU")))
            End If
            If (Not (ds.Tables("FINSMR_INDIC_SMR_ATR")) Is Nothing) Then
                MyBase.Tables.Add(New FINSMR_INDIC_SMR_ATRDataTable(ds.Tables("FINSMR_INDIC_SMR_ATR")))
            End If
            If (Not (ds.Tables("FINET_FINDETIOL")) Is Nothing) Then
                MyBase.Tables.Add(New FINET_FINDETIOLDataTable(ds.Tables("FINET_FINDETIOL")))
            End If
            If (Not (ds.Tables("FINCO_FINDCOMMENT")) Is Nothing) Then
                MyBase.Tables.Add(New FINCO_FINDCOMMENTDataTable(ds.Tables("FINCO_FINDCOMMENT")))
            End If
            If (Not (ds.Tables("FINBIB_REFERENCE_BIBLIO")) Is Nothing) Then
                MyBase.Tables.Add(New FINBIB_REFERENCE_BIBLIODataTable(ds.Tables("FINBIB_REFERENCE_BIBLIO")))
            End If
            If (Not (ds.Tables("FINAFS_FIN_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FINAFS_FIN_AFSSAPSDataTable(ds.Tables("FINAFS_FIN_AFSSAPS")))
            End If
            If (Not (ds.Tables("SPAFS_SPECIALITE_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New SPAFS_SPECIALITE_AFSSAPSDataTable(ds.Tables("SPAFS_SPECIALITE_AFSSAPS")))
            End If
            If (Not (ds.Tables("FIN_FICHEINDIC")) Is Nothing) Then
                MyBase.Tables.Add(New FIN_FICHEINDICDataTable(ds.Tables("FIN_FICHEINDIC")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFINCPH_INDCPH = CType(MyBase.Tables("FINCPH_INDCPH"),FINCPH_INDCPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINCPH_INDCPH) Is Nothing) Then
                Me.tableFINCPH_INDCPH.InitVars
            End If
        End If
        Me.tableFINCCH_INDCCH = CType(MyBase.Tables("FINCCH_INDCCH"),FINCCH_INDCCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINCCH_INDCCH) Is Nothing) Then
                Me.tableFINCCH_INDCCH.InitVars
            End If
        End If
        Me.tableFINSAC_SUBAC = CType(MyBase.Tables("FINSAC_SUBAC"),FINSAC_SUBACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINSAC_SUBAC) Is Nothing) Then
                Me.tableFINSAC_SUBAC.InitVars
            End If
        End If
        Me.tableFINPR_INDPROD = CType(MyBase.Tables("FINPR_INDPROD"),FINPR_INDPRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINPR_INDPROD) Is Nothing) Then
                Me.tableFINPR_INDPROD.InitVars
            End If
        End If
        Me.tableFINCH_INDCHOIX = CType(MyBase.Tables("FINCH_INDCHOIX"),FINCH_INDCHOIXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINCH_INDCHOIX) Is Nothing) Then
                Me.tableFINCH_INDCHOIX.InitVars
            End If
        End If
        Me.tableFINSP_INDSPE = CType(MyBase.Tables("FINSP_INDSPE"),FINSP_INDSPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINSP_INDSPE) Is Nothing) Then
                Me.tableFINSP_INDSPE.InitVars
            End If
        End If
        Me.tableFINTY_FINDTYPE = CType(MyBase.Tables("FINTY_FINDTYPE"),FINTY_FINDTYPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINTY_FINDTYPE) Is Nothing) Then
                Me.tableFINTY_FINDTYPE.InitVars
            End If
        End If
        Me.tableFINCON_FINDCOMMENT_NATURE = CType(MyBase.Tables("FINCON_FINDCOMMENT_NATURE"),FINCON_FINDCOMMENT_NATUREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINCON_FINDCOMMENT_NATURE) Is Nothing) Then
                Me.tableFINCON_FINDCOMMENT_NATURE.InitVars
            End If
        End If
        Me.tableNAIN_NATURE_INDICATION = CType(MyBase.Tables("NAIN_NATURE_INDICATION"),NAIN_NATURE_INDICATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNAIN_NATURE_INDICATION) Is Nothing) Then
                Me.tableNAIN_NATURE_INDICATION.InitVars
            End If
        End If
        Me.tableFINTSS_INDICATION_TAUXSECU = CType(MyBase.Tables("FINTSS_INDICATION_TAUXSECU"),FINTSS_INDICATION_TAUXSECUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINTSS_INDICATION_TAUXSECU) Is Nothing) Then
                Me.tableFINTSS_INDICATION_TAUXSECU.InitVars
            End If
        End If
        Me.tableFINSMR_INDIC_SMR_ATR = CType(MyBase.Tables("FINSMR_INDIC_SMR_ATR"),FINSMR_INDIC_SMR_ATRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINSMR_INDIC_SMR_ATR) Is Nothing) Then
                Me.tableFINSMR_INDIC_SMR_ATR.InitVars
            End If
        End If
        Me.tableFINET_FINDETIOL = CType(MyBase.Tables("FINET_FINDETIOL"),FINET_FINDETIOLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINET_FINDETIOL) Is Nothing) Then
                Me.tableFINET_FINDETIOL.InitVars
            End If
        End If
        Me.tableFINCO_FINDCOMMENT = CType(MyBase.Tables("FINCO_FINDCOMMENT"),FINCO_FINDCOMMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINCO_FINDCOMMENT) Is Nothing) Then
                Me.tableFINCO_FINDCOMMENT.InitVars
            End If
        End If
        Me.tableFINBIB_REFERENCE_BIBLIO = CType(MyBase.Tables("FINBIB_REFERENCE_BIBLIO"),FINBIB_REFERENCE_BIBLIODataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINBIB_REFERENCE_BIBLIO) Is Nothing) Then
                Me.tableFINBIB_REFERENCE_BIBLIO.InitVars
            End If
        End If
        Me.tableFINAFS_FIN_AFSSAPS = CType(MyBase.Tables("FINAFS_FIN_AFSSAPS"),FINAFS_FIN_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFINAFS_FIN_AFSSAPS) Is Nothing) Then
                Me.tableFINAFS_FIN_AFSSAPS.InitVars
            End If
        End If
        Me.tableSPAFS_SPECIALITE_AFSSAPS = CType(MyBase.Tables("SPAFS_SPECIALITE_AFSSAPS"),SPAFS_SPECIALITE_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPAFS_SPECIALITE_AFSSAPS) Is Nothing) Then
                Me.tableSPAFS_SPECIALITE_AFSSAPS.InitVars
            End If
        End If
        Me.tableFIN_FICHEINDIC = CType(MyBase.Tables("FIN_FICHEINDIC"),FIN_FICHEINDICDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFIN_FICHEINDIC) Is Nothing) Then
                Me.tableFIN_FICHEINDIC.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Indication"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Indication.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFINCPH_INDCPH = New FINCPH_INDCPHDataTable
        MyBase.Tables.Add(Me.tableFINCPH_INDCPH)
        Me.tableFINCCH_INDCCH = New FINCCH_INDCCHDataTable
        MyBase.Tables.Add(Me.tableFINCCH_INDCCH)
        Me.tableFINSAC_SUBAC = New FINSAC_SUBACDataTable
        MyBase.Tables.Add(Me.tableFINSAC_SUBAC)
        Me.tableFINPR_INDPROD = New FINPR_INDPRODDataTable
        MyBase.Tables.Add(Me.tableFINPR_INDPROD)
        Me.tableFINCH_INDCHOIX = New FINCH_INDCHOIXDataTable
        MyBase.Tables.Add(Me.tableFINCH_INDCHOIX)
        Me.tableFINSP_INDSPE = New FINSP_INDSPEDataTable
        MyBase.Tables.Add(Me.tableFINSP_INDSPE)
        Me.tableFINTY_FINDTYPE = New FINTY_FINDTYPEDataTable
        MyBase.Tables.Add(Me.tableFINTY_FINDTYPE)
        Me.tableFINCON_FINDCOMMENT_NATURE = New FINCON_FINDCOMMENT_NATUREDataTable
        MyBase.Tables.Add(Me.tableFINCON_FINDCOMMENT_NATURE)
        Me.tableNAIN_NATURE_INDICATION = New NAIN_NATURE_INDICATIONDataTable
        MyBase.Tables.Add(Me.tableNAIN_NATURE_INDICATION)
        Me.tableFINTSS_INDICATION_TAUXSECU = New FINTSS_INDICATION_TAUXSECUDataTable
        MyBase.Tables.Add(Me.tableFINTSS_INDICATION_TAUXSECU)
        Me.tableFINSMR_INDIC_SMR_ATR = New FINSMR_INDIC_SMR_ATRDataTable
        MyBase.Tables.Add(Me.tableFINSMR_INDIC_SMR_ATR)
        Me.tableFINET_FINDETIOL = New FINET_FINDETIOLDataTable
        MyBase.Tables.Add(Me.tableFINET_FINDETIOL)
        Me.tableFINCO_FINDCOMMENT = New FINCO_FINDCOMMENTDataTable
        MyBase.Tables.Add(Me.tableFINCO_FINDCOMMENT)
        Me.tableFINBIB_REFERENCE_BIBLIO = New FINBIB_REFERENCE_BIBLIODataTable
        MyBase.Tables.Add(Me.tableFINBIB_REFERENCE_BIBLIO)
        Me.tableFINAFS_FIN_AFSSAPS = New FINAFS_FIN_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFINAFS_FIN_AFSSAPS)
        Me.tableSPAFS_SPECIALITE_AFSSAPS = New SPAFS_SPECIALITE_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableSPAFS_SPECIALITE_AFSSAPS)
        Me.tableFIN_FICHEINDIC = New FIN_FICHEINDICDataTable
        MyBase.Tables.Add(Me.tableFIN_FICHEINDIC)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINCPH_INDCPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINCCH_INDCCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINSAC_SUBAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINPR_INDPROD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINCH_INDCHOIX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINSP_INDSPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINTY_FINDTYPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINCON_FINDCOMMENT_NATURE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNAIN_NATURE_INDICATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINTSS_INDICATION_TAUXSECU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINSMR_INDIC_SMR_ATR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINET_FINDETIOL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINCO_FINDCOMMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINBIB_REFERENCE_BIBLIO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFINAFS_FIN_AFSSAPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPAFS_SPECIALITE_AFSSAPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFIN_FICHEINDIC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FINCPH_INDCPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FINCPH_INDCPHRowChangeEvent)
    
    Public Delegate Sub FINCCH_INDCCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FINCCH_INDCCHRowChangeEvent)
    
    Public Delegate Sub FINSAC_SUBACRowChangeEventHandler(ByVal sender As Object, ByVal e As FINSAC_SUBACRowChangeEvent)
    
    Public Delegate Sub FINPR_INDPRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FINPR_INDPRODRowChangeEvent)
    
    Public Delegate Sub FINCH_INDCHOIXRowChangeEventHandler(ByVal sender As Object, ByVal e As FINCH_INDCHOIXRowChangeEvent)
    
    Public Delegate Sub FINSP_INDSPERowChangeEventHandler(ByVal sender As Object, ByVal e As FINSP_INDSPERowChangeEvent)
    
    Public Delegate Sub FINTY_FINDTYPERowChangeEventHandler(ByVal sender As Object, ByVal e As FINTY_FINDTYPERowChangeEvent)
    
    Public Delegate Sub FINCON_FINDCOMMENT_NATURERowChangeEventHandler(ByVal sender As Object, ByVal e As FINCON_FINDCOMMENT_NATURERowChangeEvent)
    
    Public Delegate Sub NAIN_NATURE_INDICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As NAIN_NATURE_INDICATIONRowChangeEvent)
    
    Public Delegate Sub FINTSS_INDICATION_TAUXSECURowChangeEventHandler(ByVal sender As Object, ByVal e As FINTSS_INDICATION_TAUXSECURowChangeEvent)
    
    Public Delegate Sub FINSMR_INDIC_SMR_ATRRowChangeEventHandler(ByVal sender As Object, ByVal e As FINSMR_INDIC_SMR_ATRRowChangeEvent)
    
    Public Delegate Sub FINET_FINDETIOLRowChangeEventHandler(ByVal sender As Object, ByVal e As FINET_FINDETIOLRowChangeEvent)
    
    Public Delegate Sub FINCO_FINDCOMMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As FINCO_FINDCOMMENTRowChangeEvent)
    
    Public Delegate Sub FINBIB_REFERENCE_BIBLIORowChangeEventHandler(ByVal sender As Object, ByVal e As FINBIB_REFERENCE_BIBLIORowChangeEvent)
    
    Public Delegate Sub FINAFS_FIN_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FINAFS_FIN_AFSSAPSRowChangeEvent)
    
    Public Delegate Sub SPAFS_SPECIALITE_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As SPAFS_SPECIALITE_AFSSAPSRowChangeEvent)
    
    Public Delegate Sub FIN_FICHEINDICRowChangeEventHandler(ByVal sender As Object, ByVal e As FIN_FICHEINDICRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINCPH_INDCPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINCPH_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINCPH_INDCPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCPH_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCPH_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINCPH_INDCPHRow
            Get
                Return CType(Me.Rows(index),FINCPH_INDCPHRow)
            End Get
        End Property
        
        Public Event FINCPH_INDCPHRowChanging As FINCPH_INDCPHRowChangeEventHandler
        
        Public Event FINCPH_INDCPHRowChanged As FINCPH_INDCPHRowChangeEventHandler
        
        Public Event FINCPH_INDCPHRowDeleting As FINCPH_INDCPHRowChangeEventHandler
        
        Public Event FINCPH_INDCPHRowDeleted As FINCPH_INDCPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINCPH_INDCPHRow(ByVal row As FINCPH_INDCPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINCPH_INDCPHRow(ByVal FINCPH_FIN_CODE_FK_PK As Integer, ByVal FINCPH_CPH_CODE_FK_PK As String) As FINCPH_INDCPHRow
            Dim rowFINCPH_INDCPHRow As FINCPH_INDCPHRow = CType(Me.NewRow,FINCPH_INDCPHRow)
            Dim columnValuesArray() As Object = New Object() {FINCPH_FIN_CODE_FK_PK, FINCPH_CPH_CODE_FK_PK}
            rowFINCPH_INDCPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINCPH_INDCPHRow)
            Return rowFINCPH_INDCPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINCPH_FIN_CODE_FK_PKFINCPH_CPH_CODE_FK_PK(ByVal FINCPH_FIN_CODE_FK_PK As Integer, ByVal FINCPH_CPH_CODE_FK_PK As String) As FINCPH_INDCPHRow
            Return CType(Me.Rows.Find(New Object() {FINCPH_FIN_CODE_FK_PK, FINCPH_CPH_CODE_FK_PK}),FINCPH_INDCPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINCPH_INDCPHDataTable = CType(MyBase.Clone,FINCPH_INDCPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINCPH_INDCPHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINCPH_FIN_CODE_FK_PK = MyBase.Columns("FINCPH_FIN_CODE_FK_PK")
            Me.columnFINCPH_CPH_CODE_FK_PK = MyBase.Columns("FINCPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINCPH_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCPH_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCPH_FIN_CODE_FK_PK)
            Me.columnFINCPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("FINCPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINCPH_FIN_CODE_FK_PK, Me.columnFINCPH_CPH_CODE_FK_PK}, true))
            Me.columnFINCPH_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINCPH_INDCPHRow() As FINCPH_INDCPHRow
            Return CType(Me.NewRow,FINCPH_INDCPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINCPH_INDCPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINCPH_INDCPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINCPH_INDCPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FINCPH_INDCPHRowChanged(Me, New FINCPH_INDCPHRowChangeEvent(CType(e.Row,FINCPH_INDCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINCPH_INDCPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FINCPH_INDCPHRowChanging(Me, New FINCPH_INDCPHRowChangeEvent(CType(e.Row,FINCPH_INDCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINCPH_INDCPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINCPH_INDCPHRowDeleted(Me, New FINCPH_INDCPHRowChangeEvent(CType(e.Row,FINCPH_INDCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINCPH_INDCPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINCPH_INDCPHRowDeleting(Me, New FINCPH_INDCPHRowChangeEvent(CType(e.Row,FINCPH_INDCPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINCPH_INDCPHRow(ByVal row As FINCPH_INDCPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINCPH_INDCPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINCCH_INDCCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINCCH_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINCCH_INDCCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCCH_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCCH_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINCCH_INDCCHRow
            Get
                Return CType(Me.Rows(index),FINCCH_INDCCHRow)
            End Get
        End Property
        
        Public Event FINCCH_INDCCHRowChanging As FINCCH_INDCCHRowChangeEventHandler
        
        Public Event FINCCH_INDCCHRowChanged As FINCCH_INDCCHRowChangeEventHandler
        
        Public Event FINCCH_INDCCHRowDeleting As FINCCH_INDCCHRowChangeEventHandler
        
        Public Event FINCCH_INDCCHRowDeleted As FINCCH_INDCCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINCCH_INDCCHRow(ByVal row As FINCCH_INDCCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINCCH_INDCCHRow(ByVal FINCCH_FIN_CODE_FK_PK As Integer, ByVal FINCCH_CCH_CODE_FK_PK As String) As FINCCH_INDCCHRow
            Dim rowFINCCH_INDCCHRow As FINCCH_INDCCHRow = CType(Me.NewRow,FINCCH_INDCCHRow)
            Dim columnValuesArray() As Object = New Object() {FINCCH_FIN_CODE_FK_PK, FINCCH_CCH_CODE_FK_PK}
            rowFINCCH_INDCCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINCCH_INDCCHRow)
            Return rowFINCCH_INDCCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINCCH_FIN_CODE_FK_PKFINCCH_CCH_CODE_FK_PK(ByVal FINCCH_FIN_CODE_FK_PK As Integer, ByVal FINCCH_CCH_CODE_FK_PK As String) As FINCCH_INDCCHRow
            Return CType(Me.Rows.Find(New Object() {FINCCH_FIN_CODE_FK_PK, FINCCH_CCH_CODE_FK_PK}),FINCCH_INDCCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINCCH_INDCCHDataTable = CType(MyBase.Clone,FINCCH_INDCCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINCCH_INDCCHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINCCH_FIN_CODE_FK_PK = MyBase.Columns("FINCCH_FIN_CODE_FK_PK")
            Me.columnFINCCH_CCH_CODE_FK_PK = MyBase.Columns("FINCCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINCCH_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCCH_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCCH_FIN_CODE_FK_PK)
            Me.columnFINCCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("FINCCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINCCH_FIN_CODE_FK_PK, Me.columnFINCCH_CCH_CODE_FK_PK}, true))
            Me.columnFINCCH_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINCCH_INDCCHRow() As FINCCH_INDCCHRow
            Return CType(Me.NewRow,FINCCH_INDCCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINCCH_INDCCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINCCH_INDCCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINCCH_INDCCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FINCCH_INDCCHRowChanged(Me, New FINCCH_INDCCHRowChangeEvent(CType(e.Row,FINCCH_INDCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINCCH_INDCCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FINCCH_INDCCHRowChanging(Me, New FINCCH_INDCCHRowChangeEvent(CType(e.Row,FINCCH_INDCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINCCH_INDCCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINCCH_INDCCHRowDeleted(Me, New FINCCH_INDCCHRowChangeEvent(CType(e.Row,FINCCH_INDCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINCCH_INDCCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINCCH_INDCCHRowDeleting(Me, New FINCCH_INDCCHRowChangeEvent(CType(e.Row,FINCCH_INDCCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINCCH_INDCCHRow(ByVal row As FINCCH_INDCCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINCCH_INDCCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINSAC_SUBACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINSAC_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINSAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINSAC_SUBAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSAC_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSAC_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINSAC_SUBACRow
            Get
                Return CType(Me.Rows(index),FINSAC_SUBACRow)
            End Get
        End Property
        
        Public Event FINSAC_SUBACRowChanging As FINSAC_SUBACRowChangeEventHandler
        
        Public Event FINSAC_SUBACRowChanged As FINSAC_SUBACRowChangeEventHandler
        
        Public Event FINSAC_SUBACRowDeleting As FINSAC_SUBACRowChangeEventHandler
        
        Public Event FINSAC_SUBACRowDeleted As FINSAC_SUBACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINSAC_SUBACRow(ByVal row As FINSAC_SUBACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINSAC_SUBACRow(ByVal FINSAC_FIN_CODE_FK_PK As Integer, ByVal FINSAC_SAC_CODE_FK_PK As Integer) As FINSAC_SUBACRow
            Dim rowFINSAC_SUBACRow As FINSAC_SUBACRow = CType(Me.NewRow,FINSAC_SUBACRow)
            Dim columnValuesArray() As Object = New Object() {FINSAC_FIN_CODE_FK_PK, FINSAC_SAC_CODE_FK_PK}
            rowFINSAC_SUBACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINSAC_SUBACRow)
            Return rowFINSAC_SUBACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINSAC_FIN_CODE_FK_PKFINSAC_SAC_CODE_FK_PK(ByVal FINSAC_FIN_CODE_FK_PK As Integer, ByVal FINSAC_SAC_CODE_FK_PK As Integer) As FINSAC_SUBACRow
            Return CType(Me.Rows.Find(New Object() {FINSAC_FIN_CODE_FK_PK, FINSAC_SAC_CODE_FK_PK}),FINSAC_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINSAC_SUBACDataTable = CType(MyBase.Clone,FINSAC_SUBACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINSAC_SUBACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINSAC_FIN_CODE_FK_PK = MyBase.Columns("FINSAC_FIN_CODE_FK_PK")
            Me.columnFINSAC_SAC_CODE_FK_PK = MyBase.Columns("FINSAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINSAC_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINSAC_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSAC_FIN_CODE_FK_PK)
            Me.columnFINSAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("FINSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINSAC_FIN_CODE_FK_PK, Me.columnFINSAC_SAC_CODE_FK_PK}, true))
            Me.columnFINSAC_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINSAC_SUBACRow() As FINSAC_SUBACRow
            Return CType(Me.NewRow,FINSAC_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINSAC_SUBACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINSAC_SUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINSAC_SUBACRowChangedEvent) Is Nothing) Then
                RaiseEvent FINSAC_SUBACRowChanged(Me, New FINSAC_SUBACRowChangeEvent(CType(e.Row,FINSAC_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINSAC_SUBACRowChangingEvent) Is Nothing) Then
                RaiseEvent FINSAC_SUBACRowChanging(Me, New FINSAC_SUBACRowChangeEvent(CType(e.Row,FINSAC_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINSAC_SUBACRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINSAC_SUBACRowDeleted(Me, New FINSAC_SUBACRowChangeEvent(CType(e.Row,FINSAC_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINSAC_SUBACRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINSAC_SUBACRowDeleting(Me, New FINSAC_SUBACRowChangeEvent(CType(e.Row,FINSAC_SUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINSAC_SUBACRow(ByVal row As FINSAC_SUBACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINSAC_SUBACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINPR_INDPRODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINPR_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINPR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINPR_INDPROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINPR_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINPR_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINPR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINPR_INDPRODRow
            Get
                Return CType(Me.Rows(index),FINPR_INDPRODRow)
            End Get
        End Property
        
        Public Event FINPR_INDPRODRowChanging As FINPR_INDPRODRowChangeEventHandler
        
        Public Event FINPR_INDPRODRowChanged As FINPR_INDPRODRowChangeEventHandler
        
        Public Event FINPR_INDPRODRowDeleting As FINPR_INDPRODRowChangeEventHandler
        
        Public Event FINPR_INDPRODRowDeleted As FINPR_INDPRODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINPR_INDPRODRow(ByVal row As FINPR_INDPRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINPR_INDPRODRow(ByVal FINPR_FIN_CODE_FK_PK As Integer, ByVal FINPR_PR_CODE_FK_PK As Integer) As FINPR_INDPRODRow
            Dim rowFINPR_INDPRODRow As FINPR_INDPRODRow = CType(Me.NewRow,FINPR_INDPRODRow)
            Dim columnValuesArray() As Object = New Object() {FINPR_FIN_CODE_FK_PK, FINPR_PR_CODE_FK_PK}
            rowFINPR_INDPRODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINPR_INDPRODRow)
            Return rowFINPR_INDPRODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINPR_FIN_CODE_FK_PKFINPR_PR_CODE_FK_PK(ByVal FINPR_FIN_CODE_FK_PK As Integer, ByVal FINPR_PR_CODE_FK_PK As Integer) As FINPR_INDPRODRow
            Return CType(Me.Rows.Find(New Object() {FINPR_FIN_CODE_FK_PK, FINPR_PR_CODE_FK_PK}),FINPR_INDPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINPR_INDPRODDataTable = CType(MyBase.Clone,FINPR_INDPRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINPR_INDPRODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINPR_FIN_CODE_FK_PK = MyBase.Columns("FINPR_FIN_CODE_FK_PK")
            Me.columnFINPR_PR_CODE_FK_PK = MyBase.Columns("FINPR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINPR_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINPR_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINPR_FIN_CODE_FK_PK)
            Me.columnFINPR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("FINPR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINPR_FIN_CODE_FK_PK, Me.columnFINPR_PR_CODE_FK_PK}, true))
            Me.columnFINPR_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINPR_INDPRODRow() As FINPR_INDPRODRow
            Return CType(Me.NewRow,FINPR_INDPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINPR_INDPRODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINPR_INDPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINPR_INDPRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FINPR_INDPRODRowChanged(Me, New FINPR_INDPRODRowChangeEvent(CType(e.Row,FINPR_INDPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINPR_INDPRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FINPR_INDPRODRowChanging(Me, New FINPR_INDPRODRowChangeEvent(CType(e.Row,FINPR_INDPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINPR_INDPRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINPR_INDPRODRowDeleted(Me, New FINPR_INDPRODRowChangeEvent(CType(e.Row,FINPR_INDPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINPR_INDPRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINPR_INDPRODRowDeleting(Me, New FINPR_INDPRODRowChangeEvent(CType(e.Row,FINPR_INDPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINPR_INDPRODRow(ByVal row As FINPR_INDPRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINPR_INDPRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINCH_INDCHOIXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINCH_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCH_CH_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCH_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINCH_INDCHOIX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCH_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCH_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCH_CH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCH_CH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCH_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCH_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINCH_INDCHOIXRow
            Get
                Return CType(Me.Rows(index),FINCH_INDCHOIXRow)
            End Get
        End Property
        
        Public Event FINCH_INDCHOIXRowChanging As FINCH_INDCHOIXRowChangeEventHandler
        
        Public Event FINCH_INDCHOIXRowChanged As FINCH_INDCHOIXRowChangeEventHandler
        
        Public Event FINCH_INDCHOIXRowDeleting As FINCH_INDCHOIXRowChangeEventHandler
        
        Public Event FINCH_INDCHOIXRowDeleted As FINCH_INDCHOIXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINCH_INDCHOIXRow(ByVal row As FINCH_INDCHOIXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINCH_INDCHOIXRow(ByVal FINCH_FIN_CODE_FK_PK As Integer, ByVal FINCH_CH_CODE_FK_PK As Integer, ByVal FINCH_NUMORD As Short) As FINCH_INDCHOIXRow
            Dim rowFINCH_INDCHOIXRow As FINCH_INDCHOIXRow = CType(Me.NewRow,FINCH_INDCHOIXRow)
            Dim columnValuesArray() As Object = New Object() {FINCH_FIN_CODE_FK_PK, FINCH_CH_CODE_FK_PK, FINCH_NUMORD}
            rowFINCH_INDCHOIXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINCH_INDCHOIXRow)
            Return rowFINCH_INDCHOIXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINCH_FIN_CODE_FK_PKFINCH_CH_CODE_FK_PK(ByVal FINCH_FIN_CODE_FK_PK As Integer, ByVal FINCH_CH_CODE_FK_PK As Integer) As FINCH_INDCHOIXRow
            Return CType(Me.Rows.Find(New Object() {FINCH_FIN_CODE_FK_PK, FINCH_CH_CODE_FK_PK}),FINCH_INDCHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINCH_INDCHOIXDataTable = CType(MyBase.Clone,FINCH_INDCHOIXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINCH_INDCHOIXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINCH_FIN_CODE_FK_PK = MyBase.Columns("FINCH_FIN_CODE_FK_PK")
            Me.columnFINCH_CH_CODE_FK_PK = MyBase.Columns("FINCH_CH_CODE_FK_PK")
            Me.columnFINCH_NUMORD = MyBase.Columns("FINCH_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINCH_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCH_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCH_FIN_CODE_FK_PK)
            Me.columnFINCH_CH_CODE_FK_PK = New Global.System.Data.DataColumn("FINCH_CH_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCH_CH_CODE_FK_PK)
            Me.columnFINCH_NUMORD = New Global.System.Data.DataColumn("FINCH_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCH_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINCH_FIN_CODE_FK_PK, Me.columnFINCH_CH_CODE_FK_PK}, true))
            Me.columnFINCH_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCH_CH_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINCH_INDCHOIXRow() As FINCH_INDCHOIXRow
            Return CType(Me.NewRow,FINCH_INDCHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINCH_INDCHOIXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINCH_INDCHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINCH_INDCHOIXRowChangedEvent) Is Nothing) Then
                RaiseEvent FINCH_INDCHOIXRowChanged(Me, New FINCH_INDCHOIXRowChangeEvent(CType(e.Row,FINCH_INDCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINCH_INDCHOIXRowChangingEvent) Is Nothing) Then
                RaiseEvent FINCH_INDCHOIXRowChanging(Me, New FINCH_INDCHOIXRowChangeEvent(CType(e.Row,FINCH_INDCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINCH_INDCHOIXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINCH_INDCHOIXRowDeleted(Me, New FINCH_INDCHOIXRowChangeEvent(CType(e.Row,FINCH_INDCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINCH_INDCHOIXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINCH_INDCHOIXRowDeleting(Me, New FINCH_INDCHOIXRowChangeEvent(CType(e.Row,FINCH_INDCHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINCH_INDCHOIXRow(ByVal row As FINCH_INDCHOIXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINCH_INDCHOIXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINSP_INDSPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINSP_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINSP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINSP_INDSPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSP_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSP_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINSP_INDSPERow
            Get
                Return CType(Me.Rows(index),FINSP_INDSPERow)
            End Get
        End Property
        
        Public Event FINSP_INDSPERowChanging As FINSP_INDSPERowChangeEventHandler
        
        Public Event FINSP_INDSPERowChanged As FINSP_INDSPERowChangeEventHandler
        
        Public Event FINSP_INDSPERowDeleting As FINSP_INDSPERowChangeEventHandler
        
        Public Event FINSP_INDSPERowDeleted As FINSP_INDSPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINSP_INDSPERow(ByVal row As FINSP_INDSPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINSP_INDSPERow(ByVal FINSP_FIN_CODE_FK_PK As Integer, ByVal FINSP_SP_CODE_FK_PK As Integer) As FINSP_INDSPERow
            Dim rowFINSP_INDSPERow As FINSP_INDSPERow = CType(Me.NewRow,FINSP_INDSPERow)
            Dim columnValuesArray() As Object = New Object() {FINSP_FIN_CODE_FK_PK, FINSP_SP_CODE_FK_PK}
            rowFINSP_INDSPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINSP_INDSPERow)
            Return rowFINSP_INDSPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINSP_FIN_CODE_FK_PKFINSP_SP_CODE_FK_PK(ByVal FINSP_FIN_CODE_FK_PK As Integer, ByVal FINSP_SP_CODE_FK_PK As Integer) As FINSP_INDSPERow
            Return CType(Me.Rows.Find(New Object() {FINSP_FIN_CODE_FK_PK, FINSP_SP_CODE_FK_PK}),FINSP_INDSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINSP_INDSPEDataTable = CType(MyBase.Clone,FINSP_INDSPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINSP_INDSPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINSP_FIN_CODE_FK_PK = MyBase.Columns("FINSP_FIN_CODE_FK_PK")
            Me.columnFINSP_SP_CODE_FK_PK = MyBase.Columns("FINSP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINSP_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINSP_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSP_FIN_CODE_FK_PK)
            Me.columnFINSP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FINSP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINSP_FIN_CODE_FK_PK, Me.columnFINSP_SP_CODE_FK_PK}, true))
            Me.columnFINSP_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINSP_INDSPERow() As FINSP_INDSPERow
            Return CType(Me.NewRow,FINSP_INDSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINSP_INDSPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINSP_INDSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINSP_INDSPERowChangedEvent) Is Nothing) Then
                RaiseEvent FINSP_INDSPERowChanged(Me, New FINSP_INDSPERowChangeEvent(CType(e.Row,FINSP_INDSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINSP_INDSPERowChangingEvent) Is Nothing) Then
                RaiseEvent FINSP_INDSPERowChanging(Me, New FINSP_INDSPERowChangeEvent(CType(e.Row,FINSP_INDSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINSP_INDSPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FINSP_INDSPERowDeleted(Me, New FINSP_INDSPERowChangeEvent(CType(e.Row,FINSP_INDSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINSP_INDSPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FINSP_INDSPERowDeleting(Me, New FINSP_INDSPERowChangeEvent(CType(e.Row,FINSP_INDSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINSP_INDSPERow(ByVal row As FINSP_INDSPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINSP_INDSPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINTY_FINDTYPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINTY_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINTY_CDF_TYIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINTY_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINTY_FINDTYPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTY_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTY_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTY_CDF_TYIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTY_CDF_TYIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTY_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTY_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINTY_FINDTYPERow
            Get
                Return CType(Me.Rows(index),FINTY_FINDTYPERow)
            End Get
        End Property
        
        Public Event FINTY_FINDTYPERowChanging As FINTY_FINDTYPERowChangeEventHandler
        
        Public Event FINTY_FINDTYPERowChanged As FINTY_FINDTYPERowChangeEventHandler
        
        Public Event FINTY_FINDTYPERowDeleting As FINTY_FINDTYPERowChangeEventHandler
        
        Public Event FINTY_FINDTYPERowDeleted As FINTY_FINDTYPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINTY_FINDTYPERow(ByVal row As FINTY_FINDTYPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINTY_FINDTYPERow(ByVal FINTY_FIN_CODE_FK_PK As Integer, ByVal FINTY_CDF_TYIN_CODE_FK_PK As String, ByVal FINTY_NUMORD As Short) As FINTY_FINDTYPERow
            Dim rowFINTY_FINDTYPERow As FINTY_FINDTYPERow = CType(Me.NewRow,FINTY_FINDTYPERow)
            Dim columnValuesArray() As Object = New Object() {FINTY_FIN_CODE_FK_PK, FINTY_CDF_TYIN_CODE_FK_PK, FINTY_NUMORD}
            rowFINTY_FINDTYPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINTY_FINDTYPERow)
            Return rowFINTY_FINDTYPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINTY_FIN_CODE_FK_PKFINTY_CDF_TYIN_CODE_FK_PK(ByVal FINTY_FIN_CODE_FK_PK As Integer, ByVal FINTY_CDF_TYIN_CODE_FK_PK As String) As FINTY_FINDTYPERow
            Return CType(Me.Rows.Find(New Object() {FINTY_FIN_CODE_FK_PK, FINTY_CDF_TYIN_CODE_FK_PK}),FINTY_FINDTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINTY_FINDTYPEDataTable = CType(MyBase.Clone,FINTY_FINDTYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINTY_FINDTYPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINTY_FIN_CODE_FK_PK = MyBase.Columns("FINTY_FIN_CODE_FK_PK")
            Me.columnFINTY_CDF_TYIN_CODE_FK_PK = MyBase.Columns("FINTY_CDF_TYIN_CODE_FK_PK")
            Me.columnFINTY_NUMORD = MyBase.Columns("FINTY_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINTY_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINTY_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTY_FIN_CODE_FK_PK)
            Me.columnFINTY_CDF_TYIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINTY_CDF_TYIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTY_CDF_TYIN_CODE_FK_PK)
            Me.columnFINTY_NUMORD = New Global.System.Data.DataColumn("FINTY_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTY_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINTY_FIN_CODE_FK_PK, Me.columnFINTY_CDF_TYIN_CODE_FK_PK}, true))
            Me.columnFINTY_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINTY_CDF_TYIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINTY_CDF_TYIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINTY_FINDTYPERow() As FINTY_FINDTYPERow
            Return CType(Me.NewRow,FINTY_FINDTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINTY_FINDTYPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINTY_FINDTYPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINTY_FINDTYPERowChangedEvent) Is Nothing) Then
                RaiseEvent FINTY_FINDTYPERowChanged(Me, New FINTY_FINDTYPERowChangeEvent(CType(e.Row,FINTY_FINDTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINTY_FINDTYPERowChangingEvent) Is Nothing) Then
                RaiseEvent FINTY_FINDTYPERowChanging(Me, New FINTY_FINDTYPERowChangeEvent(CType(e.Row,FINTY_FINDTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINTY_FINDTYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FINTY_FINDTYPERowDeleted(Me, New FINTY_FINDTYPERowChangeEvent(CType(e.Row,FINTY_FINDTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINTY_FINDTYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FINTY_FINDTYPERowDeleting(Me, New FINTY_FINDTYPERowChangeEvent(CType(e.Row,FINTY_FINDTYPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINTY_FINDTYPERow(ByVal row As FINTY_FINDTYPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINTY_FINDTYPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINCON_FINDCOMMENT_NATUREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINCON_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCON_CDF_COIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCON_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINCON_FINDCOMMENT_NATURE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCON_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCON_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCON_CDF_COIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCON_CDF_COIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCON_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCON_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINCON_FINDCOMMENT_NATURERow
            Get
                Return CType(Me.Rows(index),FINCON_FINDCOMMENT_NATURERow)
            End Get
        End Property
        
        Public Event FINCON_FINDCOMMENT_NATURERowChanging As FINCON_FINDCOMMENT_NATURERowChangeEventHandler
        
        Public Event FINCON_FINDCOMMENT_NATURERowChanged As FINCON_FINDCOMMENT_NATURERowChangeEventHandler
        
        Public Event FINCON_FINDCOMMENT_NATURERowDeleting As FINCON_FINDCOMMENT_NATURERowChangeEventHandler
        
        Public Event FINCON_FINDCOMMENT_NATURERowDeleted As FINCON_FINDCOMMENT_NATURERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINCON_FINDCOMMENT_NATURERow(ByVal row As FINCON_FINDCOMMENT_NATURERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINCON_FINDCOMMENT_NATURERow(ByVal FINCON_FIN_CODE_FK_PK As Integer, ByVal FINCON_CDF_COIN_CODE_FK_PK As String, ByVal FINCON_NUMORD As Short) As FINCON_FINDCOMMENT_NATURERow
            Dim rowFINCON_FINDCOMMENT_NATURERow As FINCON_FINDCOMMENT_NATURERow = CType(Me.NewRow,FINCON_FINDCOMMENT_NATURERow)
            Dim columnValuesArray() As Object = New Object() {FINCON_FIN_CODE_FK_PK, FINCON_CDF_COIN_CODE_FK_PK, FINCON_NUMORD}
            rowFINCON_FINDCOMMENT_NATURERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINCON_FINDCOMMENT_NATURERow)
            Return rowFINCON_FINDCOMMENT_NATURERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINCON_FIN_CODE_FK_PKFINCON_CDF_COIN_CODE_FK_PK(ByVal FINCON_FIN_CODE_FK_PK As Integer, ByVal FINCON_CDF_COIN_CODE_FK_PK As String) As FINCON_FINDCOMMENT_NATURERow
            Return CType(Me.Rows.Find(New Object() {FINCON_FIN_CODE_FK_PK, FINCON_CDF_COIN_CODE_FK_PK}),FINCON_FINDCOMMENT_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINCON_FINDCOMMENT_NATUREDataTable = CType(MyBase.Clone,FINCON_FINDCOMMENT_NATUREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINCON_FINDCOMMENT_NATUREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINCON_FIN_CODE_FK_PK = MyBase.Columns("FINCON_FIN_CODE_FK_PK")
            Me.columnFINCON_CDF_COIN_CODE_FK_PK = MyBase.Columns("FINCON_CDF_COIN_CODE_FK_PK")
            Me.columnFINCON_NUMORD = MyBase.Columns("FINCON_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINCON_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCON_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCON_FIN_CODE_FK_PK)
            Me.columnFINCON_CDF_COIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCON_CDF_COIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCON_CDF_COIN_CODE_FK_PK)
            Me.columnFINCON_NUMORD = New Global.System.Data.DataColumn("FINCON_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCON_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINCON_FIN_CODE_FK_PK, Me.columnFINCON_CDF_COIN_CODE_FK_PK}, true))
            Me.columnFINCON_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCON_CDF_COIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCON_CDF_COIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINCON_FINDCOMMENT_NATURERow() As FINCON_FINDCOMMENT_NATURERow
            Return CType(Me.NewRow,FINCON_FINDCOMMENT_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINCON_FINDCOMMENT_NATURERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINCON_FINDCOMMENT_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINCON_FINDCOMMENT_NATURERowChangedEvent) Is Nothing) Then
                RaiseEvent FINCON_FINDCOMMENT_NATURERowChanged(Me, New FINCON_FINDCOMMENT_NATURERowChangeEvent(CType(e.Row,FINCON_FINDCOMMENT_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINCON_FINDCOMMENT_NATURERowChangingEvent) Is Nothing) Then
                RaiseEvent FINCON_FINDCOMMENT_NATURERowChanging(Me, New FINCON_FINDCOMMENT_NATURERowChangeEvent(CType(e.Row,FINCON_FINDCOMMENT_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINCON_FINDCOMMENT_NATURERowDeletedEvent) Is Nothing) Then
                RaiseEvent FINCON_FINDCOMMENT_NATURERowDeleted(Me, New FINCON_FINDCOMMENT_NATURERowChangeEvent(CType(e.Row,FINCON_FINDCOMMENT_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINCON_FINDCOMMENT_NATURERowDeletingEvent) Is Nothing) Then
                RaiseEvent FINCON_FINDCOMMENT_NATURERowDeleting(Me, New FINCON_FINDCOMMENT_NATURERowChangeEvent(CType(e.Row,FINCON_FINDCOMMENT_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINCON_FINDCOMMENT_NATURERow(ByVal row As FINCON_FINDCOMMENT_NATURERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINCON_FINDCOMMENT_NATUREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NAIN_NATURE_INDICATIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNAIN_CODE_PK As Global.System.Data.DataColumn
        
        Private columnNAIN_MALADIE_RARE As Global.System.Data.DataColumn
        
        Private columnNAIN_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NAIN_NATURE_INDICATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAIN_CODE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAIN_CODE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAIN_MALADIE_RAREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAIN_MALADIE_RARE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAIN_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAIN_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NAIN_NATURE_INDICATIONRow
            Get
                Return CType(Me.Rows(index),NAIN_NATURE_INDICATIONRow)
            End Get
        End Property
        
        Public Event NAIN_NATURE_INDICATIONRowChanging As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        Public Event NAIN_NATURE_INDICATIONRowChanged As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        Public Event NAIN_NATURE_INDICATIONRowDeleting As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        Public Event NAIN_NATURE_INDICATIONRowDeleted As NAIN_NATURE_INDICATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNAIN_NATURE_INDICATIONRow(ByVal row As NAIN_NATURE_INDICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNAIN_NATURE_INDICATIONRow(ByVal NAIN_CODE_PK As String, ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String) As NAIN_NATURE_INDICATIONRow
            Dim rowNAIN_NATURE_INDICATIONRow As NAIN_NATURE_INDICATIONRow = CType(Me.NewRow,NAIN_NATURE_INDICATIONRow)
            Dim columnValuesArray() As Object = New Object() {NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE}
            rowNAIN_NATURE_INDICATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNAIN_NATURE_INDICATIONRow)
            Return rowNAIN_NATURE_INDICATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNAIN_CODE_PK(ByVal NAIN_CODE_PK As String) As NAIN_NATURE_INDICATIONRow
            Return CType(Me.Rows.Find(New Object() {NAIN_CODE_PK}),NAIN_NATURE_INDICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NAIN_NATURE_INDICATIONDataTable = CType(MyBase.Clone,NAIN_NATURE_INDICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NAIN_NATURE_INDICATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNAIN_CODE_PK = MyBase.Columns("NAIN_CODE_PK")
            Me.columnNAIN_MALADIE_RARE = MyBase.Columns("NAIN_MALADIE_RARE")
            Me.columnNAIN_TEXTE = MyBase.Columns("NAIN_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNAIN_CODE_PK = New Global.System.Data.DataColumn("NAIN_CODE_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAIN_CODE_PK)
            Me.columnNAIN_MALADIE_RARE = New Global.System.Data.DataColumn("NAIN_MALADIE_RARE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAIN_MALADIE_RARE)
            Me.columnNAIN_TEXTE = New Global.System.Data.DataColumn("NAIN_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAIN_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNAIN_CODE_PK}, true))
            Me.columnNAIN_CODE_PK.AllowDBNull = false
            Me.columnNAIN_CODE_PK.Unique = true
            Me.columnNAIN_CODE_PK.MaxLength = 10
            Me.columnNAIN_MALADIE_RARE.MaxLength = 1
            Me.columnNAIN_TEXTE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNAIN_NATURE_INDICATIONRow() As NAIN_NATURE_INDICATIONRow
            Return CType(Me.NewRow,NAIN_NATURE_INDICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NAIN_NATURE_INDICATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NAIN_NATURE_INDICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowChanged(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowChanging(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowDeleted(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NAIN_NATURE_INDICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent NAIN_NATURE_INDICATIONRowDeleting(Me, New NAIN_NATURE_INDICATIONRowChangeEvent(CType(e.Row,NAIN_NATURE_INDICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNAIN_NATURE_INDICATIONRow(ByVal row As NAIN_NATURE_INDICATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NAIN_NATURE_INDICATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINTSS_INDICATION_TAUXSECUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINTSS_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINTSS_PRE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINTSS_DATE_APPLI_PK As Global.System.Data.DataColumn
        
        Private columnFINTSS_CDF_TSS_CODE_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINTSS_INDICATION_TAUXSECU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTSS_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTSS_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTSS_PRE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTSS_PRE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTSS_DATE_APPLI_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTSS_DATE_APPLI_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINTSS_CDF_TSS_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINTSS_CDF_TSS_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINTSS_INDICATION_TAUXSECURow
            Get
                Return CType(Me.Rows(index),FINTSS_INDICATION_TAUXSECURow)
            End Get
        End Property
        
        Public Event FINTSS_INDICATION_TAUXSECURowChanging As FINTSS_INDICATION_TAUXSECURowChangeEventHandler
        
        Public Event FINTSS_INDICATION_TAUXSECURowChanged As FINTSS_INDICATION_TAUXSECURowChangeEventHandler
        
        Public Event FINTSS_INDICATION_TAUXSECURowDeleting As FINTSS_INDICATION_TAUXSECURowChangeEventHandler
        
        Public Event FINTSS_INDICATION_TAUXSECURowDeleted As FINTSS_INDICATION_TAUXSECURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINTSS_INDICATION_TAUXSECURow(ByVal row As FINTSS_INDICATION_TAUXSECURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINTSS_INDICATION_TAUXSECURow(ByVal FINTSS_FIN_CODE_FK_PK As Integer, ByVal FINTSS_PRE_CODE_FK_PK As String, ByVal FINTSS_DATE_APPLI_PK As Date, ByVal FINTSS_CDF_TSS_CODE_FK As String) As FINTSS_INDICATION_TAUXSECURow
            Dim rowFINTSS_INDICATION_TAUXSECURow As FINTSS_INDICATION_TAUXSECURow = CType(Me.NewRow,FINTSS_INDICATION_TAUXSECURow)
            Dim columnValuesArray() As Object = New Object() {FINTSS_FIN_CODE_FK_PK, FINTSS_PRE_CODE_FK_PK, FINTSS_DATE_APPLI_PK, FINTSS_CDF_TSS_CODE_FK}
            rowFINTSS_INDICATION_TAUXSECURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINTSS_INDICATION_TAUXSECURow)
            Return rowFINTSS_INDICATION_TAUXSECURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINTSS_FIN_CODE_FK_PKFINTSS_PRE_CODE_FK_PKFINTSS_DATE_APPLI_PKFINTSS_CDF_TSS_CODE_FK(ByVal FINTSS_FIN_CODE_FK_PK As Integer, ByVal FINTSS_PRE_CODE_FK_PK As String, ByVal FINTSS_DATE_APPLI_PK As Date, ByVal FINTSS_CDF_TSS_CODE_FK As String) As FINTSS_INDICATION_TAUXSECURow
            Return CType(Me.Rows.Find(New Object() {FINTSS_FIN_CODE_FK_PK, FINTSS_PRE_CODE_FK_PK, FINTSS_DATE_APPLI_PK, FINTSS_CDF_TSS_CODE_FK}),FINTSS_INDICATION_TAUXSECURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINTSS_INDICATION_TAUXSECUDataTable = CType(MyBase.Clone,FINTSS_INDICATION_TAUXSECUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINTSS_INDICATION_TAUXSECUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINTSS_FIN_CODE_FK_PK = MyBase.Columns("FINTSS_FIN_CODE_FK_PK")
            Me.columnFINTSS_PRE_CODE_FK_PK = MyBase.Columns("FINTSS_PRE_CODE_FK_PK")
            Me.columnFINTSS_DATE_APPLI_PK = MyBase.Columns("FINTSS_DATE_APPLI_PK")
            Me.columnFINTSS_CDF_TSS_CODE_FK = MyBase.Columns("FINTSS_CDF_TSS_CODE_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINTSS_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINTSS_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTSS_FIN_CODE_FK_PK)
            Me.columnFINTSS_PRE_CODE_FK_PK = New Global.System.Data.DataColumn("FINTSS_PRE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTSS_PRE_CODE_FK_PK)
            Me.columnFINTSS_DATE_APPLI_PK = New Global.System.Data.DataColumn("FINTSS_DATE_APPLI_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTSS_DATE_APPLI_PK)
            Me.columnFINTSS_CDF_TSS_CODE_FK = New Global.System.Data.DataColumn("FINTSS_CDF_TSS_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINTSS_CDF_TSS_CODE_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINTSS_FIN_CODE_FK_PK, Me.columnFINTSS_PRE_CODE_FK_PK, Me.columnFINTSS_DATE_APPLI_PK, Me.columnFINTSS_CDF_TSS_CODE_FK}, true))
            Me.columnFINTSS_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINTSS_PRE_CODE_FK_PK.AllowDBNull = false
            Me.columnFINTSS_PRE_CODE_FK_PK.MaxLength = 10
            Me.columnFINTSS_DATE_APPLI_PK.AllowDBNull = false
            Me.columnFINTSS_CDF_TSS_CODE_FK.AllowDBNull = false
            Me.columnFINTSS_CDF_TSS_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINTSS_INDICATION_TAUXSECURow() As FINTSS_INDICATION_TAUXSECURow
            Return CType(Me.NewRow,FINTSS_INDICATION_TAUXSECURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINTSS_INDICATION_TAUXSECURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINTSS_INDICATION_TAUXSECURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINTSS_INDICATION_TAUXSECURowChangedEvent) Is Nothing) Then
                RaiseEvent FINTSS_INDICATION_TAUXSECURowChanged(Me, New FINTSS_INDICATION_TAUXSECURowChangeEvent(CType(e.Row,FINTSS_INDICATION_TAUXSECURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINTSS_INDICATION_TAUXSECURowChangingEvent) Is Nothing) Then
                RaiseEvent FINTSS_INDICATION_TAUXSECURowChanging(Me, New FINTSS_INDICATION_TAUXSECURowChangeEvent(CType(e.Row,FINTSS_INDICATION_TAUXSECURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINTSS_INDICATION_TAUXSECURowDeletedEvent) Is Nothing) Then
                RaiseEvent FINTSS_INDICATION_TAUXSECURowDeleted(Me, New FINTSS_INDICATION_TAUXSECURowChangeEvent(CType(e.Row,FINTSS_INDICATION_TAUXSECURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINTSS_INDICATION_TAUXSECURowDeletingEvent) Is Nothing) Then
                RaiseEvent FINTSS_INDICATION_TAUXSECURowDeleting(Me, New FINTSS_INDICATION_TAUXSECURowChangeEvent(CType(e.Row,FINTSS_INDICATION_TAUXSECURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINTSS_INDICATION_TAUXSECURow(ByVal row As FINTSS_INDICATION_TAUXSECURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINTSS_INDICATION_TAUXSECUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINSMR_INDIC_SMR_ATRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINSMR_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINSMR_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINSMR_CDF_SMR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINSMR_DATE_SMR_PK As Global.System.Data.DataColumn
        
        Private columnFINSMR_ATR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINSMR_INDIC_SMR_ATR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSMR_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSMR_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSMR_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSMR_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSMR_CDF_SMR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSMR_CDF_SMR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSMR_DATE_SMR_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSMR_DATE_SMR_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINSMR_ATR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINSMR_ATR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINSMR_INDIC_SMR_ATRRow
            Get
                Return CType(Me.Rows(index),FINSMR_INDIC_SMR_ATRRow)
            End Get
        End Property
        
        Public Event FINSMR_INDIC_SMR_ATRRowChanging As FINSMR_INDIC_SMR_ATRRowChangeEventHandler
        
        Public Event FINSMR_INDIC_SMR_ATRRowChanged As FINSMR_INDIC_SMR_ATRRowChangeEventHandler
        
        Public Event FINSMR_INDIC_SMR_ATRRowDeleting As FINSMR_INDIC_SMR_ATRRowChangeEventHandler
        
        Public Event FINSMR_INDIC_SMR_ATRRowDeleted As FINSMR_INDIC_SMR_ATRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINSMR_INDIC_SMR_ATRRow(ByVal row As FINSMR_INDIC_SMR_ATRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINSMR_INDIC_SMR_ATRRow(ByVal FINSMR_FIN_CODE_FK_PK As Integer, ByVal FINSMR_SP_CODE_FK_PK As Integer, ByVal FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal FINSMR_DATE_SMR_PK As Date, ByVal FINSMR_ATR_CODE_FK_PK As Integer) As FINSMR_INDIC_SMR_ATRRow
            Dim rowFINSMR_INDIC_SMR_ATRRow As FINSMR_INDIC_SMR_ATRRow = CType(Me.NewRow,FINSMR_INDIC_SMR_ATRRow)
            Dim columnValuesArray() As Object = New Object() {FINSMR_FIN_CODE_FK_PK, FINSMR_SP_CODE_FK_PK, FINSMR_CDF_SMR_CODE_FK_PK, FINSMR_DATE_SMR_PK, FINSMR_ATR_CODE_FK_PK}
            rowFINSMR_INDIC_SMR_ATRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINSMR_INDIC_SMR_ATRRow)
            Return rowFINSMR_INDIC_SMR_ATRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINSMR_FIN_CODE_FK_PKFINSMR_SP_CODE_FK_PKFINSMR_CDF_SMR_CODE_FK_PKFINSMR_DATE_SMR_PKFINSMR_ATR_CODE_FK_PK(ByVal FINSMR_FIN_CODE_FK_PK As Integer, ByVal FINSMR_SP_CODE_FK_PK As Integer, ByVal FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal FINSMR_DATE_SMR_PK As Date, ByVal FINSMR_ATR_CODE_FK_PK As Integer) As FINSMR_INDIC_SMR_ATRRow
            Return CType(Me.Rows.Find(New Object() {FINSMR_FIN_CODE_FK_PK, FINSMR_SP_CODE_FK_PK, FINSMR_CDF_SMR_CODE_FK_PK, FINSMR_DATE_SMR_PK, FINSMR_ATR_CODE_FK_PK}),FINSMR_INDIC_SMR_ATRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINSMR_INDIC_SMR_ATRDataTable = CType(MyBase.Clone,FINSMR_INDIC_SMR_ATRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINSMR_INDIC_SMR_ATRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINSMR_FIN_CODE_FK_PK = MyBase.Columns("FINSMR_FIN_CODE_FK_PK")
            Me.columnFINSMR_SP_CODE_FK_PK = MyBase.Columns("FINSMR_SP_CODE_FK_PK")
            Me.columnFINSMR_CDF_SMR_CODE_FK_PK = MyBase.Columns("FINSMR_CDF_SMR_CODE_FK_PK")
            Me.columnFINSMR_DATE_SMR_PK = MyBase.Columns("FINSMR_DATE_SMR_PK")
            Me.columnFINSMR_ATR_CODE_FK_PK = MyBase.Columns("FINSMR_ATR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINSMR_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINSMR_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSMR_FIN_CODE_FK_PK)
            Me.columnFINSMR_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FINSMR_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSMR_SP_CODE_FK_PK)
            Me.columnFINSMR_CDF_SMR_CODE_FK_PK = New Global.System.Data.DataColumn("FINSMR_CDF_SMR_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSMR_CDF_SMR_CODE_FK_PK)
            Me.columnFINSMR_DATE_SMR_PK = New Global.System.Data.DataColumn("FINSMR_DATE_SMR_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSMR_DATE_SMR_PK)
            Me.columnFINSMR_ATR_CODE_FK_PK = New Global.System.Data.DataColumn("FINSMR_ATR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINSMR_ATR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINSMR_FIN_CODE_FK_PK, Me.columnFINSMR_SP_CODE_FK_PK, Me.columnFINSMR_CDF_SMR_CODE_FK_PK, Me.columnFINSMR_DATE_SMR_PK, Me.columnFINSMR_ATR_CODE_FK_PK}, true))
            Me.columnFINSMR_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINSMR_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFINSMR_CDF_SMR_CODE_FK_PK.AllowDBNull = false
            Me.columnFINSMR_CDF_SMR_CODE_FK_PK.MaxLength = 10
            Me.columnFINSMR_DATE_SMR_PK.AllowDBNull = false
            Me.columnFINSMR_ATR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINSMR_INDIC_SMR_ATRRow() As FINSMR_INDIC_SMR_ATRRow
            Return CType(Me.NewRow,FINSMR_INDIC_SMR_ATRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINSMR_INDIC_SMR_ATRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINSMR_INDIC_SMR_ATRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINSMR_INDIC_SMR_ATRRowChangedEvent) Is Nothing) Then
                RaiseEvent FINSMR_INDIC_SMR_ATRRowChanged(Me, New FINSMR_INDIC_SMR_ATRRowChangeEvent(CType(e.Row,FINSMR_INDIC_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINSMR_INDIC_SMR_ATRRowChangingEvent) Is Nothing) Then
                RaiseEvent FINSMR_INDIC_SMR_ATRRowChanging(Me, New FINSMR_INDIC_SMR_ATRRowChangeEvent(CType(e.Row,FINSMR_INDIC_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINSMR_INDIC_SMR_ATRRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINSMR_INDIC_SMR_ATRRowDeleted(Me, New FINSMR_INDIC_SMR_ATRRowChangeEvent(CType(e.Row,FINSMR_INDIC_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINSMR_INDIC_SMR_ATRRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINSMR_INDIC_SMR_ATRRowDeleting(Me, New FINSMR_INDIC_SMR_ATRRowChangeEvent(CType(e.Row,FINSMR_INDIC_SMR_ATRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINSMR_INDIC_SMR_ATRRow(ByVal row As FINSMR_INDIC_SMR_ATRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINSMR_INDIC_SMR_ATRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINET_FINDETIOLDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINET_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINET_CDF_ETIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINET_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINET_FINDETIOL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINET_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINET_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINET_CDF_ETIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINET_CDF_ETIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINET_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINET_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINET_FINDETIOLRow
            Get
                Return CType(Me.Rows(index),FINET_FINDETIOLRow)
            End Get
        End Property
        
        Public Event FINET_FINDETIOLRowChanging As FINET_FINDETIOLRowChangeEventHandler
        
        Public Event FINET_FINDETIOLRowChanged As FINET_FINDETIOLRowChangeEventHandler
        
        Public Event FINET_FINDETIOLRowDeleting As FINET_FINDETIOLRowChangeEventHandler
        
        Public Event FINET_FINDETIOLRowDeleted As FINET_FINDETIOLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINET_FINDETIOLRow(ByVal row As FINET_FINDETIOLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINET_FINDETIOLRow(ByVal FINET_FIN_CODE_FK_PK As Integer, ByVal FINET_CDF_ETIN_CODE_FK_PK As String, ByVal FINET_NUMORD As Short) As FINET_FINDETIOLRow
            Dim rowFINET_FINDETIOLRow As FINET_FINDETIOLRow = CType(Me.NewRow,FINET_FINDETIOLRow)
            Dim columnValuesArray() As Object = New Object() {FINET_FIN_CODE_FK_PK, FINET_CDF_ETIN_CODE_FK_PK, FINET_NUMORD}
            rowFINET_FINDETIOLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINET_FINDETIOLRow)
            Return rowFINET_FINDETIOLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINET_FIN_CODE_FK_PKFINET_CDF_ETIN_CODE_FK_PK(ByVal FINET_FIN_CODE_FK_PK As Integer, ByVal FINET_CDF_ETIN_CODE_FK_PK As String) As FINET_FINDETIOLRow
            Return CType(Me.Rows.Find(New Object() {FINET_FIN_CODE_FK_PK, FINET_CDF_ETIN_CODE_FK_PK}),FINET_FINDETIOLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINET_FINDETIOLDataTable = CType(MyBase.Clone,FINET_FINDETIOLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINET_FINDETIOLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINET_FIN_CODE_FK_PK = MyBase.Columns("FINET_FIN_CODE_FK_PK")
            Me.columnFINET_CDF_ETIN_CODE_FK_PK = MyBase.Columns("FINET_CDF_ETIN_CODE_FK_PK")
            Me.columnFINET_NUMORD = MyBase.Columns("FINET_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINET_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINET_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINET_FIN_CODE_FK_PK)
            Me.columnFINET_CDF_ETIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINET_CDF_ETIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINET_CDF_ETIN_CODE_FK_PK)
            Me.columnFINET_NUMORD = New Global.System.Data.DataColumn("FINET_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINET_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINET_FIN_CODE_FK_PK, Me.columnFINET_CDF_ETIN_CODE_FK_PK}, true))
            Me.columnFINET_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINET_CDF_ETIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINET_CDF_ETIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINET_FINDETIOLRow() As FINET_FINDETIOLRow
            Return CType(Me.NewRow,FINET_FINDETIOLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINET_FINDETIOLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINET_FINDETIOLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINET_FINDETIOLRowChangedEvent) Is Nothing) Then
                RaiseEvent FINET_FINDETIOLRowChanged(Me, New FINET_FINDETIOLRowChangeEvent(CType(e.Row,FINET_FINDETIOLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINET_FINDETIOLRowChangingEvent) Is Nothing) Then
                RaiseEvent FINET_FINDETIOLRowChanging(Me, New FINET_FINDETIOLRowChangeEvent(CType(e.Row,FINET_FINDETIOLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINET_FINDETIOLRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINET_FINDETIOLRowDeleted(Me, New FINET_FINDETIOLRowChangeEvent(CType(e.Row,FINET_FINDETIOLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINET_FINDETIOLRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINET_FINDETIOLRowDeleting(Me, New FINET_FINDETIOLRowChangeEvent(CType(e.Row,FINET_FINDETIOLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINET_FINDETIOLRow(ByVal row As FINET_FINDETIOLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINET_FINDETIOLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINCO_FINDCOMMENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINCO_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCO_CDF_COIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINCO_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINCO_FINDCOMMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCO_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCO_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCO_CDF_COIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCO_CDF_COIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINCO_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINCO_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINCO_FINDCOMMENTRow
            Get
                Return CType(Me.Rows(index),FINCO_FINDCOMMENTRow)
            End Get
        End Property
        
        Public Event FINCO_FINDCOMMENTRowChanging As FINCO_FINDCOMMENTRowChangeEventHandler
        
        Public Event FINCO_FINDCOMMENTRowChanged As FINCO_FINDCOMMENTRowChangeEventHandler
        
        Public Event FINCO_FINDCOMMENTRowDeleting As FINCO_FINDCOMMENTRowChangeEventHandler
        
        Public Event FINCO_FINDCOMMENTRowDeleted As FINCO_FINDCOMMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINCO_FINDCOMMENTRow(ByVal row As FINCO_FINDCOMMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINCO_FINDCOMMENTRow(ByVal FINCO_FIN_CODE_FK_PK As Integer, ByVal FINCO_CDF_COIN_CODE_FK_PK As String, ByVal FINCO_NUMORD As Short) As FINCO_FINDCOMMENTRow
            Dim rowFINCO_FINDCOMMENTRow As FINCO_FINDCOMMENTRow = CType(Me.NewRow,FINCO_FINDCOMMENTRow)
            Dim columnValuesArray() As Object = New Object() {FINCO_FIN_CODE_FK_PK, FINCO_CDF_COIN_CODE_FK_PK, FINCO_NUMORD}
            rowFINCO_FINDCOMMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINCO_FINDCOMMENTRow)
            Return rowFINCO_FINDCOMMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINCO_FIN_CODE_FK_PKFINCO_CDF_COIN_CODE_FK_PK(ByVal FINCO_FIN_CODE_FK_PK As Integer, ByVal FINCO_CDF_COIN_CODE_FK_PK As String) As FINCO_FINDCOMMENTRow
            Return CType(Me.Rows.Find(New Object() {FINCO_FIN_CODE_FK_PK, FINCO_CDF_COIN_CODE_FK_PK}),FINCO_FINDCOMMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINCO_FINDCOMMENTDataTable = CType(MyBase.Clone,FINCO_FINDCOMMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINCO_FINDCOMMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINCO_FIN_CODE_FK_PK = MyBase.Columns("FINCO_FIN_CODE_FK_PK")
            Me.columnFINCO_CDF_COIN_CODE_FK_PK = MyBase.Columns("FINCO_CDF_COIN_CODE_FK_PK")
            Me.columnFINCO_NUMORD = MyBase.Columns("FINCO_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINCO_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCO_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCO_FIN_CODE_FK_PK)
            Me.columnFINCO_CDF_COIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINCO_CDF_COIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCO_CDF_COIN_CODE_FK_PK)
            Me.columnFINCO_NUMORD = New Global.System.Data.DataColumn("FINCO_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINCO_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINCO_FIN_CODE_FK_PK, Me.columnFINCO_CDF_COIN_CODE_FK_PK}, true))
            Me.columnFINCO_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCO_CDF_COIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINCO_CDF_COIN_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINCO_FINDCOMMENTRow() As FINCO_FINDCOMMENTRow
            Return CType(Me.NewRow,FINCO_FINDCOMMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINCO_FINDCOMMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINCO_FINDCOMMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINCO_FINDCOMMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent FINCO_FINDCOMMENTRowChanged(Me, New FINCO_FINDCOMMENTRowChangeEvent(CType(e.Row,FINCO_FINDCOMMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINCO_FINDCOMMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent FINCO_FINDCOMMENTRowChanging(Me, New FINCO_FINDCOMMENTRowChangeEvent(CType(e.Row,FINCO_FINDCOMMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINCO_FINDCOMMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINCO_FINDCOMMENTRowDeleted(Me, New FINCO_FINDCOMMENTRowChangeEvent(CType(e.Row,FINCO_FINDCOMMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINCO_FINDCOMMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINCO_FINDCOMMENTRowDeleting(Me, New FINCO_FINDCOMMENTRowChangeEvent(CType(e.Row,FINCO_FINDCOMMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINCO_FINDCOMMENTRow(ByVal row As FINCO_FINDCOMMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINCO_FINDCOMMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINBIB_REFERENCE_BIBLIODataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINBIB_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINBIB_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINBIB_REFERENCE_BIBLIO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINBIB_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINBIB_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINBIB_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINBIB_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINBIB_REFERENCE_BIBLIORow
            Get
                Return CType(Me.Rows(index),FINBIB_REFERENCE_BIBLIORow)
            End Get
        End Property
        
        Public Event FINBIB_REFERENCE_BIBLIORowChanging As FINBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        Public Event FINBIB_REFERENCE_BIBLIORowChanged As FINBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        Public Event FINBIB_REFERENCE_BIBLIORowDeleting As FINBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        Public Event FINBIB_REFERENCE_BIBLIORowDeleted As FINBIB_REFERENCE_BIBLIORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINBIB_REFERENCE_BIBLIORow(ByVal row As FINBIB_REFERENCE_BIBLIORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINBIB_REFERENCE_BIBLIORow(ByVal FINBIB_FIN_CODE_FK_PK As Integer, ByVal FINBIB_TEXTE As String) As FINBIB_REFERENCE_BIBLIORow
            Dim rowFINBIB_REFERENCE_BIBLIORow As FINBIB_REFERENCE_BIBLIORow = CType(Me.NewRow,FINBIB_REFERENCE_BIBLIORow)
            Dim columnValuesArray() As Object = New Object() {FINBIB_FIN_CODE_FK_PK, FINBIB_TEXTE}
            rowFINBIB_REFERENCE_BIBLIORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINBIB_REFERENCE_BIBLIORow)
            Return rowFINBIB_REFERENCE_BIBLIORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINBIB_FIN_CODE_FK_PK(ByVal FINBIB_FIN_CODE_FK_PK As Integer) As FINBIB_REFERENCE_BIBLIORow
            Return CType(Me.Rows.Find(New Object() {FINBIB_FIN_CODE_FK_PK}),FINBIB_REFERENCE_BIBLIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINBIB_REFERENCE_BIBLIODataTable = CType(MyBase.Clone,FINBIB_REFERENCE_BIBLIODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINBIB_REFERENCE_BIBLIODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINBIB_FIN_CODE_FK_PK = MyBase.Columns("FINBIB_FIN_CODE_FK_PK")
            Me.columnFINBIB_TEXTE = MyBase.Columns("FINBIB_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINBIB_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINBIB_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINBIB_FIN_CODE_FK_PK)
            Me.columnFINBIB_TEXTE = New Global.System.Data.DataColumn("FINBIB_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINBIB_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINBIB_FIN_CODE_FK_PK}, true))
            Me.columnFINBIB_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINBIB_FIN_CODE_FK_PK.Unique = true
            Me.columnFINBIB_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINBIB_REFERENCE_BIBLIORow() As FINBIB_REFERENCE_BIBLIORow
            Return CType(Me.NewRow,FINBIB_REFERENCE_BIBLIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINBIB_REFERENCE_BIBLIORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINBIB_REFERENCE_BIBLIORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINBIB_REFERENCE_BIBLIORowChangedEvent) Is Nothing) Then
                RaiseEvent FINBIB_REFERENCE_BIBLIORowChanged(Me, New FINBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FINBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINBIB_REFERENCE_BIBLIORowChangingEvent) Is Nothing) Then
                RaiseEvent FINBIB_REFERENCE_BIBLIORowChanging(Me, New FINBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FINBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINBIB_REFERENCE_BIBLIORowDeletedEvent) Is Nothing) Then
                RaiseEvent FINBIB_REFERENCE_BIBLIORowDeleted(Me, New FINBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FINBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINBIB_REFERENCE_BIBLIORowDeletingEvent) Is Nothing) Then
                RaiseEvent FINBIB_REFERENCE_BIBLIORowDeleting(Me, New FINBIB_REFERENCE_BIBLIORowChangeEvent(CType(e.Row,FINBIB_REFERENCE_BIBLIORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINBIB_REFERENCE_BIBLIORow(ByVal row As FINBIB_REFERENCE_BIBLIORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINBIB_REFERENCE_BIBLIODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FINAFS_FIN_AFSSAPSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFINAFS_FIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINAFS_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFINAFS_DATE_PK As Global.System.Data.DataColumn
        
        Private columnFINAFS_CDF_DOCUMENT_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FINAFS_FIN_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINAFS_FIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINAFS_FIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINAFS_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINAFS_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINAFS_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FINAFS_CDF_DOCUMENT_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFINAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINAFS_FIN_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FINAFS_FIN_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FINAFS_FIN_AFSSAPSRowChanging As FINAFS_FIN_AFSSAPSRowChangeEventHandler
        
        Public Event FINAFS_FIN_AFSSAPSRowChanged As FINAFS_FIN_AFSSAPSRowChangeEventHandler
        
        Public Event FINAFS_FIN_AFSSAPSRowDeleting As FINAFS_FIN_AFSSAPSRowChangeEventHandler
        
        Public Event FINAFS_FIN_AFSSAPSRowDeleted As FINAFS_FIN_AFSSAPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFINAFS_FIN_AFSSAPSRow(ByVal row As FINAFS_FIN_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFINAFS_FIN_AFSSAPSRow(ByVal FINAFS_FIN_CODE_FK_PK As Integer, ByVal FINAFS_SP_CODE_FK_PK As Integer, ByVal FINAFS_DATE_PK As Date, ByVal FINAFS_CDF_DOCUMENT_FK_PK As String) As FINAFS_FIN_AFSSAPSRow
            Dim rowFINAFS_FIN_AFSSAPSRow As FINAFS_FIN_AFSSAPSRow = CType(Me.NewRow,FINAFS_FIN_AFSSAPSRow)
            Dim columnValuesArray() As Object = New Object() {FINAFS_FIN_CODE_FK_PK, FINAFS_SP_CODE_FK_PK, FINAFS_DATE_PK, FINAFS_CDF_DOCUMENT_FK_PK}
            rowFINAFS_FIN_AFSSAPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFINAFS_FIN_AFSSAPSRow)
            Return rowFINAFS_FIN_AFSSAPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFINAFS_FIN_CODE_FK_PKFINAFS_SP_CODE_FK_PKFINAFS_DATE_PKFINAFS_CDF_DOCUMENT_FK_PK(ByVal FINAFS_FIN_CODE_FK_PK As Integer, ByVal FINAFS_SP_CODE_FK_PK As Integer, ByVal FINAFS_DATE_PK As Date, ByVal FINAFS_CDF_DOCUMENT_FK_PK As String) As FINAFS_FIN_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FINAFS_FIN_CODE_FK_PK, FINAFS_SP_CODE_FK_PK, FINAFS_DATE_PK, FINAFS_CDF_DOCUMENT_FK_PK}),FINAFS_FIN_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FINAFS_FIN_AFSSAPSDataTable = CType(MyBase.Clone,FINAFS_FIN_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FINAFS_FIN_AFSSAPSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFINAFS_FIN_CODE_FK_PK = MyBase.Columns("FINAFS_FIN_CODE_FK_PK")
            Me.columnFINAFS_SP_CODE_FK_PK = MyBase.Columns("FINAFS_SP_CODE_FK_PK")
            Me.columnFINAFS_DATE_PK = MyBase.Columns("FINAFS_DATE_PK")
            Me.columnFINAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FINAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFINAFS_FIN_CODE_FK_PK = New Global.System.Data.DataColumn("FINAFS_FIN_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINAFS_FIN_CODE_FK_PK)
            Me.columnFINAFS_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FINAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINAFS_SP_CODE_FK_PK)
            Me.columnFINAFS_DATE_PK = New Global.System.Data.DataColumn("FINAFS_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINAFS_DATE_PK)
            Me.columnFINAFS_CDF_DOCUMENT_FK_PK = New Global.System.Data.DataColumn("FINAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFINAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFINAFS_FIN_CODE_FK_PK, Me.columnFINAFS_SP_CODE_FK_PK, Me.columnFINAFS_DATE_PK, Me.columnFINAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFINAFS_FIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFINAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFINAFS_DATE_PK.AllowDBNull = false
            Me.columnFINAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFINAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFINAFS_FIN_AFSSAPSRow() As FINAFS_FIN_AFSSAPSRow
            Return CType(Me.NewRow,FINAFS_FIN_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FINAFS_FIN_AFSSAPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FINAFS_FIN_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINAFS_FIN_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FINAFS_FIN_AFSSAPSRowChanged(Me, New FINAFS_FIN_AFSSAPSRowChangeEvent(CType(e.Row,FINAFS_FIN_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINAFS_FIN_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FINAFS_FIN_AFSSAPSRowChanging(Me, New FINAFS_FIN_AFSSAPSRowChangeEvent(CType(e.Row,FINAFS_FIN_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINAFS_FIN_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINAFS_FIN_AFSSAPSRowDeleted(Me, New FINAFS_FIN_AFSSAPSRowChangeEvent(CType(e.Row,FINAFS_FIN_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINAFS_FIN_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINAFS_FIN_AFSSAPSRowDeleting(Me, New FINAFS_FIN_AFSSAPSRowChangeEvent(CType(e.Row,FINAFS_FIN_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFINAFS_FIN_AFSSAPSRow(ByVal row As FINAFS_FIN_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FINAFS_FIN_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPAFS_SPECIALITE_AFSSAPSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSPAFS_RUBCDF_NUMERO_PK As Global.System.Data.DataColumn
        
        Private columnSPAFS_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPAFS_DATE_PK As Global.System.Data.DataColumn
        
        Private columnSPAFS_CDF_CODE_DOC_FK_PK As Global.System.Data.DataColumn
        
        Private columnSPAFS_DATE_REVIS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPAFS_SPECIALITE_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPAFS_RUBCDF_NUMERO_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPAFS_RUBCDF_NUMERO_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPAFS_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPAFS_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPAFS_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPAFS_CDF_CODE_DOC_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPAFS_CDF_CODE_DOC_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPAFS_DATE_REVISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPAFS_DATE_REVIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPAFS_SPECIALITE_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),SPAFS_SPECIALITE_AFSSAPSRow)
            End Get
        End Property
        
        Public Event SPAFS_SPECIALITE_AFSSAPSRowChanging As SPAFS_SPECIALITE_AFSSAPSRowChangeEventHandler
        
        Public Event SPAFS_SPECIALITE_AFSSAPSRowChanged As SPAFS_SPECIALITE_AFSSAPSRowChangeEventHandler
        
        Public Event SPAFS_SPECIALITE_AFSSAPSRowDeleting As SPAFS_SPECIALITE_AFSSAPSRowChangeEventHandler
        
        Public Event SPAFS_SPECIALITE_AFSSAPSRowDeleted As SPAFS_SPECIALITE_AFSSAPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPAFS_SPECIALITE_AFSSAPSRow(ByVal row As SPAFS_SPECIALITE_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPAFS_SPECIALITE_AFSSAPSRow(ByVal SPAFS_RUBCDF_NUMERO_PK As String, ByVal SPAFS_SP_CODE_FK_PK As Integer, ByVal SPAFS_DATE_PK As Date, ByVal SPAFS_CDF_CODE_DOC_FK_PK As String, ByVal SPAFS_DATE_REVIS As Date) As SPAFS_SPECIALITE_AFSSAPSRow
            Dim rowSPAFS_SPECIALITE_AFSSAPSRow As SPAFS_SPECIALITE_AFSSAPSRow = CType(Me.NewRow,SPAFS_SPECIALITE_AFSSAPSRow)
            Dim columnValuesArray() As Object = New Object() {SPAFS_RUBCDF_NUMERO_PK, SPAFS_SP_CODE_FK_PK, SPAFS_DATE_PK, SPAFS_CDF_CODE_DOC_FK_PK, SPAFS_DATE_REVIS}
            rowSPAFS_SPECIALITE_AFSSAPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSPAFS_SPECIALITE_AFSSAPSRow)
            Return rowSPAFS_SPECIALITE_AFSSAPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPAFS_RUBCDF_NUMERO_PKSPAFS_SP_CODE_FK_PKSPAFS_DATE_PKSPAFS_CDF_CODE_DOC_FK_PK(ByVal SPAFS_RUBCDF_NUMERO_PK As String, ByVal SPAFS_SP_CODE_FK_PK As Integer, ByVal SPAFS_DATE_PK As Date, ByVal SPAFS_CDF_CODE_DOC_FK_PK As String) As SPAFS_SPECIALITE_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {SPAFS_RUBCDF_NUMERO_PK, SPAFS_SP_CODE_FK_PK, SPAFS_DATE_PK, SPAFS_CDF_CODE_DOC_FK_PK}),SPAFS_SPECIALITE_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SPAFS_SPECIALITE_AFSSAPSDataTable = CType(MyBase.Clone,SPAFS_SPECIALITE_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SPAFS_SPECIALITE_AFSSAPSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPAFS_RUBCDF_NUMERO_PK = MyBase.Columns("SPAFS_RUBCDF_NUMERO_PK")
            Me.columnSPAFS_SP_CODE_FK_PK = MyBase.Columns("SPAFS_SP_CODE_FK_PK")
            Me.columnSPAFS_DATE_PK = MyBase.Columns("SPAFS_DATE_PK")
            Me.columnSPAFS_CDF_CODE_DOC_FK_PK = MyBase.Columns("SPAFS_CDF_CODE_DOC_FK_PK")
            Me.columnSPAFS_DATE_REVIS = MyBase.Columns("SPAFS_DATE_REVIS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPAFS_RUBCDF_NUMERO_PK = New Global.System.Data.DataColumn("SPAFS_RUBCDF_NUMERO_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPAFS_RUBCDF_NUMERO_PK)
            Me.columnSPAFS_SP_CODE_FK_PK = New Global.System.Data.DataColumn("SPAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPAFS_SP_CODE_FK_PK)
            Me.columnSPAFS_DATE_PK = New Global.System.Data.DataColumn("SPAFS_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPAFS_DATE_PK)
            Me.columnSPAFS_CDF_CODE_DOC_FK_PK = New Global.System.Data.DataColumn("SPAFS_CDF_CODE_DOC_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPAFS_CDF_CODE_DOC_FK_PK)
            Me.columnSPAFS_DATE_REVIS = New Global.System.Data.DataColumn("SPAFS_DATE_REVIS", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPAFS_DATE_REVIS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSPAFS_RUBCDF_NUMERO_PK, Me.columnSPAFS_SP_CODE_FK_PK, Me.columnSPAFS_DATE_PK, Me.columnSPAFS_CDF_CODE_DOC_FK_PK}, true))
            Me.columnSPAFS_RUBCDF_NUMERO_PK.AllowDBNull = false
            Me.columnSPAFS_RUBCDF_NUMERO_PK.MaxLength = 10
            Me.columnSPAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPAFS_DATE_PK.AllowDBNull = false
            Me.columnSPAFS_CDF_CODE_DOC_FK_PK.AllowDBNull = false
            Me.columnSPAFS_CDF_CODE_DOC_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPAFS_SPECIALITE_AFSSAPSRow() As SPAFS_SPECIALITE_AFSSAPSRow
            Return CType(Me.NewRow,SPAFS_SPECIALITE_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SPAFS_SPECIALITE_AFSSAPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SPAFS_SPECIALITE_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPAFS_SPECIALITE_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent SPAFS_SPECIALITE_AFSSAPSRowChanged(Me, New SPAFS_SPECIALITE_AFSSAPSRowChangeEvent(CType(e.Row,SPAFS_SPECIALITE_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPAFS_SPECIALITE_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent SPAFS_SPECIALITE_AFSSAPSRowChanging(Me, New SPAFS_SPECIALITE_AFSSAPSRowChangeEvent(CType(e.Row,SPAFS_SPECIALITE_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPAFS_SPECIALITE_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPAFS_SPECIALITE_AFSSAPSRowDeleted(Me, New SPAFS_SPECIALITE_AFSSAPSRowChangeEvent(CType(e.Row,SPAFS_SPECIALITE_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPAFS_SPECIALITE_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPAFS_SPECIALITE_AFSSAPSRowDeleting(Me, New SPAFS_SPECIALITE_AFSSAPSRowChangeEvent(CType(e.Row,SPAFS_SPECIALITE_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPAFS_SPECIALITE_AFSSAPSRow(ByVal row As SPAFS_SPECIALITE_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPAFS_SPECIALITE_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FIN_FICHEINDICDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFIN_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFIN_CDF_NAIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFIN_CDF_NVIN_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFIN_TEXTE As Global.System.Data.DataColumn
        
        Private columnFIN_DATECR As Global.System.Data.DataColumn
        
        Private columnFIN_DATEMJ As Global.System.Data.DataColumn
        
        Private columnFIN_CDF_T2A_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FIN_FICHEINDIC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CDF_NAIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CDF_NAIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CDF_NVIN_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CDF_NVIN_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIN_CDF_T2A_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIN_CDF_T2A_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FIN_FICHEINDICRow
            Get
                Return CType(Me.Rows(index),FIN_FICHEINDICRow)
            End Get
        End Property
        
        Public Event FIN_FICHEINDICRowChanging As FIN_FICHEINDICRowChangeEventHandler
        
        Public Event FIN_FICHEINDICRowChanged As FIN_FICHEINDICRowChangeEventHandler
        
        Public Event FIN_FICHEINDICRowDeleting As FIN_FICHEINDICRowChangeEventHandler
        
        Public Event FIN_FICHEINDICRowDeleted As FIN_FICHEINDICRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFIN_FICHEINDICRow(ByVal row As FIN_FICHEINDICRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFIN_FICHEINDICRow(ByVal FIN_CODE_SQ_PK As Integer, ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Date, ByVal FIN_CDF_T2A_CODE_FK_PK As String) As FIN_FICHEINDICRow
            Dim rowFIN_FICHEINDICRow As FIN_FICHEINDICRow = CType(Me.NewRow,FIN_FICHEINDICRow)
            Dim columnValuesArray() As Object = New Object() {FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_DATECR, FIN_DATEMJ, FIN_CDF_T2A_CODE_FK_PK}
            rowFIN_FICHEINDICRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFIN_FICHEINDICRow)
            Return rowFIN_FICHEINDICRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFIN_CODE_SQ_PK(ByVal FIN_CODE_SQ_PK As Integer) As FIN_FICHEINDICRow
            Return CType(Me.Rows.Find(New Object() {FIN_CODE_SQ_PK}),FIN_FICHEINDICRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FIN_FICHEINDICDataTable = CType(MyBase.Clone,FIN_FICHEINDICDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FIN_FICHEINDICDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFIN_CODE_SQ_PK = MyBase.Columns("FIN_CODE_SQ_PK")
            Me.columnFIN_CDF_NAIN_CODE_FK_PK = MyBase.Columns("FIN_CDF_NAIN_CODE_FK_PK")
            Me.columnFIN_CDF_NVIN_CODE_FK_PK = MyBase.Columns("FIN_CDF_NVIN_CODE_FK_PK")
            Me.columnFIN_TEXTE = MyBase.Columns("FIN_TEXTE")
            Me.columnFIN_DATECR = MyBase.Columns("FIN_DATECR")
            Me.columnFIN_DATEMJ = MyBase.Columns("FIN_DATEMJ")
            Me.columnFIN_CDF_T2A_CODE_FK_PK = MyBase.Columns("FIN_CDF_T2A_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFIN_CODE_SQ_PK = New Global.System.Data.DataColumn("FIN_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CODE_SQ_PK)
            Me.columnFIN_CDF_NAIN_CODE_FK_PK = New Global.System.Data.DataColumn("FIN_CDF_NAIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CDF_NAIN_CODE_FK_PK)
            Me.columnFIN_CDF_NVIN_CODE_FK_PK = New Global.System.Data.DataColumn("FIN_CDF_NVIN_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CDF_NVIN_CODE_FK_PK)
            Me.columnFIN_TEXTE = New Global.System.Data.DataColumn("FIN_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_TEXTE)
            Me.columnFIN_DATECR = New Global.System.Data.DataColumn("FIN_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_DATECR)
            Me.columnFIN_DATEMJ = New Global.System.Data.DataColumn("FIN_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_DATEMJ)
            Me.columnFIN_CDF_T2A_CODE_FK_PK = New Global.System.Data.DataColumn("FIN_CDF_T2A_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIN_CDF_T2A_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFIN_CODE_SQ_PK}, true))
            Me.columnFIN_CODE_SQ_PK.AllowDBNull = false
            Me.columnFIN_CODE_SQ_PK.Unique = true
            Me.columnFIN_CDF_NAIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFIN_CDF_NAIN_CODE_FK_PK.MaxLength = 10
            Me.columnFIN_CDF_NVIN_CODE_FK_PK.AllowDBNull = false
            Me.columnFIN_CDF_NVIN_CODE_FK_PK.MaxLength = 10
            Me.columnFIN_TEXTE.MaxLength = 2147483647
            Me.columnFIN_DATECR.AllowDBNull = false
            Me.columnFIN_CDF_T2A_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFIN_FICHEINDICRow() As FIN_FICHEINDICRow
            Return CType(Me.NewRow,FIN_FICHEINDICRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FIN_FICHEINDICRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FIN_FICHEINDICRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FIN_FICHEINDICRowChangedEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowChanged(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FIN_FICHEINDICRowChangingEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowChanging(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FIN_FICHEINDICRowDeletedEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowDeleted(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FIN_FICHEINDICRowDeletingEvent) Is Nothing) Then
                RaiseEvent FIN_FICHEINDICRowDeleting(Me, New FIN_FICHEINDICRowChangeEvent(CType(e.Row,FIN_FICHEINDICRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFIN_FICHEINDICRow(ByVal row As FIN_FICHEINDICRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Indication = New dsTheriaque_Indication
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FIN_FICHEINDICDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINCPH_INDCPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINCPH_INDCPH As FINCPH_INDCPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINCPH_INDCPH = CType(Me.Table,FINCPH_INDCPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCPH_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINCPH_INDCPH.FINCPH_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINCPH_INDCPH.FINCPH_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINCPH_INDCPH.FINCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINCPH_INDCPH.FINCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINCCH_INDCCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINCCH_INDCCH As FINCCH_INDCCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINCCH_INDCCH = CType(Me.Table,FINCCH_INDCCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCCH_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINCCH_INDCCH.FINCCH_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINCCH_INDCCH.FINCCH_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINCCH_INDCCH.FINCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINCCH_INDCCH.FINCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINSAC_SUBACRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINSAC_SUBAC As FINSAC_SUBACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINSAC_SUBAC = CType(Me.Table,FINSAC_SUBACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSAC_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSAC_SUBAC.FINSAC_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSAC_SUBAC.FINSAC_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSAC_SUBAC.FINSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSAC_SUBAC.FINSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINPR_INDPRODRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINPR_INDPROD As FINPR_INDPRODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINPR_INDPROD = CType(Me.Table,FINPR_INDPRODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINPR_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINPR_INDPROD.FINPR_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINPR_INDPROD.FINPR_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINPR_INDPROD.FINPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINPR_INDPROD.FINPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINCH_INDCHOIXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINCH_INDCHOIX As FINCH_INDCHOIXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINCH_INDCHOIX = CType(Me.Table,FINCH_INDCHOIXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCH_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINCH_INDCHOIX.FINCH_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINCH_INDCHOIX.FINCH_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCH_CH_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINCH_INDCHOIX.FINCH_CH_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINCH_INDCHOIX.FINCH_CH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFINCH_INDCHOIX.FINCH_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FINCH_NUMORD' dans la table 'FINCH_INDCHOIX' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINCH_INDCHOIX.FINCH_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINCH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFINCH_INDCHOIX.FINCH_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINCH_NUMORDNull()
            Me(Me.tableFINCH_INDCHOIX.FINCH_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINSP_INDSPERow
        Inherits Global.System.Data.DataRow
        
        Private tableFINSP_INDSPE As FINSP_INDSPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINSP_INDSPE = CType(Me.Table,FINSP_INDSPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSP_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSP_INDSPE.FINSP_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSP_INDSPE.FINSP_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSP_INDSPE.FINSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSP_INDSPE.FINSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINTY_FINDTYPERow
        Inherits Global.System.Data.DataRow
        
        Private tableFINTY_FINDTYPE As FINTY_FINDTYPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINTY_FINDTYPE = CType(Me.Table,FINTY_FINDTYPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTY_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINTY_FINDTYPE.FINTY_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINTY_FINDTYPE.FINTY_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTY_CDF_TYIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINTY_FINDTYPE.FINTY_CDF_TYIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINTY_FINDTYPE.FINTY_CDF_TYIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTY_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFINTY_FINDTYPE.FINTY_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FINTY_NUMORD' dans la table 'FINTY_FINDTYPE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINTY_FINDTYPE.FINTY_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINTY_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFINTY_FINDTYPE.FINTY_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINTY_NUMORDNull()
            Me(Me.tableFINTY_FINDTYPE.FINTY_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINCON_FINDCOMMENT_NATURERow
        Inherits Global.System.Data.DataRow
        
        Private tableFINCON_FINDCOMMENT_NATURE As FINCON_FINDCOMMENT_NATUREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINCON_FINDCOMMENT_NATURE = CType(Me.Table,FINCON_FINDCOMMENT_NATUREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCON_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCON_CDF_COIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_CDF_COIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_CDF_COIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCON_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FINCON_NUMORD' dans la table 'FINCON_FINDCOMMENT_NATUR"& _ 
                            "E' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINCON_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINCON_NUMORDNull()
            Me(Me.tableFINCON_FINDCOMMENT_NATURE.FINCON_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NAIN_NATURE_INDICATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableNAIN_NATURE_INDICATION As NAIN_NATURE_INDICATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNAIN_NATURE_INDICATION = CType(Me.Table,NAIN_NATURE_INDICATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAIN_CODE_PK() As String
            Get
                Return CType(Me(Me.tableNAIN_NATURE_INDICATION.NAIN_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableNAIN_NATURE_INDICATION.NAIN_CODE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAIN_MALADIE_RARE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NAIN_MALADIE_RARE' dans la table 'NAIN_NATURE_INDICATI"& _ 
                            "ON' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAIN_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'NAIN_TEXTE' dans la table 'NAIN_NATURE_INDICATION' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAIN_MALADIE_RARENull() As Boolean
            Return Me.IsNull(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAIN_MALADIE_RARENull()
            Me(Me.tableNAIN_NATURE_INDICATION.NAIN_MALADIE_RAREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAIN_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAIN_TEXTENull()
            Me(Me.tableNAIN_NATURE_INDICATION.NAIN_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINTSS_INDICATION_TAUXSECURow
        Inherits Global.System.Data.DataRow
        
        Private tableFINTSS_INDICATION_TAUXSECU As FINTSS_INDICATION_TAUXSECUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINTSS_INDICATION_TAUXSECU = CType(Me.Table,FINTSS_INDICATION_TAUXSECUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTSS_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTSS_PRE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_PRE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_PRE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTSS_DATE_APPLI_PK() As Date
            Get
                Return CType(Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_DATE_APPLI_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_DATE_APPLI_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINTSS_CDF_TSS_CODE_FK() As String
            Get
                Return CType(Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_CDF_TSS_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableFINTSS_INDICATION_TAUXSECU.FINTSS_CDF_TSS_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINSMR_INDIC_SMR_ATRRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINSMR_INDIC_SMR_ATR As FINSMR_INDIC_SMR_ATRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINSMR_INDIC_SMR_ATR = CType(Me.Table,FINSMR_INDIC_SMR_ATRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSMR_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSMR_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSMR_CDF_SMR_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_CDF_SMR_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_CDF_SMR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSMR_DATE_SMR_PK() As Date
            Get
                Return CType(Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_DATE_SMR_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_DATE_SMR_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINSMR_ATR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_ATR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINSMR_INDIC_SMR_ATR.FINSMR_ATR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINET_FINDETIOLRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINET_FINDETIOL As FINET_FINDETIOLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINET_FINDETIOL = CType(Me.Table,FINET_FINDETIOLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINET_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINET_FINDETIOL.FINET_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINET_FINDETIOL.FINET_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINET_CDF_ETIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINET_FINDETIOL.FINET_CDF_ETIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINET_FINDETIOL.FINET_CDF_ETIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINET_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFINET_FINDETIOL.FINET_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FINET_NUMORD' dans la table 'FINET_FINDETIOL' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINET_FINDETIOL.FINET_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINET_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFINET_FINDETIOL.FINET_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINET_NUMORDNull()
            Me(Me.tableFINET_FINDETIOL.FINET_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINCO_FINDCOMMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINCO_FINDCOMMENT As FINCO_FINDCOMMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINCO_FINDCOMMENT = CType(Me.Table,FINCO_FINDCOMMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCO_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINCO_FINDCOMMENT.FINCO_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINCO_FINDCOMMENT.FINCO_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCO_CDF_COIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINCO_FINDCOMMENT.FINCO_CDF_COIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINCO_FINDCOMMENT.FINCO_CDF_COIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINCO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFINCO_FINDCOMMENT.FINCO_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FINCO_NUMORD' dans la table 'FINCO_FINDCOMMENT' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINCO_FINDCOMMENT.FINCO_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINCO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFINCO_FINDCOMMENT.FINCO_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINCO_NUMORDNull()
            Me(Me.tableFINCO_FINDCOMMENT.FINCO_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINBIB_REFERENCE_BIBLIORow
        Inherits Global.System.Data.DataRow
        
        Private tableFINBIB_REFERENCE_BIBLIO As FINBIB_REFERENCE_BIBLIODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINBIB_REFERENCE_BIBLIO = CType(Me.Table,FINBIB_REFERENCE_BIBLIODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINBIB_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINBIB_REFERENCE_BIBLIO.FINBIB_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINBIB_REFERENCE_BIBLIO.FINBIB_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINBIB_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFINBIB_REFERENCE_BIBLIO.FINBIB_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FINBIB_TEXTE' dans la table 'FINBIB_REFERENCE_BIBLIO' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINBIB_REFERENCE_BIBLIO.FINBIB_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFINBIB_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFINBIB_REFERENCE_BIBLIO.FINBIB_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFINBIB_TEXTENull()
            Me(Me.tableFINBIB_REFERENCE_BIBLIO.FINBIB_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FINAFS_FIN_AFSSAPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFINAFS_FIN_AFSSAPS As FINAFS_FIN_AFSSAPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINAFS_FIN_AFSSAPS = CType(Me.Table,FINAFS_FIN_AFSSAPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINAFS_FIN_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_FIN_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_FIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FINAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFINAFS_FIN_AFSSAPS.FINAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPAFS_SPECIALITE_AFSSAPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSPAFS_SPECIALITE_AFSSAPS As SPAFS_SPECIALITE_AFSSAPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPAFS_SPECIALITE_AFSSAPS = CType(Me.Table,SPAFS_SPECIALITE_AFSSAPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPAFS_RUBCDF_NUMERO_PK() As String
            Get
                Return CType(Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_RUBCDF_NUMERO_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_RUBCDF_NUMERO_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPAFS_CDF_CODE_DOC_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_CDF_CODE_DOC_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_CDF_CODE_DOC_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPAFS_DATE_REVIS() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_DATE_REVISColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SPAFS_DATE_REVIS' dans la table 'SPAFS_SPECIALITE_AFSS"& _ 
                            "APS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_DATE_REVISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPAFS_DATE_REVISNull() As Boolean
            Return Me.IsNull(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_DATE_REVISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPAFS_DATE_REVISNull()
            Me(Me.tableSPAFS_SPECIALITE_AFSSAPS.SPAFS_DATE_REVISColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FIN_FICHEINDICRow
        Inherits Global.System.Data.DataRow
        
        Private tableFIN_FICHEINDIC As FIN_FICHEINDICDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFIN_FICHEINDIC = CType(Me.Table,FIN_FICHEINDICDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CDF_NAIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NAIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NAIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CDF_NVIN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NVIN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CDF_NVIN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIN_TEXTE' dans la table 'FIN_FICHEINDIC' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_DATECR() As Date
            Get
                Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIN_DATEMJ' dans la table 'FIN_FICHEINDIC' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIN_CDF_T2A_CODE_FK_PK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFIN_FICHEINDIC.FIN_CDF_T2A_CODE_FK_PKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIN_CDF_T2A_CODE_FK_PK' dans la table 'FIN_FICHEINDIC'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFIN_FICHEINDIC.FIN_CDF_T2A_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_TEXTENull()
            Me(Me.tableFIN_FICHEINDIC.FIN_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_DATEMJNull()
            Me(Me.tableFIN_FICHEINDIC.FIN_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIN_CDF_T2A_CODE_FK_PKNull() As Boolean
            Return Me.IsNull(Me.tableFIN_FICHEINDIC.FIN_CDF_T2A_CODE_FK_PKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIN_CDF_T2A_CODE_FK_PKNull()
            Me(Me.tableFIN_FICHEINDIC.FIN_CDF_T2A_CODE_FK_PKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINCPH_INDCPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINCPH_INDCPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINCPH_INDCPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINCPH_INDCPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINCCH_INDCCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINCCH_INDCCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINCCH_INDCCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINCCH_INDCCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINSAC_SUBACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINSAC_SUBACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINSAC_SUBACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINSAC_SUBACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINPR_INDPRODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINPR_INDPRODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINPR_INDPRODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINPR_INDPRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINCH_INDCHOIXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINCH_INDCHOIXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINCH_INDCHOIXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINCH_INDCHOIXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINSP_INDSPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINSP_INDSPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINSP_INDSPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINSP_INDSPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINTY_FINDTYPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINTY_FINDTYPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINTY_FINDTYPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINTY_FINDTYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINCON_FINDCOMMENT_NATURERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINCON_FINDCOMMENT_NATURERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINCON_FINDCOMMENT_NATURERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINCON_FINDCOMMENT_NATURERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NAIN_NATURE_INDICATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NAIN_NATURE_INDICATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NAIN_NATURE_INDICATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NAIN_NATURE_INDICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINTSS_INDICATION_TAUXSECURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINTSS_INDICATION_TAUXSECURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINTSS_INDICATION_TAUXSECURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINTSS_INDICATION_TAUXSECURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINSMR_INDIC_SMR_ATRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINSMR_INDIC_SMR_ATRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINSMR_INDIC_SMR_ATRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINSMR_INDIC_SMR_ATRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINET_FINDETIOLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINET_FINDETIOLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINET_FINDETIOLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINET_FINDETIOLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINCO_FINDCOMMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINCO_FINDCOMMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINCO_FINDCOMMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINCO_FINDCOMMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINBIB_REFERENCE_BIBLIORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINBIB_REFERENCE_BIBLIORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINBIB_REFERENCE_BIBLIORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINBIB_REFERENCE_BIBLIORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FINAFS_FIN_AFSSAPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FINAFS_FIN_AFSSAPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FINAFS_FIN_AFSSAPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FINAFS_FIN_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPAFS_SPECIALITE_AFSSAPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SPAFS_SPECIALITE_AFSSAPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPAFS_SPECIALITE_AFSSAPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPAFS_SPECIALITE_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FIN_FICHEINDICRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FIN_FICHEINDICRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FIN_FICHEINDICRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FIN_FICHEINDICRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_IndicationTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINCPH_INDCPHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINCPH_INDCPH"
            tableMapping.ColumnMappings.Add("FINCPH_FIN_CODE_FK_PK", "FINCPH_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCPH_CPH_CODE_FK_PK", "FINCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINCPH_INDCPH] WHERE (([FINCPH_FIN_CODE_FK_PK] = @Origin"& _ 
                "al_FINCPH_FIN_CODE_FK_PK) AND ([FINCPH_CPH_CODE_FK_PK] = @Original_FINCPH_CPH_CO"& _ 
                "DE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCPH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINCPH_INDCPH] ([FINCPH_FIN_CODE_FK_PK], [FINCPH_CPH_COD"& _ 
                "E_FK_PK]) VALUES (@FINCPH_FIN_CODE_FK_PK, @FINCPH_CPH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCP"& _ 
                "H_FIN_CODE_FK_PK, FINCPH_CPH_CODE_FK_PK FROM THERIAQUE.FINCPH_INDCPH WHERE (FINC"& _ 
                "PH_CPH_CODE_FK_PK = @FINCPH_CPH_CODE_FK_PK) AND (FINCPH_FIN_CODE_FK_PK = @FINCPH"& _ 
                "_FIN_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCPH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINCPH_INDCPH] SET [FINCPH_FIN_CODE_FK_PK] = @FINCPH_FIN_CODE"& _ 
                "_FK_PK, [FINCPH_CPH_CODE_FK_PK] = @FINCPH_CPH_CODE_FK_PK WHERE (([FINCPH_FIN_COD"& _ 
                "E_FK_PK] = @Original_FINCPH_FIN_CODE_FK_PK) AND ([FINCPH_CPH_CODE_FK_PK] = @Orig"& _ 
                "inal_FINCPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCPH_FIN_CODE_FK_PK, FINCPH_CPH_CODE_FK_"& _ 
                "PK FROM THERIAQUE.FINCPH_INDCPH WHERE (FINCPH_CPH_CODE_FK_PK = @FINCPH_CPH_CODE_"& _ 
                "FK_PK) AND (FINCPH_FIN_CODE_FK_PK = @FINCPH_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCPH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCPH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINCPH_FIN_CODE_FK_PK, FINCPH_CPH_CODE_FK_PK FROM THERIAQUE.FINCPH_INDCPH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINCPH_FIN_CODE_FK_PK, FINCPH_CPH_CODE_FK_PK FROM THERIAQUE.FINCPH_INDCPH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FINCPH_FIN_CODE_FK_PK = @FINCPH_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCPH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCPH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINCPH_INDCPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINCPH_INDCPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINCPH_INDCPHDataTable = New dsTheriaque_Indication.FINCPH_INDCPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINCPH_INDCPHDataTable, ByVal FINCPH_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCPH_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINCPH_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINCPH_INDCPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCPH_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINCPH_INDCPHDataTable = New dsTheriaque_Indication.FINCPH_INDCPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINCPH_INDCPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINCPH_INDCPH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINCPH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINCPH_FIN_CODE_FK_PK,Integer)
            If (Original_FINCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINCPH_FIN_CODE_FK_PK As Integer, ByVal FINCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINCPH_FIN_CODE_FK_PK,Integer)
            If (FINCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCPH_FIN_CODE_FK_PK As Integer, ByVal FINCPH_CPH_CODE_FK_PK As String, ByVal Original_FINCPH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINCPH_FIN_CODE_FK_PK,Integer)
            If (FINCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINCPH_CPH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FINCPH_FIN_CODE_FK_PK,Integer)
            If (Original_FINCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINCPH_CPH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINCPH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FINCPH_FIN_CODE_FK_PK, Original_FINCPH_CPH_CODE_FK_PK, Original_FINCPH_FIN_CODE_FK_PK, Original_FINCPH_CPH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINCCH_INDCCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINCCH_INDCCH"
            tableMapping.ColumnMappings.Add("FINCCH_FIN_CODE_FK_PK", "FINCCH_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCCH_CCH_CODE_FK_PK", "FINCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINCCH_INDCCH] WHERE (([FINCCH_FIN_CODE_FK_PK] = @Origin"& _ 
                "al_FINCCH_FIN_CODE_FK_PK) AND ([FINCCH_CCH_CODE_FK_PK] = @Original_FINCCH_CCH_CO"& _ 
                "DE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINCCH_INDCCH] ([FINCCH_FIN_CODE_FK_PK], [FINCCH_CCH_COD"& _ 
                "E_FK_PK]) VALUES (@FINCCH_FIN_CODE_FK_PK, @FINCCH_CCH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCC"& _ 
                "H_FIN_CODE_FK_PK, FINCCH_CCH_CODE_FK_PK FROM THERIAQUE.FINCCH_INDCCH WHERE (FINC"& _ 
                "CH_CCH_CODE_FK_PK = @FINCCH_CCH_CODE_FK_PK) AND (FINCCH_FIN_CODE_FK_PK = @FINCCH"& _ 
                "_FIN_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINCCH_INDCCH] SET [FINCCH_FIN_CODE_FK_PK] = @FINCCH_FIN_CODE"& _ 
                "_FK_PK, [FINCCH_CCH_CODE_FK_PK] = @FINCCH_CCH_CODE_FK_PK WHERE (([FINCCH_FIN_COD"& _ 
                "E_FK_PK] = @Original_FINCCH_FIN_CODE_FK_PK) AND ([FINCCH_CCH_CODE_FK_PK] = @Orig"& _ 
                "inal_FINCCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCCH_FIN_CODE_FK_PK, FINCCH_CCH_CODE_FK_"& _ 
                "PK FROM THERIAQUE.FINCCH_INDCCH WHERE (FINCCH_CCH_CODE_FK_PK = @FINCCH_CCH_CODE_"& _ 
                "FK_PK) AND (FINCCH_FIN_CODE_FK_PK = @FINCCH_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINCCH_FIN_CODE_FK_PK, FINCCH_CCH_CODE_FK_PK FROM THERIAQUE.FINCCH_INDCCH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINCCH_FIN_CODE_FK_PK, FINCCH_CCH_CODE_FK_PK FROM THERIAQUE.FINCCH_INDCCH"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FINCCH_FIN_CODE_FK_PK = @FINCCH_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINCCH_INDCCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINCCH_INDCCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINCCH_INDCCHDataTable = New dsTheriaque_Indication.FINCCH_INDCCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINCCH_INDCCHDataTable, ByVal FINCCH_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCCH_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINCCH_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINCCH_INDCCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCCH_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINCCH_INDCCHDataTable = New dsTheriaque_Indication.FINCCH_INDCCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINCCH_INDCCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINCCH_INDCCH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINCCH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINCCH_FIN_CODE_FK_PK,Integer)
            If (Original_FINCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINCCH_FIN_CODE_FK_PK As Integer, ByVal FINCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINCCH_FIN_CODE_FK_PK,Integer)
            If (FINCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCCH_FIN_CODE_FK_PK As Integer, ByVal FINCCH_CCH_CODE_FK_PK As String, ByVal Original_FINCCH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINCCH_FIN_CODE_FK_PK,Integer)
            If (FINCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINCCH_CCH_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FINCCH_FIN_CODE_FK_PK,Integer)
            If (Original_FINCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINCCH_CCH_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINCCH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FINCCH_FIN_CODE_FK_PK, Original_FINCCH_CCH_CODE_FK_PK, Original_FINCCH_FIN_CODE_FK_PK, Original_FINCCH_CCH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINSAC_SUBACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINSAC_SUBAC"
            tableMapping.ColumnMappings.Add("FINSAC_FIN_CODE_FK_PK", "FINSAC_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINSAC_SAC_CODE_FK_PK", "FINSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINSAC_SUBAC] WHERE (([FINSAC_FIN_CODE_FK_PK] = @Origina"& _ 
                "l_FINSAC_FIN_CODE_FK_PK) AND ([FINSAC_SAC_CODE_FK_PK] = @Original_FINSAC_SAC_COD"& _ 
                "E_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSAC_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINSAC_SUBAC] ([FINSAC_FIN_CODE_FK_PK], [FINSAC_SAC_CODE"& _ 
                "_FK_PK]) VALUES (@FINSAC_FIN_CODE_FK_PK, @FINSAC_SAC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINSAC"& _ 
                "_FIN_CODE_FK_PK, FINSAC_SAC_CODE_FK_PK FROM THERIAQUE.FINSAC_SUBAC WHERE (FINSAC"& _ 
                "_FIN_CODE_FK_PK = @FINSAC_FIN_CODE_FK_PK) AND (FINSAC_SAC_CODE_FK_PK = @FINSAC_S"& _ 
                "AC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSAC_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINSAC_SUBAC] SET [FINSAC_FIN_CODE_FK_PK] = @FINSAC_FIN_CODE_"& _ 
                "FK_PK, [FINSAC_SAC_CODE_FK_PK] = @FINSAC_SAC_CODE_FK_PK WHERE (([FINSAC_FIN_CODE"& _ 
                "_FK_PK] = @Original_FINSAC_FIN_CODE_FK_PK) AND ([FINSAC_SAC_CODE_FK_PK] = @Origi"& _ 
                "nal_FINSAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINSAC_FIN_CODE_FK_PK, FINSAC_SAC_CODE_FK_P"& _ 
                "K FROM THERIAQUE.FINSAC_SUBAC WHERE (FINSAC_FIN_CODE_FK_PK = @FINSAC_FIN_CODE_FK"& _ 
                "_PK) AND (FINSAC_SAC_CODE_FK_PK = @FINSAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSAC_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSAC_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINSAC_FIN_CODE_FK_PK, FINSAC_SAC_CODE_FK_PK FROM THERIAQUE.FINSAC_SUBAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINSAC_FIN_CODE_FK_PK, FINSAC_SAC_CODE_FK_PK FROM THERIAQUE.FINSAC_SUBAC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE FINSAC_FIN_CODE_FK_PK = @FINSAC_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSAC_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSAC_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINSAC_SUBACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINSAC_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINSAC_SUBACDataTable = New dsTheriaque_Indication.FINSAC_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINSAC_SUBACDataTable, ByVal FINSAC_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINSAC_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINSAC_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINSAC_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINSAC_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINSAC_SUBACDataTable = New dsTheriaque_Indication.FINSAC_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINSAC_SUBACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINSAC_SUBAC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINSAC_FIN_CODE_FK_PK As Integer, ByVal Original_FINSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINSAC_FIN_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINSAC_SAC_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINSAC_FIN_CODE_FK_PK As Integer, ByVal FINSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINSAC_FIN_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINSAC_SAC_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINSAC_FIN_CODE_FK_PK As Integer, ByVal FINSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FINSAC_FIN_CODE_FK_PK As Integer, ByVal Original_FINSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINSAC_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINSAC_SAC_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FINSAC_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINSAC_SAC_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINSAC_FIN_CODE_FK_PK As Integer, ByVal Original_FINSAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FINSAC_FIN_CODE_FK_PK, Original_FINSAC_SAC_CODE_FK_PK, Original_FINSAC_FIN_CODE_FK_PK, Original_FINSAC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINPR_INDPRODTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINPR_INDPROD"
            tableMapping.ColumnMappings.Add("FINPR_FIN_CODE_FK_PK", "FINPR_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINPR_PR_CODE_FK_PK", "FINPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINPR_INDPROD] WHERE (([FINPR_FIN_CODE_FK_PK] = @Origina"& _ 
                "l_FINPR_FIN_CODE_FK_PK) AND ([FINPR_PR_CODE_FK_PK] = @Original_FINPR_PR_CODE_FK_"& _ 
                "PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINPR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINPR_INDPROD] ([FINPR_FIN_CODE_FK_PK], [FINPR_PR_CODE_F"& _ 
                "K_PK]) VALUES (@FINPR_FIN_CODE_FK_PK, @FINPR_PR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINPR_FIN_C"& _ 
                "ODE_FK_PK, FINPR_PR_CODE_FK_PK FROM THERIAQUE.FINPR_INDPROD WHERE (FINPR_FIN_COD"& _ 
                "E_FK_PK = @FINPR_FIN_CODE_FK_PK) AND (FINPR_PR_CODE_FK_PK = @FINPR_PR_CODE_FK_PK"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINPR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINPR_INDPROD] SET [FINPR_FIN_CODE_FK_PK] = @FINPR_FIN_CODE_F"& _ 
                "K_PK, [FINPR_PR_CODE_FK_PK] = @FINPR_PR_CODE_FK_PK WHERE (([FINPR_FIN_CODE_FK_PK"& _ 
                "] = @Original_FINPR_FIN_CODE_FK_PK) AND ([FINPR_PR_CODE_FK_PK] = @Original_FINPR"& _ 
                "_PR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINPR_FIN_CODE_FK_PK, FINPR_PR_CODE_FK_PK FROM THERIAQ"& _ 
                "UE.FINPR_INDPROD WHERE (FINPR_FIN_CODE_FK_PK = @FINPR_FIN_CODE_FK_PK) AND (FINPR"& _ 
                "_PR_CODE_FK_PK = @FINPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINPR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINPR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINPR_FIN_CODE_FK_PK, FINPR_PR_CODE_FK_PK FROM THERIAQUE.FINPR_INDPROD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINPR_FIN_CODE_FK_PK, FINPR_PR_CODE_FK_PK FROM THERIAQUE.FINPR_INDPROD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE FINPR_FIN_CODE_FK_PK = @FINPR_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINPR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINPR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINPR_INDPRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINPR_INDPRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINPR_INDPRODDataTable = New dsTheriaque_Indication.FINPR_INDPRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINPR_INDPRODDataTable, ByVal FINPR_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINPR_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINPR_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINPR_INDPRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINPR_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINPR_INDPRODDataTable = New dsTheriaque_Indication.FINPR_INDPRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINPR_INDPRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINPR_INDPROD")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINPR_FIN_CODE_FK_PK As Integer, ByVal Original_FINPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINPR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINPR_PR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINPR_FIN_CODE_FK_PK As Integer, ByVal FINPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINPR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINPR_PR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINPR_FIN_CODE_FK_PK As Integer, ByVal FINPR_PR_CODE_FK_PK As Integer, ByVal Original_FINPR_FIN_CODE_FK_PK As Integer, ByVal Original_FINPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINPR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINPR_PR_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FINPR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINPR_PR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINPR_FIN_CODE_FK_PK As Integer, ByVal Original_FINPR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FINPR_FIN_CODE_FK_PK, Original_FINPR_PR_CODE_FK_PK, Original_FINPR_FIN_CODE_FK_PK, Original_FINPR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINCH_INDCHOIXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINCH_INDCHOIX"
            tableMapping.ColumnMappings.Add("FINCH_FIN_CODE_FK_PK", "FINCH_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCH_CH_CODE_FK_PK", "FINCH_CH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCH_NUMORD", "FINCH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINCH_INDCHOIX] WHERE (([FINCH_FIN_CODE_FK_PK] = @Origin"& _ 
                "al_FINCH_FIN_CODE_FK_PK) AND ([FINCH_CH_CODE_FK_PK] = @Original_FINCH_CH_CODE_FK"& _ 
                "_PK) AND ((@IsNull_FINCH_NUMORD = 1 AND [FINCH_NUMORD] IS NULL) OR ([FINCH_NUMOR"& _ 
                "D] = @Original_FINCH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINCH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINCH_INDCHOIX] ([FINCH_FIN_CODE_FK_PK], [FINCH_CH_CODE_"& _ 
                "FK_PK], [FINCH_NUMORD]) VALUES (@FINCH_FIN_CODE_FK_PK, @FINCH_CH_CODE_FK_PK, @FI"& _ 
                "NCH_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCH_FIN_CODE_FK_PK, FINCH_CH_CODE_FK_PK, FINCH_NUMORD FRO"& _ 
                "M THERIAQUE.FINCH_INDCHOIX WHERE (FINCH_CH_CODE_FK_PK = @FINCH_CH_CODE_FK_PK) AN"& _ 
                "D (FINCH_FIN_CODE_FK_PK = @FINCH_FIN_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINCH_INDCHOIX] SET [FINCH_FIN_CODE_FK_PK] = @FINCH_FIN_CODE_"& _ 
                "FK_PK, [FINCH_CH_CODE_FK_PK] = @FINCH_CH_CODE_FK_PK, [FINCH_NUMORD] = @FINCH_NUM"& _ 
                "ORD WHERE (([FINCH_FIN_CODE_FK_PK] = @Original_FINCH_FIN_CODE_FK_PK) AND ([FINCH"& _ 
                "_CH_CODE_FK_PK] = @Original_FINCH_CH_CODE_FK_PK) AND ((@IsNull_FINCH_NUMORD = 1 "& _ 
                "AND [FINCH_NUMORD] IS NULL) OR ([FINCH_NUMORD] = @Original_FINCH_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT FINCH_FIN_CODE_FK_PK, FINCH_CH_CODE_FK_PK, FINCH_NUMORD FROM THERIAQUE.FINCH"& _ 
                "_INDCHOIX WHERE (FINCH_CH_CODE_FK_PK = @FINCH_CH_CODE_FK_PK) AND (FINCH_FIN_CODE"& _ 
                "_FK_PK = @FINCH_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINCH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINCH_FIN_CODE_FK_PK, FINCH_CH_CODE_FK_PK, FINCH_NUMORD FROM THERIAQUE.FIN"& _ 
                "CH_INDCHOIX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINCH_FIN_CODE_FK_PK, FINCH_CH_CODE_FK_PK, FINCH_NUMORD FROM THERIAQUE.FIN"& _ 
                "CH_INDCHOIX"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FINCH_FIN_CODE_FK_PK = @FINCH_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCH_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCH_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINCH_INDCHOIXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINCH_INDCHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINCH_INDCHOIXDataTable = New dsTheriaque_Indication.FINCH_INDCHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINCH_INDCHOIXDataTable, ByVal FINCH_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCH_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINCH_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINCH_INDCHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCH_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINCH_INDCHOIXDataTable = New dsTheriaque_Indication.FINCH_INDCHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINCH_INDCHOIXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINCH_INDCHOIX")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINCH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCH_CH_CODE_FK_PK As Integer, ByVal Original_FINCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINCH_FIN_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINCH_CH_CODE_FK_PK,Integer)
            If (Original_FINCH_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINCH_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINCH_FIN_CODE_FK_PK As Integer, ByVal FINCH_CH_CODE_FK_PK As Integer, ByVal FINCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINCH_FIN_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINCH_CH_CODE_FK_PK,Integer)
            If (FINCH_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINCH_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCH_FIN_CODE_FK_PK As Integer, ByVal FINCH_CH_CODE_FK_PK As Integer, ByVal FINCH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINCH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCH_CH_CODE_FK_PK As Integer, ByVal Original_FINCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINCH_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINCH_CH_CODE_FK_PK,Integer)
            If (FINCH_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINCH_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINCH_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINCH_CH_CODE_FK_PK,Integer)
            If (Original_FINCH_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINCH_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINCH_FIN_CODE_FK_PK As Integer, ByVal Original_FINCH_CH_CODE_FK_PK As Integer, ByVal Original_FINCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FINCH_FIN_CODE_FK_PK, Original_FINCH_CH_CODE_FK_PK, FINCH_NUMORD, Original_FINCH_FIN_CODE_FK_PK, Original_FINCH_CH_CODE_FK_PK, Original_FINCH_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINSP_INDSPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINSP_INDSPE"
            tableMapping.ColumnMappings.Add("FINSP_FIN_CODE_FK_PK", "FINSP_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINSP_SP_CODE_FK_PK", "FINSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINSP_INDSPE] WHERE (([FINSP_FIN_CODE_FK_PK] = @Original"& _ 
                "_FINSP_FIN_CODE_FK_PK) AND ([FINSP_SP_CODE_FK_PK] = @Original_FINSP_SP_CODE_FK_P"& _ 
                "K))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSP_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINSP_INDSPE] ([FINSP_FIN_CODE_FK_PK], [FINSP_SP_CODE_FK"& _ 
                "_PK]) VALUES (@FINSP_FIN_CODE_FK_PK, @FINSP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINSP_FIN_CO"& _ 
                "DE_FK_PK, FINSP_SP_CODE_FK_PK FROM THERIAQUE.FINSP_INDSPE WHERE (FINSP_FIN_CODE_"& _ 
                "FK_PK = @FINSP_FIN_CODE_FK_PK) AND (FINSP_SP_CODE_FK_PK = @FINSP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSP_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINSP_INDSPE] SET [FINSP_FIN_CODE_FK_PK] = @FINSP_FIN_CODE_FK"& _ 
                "_PK, [FINSP_SP_CODE_FK_PK] = @FINSP_SP_CODE_FK_PK WHERE (([FINSP_FIN_CODE_FK_PK]"& _ 
                " = @Original_FINSP_FIN_CODE_FK_PK) AND ([FINSP_SP_CODE_FK_PK] = @Original_FINSP_"& _ 
                "SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINSP_FIN_CODE_FK_PK, FINSP_SP_CODE_FK_PK FROM THERIAQU"& _ 
                "E.FINSP_INDSPE WHERE (FINSP_FIN_CODE_FK_PK = @FINSP_FIN_CODE_FK_PK) AND (FINSP_S"& _ 
                "P_CODE_FK_PK = @FINSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSP_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSP_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINSP_FIN_CODE_FK_PK, FINSP_SP_CODE_FK_PK FROM THERIAQUE.FINSP_INDSPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINSP_FIN_CODE_FK_PK, FINSP_SP_CODE_FK_PK FROM THERIAQUE.FINSP_INDSPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE FINSP_FIN_CODE_FK_PK = @FINSP_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSP_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSP_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINSP_INDSPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINSP_INDSPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINSP_INDSPEDataTable = New dsTheriaque_Indication.FINSP_INDSPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINSP_INDSPEDataTable, ByVal FINSP_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINSP_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINSP_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINSP_INDSPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINSP_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINSP_INDSPEDataTable = New dsTheriaque_Indication.FINSP_INDSPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINSP_INDSPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINSP_INDSPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINSP_FIN_CODE_FK_PK As Integer, ByVal Original_FINSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINSP_FIN_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINSP_FIN_CODE_FK_PK As Integer, ByVal FINSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINSP_FIN_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINSP_FIN_CODE_FK_PK As Integer, ByVal FINSP_SP_CODE_FK_PK As Integer, ByVal Original_FINSP_FIN_CODE_FK_PK As Integer, ByVal Original_FINSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINSP_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINSP_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FINSP_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINSP_SP_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINSP_FIN_CODE_FK_PK As Integer, ByVal Original_FINSP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FINSP_FIN_CODE_FK_PK, Original_FINSP_SP_CODE_FK_PK, Original_FINSP_FIN_CODE_FK_PK, Original_FINSP_SP_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINTY_FINDTYPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINTY_FINDTYPE"
            tableMapping.ColumnMappings.Add("FINTY_FIN_CODE_FK_PK", "FINTY_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINTY_CDF_TYIN_CODE_FK_PK", "FINTY_CDF_TYIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINTY_NUMORD", "FINTY_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINTY_FINDTYPE] WHERE (([FINTY_FIN_CODE_FK_PK] = @Origin"& _ 
                "al_FINTY_FIN_CODE_FK_PK) AND ([FINTY_CDF_TYIN_CODE_FK_PK] = @Original_FINTY_CDF_"& _ 
                "TYIN_CODE_FK_PK) AND ((@IsNull_FINTY_NUMORD = 1 AND [FINTY_NUMORD] IS NULL) OR ("& _ 
                "[FINTY_NUMORD] = @Original_FINTY_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTY_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINTY_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINTY_FINDTYPE] ([FINTY_FIN_CODE_FK_PK], [FINTY_CDF_TYIN"& _ 
                "_CODE_FK_PK], [FINTY_NUMORD]) VALUES (@FINTY_FIN_CODE_FK_PK, @FINTY_CDF_TYIN_COD"& _ 
                "E_FK_PK, @FINTY_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINTY_FIN_CODE_FK_PK, FINTY_CDF_TYIN_CODE_FK_PK"& _ 
                ", FINTY_NUMORD FROM THERIAQUE.FINTY_FINDTYPE WHERE (FINTY_CDF_TYIN_CODE_FK_PK = "& _ 
                "@FINTY_CDF_TYIN_CODE_FK_PK) AND (FINTY_FIN_CODE_FK_PK = @FINTY_FIN_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINTY_FINDTYPE] SET [FINTY_FIN_CODE_FK_PK] = @FINTY_FIN_CODE_"& _ 
                "FK_PK, [FINTY_CDF_TYIN_CODE_FK_PK] = @FINTY_CDF_TYIN_CODE_FK_PK, [FINTY_NUMORD] "& _ 
                "= @FINTY_NUMORD WHERE (([FINTY_FIN_CODE_FK_PK] = @Original_FINTY_FIN_CODE_FK_PK)"& _ 
                " AND ([FINTY_CDF_TYIN_CODE_FK_PK] = @Original_FINTY_CDF_TYIN_CODE_FK_PK) AND ((@"& _ 
                "IsNull_FINTY_NUMORD = 1 AND [FINTY_NUMORD] IS NULL) OR ([FINTY_NUMORD] = @Origin"& _ 
                "al_FINTY_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINTY_FIN_CODE_FK_PK, FINTY_CDF_TYIN_CODE_FK_PK, FIN"& _ 
                "TY_NUMORD FROM THERIAQUE.FINTY_FINDTYPE WHERE (FINTY_CDF_TYIN_CODE_FK_PK = @FINT"& _ 
                "Y_CDF_TYIN_CODE_FK_PK) AND (FINTY_FIN_CODE_FK_PK = @FINTY_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTY_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_CDF_TYIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINTY_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINTY_FIN_CODE_FK_PK, FINTY_CDF_TYIN_CODE_FK_PK, FINTY_NUMORD FROM THERIAQ"& _ 
                "UE.FINTY_FINDTYPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINTY_FIN_CODE_FK_PK, FINTY_CDF_TYIN_CODE_FK_PK, FINTY_NUMORD FROM THERIAQ"& _ 
                "UE.FINTY_FINDTYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FINTY_FIN_CODE_FK_PK = @FINTY_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTY_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTY_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINTY_FINDTYPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINTY_FINDTYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINTY_FINDTYPEDataTable = New dsTheriaque_Indication.FINTY_FINDTYPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINTY_FINDTYPEDataTable, ByVal FINTY_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINTY_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINTY_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINTY_FINDTYPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINTY_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINTY_FINDTYPEDataTable = New dsTheriaque_Indication.FINTY_FINDTYPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINTY_FINDTYPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINTY_FINDTYPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINTY_FIN_CODE_FK_PK As Integer, ByVal Original_FINTY_CDF_TYIN_CODE_FK_PK As String, ByVal Original_FINTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINTY_FIN_CODE_FK_PK,Integer)
            If (Original_FINTY_CDF_TYIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINTY_CDF_TYIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINTY_CDF_TYIN_CODE_FK_PK,String)
            End If
            If (Original_FINTY_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINTY_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINTY_FIN_CODE_FK_PK As Integer, ByVal FINTY_CDF_TYIN_CODE_FK_PK As String, ByVal FINTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINTY_FIN_CODE_FK_PK,Integer)
            If (FINTY_CDF_TYIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINTY_CDF_TYIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINTY_CDF_TYIN_CODE_FK_PK,String)
            End If
            If (FINTY_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINTY_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINTY_FIN_CODE_FK_PK As Integer, ByVal FINTY_CDF_TYIN_CODE_FK_PK As String, ByVal FINTY_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINTY_FIN_CODE_FK_PK As Integer, ByVal Original_FINTY_CDF_TYIN_CODE_FK_PK As String, ByVal Original_FINTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINTY_FIN_CODE_FK_PK,Integer)
            If (FINTY_CDF_TYIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINTY_CDF_TYIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINTY_CDF_TYIN_CODE_FK_PK,String)
            End If
            If (FINTY_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINTY_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINTY_FIN_CODE_FK_PK,Integer)
            If (Original_FINTY_CDF_TYIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINTY_CDF_TYIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINTY_CDF_TYIN_CODE_FK_PK,String)
            End If
            If (Original_FINTY_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINTY_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINTY_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINTY_FIN_CODE_FK_PK As Integer, ByVal Original_FINTY_CDF_TYIN_CODE_FK_PK As String, ByVal Original_FINTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FINTY_FIN_CODE_FK_PK, Original_FINTY_CDF_TYIN_CODE_FK_PK, FINTY_NUMORD, Original_FINTY_FIN_CODE_FK_PK, Original_FINTY_CDF_TYIN_CODE_FK_PK, Original_FINTY_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINCON_FINDCOMMENT_NATURETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINCON_FINDCOMMENT_NATURE"
            tableMapping.ColumnMappings.Add("FINCON_FIN_CODE_FK_PK", "FINCON_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCON_CDF_COIN_CODE_FK_PK", "FINCON_CDF_COIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCON_NUMORD", "FINCON_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINCON_FINDCOMMENT_NATURE] WHERE (([FINCON_FIN_CODE_FK_P"& _ 
                "K] = @Original_FINCON_FIN_CODE_FK_PK) AND ([FINCON_CDF_COIN_CODE_FK_PK] = @Origi"& _ 
                "nal_FINCON_CDF_COIN_CODE_FK_PK) AND ((@IsNull_FINCON_NUMORD = 1 AND [FINCON_NUMO"& _ 
                "RD] IS NULL) OR ([FINCON_NUMORD] = @Original_FINCON_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCON_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINCON_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINCON_FINDCOMMENT_NATURE] ([FINCON_FIN_CODE_FK_PK], [FI"& _ 
                "NCON_CDF_COIN_CODE_FK_PK], [FINCON_NUMORD]) VALUES (@FINCON_FIN_CODE_FK_PK, @FIN"& _ 
                "CON_CDF_COIN_CODE_FK_PK, @FINCON_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCON_FIN_CODE_FK_PK, FINCON_"& _ 
                "CDF_COIN_CODE_FK_PK, FINCON_NUMORD FROM THERIAQUE.FINCON_FINDCOMMENT_NATURE WHER"& _ 
                "E (FINCON_CDF_COIN_CODE_FK_PK = @FINCON_CDF_COIN_CODE_FK_PK) AND (FINCON_FIN_COD"& _ 
                "E_FK_PK = @FINCON_FIN_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINCON_FINDCOMMENT_NATURE] SET [FINCON_FIN_CODE_FK_PK] = @FIN"& _ 
                "CON_FIN_CODE_FK_PK, [FINCON_CDF_COIN_CODE_FK_PK] = @FINCON_CDF_COIN_CODE_FK_PK, "& _ 
                "[FINCON_NUMORD] = @FINCON_NUMORD WHERE (([FINCON_FIN_CODE_FK_PK] = @Original_FIN"& _ 
                "CON_FIN_CODE_FK_PK) AND ([FINCON_CDF_COIN_CODE_FK_PK] = @Original_FINCON_CDF_COI"& _ 
                "N_CODE_FK_PK) AND ((@IsNull_FINCON_NUMORD = 1 AND [FINCON_NUMORD] IS NULL) OR (["& _ 
                "FINCON_NUMORD] = @Original_FINCON_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCON_FIN_CODE_FK_PK, FINC"& _ 
                "ON_CDF_COIN_CODE_FK_PK, FINCON_NUMORD FROM THERIAQUE.FINCON_FINDCOMMENT_NATURE W"& _ 
                "HERE (FINCON_CDF_COIN_CODE_FK_PK = @FINCON_CDF_COIN_CODE_FK_PK) AND (FINCON_FIN_"& _ 
                "CODE_FK_PK = @FINCON_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCON_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINCON_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINCON_FIN_CODE_FK_PK, FINCON_CDF_COIN_CODE_FK_PK, FINCON_NUMORD FROM THER"& _ 
                "IAQUE.FINCON_FINDCOMMENT_NATURE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINCON_FIN_CODE_FK_PK, FINCON_CDF_COIN_CODE_FK_PK, FINCON_NUMORD FROM THER"& _ 
                "IAQUE.FINCON_FINDCOMMENT_NATURE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FINCON_FIN_CODE_FK_PK = @FINCON_FIN_CODE_"& _ 
                "FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCON_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCON_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable = New dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable, ByVal FINCON_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCON_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINCON_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCON_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable = New dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINCON_FINDCOMMENT_NATUREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINCON_FINDCOMMENT_NATURE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINCON_FIN_CODE_FK_PK As Integer, ByVal Original_FINCON_CDF_COIN_CODE_FK_PK As String, ByVal Original_FINCON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINCON_FIN_CODE_FK_PK,Integer)
            If (Original_FINCON_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCON_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINCON_CDF_COIN_CODE_FK_PK,String)
            End If
            If (Original_FINCON_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINCON_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINCON_FIN_CODE_FK_PK As Integer, ByVal FINCON_CDF_COIN_CODE_FK_PK As String, ByVal FINCON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINCON_FIN_CODE_FK_PK,Integer)
            If (FINCON_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCON_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINCON_CDF_COIN_CODE_FK_PK,String)
            End If
            If (FINCON_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINCON_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCON_FIN_CODE_FK_PK As Integer, ByVal FINCON_CDF_COIN_CODE_FK_PK As String, ByVal FINCON_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINCON_FIN_CODE_FK_PK As Integer, ByVal Original_FINCON_CDF_COIN_CODE_FK_PK As String, ByVal Original_FINCON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINCON_FIN_CODE_FK_PK,Integer)
            If (FINCON_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCON_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINCON_CDF_COIN_CODE_FK_PK,String)
            End If
            If (FINCON_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINCON_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINCON_FIN_CODE_FK_PK,Integer)
            If (Original_FINCON_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCON_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINCON_CDF_COIN_CODE_FK_PK,String)
            End If
            If (Original_FINCON_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINCON_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCON_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINCON_FIN_CODE_FK_PK As Integer, ByVal Original_FINCON_CDF_COIN_CODE_FK_PK As String, ByVal Original_FINCON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FINCON_FIN_CODE_FK_PK, Original_FINCON_CDF_COIN_CODE_FK_PK, FINCON_NUMORD, Original_FINCON_FIN_CODE_FK_PK, Original_FINCON_CDF_COIN_CODE_FK_PK, Original_FINCON_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NAIN_NATURE_INDICATIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NAIN_NATURE_INDICATION"
            tableMapping.ColumnMappings.Add("NAIN_CODE_PK", "NAIN_CODE_PK")
            tableMapping.ColumnMappings.Add("NAIN_MALADIE_RARE", "NAIN_MALADIE_RARE")
            tableMapping.ColumnMappings.Add("NAIN_TEXTE", "NAIN_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[NAIN_NATURE_INDICATION] WHERE (([NAIN_CODE_PK] = @Origin"& _ 
                "al_NAIN_CODE_PK) AND ((@IsNull_NAIN_MALADIE_RARE = 1 AND [NAIN_MALADIE_RARE] IS "& _ 
                "NULL) OR ([NAIN_MALADIE_RARE] = @Original_NAIN_MALADIE_RARE)) AND ((@IsNull_NAIN"& _ 
                "_TEXTE = 1 AND [NAIN_TEXTE] IS NULL) OR ([NAIN_TEXTE] = @Original_NAIN_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NAIN_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NAIN_MALADIE_RARE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NAIN_MALADIE_RARE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NAIN_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NAIN_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[NAIN_NATURE_INDICATION] ([NAIN_CODE_PK], [NAIN_MALADIE_R"& _ 
                "ARE], [NAIN_TEXTE]) VALUES (@NAIN_CODE_PK, @NAIN_MALADIE_RARE, @NAIN_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM THERIAQUE.NAIN_NATURE_INDI"& _ 
                "CATION WHERE (NAIN_CODE_PK = @NAIN_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_MALADIE_RARE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[NAIN_NATURE_INDICATION] SET [NAIN_CODE_PK] = @NAIN_CODE_PK, ["& _ 
                "NAIN_MALADIE_RARE] = @NAIN_MALADIE_RARE, [NAIN_TEXTE] = @NAIN_TEXTE WHERE (([NAI"& _ 
                "N_CODE_PK] = @Original_NAIN_CODE_PK) AND ((@IsNull_NAIN_MALADIE_RARE = 1 AND [NA"& _ 
                "IN_MALADIE_RARE] IS NULL) OR ([NAIN_MALADIE_RARE] = @Original_NAIN_MALADIE_RARE)"& _ 
                ") AND ((@IsNull_NAIN_TEXTE = 1 AND [NAIN_TEXTE] IS NULL) OR ([NAIN_TEXTE] = @Ori"& _ 
                "ginal_NAIN_TEXTE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM TH"& _ 
                "ERIAQUE.NAIN_NATURE_INDICATION WHERE (NAIN_CODE_PK = @NAIN_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_MALADIE_RARE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NAIN_CODE_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NAIN_MALADIE_RARE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NAIN_MALADIE_RARE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_MALADIE_RARE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NAIN_TEXTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NAIN_TEXTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_TEXTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM THERIAQUE.NAIN_NATURE_IND"& _ 
                "ICATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE FROM THERIAQUE.NAIN_NATURE_IND"& _ 
                "ICATION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE NAIN_CODE_PK = @NAIN_CODE_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NAIN_CODE_PK", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "NAIN_CODE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable = New dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable, ByVal NAIN_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(NAIN_CODE_PK,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal NAIN_CODE_PK As String) As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(NAIN_CODE_PK,String)
            End If
            Dim dataTable As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable = New dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.NAIN_NATURE_INDICATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "NAIN_NATURE_INDICATION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_NAIN_CODE_PK As String, ByVal Original_NAIN_MALADIE_RARE As String, ByVal Original_NAIN_TEXTE As String) As Integer
            If (Original_NAIN_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NAIN_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_NAIN_CODE_PK,String)
            End If
            If (Original_NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NAIN_MALADIE_RARE,String)
            End If
            If (Original_NAIN_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NAIN_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal NAIN_CODE_PK As String, ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String) As Integer
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(NAIN_CODE_PK,String)
            End If
            If (NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NAIN_MALADIE_RARE,String)
            End If
            If (NAIN_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(NAIN_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NAIN_CODE_PK As String, ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String, ByVal Original_NAIN_CODE_PK As String, ByVal Original_NAIN_MALADIE_RARE As String, ByVal Original_NAIN_TEXTE As String) As Integer
            If (NAIN_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAIN_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(NAIN_CODE_PK,String)
            End If
            If (NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NAIN_MALADIE_RARE,String)
            End If
            If (NAIN_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NAIN_TEXTE,String)
            End If
            If (Original_NAIN_CODE_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NAIN_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_NAIN_CODE_PK,String)
            End If
            If (Original_NAIN_MALADIE_RARE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_NAIN_MALADIE_RARE,String)
            End If
            If (Original_NAIN_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_NAIN_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NAIN_MALADIE_RARE As String, ByVal NAIN_TEXTE As String, ByVal Original_NAIN_CODE_PK As String, ByVal Original_NAIN_MALADIE_RARE As String, ByVal Original_NAIN_TEXTE As String) As Integer
            Return Me.Update(Original_NAIN_CODE_PK, NAIN_MALADIE_RARE, NAIN_TEXTE, Original_NAIN_CODE_PK, Original_NAIN_MALADIE_RARE, Original_NAIN_TEXTE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINTSS_INDICATION_TAUXSECUTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINTSS_INDICATION_TAUXSECU"
            tableMapping.ColumnMappings.Add("FINTSS_FIN_CODE_FK_PK", "FINTSS_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINTSS_PRE_CODE_FK_PK", "FINTSS_PRE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINTSS_DATE_APPLI_PK", "FINTSS_DATE_APPLI_PK")
            tableMapping.ColumnMappings.Add("FINTSS_CDF_TSS_CODE_FK", "FINTSS_CDF_TSS_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINTSS_INDICATION_TAUXSECU] WHERE (([FINTSS_FIN_CODE_FK_"& _ 
                "PK] = @Original_FINTSS_FIN_CODE_FK_PK) AND ([FINTSS_PRE_CODE_FK_PK] = @Original_"& _ 
                "FINTSS_PRE_CODE_FK_PK) AND ([FINTSS_DATE_APPLI_PK] = @Original_FINTSS_DATE_APPLI"& _ 
                "_PK) AND ([FINTSS_CDF_TSS_CODE_FK] = @Original_FINTSS_CDF_TSS_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_CDF_TSS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_CDF_TSS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINTSS_INDICATION_TAUXSECU] ([FINTSS_FIN_CODE_FK_PK], [F"& _ 
                "INTSS_PRE_CODE_FK_PK], [FINTSS_DATE_APPLI_PK], [FINTSS_CDF_TSS_CODE_FK]) VALUES "& _ 
                "(@FINTSS_FIN_CODE_FK_PK, @FINTSS_PRE_CODE_FK_PK, @FINTSS_DATE_APPLI_PK, @FINTSS_"& _ 
                "CDF_TSS_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINTSS_FIN_CODE_FK_PK, FINTSS_PRE_CODE_FK_PK, FINTSS_D"& _ 
                "ATE_APPLI_PK, FINTSS_CDF_TSS_CODE_FK FROM THERIAQUE.FINTSS_INDICATION_TAUXSECU W"& _ 
                "HERE (FINTSS_CDF_TSS_CODE_FK = @FINTSS_CDF_TSS_CODE_FK) AND (FINTSS_DATE_APPLI_P"& _ 
                "K = @FINTSS_DATE_APPLI_PK) AND (FINTSS_FIN_CODE_FK_PK = @FINTSS_FIN_CODE_FK_PK) "& _ 
                "AND (FINTSS_PRE_CODE_FK_PK = @FINTSS_PRE_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_CDF_TSS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_CDF_TSS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINTSS_INDICATION_TAUXSECU] SET [FINTSS_FIN_CODE_FK_PK] = @FI"& _ 
                "NTSS_FIN_CODE_FK_PK, [FINTSS_PRE_CODE_FK_PK] = @FINTSS_PRE_CODE_FK_PK, [FINTSS_D"& _ 
                "ATE_APPLI_PK] = @FINTSS_DATE_APPLI_PK, [FINTSS_CDF_TSS_CODE_FK] = @FINTSS_CDF_TS"& _ 
                "S_CODE_FK WHERE (([FINTSS_FIN_CODE_FK_PK] = @Original_FINTSS_FIN_CODE_FK_PK) AND"& _ 
                " ([FINTSS_PRE_CODE_FK_PK] = @Original_FINTSS_PRE_CODE_FK_PK) AND ([FINTSS_DATE_A"& _ 
                "PPLI_PK] = @Original_FINTSS_DATE_APPLI_PK) AND ([FINTSS_CDF_TSS_CODE_FK] = @Orig"& _ 
                "inal_FINTSS_CDF_TSS_CODE_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINTSS_FIN_CODE_FK_PK, FINTSS_PRE_CODE_FK"& _ 
                "_PK, FINTSS_DATE_APPLI_PK, FINTSS_CDF_TSS_CODE_FK FROM THERIAQUE.FINTSS_INDICATI"& _ 
                "ON_TAUXSECU WHERE (FINTSS_CDF_TSS_CODE_FK = @FINTSS_CDF_TSS_CODE_FK) AND (FINTSS"& _ 
                "_DATE_APPLI_PK = @FINTSS_DATE_APPLI_PK) AND (FINTSS_FIN_CODE_FK_PK = @FINTSS_FIN"& _ 
                "_CODE_FK_PK) AND (FINTSS_PRE_CODE_FK_PK = @FINTSS_PRE_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_CDF_TSS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_CDF_TSS_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_PRE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_PRE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_DATE_APPLI_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_DATE_APPLI_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINTSS_CDF_TSS_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_CDF_TSS_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINTSS_FIN_CODE_FK_PK, FINTSS_PRE_CODE_FK_PK, FINTSS_DATE_APPLI_PK, FINTSS"& _ 
                "_CDF_TSS_CODE_FK FROM THERIAQUE.FINTSS_INDICATION_TAUXSECU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINTSS_FIN_CODE_FK_PK, FINTSS_PRE_CODE_FK_PK, FINTSS_DATE_APPLI_PK, FINTSS"& _ 
                "_CDF_TSS_CODE_FK FROM THERIAQUE.FINTSS_INDICATION_TAUXSECU"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FINTSS_FIN_COD"& _ 
                "E_FK_PK = @FINTSS_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINTSS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINTSS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable = New dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable, ByVal FINTSS_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINTSS_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINTSS_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINTSS_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable = New dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINTSS_INDICATION_TAUXSECUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINTSS_INDICATION_TAUXSECU")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINTSS_FIN_CODE_FK_PK As Integer, ByVal Original_FINTSS_PRE_CODE_FK_PK As String, ByVal Original_FINTSS_DATE_APPLI_PK As Date, ByVal Original_FINTSS_CDF_TSS_CODE_FK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINTSS_FIN_CODE_FK_PK,Integer)
            If (Original_FINTSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINTSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINTSS_PRE_CODE_FK_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FINTSS_DATE_APPLI_PK,Date)
            If (Original_FINTSS_CDF_TSS_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINTSS_CDF_TSS_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINTSS_CDF_TSS_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINTSS_FIN_CODE_FK_PK As Integer, ByVal FINTSS_PRE_CODE_FK_PK As String, ByVal FINTSS_DATE_APPLI_PK As Date, ByVal FINTSS_CDF_TSS_CODE_FK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINTSS_FIN_CODE_FK_PK,Integer)
            If (FINTSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINTSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINTSS_PRE_CODE_FK_PK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINTSS_DATE_APPLI_PK,Date)
            If (FINTSS_CDF_TSS_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINTSS_CDF_TSS_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FINTSS_CDF_TSS_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINTSS_FIN_CODE_FK_PK As Integer, ByVal FINTSS_PRE_CODE_FK_PK As String, ByVal FINTSS_DATE_APPLI_PK As Date, ByVal FINTSS_CDF_TSS_CODE_FK As String, ByVal Original_FINTSS_FIN_CODE_FK_PK As Integer, ByVal Original_FINTSS_PRE_CODE_FK_PK As String, ByVal Original_FINTSS_DATE_APPLI_PK As Date, ByVal Original_FINTSS_CDF_TSS_CODE_FK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINTSS_FIN_CODE_FK_PK,Integer)
            If (FINTSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINTSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINTSS_PRE_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINTSS_DATE_APPLI_PK,Date)
            If (FINTSS_CDF_TSS_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINTSS_CDF_TSS_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FINTSS_CDF_TSS_CODE_FK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINTSS_FIN_CODE_FK_PK,Integer)
            If (Original_FINTSS_PRE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINTSS_PRE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FINTSS_PRE_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINTSS_DATE_APPLI_PK,Date)
            If (Original_FINTSS_CDF_TSS_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINTSS_CDF_TSS_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FINTSS_CDF_TSS_CODE_FK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINTSS_FIN_CODE_FK_PK As Integer, ByVal Original_FINTSS_PRE_CODE_FK_PK As String, ByVal Original_FINTSS_DATE_APPLI_PK As Date, ByVal Original_FINTSS_CDF_TSS_CODE_FK As String) As Integer
            Return Me.Update(Original_FINTSS_FIN_CODE_FK_PK, Original_FINTSS_PRE_CODE_FK_PK, Original_FINTSS_DATE_APPLI_PK, Original_FINTSS_CDF_TSS_CODE_FK, Original_FINTSS_FIN_CODE_FK_PK, Original_FINTSS_PRE_CODE_FK_PK, Original_FINTSS_DATE_APPLI_PK, Original_FINTSS_CDF_TSS_CODE_FK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINSMR_INDIC_SMR_ATRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINSMR_INDIC_SMR_ATR"
            tableMapping.ColumnMappings.Add("FINSMR_FIN_CODE_FK_PK", "FINSMR_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINSMR_SP_CODE_FK_PK", "FINSMR_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINSMR_CDF_SMR_CODE_FK_PK", "FINSMR_CDF_SMR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINSMR_DATE_SMR_PK", "FINSMR_DATE_SMR_PK")
            tableMapping.ColumnMappings.Add("FINSMR_ATR_CODE_FK_PK", "FINSMR_ATR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINSMR_INDIC_SMR_ATR] WHERE (([FINSMR_FIN_CODE_FK_PK] = "& _ 
                "@Original_FINSMR_FIN_CODE_FK_PK) AND ([FINSMR_SP_CODE_FK_PK] = @Original_FINSMR_"& _ 
                "SP_CODE_FK_PK) AND ([FINSMR_CDF_SMR_CODE_FK_PK] = @Original_FINSMR_CDF_SMR_CODE_"& _ 
                "FK_PK) AND ([FINSMR_DATE_SMR_PK] = @Original_FINSMR_DATE_SMR_PK) AND ([FINSMR_AT"& _ 
                "R_CODE_FK_PK] = @Original_FINSMR_ATR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINSMR_INDIC_SMR_ATR] ([FINSMR_FIN_CODE_FK_PK], [FINSMR_"& _ 
                "SP_CODE_FK_PK], [FINSMR_CDF_SMR_CODE_FK_PK], [FINSMR_DATE_SMR_PK], [FINSMR_ATR_C"& _ 
                "ODE_FK_PK]) VALUES (@FINSMR_FIN_CODE_FK_PK, @FINSMR_SP_CODE_FK_PK, @FINSMR_CDF_S"& _ 
                "MR_CODE_FK_PK, @FINSMR_DATE_SMR_PK, @FINSMR_ATR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINSMR_FIN_"& _ 
                "CODE_FK_PK, FINSMR_SP_CODE_FK_PK, FINSMR_CDF_SMR_CODE_FK_PK, FINSMR_DATE_SMR_PK,"& _ 
                " FINSMR_ATR_CODE_FK_PK FROM THERIAQUE.FINSMR_INDIC_SMR_ATR WHERE (FINSMR_ATR_COD"& _ 
                "E_FK_PK = @FINSMR_ATR_CODE_FK_PK) AND (FINSMR_CDF_SMR_CODE_FK_PK = @FINSMR_CDF_S"& _ 
                "MR_CODE_FK_PK) AND (FINSMR_DATE_SMR_PK = @FINSMR_DATE_SMR_PK) AND (FINSMR_FIN_CO"& _ 
                "DE_FK_PK = @FINSMR_FIN_CODE_FK_PK) AND (FINSMR_SP_CODE_FK_PK = @FINSMR_SP_CODE_F"& _ 
                "K_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINSMR_INDIC_SMR_ATR] SET [FINSMR_FIN_CODE_FK_PK] = @FINSMR_F"& _ 
                "IN_CODE_FK_PK, [FINSMR_SP_CODE_FK_PK] = @FINSMR_SP_CODE_FK_PK, [FINSMR_CDF_SMR_C"& _ 
                "ODE_FK_PK] = @FINSMR_CDF_SMR_CODE_FK_PK, [FINSMR_DATE_SMR_PK] = @FINSMR_DATE_SMR"& _ 
                "_PK, [FINSMR_ATR_CODE_FK_PK] = @FINSMR_ATR_CODE_FK_PK WHERE (([FINSMR_FIN_CODE_F"& _ 
                "K_PK] = @Original_FINSMR_FIN_CODE_FK_PK) AND ([FINSMR_SP_CODE_FK_PK] = @Original"& _ 
                "_FINSMR_SP_CODE_FK_PK) AND ([FINSMR_CDF_SMR_CODE_FK_PK] = @Original_FINSMR_CDF_S"& _ 
                "MR_CODE_FK_PK) AND ([FINSMR_DATE_SMR_PK] = @Original_FINSMR_DATE_SMR_PK) AND ([F"& _ 
                "INSMR_ATR_CODE_FK_PK] = @Original_FINSMR_ATR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINSMR_FIN_CO"& _ 
                "DE_FK_PK, FINSMR_SP_CODE_FK_PK, FINSMR_CDF_SMR_CODE_FK_PK, FINSMR_DATE_SMR_PK, F"& _ 
                "INSMR_ATR_CODE_FK_PK FROM THERIAQUE.FINSMR_INDIC_SMR_ATR WHERE (FINSMR_ATR_CODE_"& _ 
                "FK_PK = @FINSMR_ATR_CODE_FK_PK) AND (FINSMR_CDF_SMR_CODE_FK_PK = @FINSMR_CDF_SMR"& _ 
                "_CODE_FK_PK) AND (FINSMR_DATE_SMR_PK = @FINSMR_DATE_SMR_PK) AND (FINSMR_FIN_CODE"& _ 
                "_FK_PK = @FINSMR_FIN_CODE_FK_PK) AND (FINSMR_SP_CODE_FK_PK = @FINSMR_SP_CODE_FK_"& _ 
                "PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_CDF_SMR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_DATE_SMR_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_DATE_SMR_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINSMR_ATR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_ATR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.ConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINSMR_FIN_CODE_FK_PK, FINSMR_SP_CODE_FK_PK, FINSMR_CDF_SMR_CODE_FK_PK, FI"& _ 
                "NSMR_DATE_SMR_PK, FINSMR_ATR_CODE_FK_PK FROM THERIAQUE.FINSMR_INDIC_SMR_ATR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINSMR_FIN_CODE_FK_PK, FINSMR_SP_CODE_FK_PK, FINSMR_CDF_SMR_CODE_FK_PK, FI"& _ 
                "NSMR_DATE_SMR_PK, FINSMR_ATR_CODE_FK_PK FROM THERIAQUE.FINSMR_INDIC_SMR_ATR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE FINSMR_FIN_CODE_FK_PK = @FINSMR_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINSMR_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINSMR_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable = New dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable, ByVal FINSMR_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINSMR_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINSMR_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINSMR_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable = New dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINSMR_INDIC_SMR_ATRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINSMR_INDIC_SMR_ATR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINSMR_FIN_CODE_FK_PK As Integer, ByVal Original_FINSMR_SP_CODE_FK_PK As Integer, ByVal Original_FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_FINSMR_DATE_SMR_PK As Date, ByVal Original_FINSMR_ATR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINSMR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINSMR_SP_CODE_FK_PK,Integer)
            If (Original_FINSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FINSMR_CDF_SMR_CODE_FK_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINSMR_DATE_SMR_PK,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FINSMR_ATR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINSMR_FIN_CODE_FK_PK As Integer, ByVal FINSMR_SP_CODE_FK_PK As Integer, ByVal FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal FINSMR_DATE_SMR_PK As Date, ByVal FINSMR_ATR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINSMR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINSMR_SP_CODE_FK_PK,Integer)
            If (FINSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINSMR_CDF_SMR_CODE_FK_PK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FINSMR_DATE_SMR_PK,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FINSMR_ATR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINSMR_FIN_CODE_FK_PK As Integer, ByVal FINSMR_SP_CODE_FK_PK As Integer, ByVal FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal FINSMR_DATE_SMR_PK As Date, ByVal FINSMR_ATR_CODE_FK_PK As Integer, ByVal Original_FINSMR_FIN_CODE_FK_PK As Integer, ByVal Original_FINSMR_SP_CODE_FK_PK As Integer, ByVal Original_FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_FINSMR_DATE_SMR_PK As Date, ByVal Original_FINSMR_ATR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINSMR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINSMR_SP_CODE_FK_PK,Integer)
            If (FINSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINSMR_CDF_SMR_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FINSMR_DATE_SMR_PK,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FINSMR_ATR_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FINSMR_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINSMR_SP_CODE_FK_PK,Integer)
            If (Original_FINSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FINSMR_CDF_SMR_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FINSMR_DATE_SMR_PK,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FINSMR_ATR_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINSMR_FIN_CODE_FK_PK As Integer, ByVal Original_FINSMR_SP_CODE_FK_PK As Integer, ByVal Original_FINSMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_FINSMR_DATE_SMR_PK As Date, ByVal Original_FINSMR_ATR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FINSMR_FIN_CODE_FK_PK, Original_FINSMR_SP_CODE_FK_PK, Original_FINSMR_CDF_SMR_CODE_FK_PK, Original_FINSMR_DATE_SMR_PK, Original_FINSMR_ATR_CODE_FK_PK, Original_FINSMR_FIN_CODE_FK_PK, Original_FINSMR_SP_CODE_FK_PK, Original_FINSMR_CDF_SMR_CODE_FK_PK, Original_FINSMR_DATE_SMR_PK, Original_FINSMR_ATR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINET_FINDETIOLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINET_FINDETIOL"
            tableMapping.ColumnMappings.Add("FINET_FIN_CODE_FK_PK", "FINET_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINET_CDF_ETIN_CODE_FK_PK", "FINET_CDF_ETIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINET_NUMORD", "FINET_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINET_FINDETIOL] WHERE (([FINET_FIN_CODE_FK_PK] = @Origi"& _ 
                "nal_FINET_FIN_CODE_FK_PK) AND ([FINET_CDF_ETIN_CODE_FK_PK] = @Original_FINET_CDF"& _ 
                "_ETIN_CODE_FK_PK) AND ((@IsNull_FINET_NUMORD = 1 AND [FINET_NUMORD] IS NULL) OR "& _ 
                "([FINET_NUMORD] = @Original_FINET_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINET_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINET_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINET_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINET_FINDETIOL] ([FINET_FIN_CODE_FK_PK], [FINET_CDF_ETI"& _ 
                "N_CODE_FK_PK], [FINET_NUMORD]) VALUES (@FINET_FIN_CODE_FK_PK, @FINET_CDF_ETIN_CO"& _ 
                "DE_FK_PK, @FINET_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINET_FIN_CODE_FK_PK, FINET_CDF_ETIN_CODE_FK_P"& _ 
                "K, FINET_NUMORD FROM THERIAQUE.FINET_FINDETIOL WHERE (FINET_CDF_ETIN_CODE_FK_PK "& _ 
                "= @FINET_CDF_ETIN_CODE_FK_PK) AND (FINET_FIN_CODE_FK_PK = @FINET_FIN_CODE_FK_PK)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINET_FINDETIOL] SET [FINET_FIN_CODE_FK_PK] = @FINET_FIN_CODE"& _ 
                "_FK_PK, [FINET_CDF_ETIN_CODE_FK_PK] = @FINET_CDF_ETIN_CODE_FK_PK, [FINET_NUMORD]"& _ 
                " = @FINET_NUMORD WHERE (([FINET_FIN_CODE_FK_PK] = @Original_FINET_FIN_CODE_FK_PK"& _ 
                ") AND ([FINET_CDF_ETIN_CODE_FK_PK] = @Original_FINET_CDF_ETIN_CODE_FK_PK) AND (("& _ 
                "@IsNull_FINET_NUMORD = 1 AND [FINET_NUMORD] IS NULL) OR ([FINET_NUMORD] = @Origi"& _ 
                "nal_FINET_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINET_FIN_CODE_FK_PK, FINET_CDF_ETIN_CODE_FK_PK, FI"& _ 
                "NET_NUMORD FROM THERIAQUE.FINET_FINDETIOL WHERE (FINET_CDF_ETIN_CODE_FK_PK = @FI"& _ 
                "NET_CDF_ETIN_CODE_FK_PK) AND (FINET_FIN_CODE_FK_PK = @FINET_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINET_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_CDF_ETIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINET_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINET_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.THERIAQUE2ConnectionString8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINET_FIN_CODE_FK_PK, FINET_CDF_ETIN_CODE_FK_PK, FINET_NUMORD FROM THERIAQ"& _ 
                "UE.FINET_FINDETIOL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINET_FIN_CODE_FK_PK, FINET_CDF_ETIN_CODE_FK_PK, FINET_NUMORD FROM THERIAQ"& _ 
                "UE.FINET_FINDETIOL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FINET_FIN_CODE_FK_PK = @FINET_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINET_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINET_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINET_FINDETIOLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINET_FINDETIOLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINET_FINDETIOLDataTable = New dsTheriaque_Indication.FINET_FINDETIOLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINET_FINDETIOLDataTable, ByVal FINET_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINET_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINET_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINET_FINDETIOLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINET_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINET_FINDETIOLDataTable = New dsTheriaque_Indication.FINET_FINDETIOLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINET_FINDETIOLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINET_FINDETIOL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINET_FIN_CODE_FK_PK As Integer, ByVal Original_FINET_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FINET_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINET_FIN_CODE_FK_PK,Integer)
            If (Original_FINET_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINET_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINET_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FINET_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINET_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINET_FIN_CODE_FK_PK As Integer, ByVal FINET_CDF_ETIN_CODE_FK_PK As String, ByVal FINET_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINET_FIN_CODE_FK_PK,Integer)
            If (FINET_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINET_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINET_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FINET_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINET_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINET_FIN_CODE_FK_PK As Integer, ByVal FINET_CDF_ETIN_CODE_FK_PK As String, ByVal FINET_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINET_FIN_CODE_FK_PK As Integer, ByVal Original_FINET_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FINET_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINET_FIN_CODE_FK_PK,Integer)
            If (FINET_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINET_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINET_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (FINET_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINET_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINET_FIN_CODE_FK_PK,Integer)
            If (Original_FINET_CDF_ETIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINET_CDF_ETIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINET_CDF_ETIN_CODE_FK_PK,String)
            End If
            If (Original_FINET_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINET_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINET_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINET_FIN_CODE_FK_PK As Integer, ByVal Original_FINET_CDF_ETIN_CODE_FK_PK As String, ByVal Original_FINET_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FINET_FIN_CODE_FK_PK, Original_FINET_CDF_ETIN_CODE_FK_PK, FINET_NUMORD, Original_FINET_FIN_CODE_FK_PK, Original_FINET_CDF_ETIN_CODE_FK_PK, Original_FINET_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINCO_FINDCOMMENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINCO_FINDCOMMENT"
            tableMapping.ColumnMappings.Add("FINCO_FIN_CODE_FK_PK", "FINCO_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCO_CDF_COIN_CODE_FK_PK", "FINCO_CDF_COIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINCO_NUMORD", "FINCO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINCO_FINDCOMMENT] WHERE (([FINCO_FIN_CODE_FK_PK] = @Ori"& _ 
                "ginal_FINCO_FIN_CODE_FK_PK) AND ([FINCO_CDF_COIN_CODE_FK_PK] = @Original_FINCO_C"& _ 
                "DF_COIN_CODE_FK_PK) AND ((@IsNull_FINCO_NUMORD = 1 AND [FINCO_NUMORD] IS NULL) O"& _ 
                "R ([FINCO_NUMORD] = @Original_FINCO_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCO_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINCO_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINCO_FINDCOMMENT] ([FINCO_FIN_CODE_FK_PK], [FINCO_CDF_C"& _ 
                "OIN_CODE_FK_PK], [FINCO_NUMORD]) VALUES (@FINCO_FIN_CODE_FK_PK, @FINCO_CDF_COIN_"& _ 
                "CODE_FK_PK, @FINCO_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCO_FIN_CODE_FK_PK, FINCO_CDF_COIN_CODE_FK"& _ 
                "_PK, FINCO_NUMORD FROM THERIAQUE.FINCO_FINDCOMMENT WHERE (FINCO_CDF_COIN_CODE_FK"& _ 
                "_PK = @FINCO_CDF_COIN_CODE_FK_PK) AND (FINCO_FIN_CODE_FK_PK = @FINCO_FIN_CODE_FK"& _ 
                "_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINCO_FINDCOMMENT] SET [FINCO_FIN_CODE_FK_PK] = @FINCO_FIN_CO"& _ 
                "DE_FK_PK, [FINCO_CDF_COIN_CODE_FK_PK] = @FINCO_CDF_COIN_CODE_FK_PK, [FINCO_NUMOR"& _ 
                "D] = @FINCO_NUMORD WHERE (([FINCO_FIN_CODE_FK_PK] = @Original_FINCO_FIN_CODE_FK_"& _ 
                "PK) AND ([FINCO_CDF_COIN_CODE_FK_PK] = @Original_FINCO_CDF_COIN_CODE_FK_PK) AND "& _ 
                "((@IsNull_FINCO_NUMORD = 1 AND [FINCO_NUMORD] IS NULL) OR ([FINCO_NUMORD] = @Ori"& _ 
                "ginal_FINCO_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINCO_FIN_CODE_FK_PK, FINCO_CDF_COIN_CODE_FK_PK, "& _ 
                "FINCO_NUMORD FROM THERIAQUE.FINCO_FINDCOMMENT WHERE (FINCO_CDF_COIN_CODE_FK_PK ="& _ 
                " @FINCO_CDF_COIN_CODE_FK_PK) AND (FINCO_FIN_CODE_FK_PK = @FINCO_FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCO_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_CDF_COIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FINCO_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINCO_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.THERIAQUE2ConnectionString8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINCO_FIN_CODE_FK_PK, FINCO_CDF_COIN_CODE_FK_PK, FINCO_NUMORD FROM THERIAQ"& _ 
                "UE.FINCO_FINDCOMMENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINCO_FIN_CODE_FK_PK, FINCO_CDF_COIN_CODE_FK_PK, FINCO_NUMORD FROM THERIAQ"& _ 
                "UE.FINCO_FINDCOMMENT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FINCO_FIN_CODE_FK_PK = @FINCO_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINCO_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINCO_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable = New dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable, ByVal FINCO_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCO_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINCO_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINCO_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable = New dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINCO_FINDCOMMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINCO_FINDCOMMENT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINCO_FIN_CODE_FK_PK As Integer, ByVal Original_FINCO_CDF_COIN_CODE_FK_PK As String, ByVal Original_FINCO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINCO_FIN_CODE_FK_PK,Integer)
            If (Original_FINCO_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCO_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINCO_CDF_COIN_CODE_FK_PK,String)
            End If
            If (Original_FINCO_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINCO_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINCO_FIN_CODE_FK_PK As Integer, ByVal FINCO_CDF_COIN_CODE_FK_PK As String, ByVal FINCO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINCO_FIN_CODE_FK_PK,Integer)
            If (FINCO_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCO_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINCO_CDF_COIN_CODE_FK_PK,String)
            End If
            If (FINCO_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINCO_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCO_FIN_CODE_FK_PK As Integer, ByVal FINCO_CDF_COIN_CODE_FK_PK As String, ByVal FINCO_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINCO_FIN_CODE_FK_PK As Integer, ByVal Original_FINCO_CDF_COIN_CODE_FK_PK As String, ByVal Original_FINCO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINCO_FIN_CODE_FK_PK,Integer)
            If (FINCO_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINCO_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINCO_CDF_COIN_CODE_FK_PK,String)
            End If
            If (FINCO_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINCO_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FINCO_FIN_CODE_FK_PK,Integer)
            If (Original_FINCO_CDF_COIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINCO_CDF_COIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINCO_CDF_COIN_CODE_FK_PK,String)
            End If
            If (Original_FINCO_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINCO_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINCO_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FINCO_FIN_CODE_FK_PK As Integer, ByVal Original_FINCO_CDF_COIN_CODE_FK_PK As String, ByVal Original_FINCO_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FINCO_FIN_CODE_FK_PK, Original_FINCO_CDF_COIN_CODE_FK_PK, FINCO_NUMORD, Original_FINCO_FIN_CODE_FK_PK, Original_FINCO_CDF_COIN_CODE_FK_PK, Original_FINCO_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINBIB_REFERENCE_BIBLIOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINBIB_REFERENCE_BIBLIO"
            tableMapping.ColumnMappings.Add("FINBIB_FIN_CODE_FK_PK", "FINBIB_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINBIB_TEXTE", "FINBIB_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINBIB_REFERENCE_BIBLIO] WHERE (([FINBIB_FIN_CODE_FK_PK]"& _ 
                " = @Original_FINBIB_FIN_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINBIB_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINBIB_REFERENCE_BIBLIO] ([FINBIB_FIN_CODE_FK_PK], [FINB"& _ 
                "IB_TEXTE]) VALUES (@FINBIB_FIN_CODE_FK_PK, @FINBIB_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINBIB_FIN_CO"& _ 
                "DE_FK_PK, FINBIB_TEXTE FROM THERIAQUE.FINBIB_REFERENCE_BIBLIO WHERE (FINBIB_FIN_"& _ 
                "CODE_FK_PK = @FINBIB_FIN_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINBIB_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINBIB_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINBIB_REFERENCE_BIBLIO] SET [FINBIB_FIN_CODE_FK_PK] = @FINBI"& _ 
                "B_FIN_CODE_FK_PK, [FINBIB_TEXTE] = @FINBIB_TEXTE WHERE (([FINBIB_FIN_CODE_FK_PK]"& _ 
                " = @Original_FINBIB_FIN_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINBIB_FIN_CODE_FK_PK, FINBIB_TEXT"& _ 
                "E FROM THERIAQUE.FINBIB_REFERENCE_BIBLIO WHERE (FINBIB_FIN_CODE_FK_PK = @FINBIB_"& _ 
                "FIN_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINBIB_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINBIB_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINBIB_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.THERIAQUE2ConnectionString8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINBIB_FIN_CODE_FK_PK, FINBIB_TEXTE FROM THERIAQUE.FINBIB_REFERENCE_BIBLIO"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINBIB_FIN_CODE_FK_PK, FINBIB_TEXTE FROM THERIAQUE.FINBIB_REFERENCE_BIBLIO"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FINBIB_FIN_CODE_FK_PK = @FINBIB_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINBIB_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINBIB_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable = New dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable, ByVal FINBIB_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINBIB_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINBIB_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINBIB_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable = New dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINBIB_REFERENCE_BIBLIODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINBIB_REFERENCE_BIBLIO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINBIB_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINBIB_FIN_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINBIB_FIN_CODE_FK_PK As Integer, ByVal FINBIB_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINBIB_FIN_CODE_FK_PK,Integer)
            If (FINBIB_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINBIB_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINBIB_FIN_CODE_FK_PK As Integer, ByVal FINBIB_TEXTE As String, ByVal Original_FINBIB_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINBIB_FIN_CODE_FK_PK,Integer)
            If (FINBIB_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINBIB_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FINBIB_FIN_CODE_FK_PK,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINBIB_TEXTE As String, ByVal Original_FINBIB_FIN_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FINBIB_FIN_CODE_FK_PK, FINBIB_TEXTE, Original_FINBIB_FIN_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FINAFS_FIN_AFSSAPSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FINAFS_FIN_AFSSAPS"
            tableMapping.ColumnMappings.Add("FINAFS_FIN_CODE_FK_PK", "FINAFS_FIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINAFS_SP_CODE_FK_PK", "FINAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FINAFS_DATE_PK", "FINAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FINAFS_CDF_DOCUMENT_FK_PK", "FINAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FINAFS_FIN_AFSSAPS] WHERE (([FINAFS_FIN_CODE_FK_PK] = @O"& _ 
                "riginal_FINAFS_FIN_CODE_FK_PK) AND ([FINAFS_SP_CODE_FK_PK] = @Original_FINAFS_SP"& _ 
                "_CODE_FK_PK) AND ([FINAFS_DATE_PK] = @Original_FINAFS_DATE_PK) AND ([FINAFS_CDF_"& _ 
                "DOCUMENT_FK_PK] = @Original_FINAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FINAFS_FIN_AFSSAPS] ([FINAFS_FIN_CODE_FK_PK], [FINAFS_SP"& _ 
                "_CODE_FK_PK], [FINAFS_DATE_PK], [FINAFS_CDF_DOCUMENT_FK_PK]) VALUES (@FINAFS_FIN"& _ 
                "_CODE_FK_PK, @FINAFS_SP_CODE_FK_PK, @FINAFS_DATE_PK, @FINAFS_CDF_DOCUMENT_FK_PK)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINAFS_FIN_CODE_FK_PK, FINAFS_SP_CODE_FK_PK, FINAFS_DATE_PK, FINAFS_CD"& _ 
                "F_DOCUMENT_FK_PK FROM THERIAQUE.FINAFS_FIN_AFSSAPS WHERE (FINAFS_CDF_DOCUMENT_FK"& _ 
                "_PK = @FINAFS_CDF_DOCUMENT_FK_PK) AND (FINAFS_DATE_PK = @FINAFS_DATE_PK) AND (FI"& _ 
                "NAFS_FIN_CODE_FK_PK = @FINAFS_FIN_CODE_FK_PK) AND (FINAFS_SP_CODE_FK_PK = @FINAF"& _ 
                "S_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FINAFS_FIN_AFSSAPS] SET [FINAFS_FIN_CODE_FK_PK] = @FINAFS_FIN"& _ 
                "_CODE_FK_PK, [FINAFS_SP_CODE_FK_PK] = @FINAFS_SP_CODE_FK_PK, [FINAFS_DATE_PK] = "& _ 
                "@FINAFS_DATE_PK, [FINAFS_CDF_DOCUMENT_FK_PK] = @FINAFS_CDF_DOCUMENT_FK_PK WHERE "& _ 
                "(([FINAFS_FIN_CODE_FK_PK] = @Original_FINAFS_FIN_CODE_FK_PK) AND ([FINAFS_SP_COD"& _ 
                "E_FK_PK] = @Original_FINAFS_SP_CODE_FK_PK) AND ([FINAFS_DATE_PK] = @Original_FIN"& _ 
                "AFS_DATE_PK) AND ([FINAFS_CDF_DOCUMENT_FK_PK] = @Original_FINAFS_CDF_DOCUMENT_FK"& _ 
                "_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FINAFS_FIN_CODE_FK_PK, FINAFS_SP_CODE_FK_PK, FINAFS_DATE_PK, FINA"& _ 
                "FS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FINAFS_FIN_AFSSAPS WHERE (FINAFS_CDF_DOCUME"& _ 
                "NT_FK_PK = @FINAFS_CDF_DOCUMENT_FK_PK) AND (FINAFS_DATE_PK = @FINAFS_DATE_PK) AN"& _ 
                "D (FINAFS_FIN_CODE_FK_PK = @FINAFS_FIN_CODE_FK_PK) AND (FINAFS_SP_CODE_FK_PK = @"& _ 
                "FINAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.THERIAQUE2ConnectionString8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FINAFS_FIN_CODE_FK_PK, FINAFS_SP_CODE_FK_PK, FINAFS_DATE_PK, FINAFS_CDF_DO"& _ 
                "CUMENT_FK_PK FROM THERIAQUE.FINAFS_FIN_AFSSAPS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FINAFS_FIN_CODE_FK_PK, FINAFS_SP_CODE_FK_PK, FINAFS_DATE_PK, FINAFS_CDF_DO"& _ 
                "CUMENT_FK_PK FROM THERIAQUE.FINAFS_FIN_AFSSAPS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where FINAFS_FIN_CODE_FK_PK = @F"& _ 
                "INAFS_FIN_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FINAFS_FIN_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FINAFS_FIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable = New dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable, ByVal FINAFS_FIN_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINAFS_FIN_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FINAFS_FIN_CODE_FK_PK As Integer) As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FINAFS_FIN_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable = New dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FINAFS_FIN_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FINAFS_FIN_AFSSAPS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FINAFS_FIN_CODE_FK_PK As Integer, ByVal Original_FINAFS_SP_CODE_FK_PK As Integer, ByVal Original_FINAFS_DATE_PK As Date, ByVal Original_FINAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FINAFS_FIN_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FINAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FINAFS_DATE_PK,Date)
            If (Original_FINAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FINAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FINAFS_FIN_CODE_FK_PK As Integer, ByVal FINAFS_SP_CODE_FK_PK As Integer, ByVal FINAFS_DATE_PK As Date, ByVal FINAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FINAFS_FIN_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FINAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FINAFS_DATE_PK,Date)
            If (FINAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FINAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FINAFS_FIN_CODE_FK_PK As Integer, ByVal FINAFS_SP_CODE_FK_PK As Integer, ByVal FINAFS_DATE_PK As Date, ByVal FINAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FINAFS_FIN_CODE_FK_PK As Integer, ByVal Original_FINAFS_SP_CODE_FK_PK As Integer, ByVal Original_FINAFS_DATE_PK As Date, ByVal Original_FINAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FINAFS_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FINAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FINAFS_DATE_PK,Date)
            If (FINAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FINAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FINAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FINAFS_FIN_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FINAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FINAFS_DATE_PK,Date)
            If (Original_FINAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FINAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FINAFS_CDF_DOCUMENT_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FINAFS_FIN_CODE_FK_PK As Integer, ByVal Original_FINAFS_SP_CODE_FK_PK As Integer, ByVal Original_FINAFS_DATE_PK As Date, ByVal Original_FINAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Return Me.Update(Original_FINAFS_FIN_CODE_FK_PK, Original_FINAFS_SP_CODE_FK_PK, Original_FINAFS_DATE_PK, Original_FINAFS_CDF_DOCUMENT_FK_PK, Original_FINAFS_FIN_CODE_FK_PK, Original_FINAFS_SP_CODE_FK_PK, Original_FINAFS_DATE_PK, Original_FINAFS_CDF_DOCUMENT_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPAFS_SPECIALITE_AFSSAPSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPAFS_SPECIALITE_AFSSAPS"
            tableMapping.ColumnMappings.Add("SPAFS_RUBCDF_NUMERO_PK", "SPAFS_RUBCDF_NUMERO_PK")
            tableMapping.ColumnMappings.Add("SPAFS_SP_CODE_FK_PK", "SPAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPAFS_DATE_PK", "SPAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("SPAFS_CDF_CODE_DOC_FK_PK", "SPAFS_CDF_CODE_DOC_FK_PK")
            tableMapping.ColumnMappings.Add("SPAFS_DATE_REVIS", "SPAFS_DATE_REVIS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPAFS_SPECIALITE_AFSSAPS] WHERE (([SPAFS_RUBCDF_NUMERO_P"& _ 
                "K] = @Original_SPAFS_RUBCDF_NUMERO_PK) AND ([SPAFS_SP_CODE_FK_PK] = @Original_SP"& _ 
                "AFS_SP_CODE_FK_PK) AND ([SPAFS_DATE_PK] = @Original_SPAFS_DATE_PK) AND ([SPAFS_C"& _ 
                "DF_CODE_DOC_FK_PK] = @Original_SPAFS_CDF_CODE_DOC_FK_PK) AND ((@IsNull_SPAFS_DAT"& _ 
                "E_REVIS = 1 AND [SPAFS_DATE_REVIS] IS NULL) OR ([SPAFS_DATE_REVIS] = @Original_S"& _ 
                "PAFS_DATE_REVIS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPAFS_DATE_REVIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_REVIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_DATE_REVIS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_REVIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPAFS_SPECIALITE_AFSSAPS] ([SPAFS_RUBCDF_NUMERO_PK], [SP"& _ 
                "AFS_SP_CODE_FK_PK], [SPAFS_DATE_PK], [SPAFS_CDF_CODE_DOC_FK_PK], [SPAFS_DATE_REV"& _ 
                "IS]) VALUES (@SPAFS_RUBCDF_NUMERO_PK, @SPAFS_SP_CODE_FK_PK, @SPAFS_DATE_PK, @SPA"& _ 
                "FS_CDF_CODE_DOC_FK_PK, @SPAFS_DATE_REVIS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPAFS_RUBCDF_NUMERO_PK, SPAFS"& _ 
                "_SP_CODE_FK_PK, SPAFS_DATE_PK, SPAFS_CDF_CODE_DOC_FK_PK, SPAFS_DATE_REVIS FROM T"& _ 
                "HERIAQUE.SPAFS_SPECIALITE_AFSSAPS WHERE (SPAFS_CDF_CODE_DOC_FK_PK = @SPAFS_CDF_C"& _ 
                "ODE_DOC_FK_PK) AND (SPAFS_DATE_PK = @SPAFS_DATE_PK) AND (SPAFS_RUBCDF_NUMERO_PK "& _ 
                "= @SPAFS_RUBCDF_NUMERO_PK) AND (SPAFS_SP_CODE_FK_PK = @SPAFS_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_DATE_REVIS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_REVIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPAFS_SPECIALITE_AFSSAPS] SET [SPAFS_RUBCDF_NUMERO_PK] = @SPA"& _ 
                "FS_RUBCDF_NUMERO_PK, [SPAFS_SP_CODE_FK_PK] = @SPAFS_SP_CODE_FK_PK, [SPAFS_DATE_P"& _ 
                "K] = @SPAFS_DATE_PK, [SPAFS_CDF_CODE_DOC_FK_PK] = @SPAFS_CDF_CODE_DOC_FK_PK, [SP"& _ 
                "AFS_DATE_REVIS] = @SPAFS_DATE_REVIS WHERE (([SPAFS_RUBCDF_NUMERO_PK] = @Original"& _ 
                "_SPAFS_RUBCDF_NUMERO_PK) AND ([SPAFS_SP_CODE_FK_PK] = @Original_SPAFS_SP_CODE_FK"& _ 
                "_PK) AND ([SPAFS_DATE_PK] = @Original_SPAFS_DATE_PK) AND ([SPAFS_CDF_CODE_DOC_FK"& _ 
                "_PK] = @Original_SPAFS_CDF_CODE_DOC_FK_PK) AND ((@IsNull_SPAFS_DATE_REVIS = 1 AN"& _ 
                "D [SPAFS_DATE_REVIS] IS NULL) OR ([SPAFS_DATE_REVIS] = @Original_SPAFS_DATE_REVI"& _ 
                "S)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPAFS_RUBCDF_NUMERO_PK, SPAFS_SP_CODE_FK_PK, SPAFS_DATE_PK, SPAFS_"& _ 
                "CDF_CODE_DOC_FK_PK, SPAFS_DATE_REVIS FROM THERIAQUE.SPAFS_SPECIALITE_AFSSAPS WHE"& _ 
                "RE (SPAFS_CDF_CODE_DOC_FK_PK = @SPAFS_CDF_CODE_DOC_FK_PK) AND (SPAFS_DATE_PK = @"& _ 
                "SPAFS_DATE_PK) AND (SPAFS_RUBCDF_NUMERO_PK = @SPAFS_RUBCDF_NUMERO_PK) AND (SPAFS"& _ 
                "_SP_CODE_FK_PK = @SPAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SPAFS_DATE_REVIS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_REVIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_RUBCDF_NUMERO_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_CDF_CODE_DOC_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SPAFS_DATE_REVIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_REVIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SPAFS_DATE_REVIS", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SPAFS_DATE_REVIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.MySettings.Default.THERIAQUE2ConnectionString8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPAFS_RUBCDF_NUMERO_PK, SPAFS_SP_CODE_FK_PK, SPAFS_DATE_PK, SPAFS_CDF_CODE"& _ 
                "_DOC_FK_PK, SPAFS_DATE_REVIS FROM THERIAQUE.SPAFS_SPECIALITE_AFSSAPS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.SPAFS_SPECIALITE_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.SPAFS_SPECIALITE_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.SPAFS_SPECIALITE_AFSSAPSDataTable = New dsTheriaque_Indication.SPAFS_SPECIALITE_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.SPAFS_SPECIALITE_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "SPAFS_SPECIALITE_AFSSAPS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SPAFS_RUBCDF_NUMERO_PK As String, ByVal Original_SPAFS_SP_CODE_FK_PK As Integer, ByVal Original_SPAFS_DATE_PK As Date, ByVal Original_SPAFS_CDF_CODE_DOC_FK_PK As String, ByVal Original_SPAFS_DATE_REVIS As Global.System.Nullable(Of Date)) As Integer
            If (Original_SPAFS_RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPAFS_RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPAFS_RUBCDF_NUMERO_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPAFS_DATE_PK,Date)
            If (Original_SPAFS_CDF_CODE_DOC_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPAFS_CDF_CODE_DOC_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPAFS_CDF_CODE_DOC_FK_PK,String)
            End If
            If (Original_SPAFS_DATE_REVIS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SPAFS_DATE_REVIS.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SPAFS_RUBCDF_NUMERO_PK As String, ByVal SPAFS_SP_CODE_FK_PK As Integer, ByVal SPAFS_DATE_PK As Date, ByVal SPAFS_CDF_CODE_DOC_FK_PK As String, ByVal SPAFS_DATE_REVIS As Global.System.Nullable(Of Date)) As Integer
            If (SPAFS_RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPAFS_RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPAFS_RUBCDF_NUMERO_PK,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPAFS_DATE_PK,Date)
            If (SPAFS_CDF_CODE_DOC_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPAFS_CDF_CODE_DOC_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPAFS_CDF_CODE_DOC_FK_PK,String)
            End If
            If (SPAFS_DATE_REVIS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPAFS_DATE_REVIS.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPAFS_RUBCDF_NUMERO_PK As String, ByVal SPAFS_SP_CODE_FK_PK As Integer, ByVal SPAFS_DATE_PK As Date, ByVal SPAFS_CDF_CODE_DOC_FK_PK As String, ByVal SPAFS_DATE_REVIS As Global.System.Nullable(Of Date), ByVal Original_SPAFS_RUBCDF_NUMERO_PK As String, ByVal Original_SPAFS_SP_CODE_FK_PK As Integer, ByVal Original_SPAFS_DATE_PK As Date, ByVal Original_SPAFS_CDF_CODE_DOC_FK_PK As String, ByVal Original_SPAFS_DATE_REVIS As Global.System.Nullable(Of Date)) As Integer
            If (SPAFS_RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPAFS_RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPAFS_RUBCDF_NUMERO_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPAFS_DATE_PK,Date)
            If (SPAFS_CDF_CODE_DOC_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SPAFS_CDF_CODE_DOC_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPAFS_CDF_CODE_DOC_FK_PK,String)
            End If
            If (SPAFS_DATE_REVIS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPAFS_DATE_REVIS.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_SPAFS_RUBCDF_NUMERO_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPAFS_RUBCDF_NUMERO_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPAFS_RUBCDF_NUMERO_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPAFS_SP_CODE_FK_PK,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SPAFS_DATE_PK,Date)
            If (Original_SPAFS_CDF_CODE_DOC_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SPAFS_CDF_CODE_DOC_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPAFS_CDF_CODE_DOC_FK_PK,String)
            End If
            If (Original_SPAFS_DATE_REVIS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SPAFS_DATE_REVIS.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPAFS_DATE_REVIS As Global.System.Nullable(Of Date), ByVal Original_SPAFS_RUBCDF_NUMERO_PK As String, ByVal Original_SPAFS_SP_CODE_FK_PK As Integer, ByVal Original_SPAFS_DATE_PK As Date, ByVal Original_SPAFS_CDF_CODE_DOC_FK_PK As String, ByVal Original_SPAFS_DATE_REVIS As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_SPAFS_RUBCDF_NUMERO_PK, Original_SPAFS_SP_CODE_FK_PK, Original_SPAFS_DATE_PK, Original_SPAFS_CDF_CODE_DOC_FK_PK, SPAFS_DATE_REVIS, Original_SPAFS_RUBCDF_NUMERO_PK, Original_SPAFS_SP_CODE_FK_PK, Original_SPAFS_DATE_PK, Original_SPAFS_CDF_CODE_DOC_FK_PK, Original_SPAFS_DATE_REVIS)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FIN_FICHEINDICTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FIN_FICHEINDIC"
            tableMapping.ColumnMappings.Add("FIN_CODE_SQ_PK", "FIN_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FIN_CDF_NAIN_CODE_FK_PK", "FIN_CDF_NAIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FIN_CDF_NVIN_CODE_FK_PK", "FIN_CDF_NVIN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FIN_TEXTE", "FIN_TEXTE")
            tableMapping.ColumnMappings.Add("FIN_DATECR", "FIN_DATECR")
            tableMapping.ColumnMappings.Add("FIN_DATEMJ", "FIN_DATEMJ")
            tableMapping.ColumnMappings.Add("FIN_CDF_T2A_CODE_FK_PK", "FIN_CDF_T2A_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [theriaque].[FIN_FICHEINDIC] WHERE (([FIN_CODE_SQ_PK] = @Original_FIN"& _ 
                "_CODE_SQ_PK) AND ([FIN_CDF_NAIN_CODE_FK_PK] = @Original_FIN_CDF_NAIN_CODE_FK_PK)"& _ 
                " AND ([FIN_CDF_NVIN_CODE_FK_PK] = @Original_FIN_CDF_NVIN_CODE_FK_PK) AND ([FIN_D"& _ 
                "ATECR] = @Original_FIN_DATECR) AND ((@IsNull_FIN_DATEMJ = 1 AND [FIN_DATEMJ] IS "& _ 
                "NULL) OR ([FIN_DATEMJ] = @Original_FIN_DATEMJ)) AND ((@IsNull_FIN_CDF_T2A_CODE_F"& _ 
                "K_PK = 1 AND [FIN_CDF_T2A_CODE_FK_PK] IS NULL) OR ([FIN_CDF_T2A_CODE_FK_PK] = @O"& _ 
                "riginal_FIN_CDF_T2A_CODE_FK_PK)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIN_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [theriaque].[FIN_FICHEINDIC] ([FIN_CODE_SQ_PK], [FIN_CDF_NAIN_CODE_FK"& _ 
                "_PK], [FIN_CDF_NVIN_CODE_FK_PK], [FIN_TEXTE], [FIN_DATECR], [FIN_DATEMJ], [FIN_C"& _ 
                "DF_T2A_CODE_FK_PK]) VALUES (@FIN_CODE_SQ_PK, @FIN_CDF_NAIN_CODE_FK_PK, @FIN_CDF_"& _ 
                "NVIN_CODE_FK_PK, @FIN_TEXTE, @FIN_DATECR, @FIN_DATEMJ, @FIN_CDF_T2A_CODE_FK_PK);"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_T"& _ 
                "EXTE, FIN_DATECR, FIN_DATEMJ, FIN_CDF_T2A_CODE_FK_PK FROM theriaque.FIN_FICHEIND"& _ 
                "IC WHERE (FIN_CODE_SQ_PK = @FIN_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_TEXTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [theriaque].[FIN_FICHEINDIC] SET [FIN_CODE_SQ_PK] = @FIN_CODE_SQ_PK, [FIN_"& _ 
                "CDF_NAIN_CODE_FK_PK] = @FIN_CDF_NAIN_CODE_FK_PK, [FIN_CDF_NVIN_CODE_FK_PK] = @FI"& _ 
                "N_CDF_NVIN_CODE_FK_PK, [FIN_TEXTE] = @FIN_TEXTE, [FIN_DATECR] = @FIN_DATECR, [FI"& _ 
                "N_DATEMJ] = @FIN_DATEMJ, [FIN_CDF_T2A_CODE_FK_PK] = @FIN_CDF_T2A_CODE_FK_PK WHER"& _ 
                "E (([FIN_CODE_SQ_PK] = @Original_FIN_CODE_SQ_PK) AND ([FIN_CDF_NAIN_CODE_FK_PK] "& _ 
                "= @Original_FIN_CDF_NAIN_CODE_FK_PK) AND ([FIN_CDF_NVIN_CODE_FK_PK] = @Original_"& _ 
                "FIN_CDF_NVIN_CODE_FK_PK) AND ([FIN_DATECR] = @Original_FIN_DATECR) AND ((@IsNull"& _ 
                "_FIN_DATEMJ = 1 AND [FIN_DATEMJ] IS NULL) OR ([FIN_DATEMJ] = @Original_FIN_DATEM"& _ 
                "J)) AND ((@IsNull_FIN_CDF_T2A_CODE_FK_PK = 1 AND [FIN_CDF_T2A_CODE_FK_PK] IS NUL"& _ 
                "L) OR ([FIN_CDF_T2A_CODE_FK_PK] = @Original_FIN_CDF_T2A_CODE_FK_PK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT F"& _ 
                "IN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_"& _ 
                "DATECR, FIN_DATEMJ, FIN_CDF_T2A_CODE_FK_PK FROM theriaque.FIN_FICHEINDIC WHERE ("& _ 
                "FIN_CODE_SQ_PK = @FIN_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_TEXTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NAIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_NVIN_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIN_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CDF_T2A_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXT"& _ 
                "E, FIN_DATECR, FIN_DATEMJ, FIN_CDF_T2A_CODE_FK_PK FROM theriaque.FIN_FICHEINDIC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXT"& _ 
                "E, FIN_DATECR, FIN_DATEMJ, FIN_CDF_T2A_CODE_FK_PK FROM theriaque.FIN_FICHEINDIC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FIN_CODE_SQ_PK=@FIN_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIN_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FIN_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Indication.FIN_FICHEINDICDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Indication.FIN_FICHEINDICDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Indication.FIN_FICHEINDICDataTable = New dsTheriaque_Indication.FIN_FICHEINDICDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Indication.FIN_FICHEINDICDataTable, ByVal FIN_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FIN_CODE_SQ_PK As Integer) As dsTheriaque_Indication.FIN_FICHEINDICDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Indication.FIN_FICHEINDICDataTable = New dsTheriaque_Indication.FIN_FICHEINDICDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Indication.FIN_FICHEINDICDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Indication) As Integer
            Return Me.Adapter.Update(dataSet, "FIN_FICHEINDIC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FIN_CODE_SQ_PK As Integer, ByVal Original_FIN_CDF_NAIN_CODE_FK_PK As String, ByVal Original_FIN_CDF_NVIN_CODE_FK_PK As String, ByVal Original_FIN_DATECR As Date, ByVal Original_FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIN_CDF_T2A_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FIN_CODE_SQ_PK,Integer)
            If (Original_FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FIN_CDF_NAIN_CODE_FK_PK,String)
            End If
            If (Original_FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FIN_CDF_NVIN_CODE_FK_PK,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FIN_DATECR,Date)
            If (Original_FIN_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FIN_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_FIN_CDF_T2A_CODE_FK_PK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FIN_CDF_T2A_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FIN_CODE_SQ_PK As Integer, ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal FIN_CDF_T2A_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK,Integer)
            If (FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FIN_CDF_NAIN_CODE_FK_PK,String)
            End If
            If (FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FIN_CDF_NVIN_CODE_FK_PK,String)
            End If
            If (FIN_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FIN_TEXTE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FIN_DATECR,Date)
            If (FIN_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FIN_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FIN_CDF_T2A_CODE_FK_PK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FIN_CDF_T2A_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FIN_CODE_SQ_PK As Integer, ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal FIN_CDF_T2A_CODE_FK_PK As String, ByVal Original_FIN_CODE_SQ_PK As Integer, ByVal Original_FIN_CDF_NAIN_CODE_FK_PK As String, ByVal Original_FIN_CDF_NVIN_CODE_FK_PK As String, ByVal Original_FIN_DATECR As Date, ByVal Original_FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIN_CDF_T2A_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FIN_CODE_SQ_PK,Integer)
            If (FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FIN_CDF_NAIN_CODE_FK_PK,String)
            End If
            If (FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FIN_CDF_NVIN_CODE_FK_PK,String)
            End If
            If (FIN_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FIN_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FIN_DATECR,Date)
            If (FIN_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FIN_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FIN_CDF_T2A_CODE_FK_PK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FIN_CDF_T2A_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FIN_CODE_SQ_PK,Integer)
            If (Original_FIN_CDF_NAIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NAIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FIN_CDF_NAIN_CODE_FK_PK,String)
            End If
            If (Original_FIN_CDF_NVIN_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIN_CDF_NVIN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FIN_CDF_NVIN_CODE_FK_PK,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FIN_DATECR,Date)
            If (Original_FIN_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FIN_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_FIN_CDF_T2A_CODE_FK_PK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FIN_CDF_T2A_CODE_FK_PK,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FIN_CDF_NAIN_CODE_FK_PK As String, ByVal FIN_CDF_NVIN_CODE_FK_PK As String, ByVal FIN_TEXTE As String, ByVal FIN_DATECR As Date, ByVal FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal FIN_CDF_T2A_CODE_FK_PK As String, ByVal Original_FIN_CODE_SQ_PK As Integer, ByVal Original_FIN_CDF_NAIN_CODE_FK_PK As String, ByVal Original_FIN_CDF_NVIN_CODE_FK_PK As String, ByVal Original_FIN_DATECR As Date, ByVal Original_FIN_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIN_CDF_T2A_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FIN_CODE_SQ_PK, FIN_CDF_NAIN_CODE_FK_PK, FIN_CDF_NVIN_CODE_FK_PK, FIN_TEXTE, FIN_DATECR, FIN_DATEMJ, FIN_CDF_T2A_CODE_FK_PK, Original_FIN_CODE_SQ_PK, Original_FIN_CDF_NAIN_CODE_FK_PK, Original_FIN_CDF_NVIN_CODE_FK_PK, Original_FIN_DATECR, Original_FIN_DATEMJ, Original_FIN_CDF_T2A_CODE_FK_PK)
        End Function
    End Class
End Namespace
