'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.42
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Recap"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Recap
    Inherits System.Data.DataSet
    
    Private tableSPCPD_SPE_CDT_PRESCR As SPCPD_SPE_CDT_PRESCRDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SPCPD_SPE_CDT_PRESCR")) Is Nothing) Then
                MyBase.Tables.Add(New SPCPD_SPE_CDT_PRESCRDataTable(ds.Tables("SPCPD_SPE_CDT_PRESCR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPCPD_SPE_CDT_PRESCR() As SPCPD_SPE_CDT_PRESCRDataTable
        Get
            Return Me.tableSPCPD_SPE_CDT_PRESCR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Recap = CType(MyBase.Clone,dsTheriaque_Recap)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SPCPD_SPE_CDT_PRESCR")) Is Nothing) Then
                MyBase.Tables.Add(New SPCPD_SPE_CDT_PRESCRDataTable(ds.Tables("SPCPD_SPE_CDT_PRESCR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSPCPD_SPE_CDT_PRESCR = CType(MyBase.Tables("SPCPD_SPE_CDT_PRESCR"),SPCPD_SPE_CDT_PRESCRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPCPD_SPE_CDT_PRESCR) Is Nothing) Then
                Me.tableSPCPD_SPE_CDT_PRESCR.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Recap"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Recap.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSPCPD_SPE_CDT_PRESCR = New SPCPD_SPE_CDT_PRESCRDataTable
        MyBase.Tables.Add(Me.tableSPCPD_SPE_CDT_PRESCR)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPCPD_SPE_CDT_PRESCR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Recap = New dsTheriaque_Recap
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub SPCPD_SPE_CDT_PRESCRRowChangeEventHandler(ByVal sender As Object, ByVal e As SPCPD_SPE_CDT_PRESCRRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPCPD_SPE_CDT_PRESCRDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPCPD_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCPD_CDF_STP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCPD_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPCPD_SPE_CDT_PRESCR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPD_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPD_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPD_CDF_STP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPD_CDF_STP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPD_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPD_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPCPD_SPE_CDT_PRESCRRow
            Get
                Return CType(Me.Rows(index),SPCPD_SPE_CDT_PRESCRRow)
            End Get
        End Property
        
        Public Event SPCPD_SPE_CDT_PRESCRRowChanging As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        Public Event SPCPD_SPE_CDT_PRESCRRowChanged As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        Public Event SPCPD_SPE_CDT_PRESCRRowDeleting As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        Public Event SPCPD_SPE_CDT_PRESCRRowDeleted As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPCPD_SPE_CDT_PRESCRRow(ByVal row As SPCPD_SPE_CDT_PRESCRRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPCPD_SPE_CDT_PRESCRRow(ByVal SPCPD_SP_CODE_FK_PK As Integer, ByVal SPCPD_CDF_STP_CODE_FK_PK As String, ByVal SPCPD_NUMORD As Short) As SPCPD_SPE_CDT_PRESCRRow
            Dim rowSPCPD_SPE_CDT_PRESCRRow As SPCPD_SPE_CDT_PRESCRRow = CType(Me.NewRow,SPCPD_SPE_CDT_PRESCRRow)
            rowSPCPD_SPE_CDT_PRESCRRow.ItemArray = New Object() {SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_NUMORD}
            Me.Rows.Add(rowSPCPD_SPE_CDT_PRESCRRow)
            Return rowSPCPD_SPE_CDT_PRESCRRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPCPD_SP_CODE_FK_PKSPCPD_CDF_STP_CODE_FK_PK(ByVal SPCPD_SP_CODE_FK_PK As Integer, ByVal SPCPD_CDF_STP_CODE_FK_PK As String) As SPCPD_SPE_CDT_PRESCRRow
            Return CType(Me.Rows.Find(New Object() {SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK}),SPCPD_SPE_CDT_PRESCRRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPCPD_SPE_CDT_PRESCRDataTable = CType(MyBase.Clone,SPCPD_SPE_CDT_PRESCRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPCPD_SPE_CDT_PRESCRDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPCPD_SP_CODE_FK_PK = MyBase.Columns("SPCPD_SP_CODE_FK_PK")
            Me.columnSPCPD_CDF_STP_CODE_FK_PK = MyBase.Columns("SPCPD_CDF_STP_CODE_FK_PK")
            Me.columnSPCPD_NUMORD = MyBase.Columns("SPCPD_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPCPD_SP_CODE_FK_PK = New System.Data.DataColumn("SPCPD_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPD_SP_CODE_FK_PK)
            Me.columnSPCPD_CDF_STP_CODE_FK_PK = New System.Data.DataColumn("SPCPD_CDF_STP_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPD_CDF_STP_CODE_FK_PK)
            Me.columnSPCPD_NUMORD = New System.Data.DataColumn("SPCPD_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPD_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPCPD_SP_CODE_FK_PK, Me.columnSPCPD_CDF_STP_CODE_FK_PK}, true))
            Me.columnSPCPD_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCPD_CDF_STP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCPD_CDF_STP_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPCPD_SPE_CDT_PRESCRRow() As SPCPD_SPE_CDT_PRESCRRow
            Return CType(Me.NewRow,SPCPD_SPE_CDT_PRESCRRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPCPD_SPE_CDT_PRESCRRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPCPD_SPE_CDT_PRESCRRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowChangedEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowChanged(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowChangingEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowChanging(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowDeleted(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowDeleting(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPCPD_SPE_CDT_PRESCRRow(ByVal row As SPCPD_SPE_CDT_PRESCRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Recap = New dsTheriaque_Recap
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPCPD_SPE_CDT_PRESCRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPCPD_SPE_CDT_PRESCRRow
        Inherits System.Data.DataRow
        
        Private tableSPCPD_SPE_CDT_PRESCR As SPCPD_SPE_CDT_PRESCRDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPCPD_SPE_CDT_PRESCR = CType(Me.Table,SPCPD_SPE_CDT_PRESCRDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPD_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPD_CDF_STP_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_CDF_STP_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_CDF_STP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPD_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPCPD_NUMORD' dans la table 'SPCPD_SPE_CDT_PRESCR' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPCPD_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPCPD_NUMORDNull()
            Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPCPD_SPE_CDT_PRESCRRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPCPD_SPE_CDT_PRESCRRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPCPD_SPE_CDT_PRESCRRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPCPD_SPE_CDT_PRESCRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_RecapTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPCPD_SPE_CDT_PRESCRTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPCPD_SPE_CDT_PRESCR"
            tableMapping.ColumnMappings.Add("SPCPD_SP_CODE_FK_PK", "SPCPD_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCPD_CDF_STP_CODE_FK_PK", "SPCPD_CDF_STP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCPD_NUMORD", "SPCPD_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPCPD_SPE_CDT_PRESCR] WHERE (([SPCPD_SP_CODE_FK_PK] = @O"& _ 
                "riginal_SPCPD_SP_CODE_FK_PK) AND ([SPCPD_CDF_STP_CODE_FK_PK] = @Original_SPCPD_C"& _ 
                "DF_STP_CODE_FK_PK) AND ((@IsNull_SPCPD_NUMORD = 1 AND [SPCPD_NUMORD] IS NULL) OR"& _ 
                " ([SPCPD_NUMORD] = @Original_SPCPD_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPD_CDF_STP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_CDF_STP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPCPD_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPCPD_SPE_CDT_PRESCR] ([SPCPD_SP_CODE_FK_PK], [SPCPD_CDF"& _ 
                "_STP_CODE_FK_PK], [SPCPD_NUMORD]) VALUES (@SPCPD_SP_CODE_FK_PK, @SPCPD_CDF_STP_C"& _ 
                "ODE_FK_PK, @SPCPD_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK"& _ 
                ", SPCPD_NUMORD FROM THERIAQUE.SPCPD_SPE_CDT_PRESCR WHERE (SPCPD_CDF_STP_CODE_FK_"& _ 
                "PK = @SPCPD_CDF_STP_CODE_FK_PK) AND (SPCPD_SP_CODE_FK_PK = @SPCPD_SP_CODE_FK_PK)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_CDF_STP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_CDF_STP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPCPD_SPE_CDT_PRESCR] SET [SPCPD_SP_CODE_FK_PK] = @SPCPD_SP_C"& _ 
                "ODE_FK_PK, [SPCPD_CDF_STP_CODE_FK_PK] = @SPCPD_CDF_STP_CODE_FK_PK, [SPCPD_NUMORD"& _ 
                "] = @SPCPD_NUMORD WHERE (([SPCPD_SP_CODE_FK_PK] = @Original_SPCPD_SP_CODE_FK_PK)"& _ 
                " AND ([SPCPD_CDF_STP_CODE_FK_PK] = @Original_SPCPD_CDF_STP_CODE_FK_PK) AND ((@Is"& _ 
                "Null_SPCPD_NUMORD = 1 AND [SPCPD_NUMORD] IS NULL) OR ([SPCPD_NUMORD] = @Original"& _ 
                "_SPCPD_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_N"& _ 
                "UMORD FROM THERIAQUE.SPCPD_SPE_CDT_PRESCR WHERE (SPCPD_CDF_STP_CODE_FK_PK = @SPC"& _ 
                "PD_CDF_STP_CODE_FK_PK) AND (SPCPD_SP_CODE_FK_PK = @SPCPD_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_CDF_STP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_CDF_STP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPD_CDF_STP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_CDF_STP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPCPD_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_NUMORD FROM THERIAQUE"& _ 
                ".SPCPD_SPE_CDT_PRESCR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_NUMORD FROM THERIAQUE"& _ 
                ".SPCPD_SPE_CDT_PRESCR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where SPCPD_SP_CODE_FK_PK = @SPCPD_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable = New dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable, ByVal SPCPD_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal SPCPD_SP_CODE_FK_PK As Integer) As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK,Integer)
            Dim dataTable As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable = New dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Recap.SPCPD_SPE_CDT_PRESCRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Recap) As Integer
            Return Me.Adapter.Update(dataSet, "SPCPD_SPE_CDT_PRESCR")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SPCPD_SP_CODE_FK_PK As Integer, ByVal Original_SPCPD_CDF_STP_CODE_FK_PK As String, ByVal Original_SPCPD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPCPD_SP_CODE_FK_PK,Integer)
            If (Original_SPCPD_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPCPD_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPCPD_CDF_STP_CODE_FK_PK,String)
            End If
            If (Original_SPCPD_NUMORD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPCPD_NUMORD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SPCPD_SP_CODE_FK_PK As Integer, ByVal SPCPD_CDF_STP_CODE_FK_PK As String, ByVal SPCPD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK,Integer)
            If (SPCPD_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPCPD_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPCPD_CDF_STP_CODE_FK_PK,String)
            End If
            If (SPCPD_NUMORD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPCPD_NUMORD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SPCPD_SP_CODE_FK_PK As Integer, ByVal SPCPD_CDF_STP_CODE_FK_PK As String, ByVal SPCPD_NUMORD As System.Nullable(Of Short), ByVal Original_SPCPD_SP_CODE_FK_PK As Integer, ByVal Original_SPCPD_CDF_STP_CODE_FK_PK As String, ByVal Original_SPCPD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK,Integer)
            If (SPCPD_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPCPD_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPCPD_CDF_STP_CODE_FK_PK,String)
            End If
            If (SPCPD_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPCPD_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPCPD_SP_CODE_FK_PK,Integer)
            If (Original_SPCPD_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPCPD_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPCPD_CDF_STP_CODE_FK_PK,String)
            End If
            If (Original_SPCPD_NUMORD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPCPD_NUMORD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
