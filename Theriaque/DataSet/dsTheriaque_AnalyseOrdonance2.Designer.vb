'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_AnalyseOrdonance2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_AnalyseOrdonance2
    Inherits Global.System.Data.DataSet
    
    Private tableFIC_INCOMPATIBILITE As FIC_INCOMPATIBILITEDataTable
    
    Private tableIC1SAC_TERME1SUBACT As IC1SAC_TERME1SUBACTDataTable
    
    Private tableIC1SAU_TERME1SUBAUX As IC1SAU_TERME1SUBAUXDataTable
    
    Private tableIC1PR_TERME1PRODUIT As IC1PR_TERME1PRODUITDataTable
    
    Private tableIC1SP_TERME1SPECIALITE As IC1SP_TERME1SPECIALITEDataTable
    
    Private tableIC2SAC_TERME2SUBACT As IC2SAC_TERME2SUBACTDataTable
    
    Private tableIC2SAU_TERME2SUBAUX As IC2SAU_TERME2SUBAUXDataTable
    
    Private tableIC2PR_TERME2PRODUIT As IC2PR_TERME2PRODUITDataTable
    
    Private tableIC2SP_TERME2SPECIALITE As IC2SP_TERME2SPECIALITEDataTable
    
    Private tableICSOL_INCOMPATIBILITE_SOLUTION As ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
    
    Private tableICCT1_CONCENTRATION1 As ICCT1_CONCENTRATION1DataTable
    
    Private tableIC1VE_INCOMPATIBILITE_VECTEUR1 As IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
    
    Private tableICCT2_CONCENTRATION2 As ICCT2_CONCENTRATION2DataTable
    
    Private tableIC2VE_INCOMPATIBILITE_VECTEUR2 As IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
    
    Private tableICMA_INCOMPATIBILITE_MATERIAU As ICMA_INCOMPATIBILITE_MATERIAUDataTable
    
    Private tableICCO_INCOMPATIBILITE_CONTENANT As ICCO_INCOMPATIBILITE_CONTENANTDataTable
    
    Private tableICNA_INCOMPATIBILITE_NATURE As ICNA_INCOMPATIBILITE_NATUREDataTable
    
    Private tableICDUR_INCOMPATIBILITE_DUREE As ICDUR_INCOMPATIBILITE_DUREEDataTable
    
    Private tableICTMP_INCOMPA_TEMPERATURE As ICTMP_INCOMPA_TEMPERATUREDataTable
    
    Private tableICLUM_INCOMPATIBILITE_LUMIERE As ICLUM_INCOMPATIBILITE_LUMIEREDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FIC_INCOMPATIBILITE")) Is Nothing) Then
                MyBase.Tables.Add(New FIC_INCOMPATIBILITEDataTable(ds.Tables("FIC_INCOMPATIBILITE")))
            End If
            If (Not (ds.Tables("IC1SAC_TERME1SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New IC1SAC_TERME1SUBACTDataTable(ds.Tables("IC1SAC_TERME1SUBACT")))
            End If
            If (Not (ds.Tables("IC1SAU_TERME1SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IC1SAU_TERME1SUBAUXDataTable(ds.Tables("IC1SAU_TERME1SUBAUX")))
            End If
            If (Not (ds.Tables("IC1PR_TERME1PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IC1PR_TERME1PRODUITDataTable(ds.Tables("IC1PR_TERME1PRODUIT")))
            End If
            If (Not (ds.Tables("IC1SP_TERME1SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IC1SP_TERME1SPECIALITEDataTable(ds.Tables("IC1SP_TERME1SPECIALITE")))
            End If
            If (Not (ds.Tables("IC2SAC_TERME2SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New IC2SAC_TERME2SUBACTDataTable(ds.Tables("IC2SAC_TERME2SUBACT")))
            End If
            If (Not (ds.Tables("IC2SAU_TERME2SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IC2SAU_TERME2SUBAUXDataTable(ds.Tables("IC2SAU_TERME2SUBAUX")))
            End If
            If (Not (ds.Tables("IC2PR_TERME2PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IC2PR_TERME2PRODUITDataTable(ds.Tables("IC2PR_TERME2PRODUIT")))
            End If
            If (Not (ds.Tables("IC2SP_TERME2SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IC2SP_TERME2SPECIALITEDataTable(ds.Tables("IC2SP_TERME2SPECIALITE")))
            End If
            If (Not (ds.Tables("ICSOL_INCOMPATIBILITE_SOLUTION")) Is Nothing) Then
                MyBase.Tables.Add(New ICSOL_INCOMPATIBILITE_SOLUTIONDataTable(ds.Tables("ICSOL_INCOMPATIBILITE_SOLUTION")))
            End If
            If (Not (ds.Tables("ICCT1_CONCENTRATION1")) Is Nothing) Then
                MyBase.Tables.Add(New ICCT1_CONCENTRATION1DataTable(ds.Tables("ICCT1_CONCENTRATION1")))
            End If
            If (Not (ds.Tables("IC1VE_INCOMPATIBILITE_VECTEUR1")) Is Nothing) Then
                MyBase.Tables.Add(New IC1VE_INCOMPATIBILITE_VECTEUR1DataTable(ds.Tables("IC1VE_INCOMPATIBILITE_VECTEUR1")))
            End If
            If (Not (ds.Tables("ICCT2_CONCENTRATION2")) Is Nothing) Then
                MyBase.Tables.Add(New ICCT2_CONCENTRATION2DataTable(ds.Tables("ICCT2_CONCENTRATION2")))
            End If
            If (Not (ds.Tables("IC2VE_INCOMPATIBILITE_VECTEUR2")) Is Nothing) Then
                MyBase.Tables.Add(New IC2VE_INCOMPATIBILITE_VECTEUR2DataTable(ds.Tables("IC2VE_INCOMPATIBILITE_VECTEUR2")))
            End If
            If (Not (ds.Tables("ICMA_INCOMPATIBILITE_MATERIAU")) Is Nothing) Then
                MyBase.Tables.Add(New ICMA_INCOMPATIBILITE_MATERIAUDataTable(ds.Tables("ICMA_INCOMPATIBILITE_MATERIAU")))
            End If
            If (Not (ds.Tables("ICCO_INCOMPATIBILITE_CONTENANT")) Is Nothing) Then
                MyBase.Tables.Add(New ICCO_INCOMPATIBILITE_CONTENANTDataTable(ds.Tables("ICCO_INCOMPATIBILITE_CONTENANT")))
            End If
            If (Not (ds.Tables("ICNA_INCOMPATIBILITE_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New ICNA_INCOMPATIBILITE_NATUREDataTable(ds.Tables("ICNA_INCOMPATIBILITE_NATURE")))
            End If
            If (Not (ds.Tables("ICDUR_INCOMPATIBILITE_DUREE")) Is Nothing) Then
                MyBase.Tables.Add(New ICDUR_INCOMPATIBILITE_DUREEDataTable(ds.Tables("ICDUR_INCOMPATIBILITE_DUREE")))
            End If
            If (Not (ds.Tables("ICTMP_INCOMPA_TEMPERATURE")) Is Nothing) Then
                MyBase.Tables.Add(New ICTMP_INCOMPA_TEMPERATUREDataTable(ds.Tables("ICTMP_INCOMPA_TEMPERATURE")))
            End If
            If (Not (ds.Tables("ICLUM_INCOMPATIBILITE_LUMIERE")) Is Nothing) Then
                MyBase.Tables.Add(New ICLUM_INCOMPATIBILITE_LUMIEREDataTable(ds.Tables("ICLUM_INCOMPATIBILITE_LUMIERE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FIC_INCOMPATIBILITE() As FIC_INCOMPATIBILITEDataTable
        Get
            Return Me.tableFIC_INCOMPATIBILITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC1SAC_TERME1SUBACT() As IC1SAC_TERME1SUBACTDataTable
        Get
            Return Me.tableIC1SAC_TERME1SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC1SAU_TERME1SUBAUX() As IC1SAU_TERME1SUBAUXDataTable
        Get
            Return Me.tableIC1SAU_TERME1SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC1PR_TERME1PRODUIT() As IC1PR_TERME1PRODUITDataTable
        Get
            Return Me.tableIC1PR_TERME1PRODUIT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC1SP_TERME1SPECIALITE() As IC1SP_TERME1SPECIALITEDataTable
        Get
            Return Me.tableIC1SP_TERME1SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC2SAC_TERME2SUBACT() As IC2SAC_TERME2SUBACTDataTable
        Get
            Return Me.tableIC2SAC_TERME2SUBACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC2SAU_TERME2SUBAUX() As IC2SAU_TERME2SUBAUXDataTable
        Get
            Return Me.tableIC2SAU_TERME2SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC2PR_TERME2PRODUIT() As IC2PR_TERME2PRODUITDataTable
        Get
            Return Me.tableIC2PR_TERME2PRODUIT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC2SP_TERME2SPECIALITE() As IC2SP_TERME2SPECIALITEDataTable
        Get
            Return Me.tableIC2SP_TERME2SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICSOL_INCOMPATIBILITE_SOLUTION() As ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
        Get
            Return Me.tableICSOL_INCOMPATIBILITE_SOLUTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICCT1_CONCENTRATION1() As ICCT1_CONCENTRATION1DataTable
        Get
            Return Me.tableICCT1_CONCENTRATION1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC1VE_INCOMPATIBILITE_VECTEUR1() As IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
        Get
            Return Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICCT2_CONCENTRATION2() As ICCT2_CONCENTRATION2DataTable
        Get
            Return Me.tableICCT2_CONCENTRATION2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IC2VE_INCOMPATIBILITE_VECTEUR2() As IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
        Get
            Return Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICMA_INCOMPATIBILITE_MATERIAU() As ICMA_INCOMPATIBILITE_MATERIAUDataTable
        Get
            Return Me.tableICMA_INCOMPATIBILITE_MATERIAU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICCO_INCOMPATIBILITE_CONTENANT() As ICCO_INCOMPATIBILITE_CONTENANTDataTable
        Get
            Return Me.tableICCO_INCOMPATIBILITE_CONTENANT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICNA_INCOMPATIBILITE_NATURE() As ICNA_INCOMPATIBILITE_NATUREDataTable
        Get
            Return Me.tableICNA_INCOMPATIBILITE_NATURE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICDUR_INCOMPATIBILITE_DUREE() As ICDUR_INCOMPATIBILITE_DUREEDataTable
        Get
            Return Me.tableICDUR_INCOMPATIBILITE_DUREE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICTMP_INCOMPA_TEMPERATURE() As ICTMP_INCOMPA_TEMPERATUREDataTable
        Get
            Return Me.tableICTMP_INCOMPA_TEMPERATURE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ICLUM_INCOMPATIBILITE_LUMIERE() As ICLUM_INCOMPATIBILITE_LUMIEREDataTable
        Get
            Return Me.tableICLUM_INCOMPATIBILITE_LUMIERE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_AnalyseOrdonance2 = CType(MyBase.Clone,dsTheriaque_AnalyseOrdonance2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FIC_INCOMPATIBILITE")) Is Nothing) Then
                MyBase.Tables.Add(New FIC_INCOMPATIBILITEDataTable(ds.Tables("FIC_INCOMPATIBILITE")))
            End If
            If (Not (ds.Tables("IC1SAC_TERME1SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New IC1SAC_TERME1SUBACTDataTable(ds.Tables("IC1SAC_TERME1SUBACT")))
            End If
            If (Not (ds.Tables("IC1SAU_TERME1SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IC1SAU_TERME1SUBAUXDataTable(ds.Tables("IC1SAU_TERME1SUBAUX")))
            End If
            If (Not (ds.Tables("IC1PR_TERME1PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IC1PR_TERME1PRODUITDataTable(ds.Tables("IC1PR_TERME1PRODUIT")))
            End If
            If (Not (ds.Tables("IC1SP_TERME1SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IC1SP_TERME1SPECIALITEDataTable(ds.Tables("IC1SP_TERME1SPECIALITE")))
            End If
            If (Not (ds.Tables("IC2SAC_TERME2SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New IC2SAC_TERME2SUBACTDataTable(ds.Tables("IC2SAC_TERME2SUBACT")))
            End If
            If (Not (ds.Tables("IC2SAU_TERME2SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IC2SAU_TERME2SUBAUXDataTable(ds.Tables("IC2SAU_TERME2SUBAUX")))
            End If
            If (Not (ds.Tables("IC2PR_TERME2PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IC2PR_TERME2PRODUITDataTable(ds.Tables("IC2PR_TERME2PRODUIT")))
            End If
            If (Not (ds.Tables("IC2SP_TERME2SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IC2SP_TERME2SPECIALITEDataTable(ds.Tables("IC2SP_TERME2SPECIALITE")))
            End If
            If (Not (ds.Tables("ICSOL_INCOMPATIBILITE_SOLUTION")) Is Nothing) Then
                MyBase.Tables.Add(New ICSOL_INCOMPATIBILITE_SOLUTIONDataTable(ds.Tables("ICSOL_INCOMPATIBILITE_SOLUTION")))
            End If
            If (Not (ds.Tables("ICCT1_CONCENTRATION1")) Is Nothing) Then
                MyBase.Tables.Add(New ICCT1_CONCENTRATION1DataTable(ds.Tables("ICCT1_CONCENTRATION1")))
            End If
            If (Not (ds.Tables("IC1VE_INCOMPATIBILITE_VECTEUR1")) Is Nothing) Then
                MyBase.Tables.Add(New IC1VE_INCOMPATIBILITE_VECTEUR1DataTable(ds.Tables("IC1VE_INCOMPATIBILITE_VECTEUR1")))
            End If
            If (Not (ds.Tables("ICCT2_CONCENTRATION2")) Is Nothing) Then
                MyBase.Tables.Add(New ICCT2_CONCENTRATION2DataTable(ds.Tables("ICCT2_CONCENTRATION2")))
            End If
            If (Not (ds.Tables("IC2VE_INCOMPATIBILITE_VECTEUR2")) Is Nothing) Then
                MyBase.Tables.Add(New IC2VE_INCOMPATIBILITE_VECTEUR2DataTable(ds.Tables("IC2VE_INCOMPATIBILITE_VECTEUR2")))
            End If
            If (Not (ds.Tables("ICMA_INCOMPATIBILITE_MATERIAU")) Is Nothing) Then
                MyBase.Tables.Add(New ICMA_INCOMPATIBILITE_MATERIAUDataTable(ds.Tables("ICMA_INCOMPATIBILITE_MATERIAU")))
            End If
            If (Not (ds.Tables("ICCO_INCOMPATIBILITE_CONTENANT")) Is Nothing) Then
                MyBase.Tables.Add(New ICCO_INCOMPATIBILITE_CONTENANTDataTable(ds.Tables("ICCO_INCOMPATIBILITE_CONTENANT")))
            End If
            If (Not (ds.Tables("ICNA_INCOMPATIBILITE_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New ICNA_INCOMPATIBILITE_NATUREDataTable(ds.Tables("ICNA_INCOMPATIBILITE_NATURE")))
            End If
            If (Not (ds.Tables("ICDUR_INCOMPATIBILITE_DUREE")) Is Nothing) Then
                MyBase.Tables.Add(New ICDUR_INCOMPATIBILITE_DUREEDataTable(ds.Tables("ICDUR_INCOMPATIBILITE_DUREE")))
            End If
            If (Not (ds.Tables("ICTMP_INCOMPA_TEMPERATURE")) Is Nothing) Then
                MyBase.Tables.Add(New ICTMP_INCOMPA_TEMPERATUREDataTable(ds.Tables("ICTMP_INCOMPA_TEMPERATURE")))
            End If
            If (Not (ds.Tables("ICLUM_INCOMPATIBILITE_LUMIERE")) Is Nothing) Then
                MyBase.Tables.Add(New ICLUM_INCOMPATIBILITE_LUMIEREDataTable(ds.Tables("ICLUM_INCOMPATIBILITE_LUMIERE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFIC_INCOMPATIBILITE = CType(MyBase.Tables("FIC_INCOMPATIBILITE"),FIC_INCOMPATIBILITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFIC_INCOMPATIBILITE) Is Nothing) Then
                Me.tableFIC_INCOMPATIBILITE.InitVars
            End If
        End If
        Me.tableIC1SAC_TERME1SUBACT = CType(MyBase.Tables("IC1SAC_TERME1SUBACT"),IC1SAC_TERME1SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC1SAC_TERME1SUBACT) Is Nothing) Then
                Me.tableIC1SAC_TERME1SUBACT.InitVars
            End If
        End If
        Me.tableIC1SAU_TERME1SUBAUX = CType(MyBase.Tables("IC1SAU_TERME1SUBAUX"),IC1SAU_TERME1SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC1SAU_TERME1SUBAUX) Is Nothing) Then
                Me.tableIC1SAU_TERME1SUBAUX.InitVars
            End If
        End If
        Me.tableIC1PR_TERME1PRODUIT = CType(MyBase.Tables("IC1PR_TERME1PRODUIT"),IC1PR_TERME1PRODUITDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC1PR_TERME1PRODUIT) Is Nothing) Then
                Me.tableIC1PR_TERME1PRODUIT.InitVars
            End If
        End If
        Me.tableIC1SP_TERME1SPECIALITE = CType(MyBase.Tables("IC1SP_TERME1SPECIALITE"),IC1SP_TERME1SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC1SP_TERME1SPECIALITE) Is Nothing) Then
                Me.tableIC1SP_TERME1SPECIALITE.InitVars
            End If
        End If
        Me.tableIC2SAC_TERME2SUBACT = CType(MyBase.Tables("IC2SAC_TERME2SUBACT"),IC2SAC_TERME2SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC2SAC_TERME2SUBACT) Is Nothing) Then
                Me.tableIC2SAC_TERME2SUBACT.InitVars
            End If
        End If
        Me.tableIC2SAU_TERME2SUBAUX = CType(MyBase.Tables("IC2SAU_TERME2SUBAUX"),IC2SAU_TERME2SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC2SAU_TERME2SUBAUX) Is Nothing) Then
                Me.tableIC2SAU_TERME2SUBAUX.InitVars
            End If
        End If
        Me.tableIC2PR_TERME2PRODUIT = CType(MyBase.Tables("IC2PR_TERME2PRODUIT"),IC2PR_TERME2PRODUITDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC2PR_TERME2PRODUIT) Is Nothing) Then
                Me.tableIC2PR_TERME2PRODUIT.InitVars
            End If
        End If
        Me.tableIC2SP_TERME2SPECIALITE = CType(MyBase.Tables("IC2SP_TERME2SPECIALITE"),IC2SP_TERME2SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC2SP_TERME2SPECIALITE) Is Nothing) Then
                Me.tableIC2SP_TERME2SPECIALITE.InitVars
            End If
        End If
        Me.tableICSOL_INCOMPATIBILITE_SOLUTION = CType(MyBase.Tables("ICSOL_INCOMPATIBILITE_SOLUTION"),ICSOL_INCOMPATIBILITE_SOLUTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICSOL_INCOMPATIBILITE_SOLUTION) Is Nothing) Then
                Me.tableICSOL_INCOMPATIBILITE_SOLUTION.InitVars
            End If
        End If
        Me.tableICCT1_CONCENTRATION1 = CType(MyBase.Tables("ICCT1_CONCENTRATION1"),ICCT1_CONCENTRATION1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableICCT1_CONCENTRATION1) Is Nothing) Then
                Me.tableICCT1_CONCENTRATION1.InitVars
            End If
        End If
        Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1 = CType(MyBase.Tables("IC1VE_INCOMPATIBILITE_VECTEUR1"),IC1VE_INCOMPATIBILITE_VECTEUR1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1) Is Nothing) Then
                Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1.InitVars
            End If
        End If
        Me.tableICCT2_CONCENTRATION2 = CType(MyBase.Tables("ICCT2_CONCENTRATION2"),ICCT2_CONCENTRATION2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableICCT2_CONCENTRATION2) Is Nothing) Then
                Me.tableICCT2_CONCENTRATION2.InitVars
            End If
        End If
        Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2 = CType(MyBase.Tables("IC2VE_INCOMPATIBILITE_VECTEUR2"),IC2VE_INCOMPATIBILITE_VECTEUR2DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2) Is Nothing) Then
                Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2.InitVars
            End If
        End If
        Me.tableICMA_INCOMPATIBILITE_MATERIAU = CType(MyBase.Tables("ICMA_INCOMPATIBILITE_MATERIAU"),ICMA_INCOMPATIBILITE_MATERIAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICMA_INCOMPATIBILITE_MATERIAU) Is Nothing) Then
                Me.tableICMA_INCOMPATIBILITE_MATERIAU.InitVars
            End If
        End If
        Me.tableICCO_INCOMPATIBILITE_CONTENANT = CType(MyBase.Tables("ICCO_INCOMPATIBILITE_CONTENANT"),ICCO_INCOMPATIBILITE_CONTENANTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICCO_INCOMPATIBILITE_CONTENANT) Is Nothing) Then
                Me.tableICCO_INCOMPATIBILITE_CONTENANT.InitVars
            End If
        End If
        Me.tableICNA_INCOMPATIBILITE_NATURE = CType(MyBase.Tables("ICNA_INCOMPATIBILITE_NATURE"),ICNA_INCOMPATIBILITE_NATUREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICNA_INCOMPATIBILITE_NATURE) Is Nothing) Then
                Me.tableICNA_INCOMPATIBILITE_NATURE.InitVars
            End If
        End If
        Me.tableICDUR_INCOMPATIBILITE_DUREE = CType(MyBase.Tables("ICDUR_INCOMPATIBILITE_DUREE"),ICDUR_INCOMPATIBILITE_DUREEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICDUR_INCOMPATIBILITE_DUREE) Is Nothing) Then
                Me.tableICDUR_INCOMPATIBILITE_DUREE.InitVars
            End If
        End If
        Me.tableICTMP_INCOMPA_TEMPERATURE = CType(MyBase.Tables("ICTMP_INCOMPA_TEMPERATURE"),ICTMP_INCOMPA_TEMPERATUREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICTMP_INCOMPA_TEMPERATURE) Is Nothing) Then
                Me.tableICTMP_INCOMPA_TEMPERATURE.InitVars
            End If
        End If
        Me.tableICLUM_INCOMPATIBILITE_LUMIERE = CType(MyBase.Tables("ICLUM_INCOMPATIBILITE_LUMIERE"),ICLUM_INCOMPATIBILITE_LUMIEREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableICLUM_INCOMPATIBILITE_LUMIERE) Is Nothing) Then
                Me.tableICLUM_INCOMPATIBILITE_LUMIERE.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_AnalyseOrdonance2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_AnalyseOrdonance2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFIC_INCOMPATIBILITE = New FIC_INCOMPATIBILITEDataTable
        MyBase.Tables.Add(Me.tableFIC_INCOMPATIBILITE)
        Me.tableIC1SAC_TERME1SUBACT = New IC1SAC_TERME1SUBACTDataTable
        MyBase.Tables.Add(Me.tableIC1SAC_TERME1SUBACT)
        Me.tableIC1SAU_TERME1SUBAUX = New IC1SAU_TERME1SUBAUXDataTable
        MyBase.Tables.Add(Me.tableIC1SAU_TERME1SUBAUX)
        Me.tableIC1PR_TERME1PRODUIT = New IC1PR_TERME1PRODUITDataTable
        MyBase.Tables.Add(Me.tableIC1PR_TERME1PRODUIT)
        Me.tableIC1SP_TERME1SPECIALITE = New IC1SP_TERME1SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableIC1SP_TERME1SPECIALITE)
        Me.tableIC2SAC_TERME2SUBACT = New IC2SAC_TERME2SUBACTDataTable
        MyBase.Tables.Add(Me.tableIC2SAC_TERME2SUBACT)
        Me.tableIC2SAU_TERME2SUBAUX = New IC2SAU_TERME2SUBAUXDataTable
        MyBase.Tables.Add(Me.tableIC2SAU_TERME2SUBAUX)
        Me.tableIC2PR_TERME2PRODUIT = New IC2PR_TERME2PRODUITDataTable
        MyBase.Tables.Add(Me.tableIC2PR_TERME2PRODUIT)
        Me.tableIC2SP_TERME2SPECIALITE = New IC2SP_TERME2SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableIC2SP_TERME2SPECIALITE)
        Me.tableICSOL_INCOMPATIBILITE_SOLUTION = New ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
        MyBase.Tables.Add(Me.tableICSOL_INCOMPATIBILITE_SOLUTION)
        Me.tableICCT1_CONCENTRATION1 = New ICCT1_CONCENTRATION1DataTable
        MyBase.Tables.Add(Me.tableICCT1_CONCENTRATION1)
        Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1 = New IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
        MyBase.Tables.Add(Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1)
        Me.tableICCT2_CONCENTRATION2 = New ICCT2_CONCENTRATION2DataTable
        MyBase.Tables.Add(Me.tableICCT2_CONCENTRATION2)
        Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2 = New IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
        MyBase.Tables.Add(Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2)
        Me.tableICMA_INCOMPATIBILITE_MATERIAU = New ICMA_INCOMPATIBILITE_MATERIAUDataTable
        MyBase.Tables.Add(Me.tableICMA_INCOMPATIBILITE_MATERIAU)
        Me.tableICCO_INCOMPATIBILITE_CONTENANT = New ICCO_INCOMPATIBILITE_CONTENANTDataTable
        MyBase.Tables.Add(Me.tableICCO_INCOMPATIBILITE_CONTENANT)
        Me.tableICNA_INCOMPATIBILITE_NATURE = New ICNA_INCOMPATIBILITE_NATUREDataTable
        MyBase.Tables.Add(Me.tableICNA_INCOMPATIBILITE_NATURE)
        Me.tableICDUR_INCOMPATIBILITE_DUREE = New ICDUR_INCOMPATIBILITE_DUREEDataTable
        MyBase.Tables.Add(Me.tableICDUR_INCOMPATIBILITE_DUREE)
        Me.tableICTMP_INCOMPA_TEMPERATURE = New ICTMP_INCOMPA_TEMPERATUREDataTable
        MyBase.Tables.Add(Me.tableICTMP_INCOMPA_TEMPERATURE)
        Me.tableICLUM_INCOMPATIBILITE_LUMIERE = New ICLUM_INCOMPATIBILITE_LUMIEREDataTable
        MyBase.Tables.Add(Me.tableICLUM_INCOMPATIBILITE_LUMIERE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFIC_INCOMPATIBILITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC1SAC_TERME1SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC1SAU_TERME1SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC1PR_TERME1PRODUIT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC1SP_TERME1SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC2SAC_TERME2SUBACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC2SAU_TERME2SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC2PR_TERME2PRODUIT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC2SP_TERME2SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICSOL_INCOMPATIBILITE_SOLUTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICCT1_CONCENTRATION1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC1VE_INCOMPATIBILITE_VECTEUR1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICCT2_CONCENTRATION2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIC2VE_INCOMPATIBILITE_VECTEUR2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICMA_INCOMPATIBILITE_MATERIAU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICCO_INCOMPATIBILITE_CONTENANT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICNA_INCOMPATIBILITE_NATURE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICDUR_INCOMPATIBILITE_DUREE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICTMP_INCOMPA_TEMPERATURE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeICLUM_INCOMPATIBILITE_LUMIERE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FIC_INCOMPATIBILITERowChangeEventHandler(ByVal sender As Object, ByVal e As FIC_INCOMPATIBILITERowChangeEvent)
    
    Public Delegate Sub IC1SAC_TERME1SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As IC1SAC_TERME1SUBACTRowChangeEvent)
    
    Public Delegate Sub IC1SAU_TERME1SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As IC1SAU_TERME1SUBAUXRowChangeEvent)
    
    Public Delegate Sub IC1PR_TERME1PRODUITRowChangeEventHandler(ByVal sender As Object, ByVal e As IC1PR_TERME1PRODUITRowChangeEvent)
    
    Public Delegate Sub IC1SP_TERME1SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As IC1SP_TERME1SPECIALITERowChangeEvent)
    
    Public Delegate Sub IC2SAC_TERME2SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As IC2SAC_TERME2SUBACTRowChangeEvent)
    
    Public Delegate Sub IC2SAU_TERME2SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As IC2SAU_TERME2SUBAUXRowChangeEvent)
    
    Public Delegate Sub IC2PR_TERME2PRODUITRowChangeEventHandler(ByVal sender As Object, ByVal e As IC2PR_TERME2PRODUITRowChangeEvent)
    
    Public Delegate Sub IC2SP_TERME2SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As IC2SP_TERME2SPECIALITERowChangeEvent)
    
    Public Delegate Sub ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEvent)
    
    Public Delegate Sub ICCT1_CONCENTRATION1RowChangeEventHandler(ByVal sender As Object, ByVal e As ICCT1_CONCENTRATION1RowChangeEvent)
    
    Public Delegate Sub IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEventHandler(ByVal sender As Object, ByVal e As IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEvent)
    
    Public Delegate Sub ICCT2_CONCENTRATION2RowChangeEventHandler(ByVal sender As Object, ByVal e As ICCT2_CONCENTRATION2RowChangeEvent)
    
    Public Delegate Sub IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEventHandler(ByVal sender As Object, ByVal e As IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEvent)
    
    Public Delegate Sub ICMA_INCOMPATIBILITE_MATERIAURowChangeEventHandler(ByVal sender As Object, ByVal e As ICMA_INCOMPATIBILITE_MATERIAURowChangeEvent)
    
    Public Delegate Sub ICCO_INCOMPATIBILITE_CONTENANTRowChangeEventHandler(ByVal sender As Object, ByVal e As ICCO_INCOMPATIBILITE_CONTENANTRowChangeEvent)
    
    Public Delegate Sub ICNA_INCOMPATIBILITE_NATURERowChangeEventHandler(ByVal sender As Object, ByVal e As ICNA_INCOMPATIBILITE_NATURERowChangeEvent)
    
    Public Delegate Sub ICDUR_INCOMPATIBILITE_DUREERowChangeEventHandler(ByVal sender As Object, ByVal e As ICDUR_INCOMPATIBILITE_DUREERowChangeEvent)
    
    Public Delegate Sub ICTMP_INCOMPA_TEMPERATURERowChangeEventHandler(ByVal sender As Object, ByVal e As ICTMP_INCOMPA_TEMPERATURERowChangeEvent)
    
    Public Delegate Sub ICLUM_INCOMPATIBILITE_LUMIERERowChangeEventHandler(ByVal sender As Object, ByVal e As ICLUM_INCOMPATIBILITE_LUMIERERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FIC_INCOMPATIBILITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFIC_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFIC_ORIGINE As Global.System.Data.DataColumn
        
        Private columnFIC_TYPE As Global.System.Data.DataColumn
        
        Private columnFIC_TEXTE As Global.System.Data.DataColumn
        
        Private columnFIC_DATECR As Global.System.Data.DataColumn
        
        Private columnFIC_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FIC_INCOMPATIBILITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIC_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIC_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIC_ORIGINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIC_ORIGINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIC_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIC_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIC_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIC_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIC_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIC_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FIC_INCOMPATIBILITERow
            Get
                Return CType(Me.Rows(index),FIC_INCOMPATIBILITERow)
            End Get
        End Property
        
        Public Event FIC_INCOMPATIBILITERowChanging As FIC_INCOMPATIBILITERowChangeEventHandler
        
        Public Event FIC_INCOMPATIBILITERowChanged As FIC_INCOMPATIBILITERowChangeEventHandler
        
        Public Event FIC_INCOMPATIBILITERowDeleting As FIC_INCOMPATIBILITERowChangeEventHandler
        
        Public Event FIC_INCOMPATIBILITERowDeleted As FIC_INCOMPATIBILITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFIC_INCOMPATIBILITERow(ByVal row As FIC_INCOMPATIBILITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFIC_INCOMPATIBILITERow(ByVal FIC_CODE_SQ_PK As Integer, ByVal FIC_ORIGINE As String, ByVal FIC_TYPE As String, ByVal FIC_TEXTE As String, ByVal FIC_DATECR As Date, ByVal FIC_DATEMJ As Date) As FIC_INCOMPATIBILITERow
            Dim rowFIC_INCOMPATIBILITERow As FIC_INCOMPATIBILITERow = CType(Me.NewRow,FIC_INCOMPATIBILITERow)
            Dim columnValuesArray() As Object = New Object() {FIC_CODE_SQ_PK, FIC_ORIGINE, FIC_TYPE, FIC_TEXTE, FIC_DATECR, FIC_DATEMJ}
            rowFIC_INCOMPATIBILITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFIC_INCOMPATIBILITERow)
            Return rowFIC_INCOMPATIBILITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFIC_CODE_SQ_PK(ByVal FIC_CODE_SQ_PK As Integer) As FIC_INCOMPATIBILITERow
            Return CType(Me.Rows.Find(New Object() {FIC_CODE_SQ_PK}),FIC_INCOMPATIBILITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FIC_INCOMPATIBILITEDataTable = CType(MyBase.Clone,FIC_INCOMPATIBILITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FIC_INCOMPATIBILITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFIC_CODE_SQ_PK = MyBase.Columns("FIC_CODE_SQ_PK")
            Me.columnFIC_ORIGINE = MyBase.Columns("FIC_ORIGINE")
            Me.columnFIC_TYPE = MyBase.Columns("FIC_TYPE")
            Me.columnFIC_TEXTE = MyBase.Columns("FIC_TEXTE")
            Me.columnFIC_DATECR = MyBase.Columns("FIC_DATECR")
            Me.columnFIC_DATEMJ = MyBase.Columns("FIC_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFIC_CODE_SQ_PK = New Global.System.Data.DataColumn("FIC_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIC_CODE_SQ_PK)
            Me.columnFIC_ORIGINE = New Global.System.Data.DataColumn("FIC_ORIGINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIC_ORIGINE)
            Me.columnFIC_TYPE = New Global.System.Data.DataColumn("FIC_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIC_TYPE)
            Me.columnFIC_TEXTE = New Global.System.Data.DataColumn("FIC_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIC_TEXTE)
            Me.columnFIC_DATECR = New Global.System.Data.DataColumn("FIC_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIC_DATECR)
            Me.columnFIC_DATEMJ = New Global.System.Data.DataColumn("FIC_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIC_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFIC_CODE_SQ_PK}, true))
            Me.columnFIC_CODE_SQ_PK.AllowDBNull = false
            Me.columnFIC_CODE_SQ_PK.Unique = true
            Me.columnFIC_ORIGINE.AllowDBNull = false
            Me.columnFIC_ORIGINE.MaxLength = 1
            Me.columnFIC_TYPE.AllowDBNull = false
            Me.columnFIC_TYPE.MaxLength = 1
            Me.columnFIC_TEXTE.MaxLength = 2147483647
            Me.columnFIC_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFIC_INCOMPATIBILITERow() As FIC_INCOMPATIBILITERow
            Return CType(Me.NewRow,FIC_INCOMPATIBILITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FIC_INCOMPATIBILITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FIC_INCOMPATIBILITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FIC_INCOMPATIBILITERowChangedEvent) Is Nothing) Then
                RaiseEvent FIC_INCOMPATIBILITERowChanged(Me, New FIC_INCOMPATIBILITERowChangeEvent(CType(e.Row,FIC_INCOMPATIBILITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FIC_INCOMPATIBILITERowChangingEvent) Is Nothing) Then
                RaiseEvent FIC_INCOMPATIBILITERowChanging(Me, New FIC_INCOMPATIBILITERowChangeEvent(CType(e.Row,FIC_INCOMPATIBILITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FIC_INCOMPATIBILITERowDeletedEvent) Is Nothing) Then
                RaiseEvent FIC_INCOMPATIBILITERowDeleted(Me, New FIC_INCOMPATIBILITERowChangeEvent(CType(e.Row,FIC_INCOMPATIBILITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FIC_INCOMPATIBILITERowDeletingEvent) Is Nothing) Then
                RaiseEvent FIC_INCOMPATIBILITERowDeleting(Me, New FIC_INCOMPATIBILITERowChangeEvent(CType(e.Row,FIC_INCOMPATIBILITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFIC_INCOMPATIBILITERow(ByVal row As FIC_INCOMPATIBILITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FIC_INCOMPATIBILITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC1SAC_TERME1SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC1SAC_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC1SAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC1SAC_TERME1SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1SAC_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1SAC_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1SAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1SAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC1SAC_TERME1SUBACTRow
            Get
                Return CType(Me.Rows(index),IC1SAC_TERME1SUBACTRow)
            End Get
        End Property
        
        Public Event IC1SAC_TERME1SUBACTRowChanging As IC1SAC_TERME1SUBACTRowChangeEventHandler
        
        Public Event IC1SAC_TERME1SUBACTRowChanged As IC1SAC_TERME1SUBACTRowChangeEventHandler
        
        Public Event IC1SAC_TERME1SUBACTRowDeleting As IC1SAC_TERME1SUBACTRowChangeEventHandler
        
        Public Event IC1SAC_TERME1SUBACTRowDeleted As IC1SAC_TERME1SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC1SAC_TERME1SUBACTRow(ByVal row As IC1SAC_TERME1SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC1SAC_TERME1SUBACTRow(ByVal IC1SAC_FIC_CODE_FK_PK As Integer, ByVal IC1SAC_SAC_CODE_FK_PK As Integer) As IC1SAC_TERME1SUBACTRow
            Dim rowIC1SAC_TERME1SUBACTRow As IC1SAC_TERME1SUBACTRow = CType(Me.NewRow,IC1SAC_TERME1SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {IC1SAC_FIC_CODE_FK_PK, IC1SAC_SAC_CODE_FK_PK}
            rowIC1SAC_TERME1SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC1SAC_TERME1SUBACTRow)
            Return rowIC1SAC_TERME1SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC1SAC_FIC_CODE_FK_PKIC1SAC_SAC_CODE_FK_PK(ByVal IC1SAC_FIC_CODE_FK_PK As Integer, ByVal IC1SAC_SAC_CODE_FK_PK As Integer) As IC1SAC_TERME1SUBACTRow
            Return CType(Me.Rows.Find(New Object() {IC1SAC_FIC_CODE_FK_PK, IC1SAC_SAC_CODE_FK_PK}),IC1SAC_TERME1SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC1SAC_TERME1SUBACTDataTable = CType(MyBase.Clone,IC1SAC_TERME1SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC1SAC_TERME1SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC1SAC_FIC_CODE_FK_PK = MyBase.Columns("IC1SAC_FIC_CODE_FK_PK")
            Me.columnIC1SAC_SAC_CODE_FK_PK = MyBase.Columns("IC1SAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC1SAC_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1SAC_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1SAC_FIC_CODE_FK_PK)
            Me.columnIC1SAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1SAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1SAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC1SAC_FIC_CODE_FK_PK, Me.columnIC1SAC_SAC_CODE_FK_PK}, true))
            Me.columnIC1SAC_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC1SAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC1SAC_TERME1SUBACTRow() As IC1SAC_TERME1SUBACTRow
            Return CType(Me.NewRow,IC1SAC_TERME1SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC1SAC_TERME1SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC1SAC_TERME1SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC1SAC_TERME1SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent IC1SAC_TERME1SUBACTRowChanged(Me, New IC1SAC_TERME1SUBACTRowChangeEvent(CType(e.Row,IC1SAC_TERME1SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC1SAC_TERME1SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent IC1SAC_TERME1SUBACTRowChanging(Me, New IC1SAC_TERME1SUBACTRowChangeEvent(CType(e.Row,IC1SAC_TERME1SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC1SAC_TERME1SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent IC1SAC_TERME1SUBACTRowDeleted(Me, New IC1SAC_TERME1SUBACTRowChangeEvent(CType(e.Row,IC1SAC_TERME1SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC1SAC_TERME1SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent IC1SAC_TERME1SUBACTRowDeleting(Me, New IC1SAC_TERME1SUBACTRowChangeEvent(CType(e.Row,IC1SAC_TERME1SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC1SAC_TERME1SUBACTRow(ByVal row As IC1SAC_TERME1SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC1SAC_TERME1SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC1SAU_TERME1SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC1SAU_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC1SAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC1SAU_TERME1SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1SAU_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1SAU_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1SAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1SAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC1SAU_TERME1SUBAUXRow
            Get
                Return CType(Me.Rows(index),IC1SAU_TERME1SUBAUXRow)
            End Get
        End Property
        
        Public Event IC1SAU_TERME1SUBAUXRowChanging As IC1SAU_TERME1SUBAUXRowChangeEventHandler
        
        Public Event IC1SAU_TERME1SUBAUXRowChanged As IC1SAU_TERME1SUBAUXRowChangeEventHandler
        
        Public Event IC1SAU_TERME1SUBAUXRowDeleting As IC1SAU_TERME1SUBAUXRowChangeEventHandler
        
        Public Event IC1SAU_TERME1SUBAUXRowDeleted As IC1SAU_TERME1SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC1SAU_TERME1SUBAUXRow(ByVal row As IC1SAU_TERME1SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC1SAU_TERME1SUBAUXRow(ByVal IC1SAU_FIC_CODE_FK_PK As Integer, ByVal IC1SAU_SAU_CODE_FK_PK As Integer) As IC1SAU_TERME1SUBAUXRow
            Dim rowIC1SAU_TERME1SUBAUXRow As IC1SAU_TERME1SUBAUXRow = CType(Me.NewRow,IC1SAU_TERME1SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {IC1SAU_FIC_CODE_FK_PK, IC1SAU_SAU_CODE_FK_PK}
            rowIC1SAU_TERME1SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC1SAU_TERME1SUBAUXRow)
            Return rowIC1SAU_TERME1SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC1SAU_FIC_CODE_FK_PKIC1SAU_SAU_CODE_FK_PK(ByVal IC1SAU_FIC_CODE_FK_PK As Integer, ByVal IC1SAU_SAU_CODE_FK_PK As Integer) As IC1SAU_TERME1SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {IC1SAU_FIC_CODE_FK_PK, IC1SAU_SAU_CODE_FK_PK}),IC1SAU_TERME1SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC1SAU_TERME1SUBAUXDataTable = CType(MyBase.Clone,IC1SAU_TERME1SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC1SAU_TERME1SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC1SAU_FIC_CODE_FK_PK = MyBase.Columns("IC1SAU_FIC_CODE_FK_PK")
            Me.columnIC1SAU_SAU_CODE_FK_PK = MyBase.Columns("IC1SAU_SAU_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC1SAU_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1SAU_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1SAU_FIC_CODE_FK_PK)
            Me.columnIC1SAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("IC1SAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1SAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC1SAU_FIC_CODE_FK_PK, Me.columnIC1SAU_SAU_CODE_FK_PK}, true))
            Me.columnIC1SAU_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC1SAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC1SAU_TERME1SUBAUXRow() As IC1SAU_TERME1SUBAUXRow
            Return CType(Me.NewRow,IC1SAU_TERME1SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC1SAU_TERME1SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC1SAU_TERME1SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC1SAU_TERME1SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent IC1SAU_TERME1SUBAUXRowChanged(Me, New IC1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IC1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC1SAU_TERME1SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent IC1SAU_TERME1SUBAUXRowChanging(Me, New IC1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IC1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC1SAU_TERME1SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent IC1SAU_TERME1SUBAUXRowDeleted(Me, New IC1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IC1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC1SAU_TERME1SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent IC1SAU_TERME1SUBAUXRowDeleting(Me, New IC1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IC1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC1SAU_TERME1SUBAUXRow(ByVal row As IC1SAU_TERME1SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC1SAU_TERME1SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC1PR_TERME1PRODUITDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC1PR_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC1PR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC1PR_TERME1PRODUIT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1PR_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1PR_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1PR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1PR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC1PR_TERME1PRODUITRow
            Get
                Return CType(Me.Rows(index),IC1PR_TERME1PRODUITRow)
            End Get
        End Property
        
        Public Event IC1PR_TERME1PRODUITRowChanging As IC1PR_TERME1PRODUITRowChangeEventHandler
        
        Public Event IC1PR_TERME1PRODUITRowChanged As IC1PR_TERME1PRODUITRowChangeEventHandler
        
        Public Event IC1PR_TERME1PRODUITRowDeleting As IC1PR_TERME1PRODUITRowChangeEventHandler
        
        Public Event IC1PR_TERME1PRODUITRowDeleted As IC1PR_TERME1PRODUITRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC1PR_TERME1PRODUITRow(ByVal row As IC1PR_TERME1PRODUITRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC1PR_TERME1PRODUITRow(ByVal IC1PR_FIC_CODE_FK_PK As Integer, ByVal IC1PR_PR_CODE_FK_PK As Integer) As IC1PR_TERME1PRODUITRow
            Dim rowIC1PR_TERME1PRODUITRow As IC1PR_TERME1PRODUITRow = CType(Me.NewRow,IC1PR_TERME1PRODUITRow)
            Dim columnValuesArray() As Object = New Object() {IC1PR_FIC_CODE_FK_PK, IC1PR_PR_CODE_FK_PK}
            rowIC1PR_TERME1PRODUITRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC1PR_TERME1PRODUITRow)
            Return rowIC1PR_TERME1PRODUITRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC1PR_FIC_CODE_FK_PKIC1PR_PR_CODE_FK_PK(ByVal IC1PR_FIC_CODE_FK_PK As Integer, ByVal IC1PR_PR_CODE_FK_PK As Integer) As IC1PR_TERME1PRODUITRow
            Return CType(Me.Rows.Find(New Object() {IC1PR_FIC_CODE_FK_PK, IC1PR_PR_CODE_FK_PK}),IC1PR_TERME1PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC1PR_TERME1PRODUITDataTable = CType(MyBase.Clone,IC1PR_TERME1PRODUITDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC1PR_TERME1PRODUITDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC1PR_FIC_CODE_FK_PK = MyBase.Columns("IC1PR_FIC_CODE_FK_PK")
            Me.columnIC1PR_PR_CODE_FK_PK = MyBase.Columns("IC1PR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC1PR_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1PR_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1PR_FIC_CODE_FK_PK)
            Me.columnIC1PR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("IC1PR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1PR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC1PR_FIC_CODE_FK_PK, Me.columnIC1PR_PR_CODE_FK_PK}, true))
            Me.columnIC1PR_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC1PR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC1PR_TERME1PRODUITRow() As IC1PR_TERME1PRODUITRow
            Return CType(Me.NewRow,IC1PR_TERME1PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC1PR_TERME1PRODUITRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC1PR_TERME1PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC1PR_TERME1PRODUITRowChangedEvent) Is Nothing) Then
                RaiseEvent IC1PR_TERME1PRODUITRowChanged(Me, New IC1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IC1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC1PR_TERME1PRODUITRowChangingEvent) Is Nothing) Then
                RaiseEvent IC1PR_TERME1PRODUITRowChanging(Me, New IC1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IC1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC1PR_TERME1PRODUITRowDeletedEvent) Is Nothing) Then
                RaiseEvent IC1PR_TERME1PRODUITRowDeleted(Me, New IC1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IC1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC1PR_TERME1PRODUITRowDeletingEvent) Is Nothing) Then
                RaiseEvent IC1PR_TERME1PRODUITRowDeleting(Me, New IC1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IC1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC1PR_TERME1PRODUITRow(ByVal row As IC1PR_TERME1PRODUITRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC1PR_TERME1PRODUITDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC1SP_TERME1SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC1SP_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC1SP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC1SP_TERME1SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1SP_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1SP_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1SP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1SP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC1SP_TERME1SPECIALITERow
            Get
                Return CType(Me.Rows(index),IC1SP_TERME1SPECIALITERow)
            End Get
        End Property
        
        Public Event IC1SP_TERME1SPECIALITERowChanging As IC1SP_TERME1SPECIALITERowChangeEventHandler
        
        Public Event IC1SP_TERME1SPECIALITERowChanged As IC1SP_TERME1SPECIALITERowChangeEventHandler
        
        Public Event IC1SP_TERME1SPECIALITERowDeleting As IC1SP_TERME1SPECIALITERowChangeEventHandler
        
        Public Event IC1SP_TERME1SPECIALITERowDeleted As IC1SP_TERME1SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC1SP_TERME1SPECIALITERow(ByVal row As IC1SP_TERME1SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC1SP_TERME1SPECIALITERow(ByVal IC1SP_FIC_CODE_FK_PK As Integer, ByVal IC1SP_SP_CODE_FK_PK As Integer) As IC1SP_TERME1SPECIALITERow
            Dim rowIC1SP_TERME1SPECIALITERow As IC1SP_TERME1SPECIALITERow = CType(Me.NewRow,IC1SP_TERME1SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {IC1SP_FIC_CODE_FK_PK, IC1SP_SP_CODE_FK_PK}
            rowIC1SP_TERME1SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC1SP_TERME1SPECIALITERow)
            Return rowIC1SP_TERME1SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC1SP_FIC_CODE_FK_PKIC1SP_SP_CODE_FK_PK(ByVal IC1SP_FIC_CODE_FK_PK As Integer, ByVal IC1SP_SP_CODE_FK_PK As Integer) As IC1SP_TERME1SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {IC1SP_FIC_CODE_FK_PK, IC1SP_SP_CODE_FK_PK}),IC1SP_TERME1SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC1SP_TERME1SPECIALITEDataTable = CType(MyBase.Clone,IC1SP_TERME1SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC1SP_TERME1SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC1SP_FIC_CODE_FK_PK = MyBase.Columns("IC1SP_FIC_CODE_FK_PK")
            Me.columnIC1SP_SP_CODE_FK_PK = MyBase.Columns("IC1SP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC1SP_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1SP_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1SP_FIC_CODE_FK_PK)
            Me.columnIC1SP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("IC1SP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1SP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC1SP_FIC_CODE_FK_PK, Me.columnIC1SP_SP_CODE_FK_PK}, true))
            Me.columnIC1SP_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC1SP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC1SP_TERME1SPECIALITERow() As IC1SP_TERME1SPECIALITERow
            Return CType(Me.NewRow,IC1SP_TERME1SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC1SP_TERME1SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC1SP_TERME1SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC1SP_TERME1SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent IC1SP_TERME1SPECIALITERowChanged(Me, New IC1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IC1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC1SP_TERME1SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent IC1SP_TERME1SPECIALITERowChanging(Me, New IC1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IC1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC1SP_TERME1SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent IC1SP_TERME1SPECIALITERowDeleted(Me, New IC1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IC1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC1SP_TERME1SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent IC1SP_TERME1SPECIALITERowDeleting(Me, New IC1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IC1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC1SP_TERME1SPECIALITERow(ByVal row As IC1SP_TERME1SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC1SP_TERME1SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC2SAC_TERME2SUBACTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC2SAC_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC2SAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC2SAC_TERME2SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2SAC_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2SAC_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2SAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2SAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC2SAC_TERME2SUBACTRow
            Get
                Return CType(Me.Rows(index),IC2SAC_TERME2SUBACTRow)
            End Get
        End Property
        
        Public Event IC2SAC_TERME2SUBACTRowChanging As IC2SAC_TERME2SUBACTRowChangeEventHandler
        
        Public Event IC2SAC_TERME2SUBACTRowChanged As IC2SAC_TERME2SUBACTRowChangeEventHandler
        
        Public Event IC2SAC_TERME2SUBACTRowDeleting As IC2SAC_TERME2SUBACTRowChangeEventHandler
        
        Public Event IC2SAC_TERME2SUBACTRowDeleted As IC2SAC_TERME2SUBACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC2SAC_TERME2SUBACTRow(ByVal row As IC2SAC_TERME2SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC2SAC_TERME2SUBACTRow(ByVal IC2SAC_FIC_CODE_FK_PK As Integer, ByVal IC2SAC_SAC_CODE_FK_PK As Integer) As IC2SAC_TERME2SUBACTRow
            Dim rowIC2SAC_TERME2SUBACTRow As IC2SAC_TERME2SUBACTRow = CType(Me.NewRow,IC2SAC_TERME2SUBACTRow)
            Dim columnValuesArray() As Object = New Object() {IC2SAC_FIC_CODE_FK_PK, IC2SAC_SAC_CODE_FK_PK}
            rowIC2SAC_TERME2SUBACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC2SAC_TERME2SUBACTRow)
            Return rowIC2SAC_TERME2SUBACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC2SAC_FIC_CODE_FK_PKIC2SAC_SAC_CODE_FK_PK(ByVal IC2SAC_FIC_CODE_FK_PK As Integer, ByVal IC2SAC_SAC_CODE_FK_PK As Integer) As IC2SAC_TERME2SUBACTRow
            Return CType(Me.Rows.Find(New Object() {IC2SAC_FIC_CODE_FK_PK, IC2SAC_SAC_CODE_FK_PK}),IC2SAC_TERME2SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC2SAC_TERME2SUBACTDataTable = CType(MyBase.Clone,IC2SAC_TERME2SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC2SAC_TERME2SUBACTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC2SAC_FIC_CODE_FK_PK = MyBase.Columns("IC2SAC_FIC_CODE_FK_PK")
            Me.columnIC2SAC_SAC_CODE_FK_PK = MyBase.Columns("IC2SAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC2SAC_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2SAC_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2SAC_FIC_CODE_FK_PK)
            Me.columnIC2SAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2SAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2SAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC2SAC_FIC_CODE_FK_PK, Me.columnIC2SAC_SAC_CODE_FK_PK}, true))
            Me.columnIC2SAC_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC2SAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC2SAC_TERME2SUBACTRow() As IC2SAC_TERME2SUBACTRow
            Return CType(Me.NewRow,IC2SAC_TERME2SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC2SAC_TERME2SUBACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC2SAC_TERME2SUBACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC2SAC_TERME2SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent IC2SAC_TERME2SUBACTRowChanged(Me, New IC2SAC_TERME2SUBACTRowChangeEvent(CType(e.Row,IC2SAC_TERME2SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC2SAC_TERME2SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent IC2SAC_TERME2SUBACTRowChanging(Me, New IC2SAC_TERME2SUBACTRowChangeEvent(CType(e.Row,IC2SAC_TERME2SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC2SAC_TERME2SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent IC2SAC_TERME2SUBACTRowDeleted(Me, New IC2SAC_TERME2SUBACTRowChangeEvent(CType(e.Row,IC2SAC_TERME2SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC2SAC_TERME2SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent IC2SAC_TERME2SUBACTRowDeleting(Me, New IC2SAC_TERME2SUBACTRowChangeEvent(CType(e.Row,IC2SAC_TERME2SUBACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC2SAC_TERME2SUBACTRow(ByVal row As IC2SAC_TERME2SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC2SAC_TERME2SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC2SAU_TERME2SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC2SAU_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC2SAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC2SAU_TERME2SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2SAU_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2SAU_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2SAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2SAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC2SAU_TERME2SUBAUXRow
            Get
                Return CType(Me.Rows(index),IC2SAU_TERME2SUBAUXRow)
            End Get
        End Property
        
        Public Event IC2SAU_TERME2SUBAUXRowChanging As IC2SAU_TERME2SUBAUXRowChangeEventHandler
        
        Public Event IC2SAU_TERME2SUBAUXRowChanged As IC2SAU_TERME2SUBAUXRowChangeEventHandler
        
        Public Event IC2SAU_TERME2SUBAUXRowDeleting As IC2SAU_TERME2SUBAUXRowChangeEventHandler
        
        Public Event IC2SAU_TERME2SUBAUXRowDeleted As IC2SAU_TERME2SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC2SAU_TERME2SUBAUXRow(ByVal row As IC2SAU_TERME2SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC2SAU_TERME2SUBAUXRow(ByVal IC2SAU_FIC_CODE_FK_PK As Integer, ByVal IC2SAU_SAU_CODE_FK_PK As Integer) As IC2SAU_TERME2SUBAUXRow
            Dim rowIC2SAU_TERME2SUBAUXRow As IC2SAU_TERME2SUBAUXRow = CType(Me.NewRow,IC2SAU_TERME2SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {IC2SAU_FIC_CODE_FK_PK, IC2SAU_SAU_CODE_FK_PK}
            rowIC2SAU_TERME2SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC2SAU_TERME2SUBAUXRow)
            Return rowIC2SAU_TERME2SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC2SAU_FIC_CODE_FK_PKIC2SAU_SAU_CODE_FK_PK(ByVal IC2SAU_FIC_CODE_FK_PK As Integer, ByVal IC2SAU_SAU_CODE_FK_PK As Integer) As IC2SAU_TERME2SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {IC2SAU_FIC_CODE_FK_PK, IC2SAU_SAU_CODE_FK_PK}),IC2SAU_TERME2SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC2SAU_TERME2SUBAUXDataTable = CType(MyBase.Clone,IC2SAU_TERME2SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC2SAU_TERME2SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC2SAU_FIC_CODE_FK_PK = MyBase.Columns("IC2SAU_FIC_CODE_FK_PK")
            Me.columnIC2SAU_SAU_CODE_FK_PK = MyBase.Columns("IC2SAU_SAU_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC2SAU_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2SAU_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2SAU_FIC_CODE_FK_PK)
            Me.columnIC2SAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("IC2SAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2SAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC2SAU_FIC_CODE_FK_PK, Me.columnIC2SAU_SAU_CODE_FK_PK}, true))
            Me.columnIC2SAU_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC2SAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC2SAU_TERME2SUBAUXRow() As IC2SAU_TERME2SUBAUXRow
            Return CType(Me.NewRow,IC2SAU_TERME2SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC2SAU_TERME2SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC2SAU_TERME2SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC2SAU_TERME2SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent IC2SAU_TERME2SUBAUXRowChanged(Me, New IC2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IC2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC2SAU_TERME2SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent IC2SAU_TERME2SUBAUXRowChanging(Me, New IC2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IC2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC2SAU_TERME2SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent IC2SAU_TERME2SUBAUXRowDeleted(Me, New IC2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IC2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC2SAU_TERME2SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent IC2SAU_TERME2SUBAUXRowDeleting(Me, New IC2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IC2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC2SAU_TERME2SUBAUXRow(ByVal row As IC2SAU_TERME2SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC2SAU_TERME2SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC2PR_TERME2PRODUITDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC2PR_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC2PR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC2PR_TERME2PRODUIT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2PR_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2PR_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2PR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2PR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC2PR_TERME2PRODUITRow
            Get
                Return CType(Me.Rows(index),IC2PR_TERME2PRODUITRow)
            End Get
        End Property
        
        Public Event IC2PR_TERME2PRODUITRowChanging As IC2PR_TERME2PRODUITRowChangeEventHandler
        
        Public Event IC2PR_TERME2PRODUITRowChanged As IC2PR_TERME2PRODUITRowChangeEventHandler
        
        Public Event IC2PR_TERME2PRODUITRowDeleting As IC2PR_TERME2PRODUITRowChangeEventHandler
        
        Public Event IC2PR_TERME2PRODUITRowDeleted As IC2PR_TERME2PRODUITRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC2PR_TERME2PRODUITRow(ByVal row As IC2PR_TERME2PRODUITRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC2PR_TERME2PRODUITRow(ByVal IC2PR_FIC_CODE_FK_PK As Integer, ByVal IC2PR_PR_CODE_FK_PK As Integer) As IC2PR_TERME2PRODUITRow
            Dim rowIC2PR_TERME2PRODUITRow As IC2PR_TERME2PRODUITRow = CType(Me.NewRow,IC2PR_TERME2PRODUITRow)
            Dim columnValuesArray() As Object = New Object() {IC2PR_FIC_CODE_FK_PK, IC2PR_PR_CODE_FK_PK}
            rowIC2PR_TERME2PRODUITRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC2PR_TERME2PRODUITRow)
            Return rowIC2PR_TERME2PRODUITRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC2PR_FIC_CODE_FK_PKIC2PR_PR_CODE_FK_PK(ByVal IC2PR_FIC_CODE_FK_PK As Integer, ByVal IC2PR_PR_CODE_FK_PK As Integer) As IC2PR_TERME2PRODUITRow
            Return CType(Me.Rows.Find(New Object() {IC2PR_FIC_CODE_FK_PK, IC2PR_PR_CODE_FK_PK}),IC2PR_TERME2PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC2PR_TERME2PRODUITDataTable = CType(MyBase.Clone,IC2PR_TERME2PRODUITDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC2PR_TERME2PRODUITDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC2PR_FIC_CODE_FK_PK = MyBase.Columns("IC2PR_FIC_CODE_FK_PK")
            Me.columnIC2PR_PR_CODE_FK_PK = MyBase.Columns("IC2PR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC2PR_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2PR_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2PR_FIC_CODE_FK_PK)
            Me.columnIC2PR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("IC2PR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2PR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC2PR_FIC_CODE_FK_PK, Me.columnIC2PR_PR_CODE_FK_PK}, true))
            Me.columnIC2PR_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC2PR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC2PR_TERME2PRODUITRow() As IC2PR_TERME2PRODUITRow
            Return CType(Me.NewRow,IC2PR_TERME2PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC2PR_TERME2PRODUITRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC2PR_TERME2PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC2PR_TERME2PRODUITRowChangedEvent) Is Nothing) Then
                RaiseEvent IC2PR_TERME2PRODUITRowChanged(Me, New IC2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IC2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC2PR_TERME2PRODUITRowChangingEvent) Is Nothing) Then
                RaiseEvent IC2PR_TERME2PRODUITRowChanging(Me, New IC2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IC2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC2PR_TERME2PRODUITRowDeletedEvent) Is Nothing) Then
                RaiseEvent IC2PR_TERME2PRODUITRowDeleted(Me, New IC2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IC2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC2PR_TERME2PRODUITRowDeletingEvent) Is Nothing) Then
                RaiseEvent IC2PR_TERME2PRODUITRowDeleting(Me, New IC2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IC2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC2PR_TERME2PRODUITRow(ByVal row As IC2PR_TERME2PRODUITRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC2PR_TERME2PRODUITDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC2SP_TERME2SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC2SP_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC2SP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC2SP_TERME2SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2SP_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2SP_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2SP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2SP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC2SP_TERME2SPECIALITERow
            Get
                Return CType(Me.Rows(index),IC2SP_TERME2SPECIALITERow)
            End Get
        End Property
        
        Public Event IC2SP_TERME2SPECIALITERowChanging As IC2SP_TERME2SPECIALITERowChangeEventHandler
        
        Public Event IC2SP_TERME2SPECIALITERowChanged As IC2SP_TERME2SPECIALITERowChangeEventHandler
        
        Public Event IC2SP_TERME2SPECIALITERowDeleting As IC2SP_TERME2SPECIALITERowChangeEventHandler
        
        Public Event IC2SP_TERME2SPECIALITERowDeleted As IC2SP_TERME2SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC2SP_TERME2SPECIALITERow(ByVal row As IC2SP_TERME2SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC2SP_TERME2SPECIALITERow(ByVal IC2SP_FIC_CODE_FK_PK As Integer, ByVal IC2SP_SP_CODE_FK_PK As Integer) As IC2SP_TERME2SPECIALITERow
            Dim rowIC2SP_TERME2SPECIALITERow As IC2SP_TERME2SPECIALITERow = CType(Me.NewRow,IC2SP_TERME2SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {IC2SP_FIC_CODE_FK_PK, IC2SP_SP_CODE_FK_PK}
            rowIC2SP_TERME2SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC2SP_TERME2SPECIALITERow)
            Return rowIC2SP_TERME2SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC2SP_FIC_CODE_FK_PKIC2SP_SP_CODE_FK_PK(ByVal IC2SP_FIC_CODE_FK_PK As Integer, ByVal IC2SP_SP_CODE_FK_PK As Integer) As IC2SP_TERME2SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {IC2SP_FIC_CODE_FK_PK, IC2SP_SP_CODE_FK_PK}),IC2SP_TERME2SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC2SP_TERME2SPECIALITEDataTable = CType(MyBase.Clone,IC2SP_TERME2SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC2SP_TERME2SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC2SP_FIC_CODE_FK_PK = MyBase.Columns("IC2SP_FIC_CODE_FK_PK")
            Me.columnIC2SP_SP_CODE_FK_PK = MyBase.Columns("IC2SP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC2SP_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2SP_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2SP_FIC_CODE_FK_PK)
            Me.columnIC2SP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("IC2SP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2SP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC2SP_FIC_CODE_FK_PK, Me.columnIC2SP_SP_CODE_FK_PK}, true))
            Me.columnIC2SP_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC2SP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC2SP_TERME2SPECIALITERow() As IC2SP_TERME2SPECIALITERow
            Return CType(Me.NewRow,IC2SP_TERME2SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC2SP_TERME2SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC2SP_TERME2SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC2SP_TERME2SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent IC2SP_TERME2SPECIALITERowChanged(Me, New IC2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IC2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC2SP_TERME2SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent IC2SP_TERME2SPECIALITERowChanging(Me, New IC2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IC2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC2SP_TERME2SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent IC2SP_TERME2SPECIALITERowDeleted(Me, New IC2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IC2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC2SP_TERME2SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent IC2SP_TERME2SPECIALITERowDeleting(Me, New IC2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IC2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC2SP_TERME2SPECIALITERow(ByVal row As IC2SP_TERME2SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC2SP_TERME2SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICSOL_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICSOL_CDF_SOLIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICSOL_INCOMPATIBILITE_SOLUTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICSOL_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICSOL_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICSOL_CDF_SOLIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICSOL_CDF_SOLIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICSOL_INCOMPATIBILITE_SOLUTIONRow
            Get
                Return CType(Me.Rows(index),ICSOL_INCOMPATIBILITE_SOLUTIONRow)
            End Get
        End Property
        
        Public Event ICSOL_INCOMPATIBILITE_SOLUTIONRowChanging As ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEventHandler
        
        Public Event ICSOL_INCOMPATIBILITE_SOLUTIONRowChanged As ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEventHandler
        
        Public Event ICSOL_INCOMPATIBILITE_SOLUTIONRowDeleting As ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEventHandler
        
        Public Event ICSOL_INCOMPATIBILITE_SOLUTIONRowDeleted As ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICSOL_INCOMPATIBILITE_SOLUTIONRow(ByVal row As ICSOL_INCOMPATIBILITE_SOLUTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICSOL_INCOMPATIBILITE_SOLUTIONRow(ByVal ICSOL_FIC_CODE_FK_PK As Integer, ByVal ICSOL_CDF_SOLIC_CODE_FK_PK As String) As ICSOL_INCOMPATIBILITE_SOLUTIONRow
            Dim rowICSOL_INCOMPATIBILITE_SOLUTIONRow As ICSOL_INCOMPATIBILITE_SOLUTIONRow = CType(Me.NewRow,ICSOL_INCOMPATIBILITE_SOLUTIONRow)
            Dim columnValuesArray() As Object = New Object() {ICSOL_FIC_CODE_FK_PK, ICSOL_CDF_SOLIC_CODE_FK_PK}
            rowICSOL_INCOMPATIBILITE_SOLUTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICSOL_INCOMPATIBILITE_SOLUTIONRow)
            Return rowICSOL_INCOMPATIBILITE_SOLUTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICSOL_FIC_CODE_FK_PKICSOL_CDF_SOLIC_CODE_FK_PK(ByVal ICSOL_FIC_CODE_FK_PK As Integer, ByVal ICSOL_CDF_SOLIC_CODE_FK_PK As String) As ICSOL_INCOMPATIBILITE_SOLUTIONRow
            Return CType(Me.Rows.Find(New Object() {ICSOL_FIC_CODE_FK_PK, ICSOL_CDF_SOLIC_CODE_FK_PK}),ICSOL_INCOMPATIBILITE_SOLUTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICSOL_INCOMPATIBILITE_SOLUTIONDataTable = CType(MyBase.Clone,ICSOL_INCOMPATIBILITE_SOLUTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICSOL_FIC_CODE_FK_PK = MyBase.Columns("ICSOL_FIC_CODE_FK_PK")
            Me.columnICSOL_CDF_SOLIC_CODE_FK_PK = MyBase.Columns("ICSOL_CDF_SOLIC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICSOL_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICSOL_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICSOL_FIC_CODE_FK_PK)
            Me.columnICSOL_CDF_SOLIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICSOL_CDF_SOLIC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICSOL_CDF_SOLIC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICSOL_FIC_CODE_FK_PK, Me.columnICSOL_CDF_SOLIC_CODE_FK_PK}, true))
            Me.columnICSOL_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICSOL_CDF_SOLIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICSOL_CDF_SOLIC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICSOL_INCOMPATIBILITE_SOLUTIONRow() As ICSOL_INCOMPATIBILITE_SOLUTIONRow
            Return CType(Me.NewRow,ICSOL_INCOMPATIBILITE_SOLUTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICSOL_INCOMPATIBILITE_SOLUTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICSOL_INCOMPATIBILITE_SOLUTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICSOL_INCOMPATIBILITE_SOLUTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent ICSOL_INCOMPATIBILITE_SOLUTIONRowChanged(Me, New ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEvent(CType(e.Row,ICSOL_INCOMPATIBILITE_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICSOL_INCOMPATIBILITE_SOLUTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent ICSOL_INCOMPATIBILITE_SOLUTIONRowChanging(Me, New ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEvent(CType(e.Row,ICSOL_INCOMPATIBILITE_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICSOL_INCOMPATIBILITE_SOLUTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent ICSOL_INCOMPATIBILITE_SOLUTIONRowDeleted(Me, New ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEvent(CType(e.Row,ICSOL_INCOMPATIBILITE_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICSOL_INCOMPATIBILITE_SOLUTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent ICSOL_INCOMPATIBILITE_SOLUTIONRowDeleting(Me, New ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEvent(CType(e.Row,ICSOL_INCOMPATIBILITE_SOLUTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICSOL_INCOMPATIBILITE_SOLUTIONRow(ByVal row As ICSOL_INCOMPATIBILITE_SOLUTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICSOL_INCOMPATIBILITE_SOLUTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICCT1_CONCENTRATION1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICCT1_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICCT1_NUMSEQ_PK As Global.System.Data.DataColumn
        
        Private columnICCT1_CONCENTRATION1 As Global.System.Data.DataColumn
        
        Private columnICCT1_CDF_UDOSE_CODE_FK As Global.System.Data.DataColumn
        
        Private columnICCT1_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICCT1_CONCENTRATION1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT1_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT1_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT1_NUMSEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT1_NUMSEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT1_CONCENTRATION1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT1_CONCENTRATION1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT1_CDF_UDOSE_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT1_CDF_UDOSE_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT1_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT1_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICCT1_CONCENTRATION1Row
            Get
                Return CType(Me.Rows(index),ICCT1_CONCENTRATION1Row)
            End Get
        End Property
        
        Public Event ICCT1_CONCENTRATION1RowChanging As ICCT1_CONCENTRATION1RowChangeEventHandler
        
        Public Event ICCT1_CONCENTRATION1RowChanged As ICCT1_CONCENTRATION1RowChangeEventHandler
        
        Public Event ICCT1_CONCENTRATION1RowDeleting As ICCT1_CONCENTRATION1RowChangeEventHandler
        
        Public Event ICCT1_CONCENTRATION1RowDeleted As ICCT1_CONCENTRATION1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICCT1_CONCENTRATION1Row(ByVal row As ICCT1_CONCENTRATION1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICCT1_CONCENTRATION1Row(ByVal ICCT1_FIC_CODE_FK_PK As Integer, ByVal ICCT1_NUMSEQ_PK As Integer, ByVal ICCT1_CONCENTRATION1 As String, ByVal ICCT1_CDF_UDOSE_CODE_FK As String, ByVal ICCT1_NUMORD As Short) As ICCT1_CONCENTRATION1Row
            Dim rowICCT1_CONCENTRATION1Row As ICCT1_CONCENTRATION1Row = CType(Me.NewRow,ICCT1_CONCENTRATION1Row)
            Dim columnValuesArray() As Object = New Object() {ICCT1_FIC_CODE_FK_PK, ICCT1_NUMSEQ_PK, ICCT1_CONCENTRATION1, ICCT1_CDF_UDOSE_CODE_FK, ICCT1_NUMORD}
            rowICCT1_CONCENTRATION1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowICCT1_CONCENTRATION1Row)
            Return rowICCT1_CONCENTRATION1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICCT1_FIC_CODE_FK_PKICCT1_NUMSEQ_PK(ByVal ICCT1_FIC_CODE_FK_PK As Integer, ByVal ICCT1_NUMSEQ_PK As Integer) As ICCT1_CONCENTRATION1Row
            Return CType(Me.Rows.Find(New Object() {ICCT1_FIC_CODE_FK_PK, ICCT1_NUMSEQ_PK}),ICCT1_CONCENTRATION1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICCT1_CONCENTRATION1DataTable = CType(MyBase.Clone,ICCT1_CONCENTRATION1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICCT1_CONCENTRATION1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICCT1_FIC_CODE_FK_PK = MyBase.Columns("ICCT1_FIC_CODE_FK_PK")
            Me.columnICCT1_NUMSEQ_PK = MyBase.Columns("ICCT1_NUMSEQ_PK")
            Me.columnICCT1_CONCENTRATION1 = MyBase.Columns("ICCT1_CONCENTRATION1")
            Me.columnICCT1_CDF_UDOSE_CODE_FK = MyBase.Columns("ICCT1_CDF_UDOSE_CODE_FK")
            Me.columnICCT1_NUMORD = MyBase.Columns("ICCT1_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICCT1_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICCT1_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT1_FIC_CODE_FK_PK)
            Me.columnICCT1_NUMSEQ_PK = New Global.System.Data.DataColumn("ICCT1_NUMSEQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT1_NUMSEQ_PK)
            Me.columnICCT1_CONCENTRATION1 = New Global.System.Data.DataColumn("ICCT1_CONCENTRATION1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT1_CONCENTRATION1)
            Me.columnICCT1_CDF_UDOSE_CODE_FK = New Global.System.Data.DataColumn("ICCT1_CDF_UDOSE_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT1_CDF_UDOSE_CODE_FK)
            Me.columnICCT1_NUMORD = New Global.System.Data.DataColumn("ICCT1_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT1_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICCT1_FIC_CODE_FK_PK, Me.columnICCT1_NUMSEQ_PK}, true))
            Me.columnICCT1_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICCT1_NUMSEQ_PK.AllowDBNull = false
            Me.columnICCT1_CONCENTRATION1.MaxLength = 20
            Me.columnICCT1_CDF_UDOSE_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICCT1_CONCENTRATION1Row() As ICCT1_CONCENTRATION1Row
            Return CType(Me.NewRow,ICCT1_CONCENTRATION1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICCT1_CONCENTRATION1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICCT1_CONCENTRATION1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICCT1_CONCENTRATION1RowChangedEvent) Is Nothing) Then
                RaiseEvent ICCT1_CONCENTRATION1RowChanged(Me, New ICCT1_CONCENTRATION1RowChangeEvent(CType(e.Row,ICCT1_CONCENTRATION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICCT1_CONCENTRATION1RowChangingEvent) Is Nothing) Then
                RaiseEvent ICCT1_CONCENTRATION1RowChanging(Me, New ICCT1_CONCENTRATION1RowChangeEvent(CType(e.Row,ICCT1_CONCENTRATION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICCT1_CONCENTRATION1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ICCT1_CONCENTRATION1RowDeleted(Me, New ICCT1_CONCENTRATION1RowChangeEvent(CType(e.Row,ICCT1_CONCENTRATION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICCT1_CONCENTRATION1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ICCT1_CONCENTRATION1RowDeleting(Me, New ICCT1_CONCENTRATION1RowChangeEvent(CType(e.Row,ICCT1_CONCENTRATION1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICCT1_CONCENTRATION1Row(ByVal row As ICCT1_CONCENTRATION1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICCT1_CONCENTRATION1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC1VE_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC1VE_CDF_VEIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC1VE_INCOMPATIBILITE_VECTEUR1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1VE_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1VE_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC1VE_CDF_VEIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC1VE_CDF_VEIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC1VE_INCOMPATIBILITE_VECTEUR1Row
            Get
                Return CType(Me.Rows(index),IC1VE_INCOMPATIBILITE_VECTEUR1Row)
            End Get
        End Property
        
        Public Event IC1VE_INCOMPATIBILITE_VECTEUR1RowChanging As IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEventHandler
        
        Public Event IC1VE_INCOMPATIBILITE_VECTEUR1RowChanged As IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEventHandler
        
        Public Event IC1VE_INCOMPATIBILITE_VECTEUR1RowDeleting As IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEventHandler
        
        Public Event IC1VE_INCOMPATIBILITE_VECTEUR1RowDeleted As IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC1VE_INCOMPATIBILITE_VECTEUR1Row(ByVal row As IC1VE_INCOMPATIBILITE_VECTEUR1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC1VE_INCOMPATIBILITE_VECTEUR1Row(ByVal IC1VE_FIC_CODE_FK_PK As Integer, ByVal IC1VE_CDF_VEIC_CODE_FK_PK As String) As IC1VE_INCOMPATIBILITE_VECTEUR1Row
            Dim rowIC1VE_INCOMPATIBILITE_VECTEUR1Row As IC1VE_INCOMPATIBILITE_VECTEUR1Row = CType(Me.NewRow,IC1VE_INCOMPATIBILITE_VECTEUR1Row)
            Dim columnValuesArray() As Object = New Object() {IC1VE_FIC_CODE_FK_PK, IC1VE_CDF_VEIC_CODE_FK_PK}
            rowIC1VE_INCOMPATIBILITE_VECTEUR1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC1VE_INCOMPATIBILITE_VECTEUR1Row)
            Return rowIC1VE_INCOMPATIBILITE_VECTEUR1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC1VE_FIC_CODE_FK_PKIC1VE_CDF_VEIC_CODE_FK_PK(ByVal IC1VE_FIC_CODE_FK_PK As Integer, ByVal IC1VE_CDF_VEIC_CODE_FK_PK As String) As IC1VE_INCOMPATIBILITE_VECTEUR1Row
            Return CType(Me.Rows.Find(New Object() {IC1VE_FIC_CODE_FK_PK, IC1VE_CDF_VEIC_CODE_FK_PK}),IC1VE_INCOMPATIBILITE_VECTEUR1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC1VE_INCOMPATIBILITE_VECTEUR1DataTable = CType(MyBase.Clone,IC1VE_INCOMPATIBILITE_VECTEUR1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC1VE_FIC_CODE_FK_PK = MyBase.Columns("IC1VE_FIC_CODE_FK_PK")
            Me.columnIC1VE_CDF_VEIC_CODE_FK_PK = MyBase.Columns("IC1VE_CDF_VEIC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC1VE_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1VE_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1VE_FIC_CODE_FK_PK)
            Me.columnIC1VE_CDF_VEIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC1VE_CDF_VEIC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC1VE_CDF_VEIC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC1VE_FIC_CODE_FK_PK, Me.columnIC1VE_CDF_VEIC_CODE_FK_PK}, true))
            Me.columnIC1VE_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC1VE_CDF_VEIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC1VE_CDF_VEIC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC1VE_INCOMPATIBILITE_VECTEUR1Row() As IC1VE_INCOMPATIBILITE_VECTEUR1Row
            Return CType(Me.NewRow,IC1VE_INCOMPATIBILITE_VECTEUR1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC1VE_INCOMPATIBILITE_VECTEUR1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC1VE_INCOMPATIBILITE_VECTEUR1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC1VE_INCOMPATIBILITE_VECTEUR1RowChangedEvent) Is Nothing) Then
                RaiseEvent IC1VE_INCOMPATIBILITE_VECTEUR1RowChanged(Me, New IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEvent(CType(e.Row,IC1VE_INCOMPATIBILITE_VECTEUR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC1VE_INCOMPATIBILITE_VECTEUR1RowChangingEvent) Is Nothing) Then
                RaiseEvent IC1VE_INCOMPATIBILITE_VECTEUR1RowChanging(Me, New IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEvent(CType(e.Row,IC1VE_INCOMPATIBILITE_VECTEUR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC1VE_INCOMPATIBILITE_VECTEUR1RowDeletedEvent) Is Nothing) Then
                RaiseEvent IC1VE_INCOMPATIBILITE_VECTEUR1RowDeleted(Me, New IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEvent(CType(e.Row,IC1VE_INCOMPATIBILITE_VECTEUR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC1VE_INCOMPATIBILITE_VECTEUR1RowDeletingEvent) Is Nothing) Then
                RaiseEvent IC1VE_INCOMPATIBILITE_VECTEUR1RowDeleting(Me, New IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEvent(CType(e.Row,IC1VE_INCOMPATIBILITE_VECTEUR1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC1VE_INCOMPATIBILITE_VECTEUR1Row(ByVal row As IC1VE_INCOMPATIBILITE_VECTEUR1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC1VE_INCOMPATIBILITE_VECTEUR1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICCT2_CONCENTRATION2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICCT2_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICCT2_NUMSEQ_PK As Global.System.Data.DataColumn
        
        Private columnICCT2_CONCENTRATION2 As Global.System.Data.DataColumn
        
        Private columnICCT2_CDF_UDOSE_CODE_FK As Global.System.Data.DataColumn
        
        Private columnICCT2_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICCT2_CONCENTRATION2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT2_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT2_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT2_NUMSEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT2_NUMSEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT2_CONCENTRATION2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT2_CONCENTRATION2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT2_CDF_UDOSE_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT2_CDF_UDOSE_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCT2_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCT2_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICCT2_CONCENTRATION2Row
            Get
                Return CType(Me.Rows(index),ICCT2_CONCENTRATION2Row)
            End Get
        End Property
        
        Public Event ICCT2_CONCENTRATION2RowChanging As ICCT2_CONCENTRATION2RowChangeEventHandler
        
        Public Event ICCT2_CONCENTRATION2RowChanged As ICCT2_CONCENTRATION2RowChangeEventHandler
        
        Public Event ICCT2_CONCENTRATION2RowDeleting As ICCT2_CONCENTRATION2RowChangeEventHandler
        
        Public Event ICCT2_CONCENTRATION2RowDeleted As ICCT2_CONCENTRATION2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICCT2_CONCENTRATION2Row(ByVal row As ICCT2_CONCENTRATION2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICCT2_CONCENTRATION2Row(ByVal ICCT2_FIC_CODE_FK_PK As Integer, ByVal ICCT2_NUMSEQ_PK As Integer, ByVal ICCT2_CONCENTRATION2 As String, ByVal ICCT2_CDF_UDOSE_CODE_FK As String, ByVal ICCT2_NUMORD As Short) As ICCT2_CONCENTRATION2Row
            Dim rowICCT2_CONCENTRATION2Row As ICCT2_CONCENTRATION2Row = CType(Me.NewRow,ICCT2_CONCENTRATION2Row)
            Dim columnValuesArray() As Object = New Object() {ICCT2_FIC_CODE_FK_PK, ICCT2_NUMSEQ_PK, ICCT2_CONCENTRATION2, ICCT2_CDF_UDOSE_CODE_FK, ICCT2_NUMORD}
            rowICCT2_CONCENTRATION2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowICCT2_CONCENTRATION2Row)
            Return rowICCT2_CONCENTRATION2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICCT2_FIC_CODE_FK_PKICCT2_NUMSEQ_PK(ByVal ICCT2_FIC_CODE_FK_PK As Integer, ByVal ICCT2_NUMSEQ_PK As Integer) As ICCT2_CONCENTRATION2Row
            Return CType(Me.Rows.Find(New Object() {ICCT2_FIC_CODE_FK_PK, ICCT2_NUMSEQ_PK}),ICCT2_CONCENTRATION2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICCT2_CONCENTRATION2DataTable = CType(MyBase.Clone,ICCT2_CONCENTRATION2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICCT2_CONCENTRATION2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICCT2_FIC_CODE_FK_PK = MyBase.Columns("ICCT2_FIC_CODE_FK_PK")
            Me.columnICCT2_NUMSEQ_PK = MyBase.Columns("ICCT2_NUMSEQ_PK")
            Me.columnICCT2_CONCENTRATION2 = MyBase.Columns("ICCT2_CONCENTRATION2")
            Me.columnICCT2_CDF_UDOSE_CODE_FK = MyBase.Columns("ICCT2_CDF_UDOSE_CODE_FK")
            Me.columnICCT2_NUMORD = MyBase.Columns("ICCT2_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICCT2_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICCT2_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT2_FIC_CODE_FK_PK)
            Me.columnICCT2_NUMSEQ_PK = New Global.System.Data.DataColumn("ICCT2_NUMSEQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT2_NUMSEQ_PK)
            Me.columnICCT2_CONCENTRATION2 = New Global.System.Data.DataColumn("ICCT2_CONCENTRATION2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT2_CONCENTRATION2)
            Me.columnICCT2_CDF_UDOSE_CODE_FK = New Global.System.Data.DataColumn("ICCT2_CDF_UDOSE_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT2_CDF_UDOSE_CODE_FK)
            Me.columnICCT2_NUMORD = New Global.System.Data.DataColumn("ICCT2_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCT2_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICCT2_FIC_CODE_FK_PK, Me.columnICCT2_NUMSEQ_PK}, true))
            Me.columnICCT2_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICCT2_NUMSEQ_PK.AllowDBNull = false
            Me.columnICCT2_CONCENTRATION2.MaxLength = 20
            Me.columnICCT2_CDF_UDOSE_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICCT2_CONCENTRATION2Row() As ICCT2_CONCENTRATION2Row
            Return CType(Me.NewRow,ICCT2_CONCENTRATION2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICCT2_CONCENTRATION2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICCT2_CONCENTRATION2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICCT2_CONCENTRATION2RowChangedEvent) Is Nothing) Then
                RaiseEvent ICCT2_CONCENTRATION2RowChanged(Me, New ICCT2_CONCENTRATION2RowChangeEvent(CType(e.Row,ICCT2_CONCENTRATION2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICCT2_CONCENTRATION2RowChangingEvent) Is Nothing) Then
                RaiseEvent ICCT2_CONCENTRATION2RowChanging(Me, New ICCT2_CONCENTRATION2RowChangeEvent(CType(e.Row,ICCT2_CONCENTRATION2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICCT2_CONCENTRATION2RowDeletedEvent) Is Nothing) Then
                RaiseEvent ICCT2_CONCENTRATION2RowDeleted(Me, New ICCT2_CONCENTRATION2RowChangeEvent(CType(e.Row,ICCT2_CONCENTRATION2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICCT2_CONCENTRATION2RowDeletingEvent) Is Nothing) Then
                RaiseEvent ICCT2_CONCENTRATION2RowDeleting(Me, New ICCT2_CONCENTRATION2RowChangeEvent(CType(e.Row,ICCT2_CONCENTRATION2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICCT2_CONCENTRATION2Row(ByVal row As ICCT2_CONCENTRATION2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICCT2_CONCENTRATION2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIC2VE_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIC2VE_CDF_VEIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IC2VE_INCOMPATIBILITE_VECTEUR2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2VE_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2VE_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC2VE_CDF_VEIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC2VE_CDF_VEIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IC2VE_INCOMPATIBILITE_VECTEUR2Row
            Get
                Return CType(Me.Rows(index),IC2VE_INCOMPATIBILITE_VECTEUR2Row)
            End Get
        End Property
        
        Public Event IC2VE_INCOMPATIBILITE_VECTEUR2RowChanging As IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEventHandler
        
        Public Event IC2VE_INCOMPATIBILITE_VECTEUR2RowChanged As IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEventHandler
        
        Public Event IC2VE_INCOMPATIBILITE_VECTEUR2RowDeleting As IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEventHandler
        
        Public Event IC2VE_INCOMPATIBILITE_VECTEUR2RowDeleted As IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIC2VE_INCOMPATIBILITE_VECTEUR2Row(ByVal row As IC2VE_INCOMPATIBILITE_VECTEUR2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIC2VE_INCOMPATIBILITE_VECTEUR2Row(ByVal IC2VE_FIC_CODE_FK_PK As Integer, ByVal IC2VE_CDF_VEIC_CODE_FK_PK As String) As IC2VE_INCOMPATIBILITE_VECTEUR2Row
            Dim rowIC2VE_INCOMPATIBILITE_VECTEUR2Row As IC2VE_INCOMPATIBILITE_VECTEUR2Row = CType(Me.NewRow,IC2VE_INCOMPATIBILITE_VECTEUR2Row)
            Dim columnValuesArray() As Object = New Object() {IC2VE_FIC_CODE_FK_PK, IC2VE_CDF_VEIC_CODE_FK_PK}
            rowIC2VE_INCOMPATIBILITE_VECTEUR2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIC2VE_INCOMPATIBILITE_VECTEUR2Row)
            Return rowIC2VE_INCOMPATIBILITE_VECTEUR2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIC2VE_FIC_CODE_FK_PKIC2VE_CDF_VEIC_CODE_FK_PK(ByVal IC2VE_FIC_CODE_FK_PK As Integer, ByVal IC2VE_CDF_VEIC_CODE_FK_PK As String) As IC2VE_INCOMPATIBILITE_VECTEUR2Row
            Return CType(Me.Rows.Find(New Object() {IC2VE_FIC_CODE_FK_PK, IC2VE_CDF_VEIC_CODE_FK_PK}),IC2VE_INCOMPATIBILITE_VECTEUR2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IC2VE_INCOMPATIBILITE_VECTEUR2DataTable = CType(MyBase.Clone,IC2VE_INCOMPATIBILITE_VECTEUR2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIC2VE_FIC_CODE_FK_PK = MyBase.Columns("IC2VE_FIC_CODE_FK_PK")
            Me.columnIC2VE_CDF_VEIC_CODE_FK_PK = MyBase.Columns("IC2VE_CDF_VEIC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIC2VE_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2VE_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2VE_FIC_CODE_FK_PK)
            Me.columnIC2VE_CDF_VEIC_CODE_FK_PK = New Global.System.Data.DataColumn("IC2VE_CDF_VEIC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIC2VE_CDF_VEIC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIC2VE_FIC_CODE_FK_PK, Me.columnIC2VE_CDF_VEIC_CODE_FK_PK}, true))
            Me.columnIC2VE_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC2VE_CDF_VEIC_CODE_FK_PK.AllowDBNull = false
            Me.columnIC2VE_CDF_VEIC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIC2VE_INCOMPATIBILITE_VECTEUR2Row() As IC2VE_INCOMPATIBILITE_VECTEUR2Row
            Return CType(Me.NewRow,IC2VE_INCOMPATIBILITE_VECTEUR2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IC2VE_INCOMPATIBILITE_VECTEUR2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IC2VE_INCOMPATIBILITE_VECTEUR2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IC2VE_INCOMPATIBILITE_VECTEUR2RowChangedEvent) Is Nothing) Then
                RaiseEvent IC2VE_INCOMPATIBILITE_VECTEUR2RowChanged(Me, New IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEvent(CType(e.Row,IC2VE_INCOMPATIBILITE_VECTEUR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IC2VE_INCOMPATIBILITE_VECTEUR2RowChangingEvent) Is Nothing) Then
                RaiseEvent IC2VE_INCOMPATIBILITE_VECTEUR2RowChanging(Me, New IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEvent(CType(e.Row,IC2VE_INCOMPATIBILITE_VECTEUR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IC2VE_INCOMPATIBILITE_VECTEUR2RowDeletedEvent) Is Nothing) Then
                RaiseEvent IC2VE_INCOMPATIBILITE_VECTEUR2RowDeleted(Me, New IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEvent(CType(e.Row,IC2VE_INCOMPATIBILITE_VECTEUR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IC2VE_INCOMPATIBILITE_VECTEUR2RowDeletingEvent) Is Nothing) Then
                RaiseEvent IC2VE_INCOMPATIBILITE_VECTEUR2RowDeleting(Me, New IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEvent(CType(e.Row,IC2VE_INCOMPATIBILITE_VECTEUR2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIC2VE_INCOMPATIBILITE_VECTEUR2Row(ByVal row As IC2VE_INCOMPATIBILITE_VECTEUR2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IC2VE_INCOMPATIBILITE_VECTEUR2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICMA_INCOMPATIBILITE_MATERIAUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICMA_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICMA_CDF_MAIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICMA_INCOMPATIBILITE_MATERIAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICMA_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICMA_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICMA_CDF_MAIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICMA_CDF_MAIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICMA_INCOMPATIBILITE_MATERIAURow
            Get
                Return CType(Me.Rows(index),ICMA_INCOMPATIBILITE_MATERIAURow)
            End Get
        End Property
        
        Public Event ICMA_INCOMPATIBILITE_MATERIAURowChanging As ICMA_INCOMPATIBILITE_MATERIAURowChangeEventHandler
        
        Public Event ICMA_INCOMPATIBILITE_MATERIAURowChanged As ICMA_INCOMPATIBILITE_MATERIAURowChangeEventHandler
        
        Public Event ICMA_INCOMPATIBILITE_MATERIAURowDeleting As ICMA_INCOMPATIBILITE_MATERIAURowChangeEventHandler
        
        Public Event ICMA_INCOMPATIBILITE_MATERIAURowDeleted As ICMA_INCOMPATIBILITE_MATERIAURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICMA_INCOMPATIBILITE_MATERIAURow(ByVal row As ICMA_INCOMPATIBILITE_MATERIAURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICMA_INCOMPATIBILITE_MATERIAURow(ByVal ICMA_FIC_CODE_FK_PK As Integer, ByVal ICMA_CDF_MAIC_CODE_FK_PK As String) As ICMA_INCOMPATIBILITE_MATERIAURow
            Dim rowICMA_INCOMPATIBILITE_MATERIAURow As ICMA_INCOMPATIBILITE_MATERIAURow = CType(Me.NewRow,ICMA_INCOMPATIBILITE_MATERIAURow)
            Dim columnValuesArray() As Object = New Object() {ICMA_FIC_CODE_FK_PK, ICMA_CDF_MAIC_CODE_FK_PK}
            rowICMA_INCOMPATIBILITE_MATERIAURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICMA_INCOMPATIBILITE_MATERIAURow)
            Return rowICMA_INCOMPATIBILITE_MATERIAURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICMA_FIC_CODE_FK_PKICMA_CDF_MAIC_CODE_FK_PK(ByVal ICMA_FIC_CODE_FK_PK As Integer, ByVal ICMA_CDF_MAIC_CODE_FK_PK As String) As ICMA_INCOMPATIBILITE_MATERIAURow
            Return CType(Me.Rows.Find(New Object() {ICMA_FIC_CODE_FK_PK, ICMA_CDF_MAIC_CODE_FK_PK}),ICMA_INCOMPATIBILITE_MATERIAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICMA_INCOMPATIBILITE_MATERIAUDataTable = CType(MyBase.Clone,ICMA_INCOMPATIBILITE_MATERIAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICMA_INCOMPATIBILITE_MATERIAUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICMA_FIC_CODE_FK_PK = MyBase.Columns("ICMA_FIC_CODE_FK_PK")
            Me.columnICMA_CDF_MAIC_CODE_FK_PK = MyBase.Columns("ICMA_CDF_MAIC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICMA_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICMA_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICMA_FIC_CODE_FK_PK)
            Me.columnICMA_CDF_MAIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICMA_CDF_MAIC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICMA_CDF_MAIC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICMA_FIC_CODE_FK_PK, Me.columnICMA_CDF_MAIC_CODE_FK_PK}, true))
            Me.columnICMA_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICMA_CDF_MAIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICMA_CDF_MAIC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICMA_INCOMPATIBILITE_MATERIAURow() As ICMA_INCOMPATIBILITE_MATERIAURow
            Return CType(Me.NewRow,ICMA_INCOMPATIBILITE_MATERIAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICMA_INCOMPATIBILITE_MATERIAURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICMA_INCOMPATIBILITE_MATERIAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICMA_INCOMPATIBILITE_MATERIAURowChangedEvent) Is Nothing) Then
                RaiseEvent ICMA_INCOMPATIBILITE_MATERIAURowChanged(Me, New ICMA_INCOMPATIBILITE_MATERIAURowChangeEvent(CType(e.Row,ICMA_INCOMPATIBILITE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICMA_INCOMPATIBILITE_MATERIAURowChangingEvent) Is Nothing) Then
                RaiseEvent ICMA_INCOMPATIBILITE_MATERIAURowChanging(Me, New ICMA_INCOMPATIBILITE_MATERIAURowChangeEvent(CType(e.Row,ICMA_INCOMPATIBILITE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICMA_INCOMPATIBILITE_MATERIAURowDeletedEvent) Is Nothing) Then
                RaiseEvent ICMA_INCOMPATIBILITE_MATERIAURowDeleted(Me, New ICMA_INCOMPATIBILITE_MATERIAURowChangeEvent(CType(e.Row,ICMA_INCOMPATIBILITE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICMA_INCOMPATIBILITE_MATERIAURowDeletingEvent) Is Nothing) Then
                RaiseEvent ICMA_INCOMPATIBILITE_MATERIAURowDeleting(Me, New ICMA_INCOMPATIBILITE_MATERIAURowChangeEvent(CType(e.Row,ICMA_INCOMPATIBILITE_MATERIAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICMA_INCOMPATIBILITE_MATERIAURow(ByVal row As ICMA_INCOMPATIBILITE_MATERIAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICMA_INCOMPATIBILITE_MATERIAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICCO_INCOMPATIBILITE_CONTENANTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICCO_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICCO_CDF_COIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICCO_INCOMPATIBILITE_CONTENANT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCO_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCO_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICCO_CDF_COIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICCO_CDF_COIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICCO_INCOMPATIBILITE_CONTENANTRow
            Get
                Return CType(Me.Rows(index),ICCO_INCOMPATIBILITE_CONTENANTRow)
            End Get
        End Property
        
        Public Event ICCO_INCOMPATIBILITE_CONTENANTRowChanging As ICCO_INCOMPATIBILITE_CONTENANTRowChangeEventHandler
        
        Public Event ICCO_INCOMPATIBILITE_CONTENANTRowChanged As ICCO_INCOMPATIBILITE_CONTENANTRowChangeEventHandler
        
        Public Event ICCO_INCOMPATIBILITE_CONTENANTRowDeleting As ICCO_INCOMPATIBILITE_CONTENANTRowChangeEventHandler
        
        Public Event ICCO_INCOMPATIBILITE_CONTENANTRowDeleted As ICCO_INCOMPATIBILITE_CONTENANTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICCO_INCOMPATIBILITE_CONTENANTRow(ByVal row As ICCO_INCOMPATIBILITE_CONTENANTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICCO_INCOMPATIBILITE_CONTENANTRow(ByVal ICCO_FIC_CODE_FK_PK As Integer, ByVal ICCO_CDF_COIC_CODE_FK_PK As String) As ICCO_INCOMPATIBILITE_CONTENANTRow
            Dim rowICCO_INCOMPATIBILITE_CONTENANTRow As ICCO_INCOMPATIBILITE_CONTENANTRow = CType(Me.NewRow,ICCO_INCOMPATIBILITE_CONTENANTRow)
            Dim columnValuesArray() As Object = New Object() {ICCO_FIC_CODE_FK_PK, ICCO_CDF_COIC_CODE_FK_PK}
            rowICCO_INCOMPATIBILITE_CONTENANTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICCO_INCOMPATIBILITE_CONTENANTRow)
            Return rowICCO_INCOMPATIBILITE_CONTENANTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICCO_FIC_CODE_FK_PKICCO_CDF_COIC_CODE_FK_PK(ByVal ICCO_FIC_CODE_FK_PK As Integer, ByVal ICCO_CDF_COIC_CODE_FK_PK As String) As ICCO_INCOMPATIBILITE_CONTENANTRow
            Return CType(Me.Rows.Find(New Object() {ICCO_FIC_CODE_FK_PK, ICCO_CDF_COIC_CODE_FK_PK}),ICCO_INCOMPATIBILITE_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICCO_INCOMPATIBILITE_CONTENANTDataTable = CType(MyBase.Clone,ICCO_INCOMPATIBILITE_CONTENANTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICCO_INCOMPATIBILITE_CONTENANTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICCO_FIC_CODE_FK_PK = MyBase.Columns("ICCO_FIC_CODE_FK_PK")
            Me.columnICCO_CDF_COIC_CODE_FK_PK = MyBase.Columns("ICCO_CDF_COIC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICCO_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICCO_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCO_FIC_CODE_FK_PK)
            Me.columnICCO_CDF_COIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICCO_CDF_COIC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICCO_CDF_COIC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICCO_FIC_CODE_FK_PK, Me.columnICCO_CDF_COIC_CODE_FK_PK}, true))
            Me.columnICCO_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICCO_CDF_COIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICCO_CDF_COIC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICCO_INCOMPATIBILITE_CONTENANTRow() As ICCO_INCOMPATIBILITE_CONTENANTRow
            Return CType(Me.NewRow,ICCO_INCOMPATIBILITE_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICCO_INCOMPATIBILITE_CONTENANTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICCO_INCOMPATIBILITE_CONTENANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICCO_INCOMPATIBILITE_CONTENANTRowChangedEvent) Is Nothing) Then
                RaiseEvent ICCO_INCOMPATIBILITE_CONTENANTRowChanged(Me, New ICCO_INCOMPATIBILITE_CONTENANTRowChangeEvent(CType(e.Row,ICCO_INCOMPATIBILITE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICCO_INCOMPATIBILITE_CONTENANTRowChangingEvent) Is Nothing) Then
                RaiseEvent ICCO_INCOMPATIBILITE_CONTENANTRowChanging(Me, New ICCO_INCOMPATIBILITE_CONTENANTRowChangeEvent(CType(e.Row,ICCO_INCOMPATIBILITE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICCO_INCOMPATIBILITE_CONTENANTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ICCO_INCOMPATIBILITE_CONTENANTRowDeleted(Me, New ICCO_INCOMPATIBILITE_CONTENANTRowChangeEvent(CType(e.Row,ICCO_INCOMPATIBILITE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICCO_INCOMPATIBILITE_CONTENANTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ICCO_INCOMPATIBILITE_CONTENANTRowDeleting(Me, New ICCO_INCOMPATIBILITE_CONTENANTRowChangeEvent(CType(e.Row,ICCO_INCOMPATIBILITE_CONTENANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICCO_INCOMPATIBILITE_CONTENANTRow(ByVal row As ICCO_INCOMPATIBILITE_CONTENANTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICCO_INCOMPATIBILITE_CONTENANTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICNA_INCOMPATIBILITE_NATUREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICNA_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICNA_CDF_NAIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICNA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICNA_INCOMPATIBILITE_NATURE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICNA_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICNA_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICNA_CDF_NAIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICNA_CDF_NAIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICNA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICNA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICNA_INCOMPATIBILITE_NATURERow
            Get
                Return CType(Me.Rows(index),ICNA_INCOMPATIBILITE_NATURERow)
            End Get
        End Property
        
        Public Event ICNA_INCOMPATIBILITE_NATURERowChanging As ICNA_INCOMPATIBILITE_NATURERowChangeEventHandler
        
        Public Event ICNA_INCOMPATIBILITE_NATURERowChanged As ICNA_INCOMPATIBILITE_NATURERowChangeEventHandler
        
        Public Event ICNA_INCOMPATIBILITE_NATURERowDeleting As ICNA_INCOMPATIBILITE_NATURERowChangeEventHandler
        
        Public Event ICNA_INCOMPATIBILITE_NATURERowDeleted As ICNA_INCOMPATIBILITE_NATURERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICNA_INCOMPATIBILITE_NATURERow(ByVal row As ICNA_INCOMPATIBILITE_NATURERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICNA_INCOMPATIBILITE_NATURERow(ByVal ICNA_FIC_CODE_FK_PK As Integer, ByVal ICNA_CDF_NAIC_CODE_FK_PK As String, ByVal ICNA_NUMORD As Short) As ICNA_INCOMPATIBILITE_NATURERow
            Dim rowICNA_INCOMPATIBILITE_NATURERow As ICNA_INCOMPATIBILITE_NATURERow = CType(Me.NewRow,ICNA_INCOMPATIBILITE_NATURERow)
            Dim columnValuesArray() As Object = New Object() {ICNA_FIC_CODE_FK_PK, ICNA_CDF_NAIC_CODE_FK_PK, ICNA_NUMORD}
            rowICNA_INCOMPATIBILITE_NATURERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICNA_INCOMPATIBILITE_NATURERow)
            Return rowICNA_INCOMPATIBILITE_NATURERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICNA_FIC_CODE_FK_PKICNA_CDF_NAIC_CODE_FK_PK(ByVal ICNA_FIC_CODE_FK_PK As Integer, ByVal ICNA_CDF_NAIC_CODE_FK_PK As String) As ICNA_INCOMPATIBILITE_NATURERow
            Return CType(Me.Rows.Find(New Object() {ICNA_FIC_CODE_FK_PK, ICNA_CDF_NAIC_CODE_FK_PK}),ICNA_INCOMPATIBILITE_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICNA_INCOMPATIBILITE_NATUREDataTable = CType(MyBase.Clone,ICNA_INCOMPATIBILITE_NATUREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICNA_INCOMPATIBILITE_NATUREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICNA_FIC_CODE_FK_PK = MyBase.Columns("ICNA_FIC_CODE_FK_PK")
            Me.columnICNA_CDF_NAIC_CODE_FK_PK = MyBase.Columns("ICNA_CDF_NAIC_CODE_FK_PK")
            Me.columnICNA_NUMORD = MyBase.Columns("ICNA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICNA_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICNA_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICNA_FIC_CODE_FK_PK)
            Me.columnICNA_CDF_NAIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICNA_CDF_NAIC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICNA_CDF_NAIC_CODE_FK_PK)
            Me.columnICNA_NUMORD = New Global.System.Data.DataColumn("ICNA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICNA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICNA_FIC_CODE_FK_PK, Me.columnICNA_CDF_NAIC_CODE_FK_PK}, true))
            Me.columnICNA_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICNA_CDF_NAIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICNA_CDF_NAIC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICNA_INCOMPATIBILITE_NATURERow() As ICNA_INCOMPATIBILITE_NATURERow
            Return CType(Me.NewRow,ICNA_INCOMPATIBILITE_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICNA_INCOMPATIBILITE_NATURERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICNA_INCOMPATIBILITE_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICNA_INCOMPATIBILITE_NATURERowChangedEvent) Is Nothing) Then
                RaiseEvent ICNA_INCOMPATIBILITE_NATURERowChanged(Me, New ICNA_INCOMPATIBILITE_NATURERowChangeEvent(CType(e.Row,ICNA_INCOMPATIBILITE_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICNA_INCOMPATIBILITE_NATURERowChangingEvent) Is Nothing) Then
                RaiseEvent ICNA_INCOMPATIBILITE_NATURERowChanging(Me, New ICNA_INCOMPATIBILITE_NATURERowChangeEvent(CType(e.Row,ICNA_INCOMPATIBILITE_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICNA_INCOMPATIBILITE_NATURERowDeletedEvent) Is Nothing) Then
                RaiseEvent ICNA_INCOMPATIBILITE_NATURERowDeleted(Me, New ICNA_INCOMPATIBILITE_NATURERowChangeEvent(CType(e.Row,ICNA_INCOMPATIBILITE_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICNA_INCOMPATIBILITE_NATURERowDeletingEvent) Is Nothing) Then
                RaiseEvent ICNA_INCOMPATIBILITE_NATURERowDeleting(Me, New ICNA_INCOMPATIBILITE_NATURERowChangeEvent(CType(e.Row,ICNA_INCOMPATIBILITE_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICNA_INCOMPATIBILITE_NATURERow(ByVal row As ICNA_INCOMPATIBILITE_NATURERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICNA_INCOMPATIBILITE_NATUREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICDUR_INCOMPATIBILITE_DUREEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICDUR_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICDUR_CDF_DUR_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICDUR_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICDUR_INCOMPATIBILITE_DUREE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICDUR_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICDUR_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICDUR_CDF_DUR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICDUR_CDF_DUR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICDUR_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICDUR_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICDUR_INCOMPATIBILITE_DUREERow
            Get
                Return CType(Me.Rows(index),ICDUR_INCOMPATIBILITE_DUREERow)
            End Get
        End Property
        
        Public Event ICDUR_INCOMPATIBILITE_DUREERowChanging As ICDUR_INCOMPATIBILITE_DUREERowChangeEventHandler
        
        Public Event ICDUR_INCOMPATIBILITE_DUREERowChanged As ICDUR_INCOMPATIBILITE_DUREERowChangeEventHandler
        
        Public Event ICDUR_INCOMPATIBILITE_DUREERowDeleting As ICDUR_INCOMPATIBILITE_DUREERowChangeEventHandler
        
        Public Event ICDUR_INCOMPATIBILITE_DUREERowDeleted As ICDUR_INCOMPATIBILITE_DUREERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICDUR_INCOMPATIBILITE_DUREERow(ByVal row As ICDUR_INCOMPATIBILITE_DUREERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICDUR_INCOMPATIBILITE_DUREERow(ByVal ICDUR_FIC_CODE_FK_PK As Integer, ByVal ICDUR_CDF_DUR_CODE_FK_PK As String, ByVal ICDUR_NUMORD As Short) As ICDUR_INCOMPATIBILITE_DUREERow
            Dim rowICDUR_INCOMPATIBILITE_DUREERow As ICDUR_INCOMPATIBILITE_DUREERow = CType(Me.NewRow,ICDUR_INCOMPATIBILITE_DUREERow)
            Dim columnValuesArray() As Object = New Object() {ICDUR_FIC_CODE_FK_PK, ICDUR_CDF_DUR_CODE_FK_PK, ICDUR_NUMORD}
            rowICDUR_INCOMPATIBILITE_DUREERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICDUR_INCOMPATIBILITE_DUREERow)
            Return rowICDUR_INCOMPATIBILITE_DUREERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICDUR_FIC_CODE_FK_PKICDUR_CDF_DUR_CODE_FK_PK(ByVal ICDUR_FIC_CODE_FK_PK As Integer, ByVal ICDUR_CDF_DUR_CODE_FK_PK As String) As ICDUR_INCOMPATIBILITE_DUREERow
            Return CType(Me.Rows.Find(New Object() {ICDUR_FIC_CODE_FK_PK, ICDUR_CDF_DUR_CODE_FK_PK}),ICDUR_INCOMPATIBILITE_DUREERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICDUR_INCOMPATIBILITE_DUREEDataTable = CType(MyBase.Clone,ICDUR_INCOMPATIBILITE_DUREEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICDUR_INCOMPATIBILITE_DUREEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICDUR_FIC_CODE_FK_PK = MyBase.Columns("ICDUR_FIC_CODE_FK_PK")
            Me.columnICDUR_CDF_DUR_CODE_FK_PK = MyBase.Columns("ICDUR_CDF_DUR_CODE_FK_PK")
            Me.columnICDUR_NUMORD = MyBase.Columns("ICDUR_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICDUR_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICDUR_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICDUR_FIC_CODE_FK_PK)
            Me.columnICDUR_CDF_DUR_CODE_FK_PK = New Global.System.Data.DataColumn("ICDUR_CDF_DUR_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICDUR_CDF_DUR_CODE_FK_PK)
            Me.columnICDUR_NUMORD = New Global.System.Data.DataColumn("ICDUR_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICDUR_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICDUR_FIC_CODE_FK_PK, Me.columnICDUR_CDF_DUR_CODE_FK_PK}, true))
            Me.columnICDUR_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICDUR_CDF_DUR_CODE_FK_PK.AllowDBNull = false
            Me.columnICDUR_CDF_DUR_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICDUR_INCOMPATIBILITE_DUREERow() As ICDUR_INCOMPATIBILITE_DUREERow
            Return CType(Me.NewRow,ICDUR_INCOMPATIBILITE_DUREERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICDUR_INCOMPATIBILITE_DUREERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICDUR_INCOMPATIBILITE_DUREERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICDUR_INCOMPATIBILITE_DUREERowChangedEvent) Is Nothing) Then
                RaiseEvent ICDUR_INCOMPATIBILITE_DUREERowChanged(Me, New ICDUR_INCOMPATIBILITE_DUREERowChangeEvent(CType(e.Row,ICDUR_INCOMPATIBILITE_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICDUR_INCOMPATIBILITE_DUREERowChangingEvent) Is Nothing) Then
                RaiseEvent ICDUR_INCOMPATIBILITE_DUREERowChanging(Me, New ICDUR_INCOMPATIBILITE_DUREERowChangeEvent(CType(e.Row,ICDUR_INCOMPATIBILITE_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICDUR_INCOMPATIBILITE_DUREERowDeletedEvent) Is Nothing) Then
                RaiseEvent ICDUR_INCOMPATIBILITE_DUREERowDeleted(Me, New ICDUR_INCOMPATIBILITE_DUREERowChangeEvent(CType(e.Row,ICDUR_INCOMPATIBILITE_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICDUR_INCOMPATIBILITE_DUREERowDeletingEvent) Is Nothing) Then
                RaiseEvent ICDUR_INCOMPATIBILITE_DUREERowDeleting(Me, New ICDUR_INCOMPATIBILITE_DUREERowChangeEvent(CType(e.Row,ICDUR_INCOMPATIBILITE_DUREERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICDUR_INCOMPATIBILITE_DUREERow(ByVal row As ICDUR_INCOMPATIBILITE_DUREERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICDUR_INCOMPATIBILITE_DUREEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICTMP_INCOMPA_TEMPERATUREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICTMP_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICTMP_CDF_TEMP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICTMP_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICTMP_INCOMPA_TEMPERATURE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICTMP_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICTMP_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICTMP_CDF_TEMP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICTMP_CDF_TEMP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICTMP_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICTMP_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICTMP_INCOMPA_TEMPERATURERow
            Get
                Return CType(Me.Rows(index),ICTMP_INCOMPA_TEMPERATURERow)
            End Get
        End Property
        
        Public Event ICTMP_INCOMPA_TEMPERATURERowChanging As ICTMP_INCOMPA_TEMPERATURERowChangeEventHandler
        
        Public Event ICTMP_INCOMPA_TEMPERATURERowChanged As ICTMP_INCOMPA_TEMPERATURERowChangeEventHandler
        
        Public Event ICTMP_INCOMPA_TEMPERATURERowDeleting As ICTMP_INCOMPA_TEMPERATURERowChangeEventHandler
        
        Public Event ICTMP_INCOMPA_TEMPERATURERowDeleted As ICTMP_INCOMPA_TEMPERATURERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICTMP_INCOMPA_TEMPERATURERow(ByVal row As ICTMP_INCOMPA_TEMPERATURERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICTMP_INCOMPA_TEMPERATURERow(ByVal ICTMP_FIC_CODE_FK_PK As Integer, ByVal ICTMP_CDF_TEMP_CODE_FK_PK As String, ByVal ICTMP_NUMORD As Short) As ICTMP_INCOMPA_TEMPERATURERow
            Dim rowICTMP_INCOMPA_TEMPERATURERow As ICTMP_INCOMPA_TEMPERATURERow = CType(Me.NewRow,ICTMP_INCOMPA_TEMPERATURERow)
            Dim columnValuesArray() As Object = New Object() {ICTMP_FIC_CODE_FK_PK, ICTMP_CDF_TEMP_CODE_FK_PK, ICTMP_NUMORD}
            rowICTMP_INCOMPA_TEMPERATURERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICTMP_INCOMPA_TEMPERATURERow)
            Return rowICTMP_INCOMPA_TEMPERATURERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICTMP_FIC_CODE_FK_PKICTMP_CDF_TEMP_CODE_FK_PK(ByVal ICTMP_FIC_CODE_FK_PK As Integer, ByVal ICTMP_CDF_TEMP_CODE_FK_PK As String) As ICTMP_INCOMPA_TEMPERATURERow
            Return CType(Me.Rows.Find(New Object() {ICTMP_FIC_CODE_FK_PK, ICTMP_CDF_TEMP_CODE_FK_PK}),ICTMP_INCOMPA_TEMPERATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICTMP_INCOMPA_TEMPERATUREDataTable = CType(MyBase.Clone,ICTMP_INCOMPA_TEMPERATUREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICTMP_INCOMPA_TEMPERATUREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICTMP_FIC_CODE_FK_PK = MyBase.Columns("ICTMP_FIC_CODE_FK_PK")
            Me.columnICTMP_CDF_TEMP_CODE_FK_PK = MyBase.Columns("ICTMP_CDF_TEMP_CODE_FK_PK")
            Me.columnICTMP_NUMORD = MyBase.Columns("ICTMP_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICTMP_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICTMP_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICTMP_FIC_CODE_FK_PK)
            Me.columnICTMP_CDF_TEMP_CODE_FK_PK = New Global.System.Data.DataColumn("ICTMP_CDF_TEMP_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICTMP_CDF_TEMP_CODE_FK_PK)
            Me.columnICTMP_NUMORD = New Global.System.Data.DataColumn("ICTMP_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICTMP_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICTMP_FIC_CODE_FK_PK, Me.columnICTMP_CDF_TEMP_CODE_FK_PK}, true))
            Me.columnICTMP_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICTMP_CDF_TEMP_CODE_FK_PK.AllowDBNull = false
            Me.columnICTMP_CDF_TEMP_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICTMP_INCOMPA_TEMPERATURERow() As ICTMP_INCOMPA_TEMPERATURERow
            Return CType(Me.NewRow,ICTMP_INCOMPA_TEMPERATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICTMP_INCOMPA_TEMPERATURERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICTMP_INCOMPA_TEMPERATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICTMP_INCOMPA_TEMPERATURERowChangedEvent) Is Nothing) Then
                RaiseEvent ICTMP_INCOMPA_TEMPERATURERowChanged(Me, New ICTMP_INCOMPA_TEMPERATURERowChangeEvent(CType(e.Row,ICTMP_INCOMPA_TEMPERATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICTMP_INCOMPA_TEMPERATURERowChangingEvent) Is Nothing) Then
                RaiseEvent ICTMP_INCOMPA_TEMPERATURERowChanging(Me, New ICTMP_INCOMPA_TEMPERATURERowChangeEvent(CType(e.Row,ICTMP_INCOMPA_TEMPERATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICTMP_INCOMPA_TEMPERATURERowDeletedEvent) Is Nothing) Then
                RaiseEvent ICTMP_INCOMPA_TEMPERATURERowDeleted(Me, New ICTMP_INCOMPA_TEMPERATURERowChangeEvent(CType(e.Row,ICTMP_INCOMPA_TEMPERATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICTMP_INCOMPA_TEMPERATURERowDeletingEvent) Is Nothing) Then
                RaiseEvent ICTMP_INCOMPA_TEMPERATURERowDeleting(Me, New ICTMP_INCOMPA_TEMPERATURERowChangeEvent(CType(e.Row,ICTMP_INCOMPA_TEMPERATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICTMP_INCOMPA_TEMPERATURERow(ByVal row As ICTMP_INCOMPA_TEMPERATURERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICTMP_INCOMPA_TEMPERATUREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ICLUM_INCOMPATIBILITE_LUMIEREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnICLUM_FIC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICLUM_CDF_LUM_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnICLUM_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ICLUM_INCOMPATIBILITE_LUMIERE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICLUM_FIC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICLUM_FIC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICLUM_CDF_LUM_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICLUM_CDF_LUM_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ICLUM_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnICLUM_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ICLUM_INCOMPATIBILITE_LUMIERERow
            Get
                Return CType(Me.Rows(index),ICLUM_INCOMPATIBILITE_LUMIERERow)
            End Get
        End Property
        
        Public Event ICLUM_INCOMPATIBILITE_LUMIERERowChanging As ICLUM_INCOMPATIBILITE_LUMIERERowChangeEventHandler
        
        Public Event ICLUM_INCOMPATIBILITE_LUMIERERowChanged As ICLUM_INCOMPATIBILITE_LUMIERERowChangeEventHandler
        
        Public Event ICLUM_INCOMPATIBILITE_LUMIERERowDeleting As ICLUM_INCOMPATIBILITE_LUMIERERowChangeEventHandler
        
        Public Event ICLUM_INCOMPATIBILITE_LUMIERERowDeleted As ICLUM_INCOMPATIBILITE_LUMIERERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddICLUM_INCOMPATIBILITE_LUMIERERow(ByVal row As ICLUM_INCOMPATIBILITE_LUMIERERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddICLUM_INCOMPATIBILITE_LUMIERERow(ByVal ICLUM_FIC_CODE_FK_PK As Integer, ByVal ICLUM_CDF_LUM_CODE_FK_PK As String, ByVal ICLUM_NUMORD As Short) As ICLUM_INCOMPATIBILITE_LUMIERERow
            Dim rowICLUM_INCOMPATIBILITE_LUMIERERow As ICLUM_INCOMPATIBILITE_LUMIERERow = CType(Me.NewRow,ICLUM_INCOMPATIBILITE_LUMIERERow)
            Dim columnValuesArray() As Object = New Object() {ICLUM_FIC_CODE_FK_PK, ICLUM_CDF_LUM_CODE_FK_PK, ICLUM_NUMORD}
            rowICLUM_INCOMPATIBILITE_LUMIERERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowICLUM_INCOMPATIBILITE_LUMIERERow)
            Return rowICLUM_INCOMPATIBILITE_LUMIERERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByICLUM_FIC_CODE_FK_PKICLUM_CDF_LUM_CODE_FK_PK(ByVal ICLUM_FIC_CODE_FK_PK As Integer, ByVal ICLUM_CDF_LUM_CODE_FK_PK As String) As ICLUM_INCOMPATIBILITE_LUMIERERow
            Return CType(Me.Rows.Find(New Object() {ICLUM_FIC_CODE_FK_PK, ICLUM_CDF_LUM_CODE_FK_PK}),ICLUM_INCOMPATIBILITE_LUMIERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ICLUM_INCOMPATIBILITE_LUMIEREDataTable = CType(MyBase.Clone,ICLUM_INCOMPATIBILITE_LUMIEREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ICLUM_INCOMPATIBILITE_LUMIEREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnICLUM_FIC_CODE_FK_PK = MyBase.Columns("ICLUM_FIC_CODE_FK_PK")
            Me.columnICLUM_CDF_LUM_CODE_FK_PK = MyBase.Columns("ICLUM_CDF_LUM_CODE_FK_PK")
            Me.columnICLUM_NUMORD = MyBase.Columns("ICLUM_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnICLUM_FIC_CODE_FK_PK = New Global.System.Data.DataColumn("ICLUM_FIC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICLUM_FIC_CODE_FK_PK)
            Me.columnICLUM_CDF_LUM_CODE_FK_PK = New Global.System.Data.DataColumn("ICLUM_CDF_LUM_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICLUM_CDF_LUM_CODE_FK_PK)
            Me.columnICLUM_NUMORD = New Global.System.Data.DataColumn("ICLUM_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnICLUM_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnICLUM_FIC_CODE_FK_PK, Me.columnICLUM_CDF_LUM_CODE_FK_PK}, true))
            Me.columnICLUM_FIC_CODE_FK_PK.AllowDBNull = false
            Me.columnICLUM_CDF_LUM_CODE_FK_PK.AllowDBNull = false
            Me.columnICLUM_CDF_LUM_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewICLUM_INCOMPATIBILITE_LUMIERERow() As ICLUM_INCOMPATIBILITE_LUMIERERow
            Return CType(Me.NewRow,ICLUM_INCOMPATIBILITE_LUMIERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ICLUM_INCOMPATIBILITE_LUMIERERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ICLUM_INCOMPATIBILITE_LUMIERERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ICLUM_INCOMPATIBILITE_LUMIERERowChangedEvent) Is Nothing) Then
                RaiseEvent ICLUM_INCOMPATIBILITE_LUMIERERowChanged(Me, New ICLUM_INCOMPATIBILITE_LUMIERERowChangeEvent(CType(e.Row,ICLUM_INCOMPATIBILITE_LUMIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ICLUM_INCOMPATIBILITE_LUMIERERowChangingEvent) Is Nothing) Then
                RaiseEvent ICLUM_INCOMPATIBILITE_LUMIERERowChanging(Me, New ICLUM_INCOMPATIBILITE_LUMIERERowChangeEvent(CType(e.Row,ICLUM_INCOMPATIBILITE_LUMIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ICLUM_INCOMPATIBILITE_LUMIERERowDeletedEvent) Is Nothing) Then
                RaiseEvent ICLUM_INCOMPATIBILITE_LUMIERERowDeleted(Me, New ICLUM_INCOMPATIBILITE_LUMIERERowChangeEvent(CType(e.Row,ICLUM_INCOMPATIBILITE_LUMIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ICLUM_INCOMPATIBILITE_LUMIERERowDeletingEvent) Is Nothing) Then
                RaiseEvent ICLUM_INCOMPATIBILITE_LUMIERERowDeleting(Me, New ICLUM_INCOMPATIBILITE_LUMIERERowChangeEvent(CType(e.Row,ICLUM_INCOMPATIBILITE_LUMIERERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveICLUM_INCOMPATIBILITE_LUMIERERow(ByVal row As ICLUM_INCOMPATIBILITE_LUMIERERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance2 = New dsTheriaque_AnalyseOrdonance2
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ICLUM_INCOMPATIBILITE_LUMIEREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FIC_INCOMPATIBILITERow
        Inherits Global.System.Data.DataRow
        
        Private tableFIC_INCOMPATIBILITE As FIC_INCOMPATIBILITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFIC_INCOMPATIBILITE = CType(Me.Table,FIC_INCOMPATIBILITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIC_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFIC_INCOMPATIBILITE.FIC_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFIC_INCOMPATIBILITE.FIC_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIC_ORIGINE() As String
            Get
                Return CType(Me(Me.tableFIC_INCOMPATIBILITE.FIC_ORIGINEColumn),String)
            End Get
            Set
                Me(Me.tableFIC_INCOMPATIBILITE.FIC_ORIGINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIC_TYPE() As String
            Get
                Return CType(Me(Me.tableFIC_INCOMPATIBILITE.FIC_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableFIC_INCOMPATIBILITE.FIC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIC_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFIC_INCOMPATIBILITE.FIC_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIC_TEXTE' dans la table 'FIC_INCOMPATIBILITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFIC_INCOMPATIBILITE.FIC_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIC_DATECR() As Date
            Get
                Return CType(Me(Me.tableFIC_INCOMPATIBILITE.FIC_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFIC_INCOMPATIBILITE.FIC_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIC_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFIC_INCOMPATIBILITE.FIC_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIC_DATEMJ' dans la table 'FIC_INCOMPATIBILITE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFIC_INCOMPATIBILITE.FIC_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIC_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFIC_INCOMPATIBILITE.FIC_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIC_TEXTENull()
            Me(Me.tableFIC_INCOMPATIBILITE.FIC_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIC_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFIC_INCOMPATIBILITE.FIC_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIC_DATEMJNull()
            Me(Me.tableFIC_INCOMPATIBILITE.FIC_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC1SAC_TERME1SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableIC1SAC_TERME1SUBACT As IC1SAC_TERME1SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC1SAC_TERME1SUBACT = CType(Me.Table,IC1SAC_TERME1SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1SAC_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1SAC_TERME1SUBACT.IC1SAC_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1SAC_TERME1SUBACT.IC1SAC_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1SAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1SAC_TERME1SUBACT.IC1SAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1SAC_TERME1SUBACT.IC1SAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC1SAU_TERME1SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableIC1SAU_TERME1SUBAUX As IC1SAU_TERME1SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC1SAU_TERME1SUBAUX = CType(Me.Table,IC1SAU_TERME1SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1SAU_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1SAU_TERME1SUBAUX.IC1SAU_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1SAU_TERME1SUBAUX.IC1SAU_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1SAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1SAU_TERME1SUBAUX.IC1SAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1SAU_TERME1SUBAUX.IC1SAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC1PR_TERME1PRODUITRow
        Inherits Global.System.Data.DataRow
        
        Private tableIC1PR_TERME1PRODUIT As IC1PR_TERME1PRODUITDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC1PR_TERME1PRODUIT = CType(Me.Table,IC1PR_TERME1PRODUITDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1PR_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1PR_TERME1PRODUIT.IC1PR_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1PR_TERME1PRODUIT.IC1PR_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1PR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1PR_TERME1PRODUIT.IC1PR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1PR_TERME1PRODUIT.IC1PR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC1SP_TERME1SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableIC1SP_TERME1SPECIALITE As IC1SP_TERME1SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC1SP_TERME1SPECIALITE = CType(Me.Table,IC1SP_TERME1SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1SP_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1SP_TERME1SPECIALITE.IC1SP_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1SP_TERME1SPECIALITE.IC1SP_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1SP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1SP_TERME1SPECIALITE.IC1SP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1SP_TERME1SPECIALITE.IC1SP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC2SAC_TERME2SUBACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableIC2SAC_TERME2SUBACT As IC2SAC_TERME2SUBACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC2SAC_TERME2SUBACT = CType(Me.Table,IC2SAC_TERME2SUBACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2SAC_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2SAC_TERME2SUBACT.IC2SAC_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2SAC_TERME2SUBACT.IC2SAC_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2SAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2SAC_TERME2SUBACT.IC2SAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2SAC_TERME2SUBACT.IC2SAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC2SAU_TERME2SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableIC2SAU_TERME2SUBAUX As IC2SAU_TERME2SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC2SAU_TERME2SUBAUX = CType(Me.Table,IC2SAU_TERME2SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2SAU_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2SAU_TERME2SUBAUX.IC2SAU_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2SAU_TERME2SUBAUX.IC2SAU_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2SAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2SAU_TERME2SUBAUX.IC2SAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2SAU_TERME2SUBAUX.IC2SAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC2PR_TERME2PRODUITRow
        Inherits Global.System.Data.DataRow
        
        Private tableIC2PR_TERME2PRODUIT As IC2PR_TERME2PRODUITDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC2PR_TERME2PRODUIT = CType(Me.Table,IC2PR_TERME2PRODUITDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2PR_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2PR_TERME2PRODUIT.IC2PR_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2PR_TERME2PRODUIT.IC2PR_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2PR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2PR_TERME2PRODUIT.IC2PR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2PR_TERME2PRODUIT.IC2PR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC2SP_TERME2SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableIC2SP_TERME2SPECIALITE As IC2SP_TERME2SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC2SP_TERME2SPECIALITE = CType(Me.Table,IC2SP_TERME2SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2SP_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2SP_TERME2SPECIALITE.IC2SP_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2SP_TERME2SPECIALITE.IC2SP_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2SP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2SP_TERME2SPECIALITE.IC2SP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2SP_TERME2SPECIALITE.IC2SP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICSOL_INCOMPATIBILITE_SOLUTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableICSOL_INCOMPATIBILITE_SOLUTION As ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICSOL_INCOMPATIBILITE_SOLUTION = CType(Me.Table,ICSOL_INCOMPATIBILITE_SOLUTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICSOL_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICSOL_INCOMPATIBILITE_SOLUTION.ICSOL_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICSOL_INCOMPATIBILITE_SOLUTION.ICSOL_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICSOL_CDF_SOLIC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICSOL_INCOMPATIBILITE_SOLUTION.ICSOL_CDF_SOLIC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICSOL_INCOMPATIBILITE_SOLUTION.ICSOL_CDF_SOLIC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICCT1_CONCENTRATION1Row
        Inherits Global.System.Data.DataRow
        
        Private tableICCT1_CONCENTRATION1 As ICCT1_CONCENTRATION1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICCT1_CONCENTRATION1 = CType(Me.Table,ICCT1_CONCENTRATION1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT1_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICCT1_CONCENTRATION1.ICCT1_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICCT1_CONCENTRATION1.ICCT1_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT1_NUMSEQ_PK() As Integer
            Get
                Return CType(Me(Me.tableICCT1_CONCENTRATION1.ICCT1_NUMSEQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICCT1_CONCENTRATION1.ICCT1_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT1_CONCENTRATION1() As String
            Get
                Try 
                    Return CType(Me(Me.tableICCT1_CONCENTRATION1.ICCT1_CONCENTRATION1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICCT1_CONCENTRATION1' dans la table 'ICCT1_CONCENTRATI"& _ 
                            "ON1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICCT1_CONCENTRATION1.ICCT1_CONCENTRATION1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT1_CDF_UDOSE_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableICCT1_CONCENTRATION1.ICCT1_CDF_UDOSE_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICCT1_CDF_UDOSE_CODE_FK' dans la table 'ICCT1_CONCENTR"& _ 
                            "ATION1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICCT1_CONCENTRATION1.ICCT1_CDF_UDOSE_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT1_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableICCT1_CONCENTRATION1.ICCT1_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICCT1_NUMORD' dans la table 'ICCT1_CONCENTRATION1' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICCT1_CONCENTRATION1.ICCT1_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICCT1_CONCENTRATION1Null() As Boolean
            Return Me.IsNull(Me.tableICCT1_CONCENTRATION1.ICCT1_CONCENTRATION1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICCT1_CONCENTRATION1Null()
            Me(Me.tableICCT1_CONCENTRATION1.ICCT1_CONCENTRATION1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICCT1_CDF_UDOSE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableICCT1_CONCENTRATION1.ICCT1_CDF_UDOSE_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICCT1_CDF_UDOSE_CODE_FKNull()
            Me(Me.tableICCT1_CONCENTRATION1.ICCT1_CDF_UDOSE_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICCT1_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableICCT1_CONCENTRATION1.ICCT1_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICCT1_NUMORDNull()
            Me(Me.tableICCT1_CONCENTRATION1.ICCT1_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC1VE_INCOMPATIBILITE_VECTEUR1Row
        Inherits Global.System.Data.DataRow
        
        Private tableIC1VE_INCOMPATIBILITE_VECTEUR1 As IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1 = CType(Me.Table,IC1VE_INCOMPATIBILITE_VECTEUR1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1VE_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1.IC1VE_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1.IC1VE_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC1VE_CDF_VEIC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1.IC1VE_CDF_VEIC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIC1VE_INCOMPATIBILITE_VECTEUR1.IC1VE_CDF_VEIC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICCT2_CONCENTRATION2Row
        Inherits Global.System.Data.DataRow
        
        Private tableICCT2_CONCENTRATION2 As ICCT2_CONCENTRATION2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICCT2_CONCENTRATION2 = CType(Me.Table,ICCT2_CONCENTRATION2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT2_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICCT2_CONCENTRATION2.ICCT2_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICCT2_CONCENTRATION2.ICCT2_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT2_NUMSEQ_PK() As Integer
            Get
                Return CType(Me(Me.tableICCT2_CONCENTRATION2.ICCT2_NUMSEQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICCT2_CONCENTRATION2.ICCT2_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT2_CONCENTRATION2() As String
            Get
                Try 
                    Return CType(Me(Me.tableICCT2_CONCENTRATION2.ICCT2_CONCENTRATION2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICCT2_CONCENTRATION2' dans la table 'ICCT2_CONCENTRATI"& _ 
                            "ON2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICCT2_CONCENTRATION2.ICCT2_CONCENTRATION2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT2_CDF_UDOSE_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableICCT2_CONCENTRATION2.ICCT2_CDF_UDOSE_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICCT2_CDF_UDOSE_CODE_FK' dans la table 'ICCT2_CONCENTR"& _ 
                            "ATION2' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICCT2_CONCENTRATION2.ICCT2_CDF_UDOSE_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCT2_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableICCT2_CONCENTRATION2.ICCT2_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICCT2_NUMORD' dans la table 'ICCT2_CONCENTRATION2' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICCT2_CONCENTRATION2.ICCT2_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICCT2_CONCENTRATION2Null() As Boolean
            Return Me.IsNull(Me.tableICCT2_CONCENTRATION2.ICCT2_CONCENTRATION2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICCT2_CONCENTRATION2Null()
            Me(Me.tableICCT2_CONCENTRATION2.ICCT2_CONCENTRATION2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICCT2_CDF_UDOSE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableICCT2_CONCENTRATION2.ICCT2_CDF_UDOSE_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICCT2_CDF_UDOSE_CODE_FKNull()
            Me(Me.tableICCT2_CONCENTRATION2.ICCT2_CDF_UDOSE_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICCT2_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableICCT2_CONCENTRATION2.ICCT2_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICCT2_NUMORDNull()
            Me(Me.tableICCT2_CONCENTRATION2.ICCT2_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IC2VE_INCOMPATIBILITE_VECTEUR2Row
        Inherits Global.System.Data.DataRow
        
        Private tableIC2VE_INCOMPATIBILITE_VECTEUR2 As IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2 = CType(Me.Table,IC2VE_INCOMPATIBILITE_VECTEUR2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2VE_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2.IC2VE_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2.IC2VE_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC2VE_CDF_VEIC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2.IC2VE_CDF_VEIC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIC2VE_INCOMPATIBILITE_VECTEUR2.IC2VE_CDF_VEIC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICMA_INCOMPATIBILITE_MATERIAURow
        Inherits Global.System.Data.DataRow
        
        Private tableICMA_INCOMPATIBILITE_MATERIAU As ICMA_INCOMPATIBILITE_MATERIAUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICMA_INCOMPATIBILITE_MATERIAU = CType(Me.Table,ICMA_INCOMPATIBILITE_MATERIAUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICMA_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICMA_INCOMPATIBILITE_MATERIAU.ICMA_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICMA_INCOMPATIBILITE_MATERIAU.ICMA_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICMA_CDF_MAIC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICMA_INCOMPATIBILITE_MATERIAU.ICMA_CDF_MAIC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICMA_INCOMPATIBILITE_MATERIAU.ICMA_CDF_MAIC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICCO_INCOMPATIBILITE_CONTENANTRow
        Inherits Global.System.Data.DataRow
        
        Private tableICCO_INCOMPATIBILITE_CONTENANT As ICCO_INCOMPATIBILITE_CONTENANTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICCO_INCOMPATIBILITE_CONTENANT = CType(Me.Table,ICCO_INCOMPATIBILITE_CONTENANTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCO_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICCO_INCOMPATIBILITE_CONTENANT.ICCO_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICCO_INCOMPATIBILITE_CONTENANT.ICCO_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICCO_CDF_COIC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICCO_INCOMPATIBILITE_CONTENANT.ICCO_CDF_COIC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICCO_INCOMPATIBILITE_CONTENANT.ICCO_CDF_COIC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICNA_INCOMPATIBILITE_NATURERow
        Inherits Global.System.Data.DataRow
        
        Private tableICNA_INCOMPATIBILITE_NATURE As ICNA_INCOMPATIBILITE_NATUREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICNA_INCOMPATIBILITE_NATURE = CType(Me.Table,ICNA_INCOMPATIBILITE_NATUREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICNA_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICNA_CDF_NAIC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_CDF_NAIC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_CDF_NAIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICNA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICNA_NUMORD' dans la table 'ICNA_INCOMPATIBILITE_NATUR"& _ 
                            "E' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICNA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICNA_NUMORDNull()
            Me(Me.tableICNA_INCOMPATIBILITE_NATURE.ICNA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICDUR_INCOMPATIBILITE_DUREERow
        Inherits Global.System.Data.DataRow
        
        Private tableICDUR_INCOMPATIBILITE_DUREE As ICDUR_INCOMPATIBILITE_DUREEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICDUR_INCOMPATIBILITE_DUREE = CType(Me.Table,ICDUR_INCOMPATIBILITE_DUREEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICDUR_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICDUR_CDF_DUR_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_CDF_DUR_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_CDF_DUR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICDUR_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICDUR_NUMORD' dans la table 'ICDUR_INCOMPATIBILITE_DUR"& _ 
                            "EE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICDUR_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICDUR_NUMORDNull()
            Me(Me.tableICDUR_INCOMPATIBILITE_DUREE.ICDUR_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICTMP_INCOMPA_TEMPERATURERow
        Inherits Global.System.Data.DataRow
        
        Private tableICTMP_INCOMPA_TEMPERATURE As ICTMP_INCOMPA_TEMPERATUREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICTMP_INCOMPA_TEMPERATURE = CType(Me.Table,ICTMP_INCOMPA_TEMPERATUREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICTMP_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICTMP_CDF_TEMP_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_CDF_TEMP_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_CDF_TEMP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICTMP_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICTMP_NUMORD' dans la table 'ICTMP_INCOMPA_TEMPERATURE"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICTMP_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICTMP_NUMORDNull()
            Me(Me.tableICTMP_INCOMPA_TEMPERATURE.ICTMP_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ICLUM_INCOMPATIBILITE_LUMIERERow
        Inherits Global.System.Data.DataRow
        
        Private tableICLUM_INCOMPATIBILITE_LUMIERE As ICLUM_INCOMPATIBILITE_LUMIEREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableICLUM_INCOMPATIBILITE_LUMIERE = CType(Me.Table,ICLUM_INCOMPATIBILITE_LUMIEREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICLUM_FIC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_FIC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_FIC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICLUM_CDF_LUM_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_CDF_LUM_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_CDF_LUM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ICLUM_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'ICLUM_NUMORD' dans la table 'ICLUM_INCOMPATIBILITE_LUM"& _ 
                            "IERE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsICLUM_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetICLUM_NUMORDNull()
            Me(Me.tableICLUM_INCOMPATIBILITE_LUMIERE.ICLUM_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FIC_INCOMPATIBILITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FIC_INCOMPATIBILITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FIC_INCOMPATIBILITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FIC_INCOMPATIBILITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC1SAC_TERME1SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC1SAC_TERME1SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC1SAC_TERME1SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC1SAC_TERME1SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC1SAU_TERME1SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC1SAU_TERME1SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC1SAU_TERME1SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC1SAU_TERME1SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC1PR_TERME1PRODUITRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC1PR_TERME1PRODUITRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC1PR_TERME1PRODUITRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC1PR_TERME1PRODUITRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC1SP_TERME1SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC1SP_TERME1SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC1SP_TERME1SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC1SP_TERME1SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC2SAC_TERME2SUBACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC2SAC_TERME2SUBACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC2SAC_TERME2SUBACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC2SAC_TERME2SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC2SAU_TERME2SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC2SAU_TERME2SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC2SAU_TERME2SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC2SAU_TERME2SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC2PR_TERME2PRODUITRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC2PR_TERME2PRODUITRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC2PR_TERME2PRODUITRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC2PR_TERME2PRODUITRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC2SP_TERME2SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC2SP_TERME2SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC2SP_TERME2SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC2SP_TERME2SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICSOL_INCOMPATIBILITE_SOLUTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICSOL_INCOMPATIBILITE_SOLUTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICSOL_INCOMPATIBILITE_SOLUTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICSOL_INCOMPATIBILITE_SOLUTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICCT1_CONCENTRATION1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICCT1_CONCENTRATION1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICCT1_CONCENTRATION1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICCT1_CONCENTRATION1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC1VE_INCOMPATIBILITE_VECTEUR1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC1VE_INCOMPATIBILITE_VECTEUR1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC1VE_INCOMPATIBILITE_VECTEUR1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC1VE_INCOMPATIBILITE_VECTEUR1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICCT2_CONCENTRATION2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICCT2_CONCENTRATION2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICCT2_CONCENTRATION2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICCT2_CONCENTRATION2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IC2VE_INCOMPATIBILITE_VECTEUR2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IC2VE_INCOMPATIBILITE_VECTEUR2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IC2VE_INCOMPATIBILITE_VECTEUR2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IC2VE_INCOMPATIBILITE_VECTEUR2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICMA_INCOMPATIBILITE_MATERIAURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICMA_INCOMPATIBILITE_MATERIAURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICMA_INCOMPATIBILITE_MATERIAURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICMA_INCOMPATIBILITE_MATERIAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICCO_INCOMPATIBILITE_CONTENANTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICCO_INCOMPATIBILITE_CONTENANTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICCO_INCOMPATIBILITE_CONTENANTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICCO_INCOMPATIBILITE_CONTENANTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICNA_INCOMPATIBILITE_NATURERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICNA_INCOMPATIBILITE_NATURERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICNA_INCOMPATIBILITE_NATURERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICNA_INCOMPATIBILITE_NATURERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICDUR_INCOMPATIBILITE_DUREERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICDUR_INCOMPATIBILITE_DUREERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICDUR_INCOMPATIBILITE_DUREERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICDUR_INCOMPATIBILITE_DUREERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICTMP_INCOMPA_TEMPERATURERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICTMP_INCOMPA_TEMPERATURERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICTMP_INCOMPA_TEMPERATURERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICTMP_INCOMPA_TEMPERATURERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ICLUM_INCOMPATIBILITE_LUMIERERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ICLUM_INCOMPATIBILITE_LUMIERERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ICLUM_INCOMPATIBILITE_LUMIERERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ICLUM_INCOMPATIBILITE_LUMIERERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_AnalyseOrdonance2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FIC_INCOMPATIBILITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FIC_INCOMPATIBILITE"
            tableMapping.ColumnMappings.Add("FIC_CODE_SQ_PK", "FIC_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FIC_ORIGINE", "FIC_ORIGINE")
            tableMapping.ColumnMappings.Add("FIC_TYPE", "FIC_TYPE")
            tableMapping.ColumnMappings.Add("FIC_TEXTE", "FIC_TEXTE")
            tableMapping.ColumnMappings.Add("FIC_DATECR", "FIC_DATECR")
            tableMapping.ColumnMappings.Add("FIC_DATEMJ", "FIC_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FIC_INCOMPATIBILITE] WHERE (([FIC_CODE_SQ_PK] = @Origina"& _ 
                "l_FIC_CODE_SQ_PK) AND ([FIC_ORIGINE] = @Original_FIC_ORIGINE) AND ([FIC_TYPE] = "& _ 
                "@Original_FIC_TYPE) AND ([FIC_DATECR] = @Original_FIC_DATECR) AND ((@IsNull_FIC_"& _ 
                "DATEMJ = 1 AND [FIC_DATEMJ] IS NULL) OR ([FIC_DATEMJ] = @Original_FIC_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_ORIGINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FIC_INCOMPATIBILITE] ([FIC_CODE_SQ_PK], [FIC_ORIGINE], ["& _ 
                "FIC_TYPE], [FIC_TEXTE], [FIC_DATECR], [FIC_DATEMJ]) VALUES (@FIC_CODE_SQ_PK, @FI"& _ 
                "C_ORIGINE, @FIC_TYPE, @FIC_TEXTE, @FIC_DATECR, @FIC_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FIC_CODE_SQ"& _ 
                "_PK, FIC_ORIGINE, FIC_TYPE, FIC_TEXTE, FIC_DATECR, FIC_DATEMJ FROM THERIAQUE.FIC"& _ 
                "_INCOMPATIBILITE WHERE (FIC_CODE_SQ_PK = @FIC_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_ORIGINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FIC_INCOMPATIBILITE] SET [FIC_CODE_SQ_PK] = @FIC_CODE_SQ_PK, "& _ 
                "[FIC_ORIGINE] = @FIC_ORIGINE, [FIC_TYPE] = @FIC_TYPE, [FIC_TEXTE] = @FIC_TEXTE, "& _ 
                "[FIC_DATECR] = @FIC_DATECR, [FIC_DATEMJ] = @FIC_DATEMJ WHERE (([FIC_CODE_SQ_PK] "& _ 
                "= @Original_FIC_CODE_SQ_PK) AND ([FIC_ORIGINE] = @Original_FIC_ORIGINE) AND ([FI"& _ 
                "C_TYPE] = @Original_FIC_TYPE) AND ([FIC_DATECR] = @Original_FIC_DATECR) AND ((@I"& _ 
                "sNull_FIC_DATEMJ = 1 AND [FIC_DATEMJ] IS NULL) OR ([FIC_DATEMJ] = @Original_FIC_"& _ 
                "DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FIC_CODE_SQ_PK, FIC_ORIGINE, FIC_TYPE, FIC_TEXTE, FIC_DATECR,"& _ 
                " FIC_DATEMJ FROM THERIAQUE.FIC_INCOMPATIBILITE WHERE (FIC_CODE_SQ_PK = @FIC_CODE"& _ 
                "_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_ORIGINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_ORIGINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_TYPE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIC_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIC_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FIC_CODE_SQ_PK, FIC_ORIGINE, FIC_TYPE, FIC_TEXTE, FIC_DATECR, FIC_DATEMJ F" & _
                "ROM THERIAQUE.FIC_INCOMPATIBILITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FIC_CODE_SQ_PK, FIC_ORIGINE, FIC_TYPE, FIC_TEXTE, FIC_DATECR, FIC_DATEMJ F" & _
                "ROM THERIAQUE.FIC_INCOMPATIBILITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FIC_CODE_SQ_PK = @FIC_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIC_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FIC_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable = New dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable, ByVal FIC_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIC_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FIC_CODE_SQ_PK As Integer) As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIC_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable = New dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.FIC_INCOMPATIBILITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "FIC_INCOMPATIBILITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FIC_CODE_SQ_PK As Integer, ByVal Original_FIC_ORIGINE As String, ByVal Original_FIC_TYPE As String, ByVal Original_FIC_DATECR As Date, ByVal Original_FIC_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FIC_CODE_SQ_PK, Integer)
            If (Original_FIC_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIC_ORIGINE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FIC_ORIGINE, String)
            End If
            If (Original_FIC_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIC_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FIC_TYPE, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FIC_DATECR, Date)
            If (Original_FIC_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FIC_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FIC_CODE_SQ_PK As Integer, ByVal FIC_ORIGINE As String, ByVal FIC_TYPE As String, ByVal FIC_TEXTE As String, ByVal FIC_DATECR As Date, ByVal FIC_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FIC_CODE_SQ_PK, Integer)
            If (FIC_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIC_ORIGINE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FIC_ORIGINE, String)
            End If
            If (FIC_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIC_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FIC_TYPE, String)
            End If
            If (FIC_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FIC_TEXTE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FIC_DATECR, Date)
            If (FIC_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FIC_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FIC_CODE_SQ_PK As Integer, ByVal FIC_ORIGINE As String, ByVal FIC_TYPE As String, ByVal FIC_TEXTE As String, ByVal FIC_DATECR As Date, ByVal FIC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIC_CODE_SQ_PK As Integer, ByVal Original_FIC_ORIGINE As String, ByVal Original_FIC_TYPE As String, ByVal Original_FIC_DATECR As Date, ByVal Original_FIC_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FIC_CODE_SQ_PK, Integer)
            If (FIC_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIC_ORIGINE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FIC_ORIGINE, String)
            End If
            If (FIC_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIC_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FIC_TYPE, String)
            End If
            If (FIC_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FIC_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FIC_DATECR, Date)
            If (FIC_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FIC_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FIC_CODE_SQ_PK, Integer)
            If (Original_FIC_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIC_ORIGINE")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FIC_ORIGINE, String)
            End If
            If (Original_FIC_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIC_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FIC_TYPE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FIC_DATECR, Date)
            If (Original_FIC_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FIC_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FIC_ORIGINE As String, ByVal FIC_TYPE As String, ByVal FIC_TEXTE As String, ByVal FIC_DATECR As Date, ByVal FIC_DATEMJ As Global.System.Nullable(Of Date), ByVal Original_FIC_CODE_SQ_PK As Integer, ByVal Original_FIC_ORIGINE As String, ByVal Original_FIC_TYPE As String, ByVal Original_FIC_DATECR As Date, ByVal Original_FIC_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FIC_CODE_SQ_PK, FIC_ORIGINE, FIC_TYPE, FIC_TEXTE, FIC_DATECR, FIC_DATEMJ, Original_FIC_CODE_SQ_PK, Original_FIC_ORIGINE, Original_FIC_TYPE, Original_FIC_DATECR, Original_FIC_DATEMJ)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IC1SAC_TERME1SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC1SAC_TERME1SUBACT"
            tableMapping.ColumnMappings.Add("IC1SAC_FIC_CODE_FK_PK", "IC1SAC_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC1SAC_SAC_CODE_FK_PK", "IC1SAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC1SAC_TERME1SUBACT] WHERE (([IC1SAC_FIC_CODE_FK_PK] = @" & _
                "Original_IC1SAC_FIC_CODE_FK_PK) AND ([IC1SAC_SAC_CODE_FK_PK] = @Original_IC1SAC_" & _
                "SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC1SAC_TERME1SUBACT] ([IC1SAC_FIC_CODE_FK_PK], [IC1SAC_S" & _
                "AC_CODE_FK_PK]) VALUES (@IC1SAC_FIC_CODE_FK_PK, @IC1SAC_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " IC1SAC_FIC_CODE_FK_PK, IC1SAC_SAC_CODE_FK_PK FROM THERIAQUE.IC1SAC_TERME1SUBACT" & _
                " WHERE (IC1SAC_FIC_CODE_FK_PK = @IC1SAC_FIC_CODE_FK_PK) AND (IC1SAC_SAC_CODE_FK_" & _
                "PK = @IC1SAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC1SAC_TERME1SUBACT] SET [IC1SAC_FIC_CODE_FK_PK] = @IC1SAC_FI" & _
                "C_CODE_FK_PK, [IC1SAC_SAC_CODE_FK_PK] = @IC1SAC_SAC_CODE_FK_PK WHERE (([IC1SAC_F" & _
                "IC_CODE_FK_PK] = @Original_IC1SAC_FIC_CODE_FK_PK) AND ([IC1SAC_SAC_CODE_FK_PK] =" & _
                " @Original_IC1SAC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC1SAC_FIC_CODE_FK_PK, IC1SAC_SAC_CO" & _
                "DE_FK_PK FROM THERIAQUE.IC1SAC_TERME1SUBACT WHERE (IC1SAC_FIC_CODE_FK_PK = @IC1S" & _
                "AC_FIC_CODE_FK_PK) AND (IC1SAC_SAC_CODE_FK_PK = @IC1SAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC1SAC_FIC_CODE_FK_PK, IC1SAC_SAC_CODE_FK_PK FROM THERIAQUE.IC1SAC_TERME1S" & _
                "UBACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC1SAC_FIC_CODE_FK_PK, IC1SAC_SAC_CODE_FK_PK FROM THERIAQUE.IC1SAC_TERME1S" & _
                "UBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC1SAC_FIC_CODE_FK_PK = @IC1SAC_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable = New dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable, ByVal IC1SAC_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1SAC_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC1SAC_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1SAC_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable = New dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAC_TERME1SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC1SAC_TERME1SUBACT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC1SAC_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC1SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC1SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC1SAC_FIC_CODE_FK_PK As Integer, ByVal IC1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC1SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC1SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC1SAC_FIC_CODE_FK_PK As Integer, ByVal IC1SAC_SAC_CODE_FK_PK As Integer, ByVal Original_IC1SAC_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC1SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC1SAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC1SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC1SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC1SAC_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC1SAC_FIC_CODE_FK_PK, Original_IC1SAC_SAC_CODE_FK_PK, Original_IC1SAC_FIC_CODE_FK_PK, Original_IC1SAC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IC1SAU_TERME1SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC1SAU_TERME1SUBAUX"
            tableMapping.ColumnMappings.Add("IC1SAU_FIC_CODE_FK_PK", "IC1SAU_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC1SAU_SAU_CODE_FK_PK", "IC1SAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC1SAU_TERME1SUBAUX] WHERE (([IC1SAU_FIC_CODE_FK_PK] = @"& _ 
                "Original_IC1SAU_FIC_CODE_FK_PK) AND ([IC1SAU_SAU_CODE_FK_PK] = @Original_IC1SAU_"& _ 
                "SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC1SAU_TERME1SUBAUX] ([IC1SAU_FIC_CODE_FK_PK], [IC1SAU_S"& _ 
                "AU_CODE_FK_PK]) VALUES (@IC1SAU_FIC_CODE_FK_PK, @IC1SAU_SAU_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " IC1SAU_FIC_CODE_FK_PK, IC1SAU_SAU_CODE_FK_PK FROM THERIAQUE.IC1SAU_TERME1SUBAUX"& _ 
                " WHERE (IC1SAU_FIC_CODE_FK_PK = @IC1SAU_FIC_CODE_FK_PK) AND (IC1SAU_SAU_CODE_FK_"& _ 
                "PK = @IC1SAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC1SAU_TERME1SUBAUX] SET [IC1SAU_FIC_CODE_FK_PK] = @IC1SAU_FI"& _ 
                "C_CODE_FK_PK, [IC1SAU_SAU_CODE_FK_PK] = @IC1SAU_SAU_CODE_FK_PK WHERE (([IC1SAU_F"& _ 
                "IC_CODE_FK_PK] = @Original_IC1SAU_FIC_CODE_FK_PK) AND ([IC1SAU_SAU_CODE_FK_PK] ="& _ 
                " @Original_IC1SAU_SAU_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IC1SAU_FIC_CODE_FK_PK, IC1SAU_SAU_CO"& _ 
                "DE_FK_PK FROM THERIAQUE.IC1SAU_TERME1SUBAUX WHERE (IC1SAU_FIC_CODE_FK_PK = @IC1S"& _ 
                "AU_FIC_CODE_FK_PK) AND (IC1SAU_SAU_CODE_FK_PK = @IC1SAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC1SAU_FIC_CODE_FK_PK, IC1SAU_SAU_CODE_FK_PK FROM THERIAQUE.IC1SAU_TERME1S" & _
                "UBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC1SAU_FIC_CODE_FK_PK, IC1SAU_SAU_CODE_FK_PK FROM THERIAQUE.IC1SAU_TERME1S" & _
                "UBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC1SAU_FIC_CODE_FK_PK = @IC1SAU_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable, ByVal IC1SAU_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1SAU_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC1SAU_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1SAU_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SAU_TERME1SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC1SAU_TERME1SUBAUX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC1SAU_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC1SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC1SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC1SAU_FIC_CODE_FK_PK As Integer, ByVal IC1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC1SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC1SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC1SAU_FIC_CODE_FK_PK As Integer, ByVal IC1SAU_SAU_CODE_FK_PK As Integer, ByVal Original_IC1SAU_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC1SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC1SAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC1SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC1SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC1SAU_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC1SAU_FIC_CODE_FK_PK, Original_IC1SAU_SAU_CODE_FK_PK, Original_IC1SAU_FIC_CODE_FK_PK, Original_IC1SAU_SAU_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IC1PR_TERME1PRODUITTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC1PR_TERME1PRODUIT"
            tableMapping.ColumnMappings.Add("IC1PR_FIC_CODE_FK_PK", "IC1PR_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC1PR_PR_CODE_FK_PK", "IC1PR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC1PR_TERME1PRODUIT] WHERE (([IC1PR_FIC_CODE_FK_PK] = @O" & _
                "riginal_IC1PR_FIC_CODE_FK_PK) AND ([IC1PR_PR_CODE_FK_PK] = @Original_IC1PR_PR_CO" & _
                "DE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC1PR_TERME1PRODUIT] ([IC1PR_FIC_CODE_FK_PK], [IC1PR_PR_" & _
                "CODE_FK_PK]) VALUES (@IC1PR_FIC_CODE_FK_PK, @IC1PR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC1PR" & _
                "_FIC_CODE_FK_PK, IC1PR_PR_CODE_FK_PK FROM THERIAQUE.IC1PR_TERME1PRODUIT WHERE (I" & _
                "C1PR_FIC_CODE_FK_PK = @IC1PR_FIC_CODE_FK_PK) AND (IC1PR_PR_CODE_FK_PK = @IC1PR_P" & _
                "R_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC1PR_TERME1PRODUIT] SET [IC1PR_FIC_CODE_FK_PK] = @IC1PR_FIC_" & _
                "CODE_FK_PK, [IC1PR_PR_CODE_FK_PK] = @IC1PR_PR_CODE_FK_PK WHERE (([IC1PR_FIC_CODE" & _
                "_FK_PK] = @Original_IC1PR_FIC_CODE_FK_PK) AND ([IC1PR_PR_CODE_FK_PK] = @Original" & _
                "_IC1PR_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC1PR_FIC_CODE_FK_PK, IC1PR_PR_CODE_FK_PK FROM T" & _
                "HERIAQUE.IC1PR_TERME1PRODUIT WHERE (IC1PR_FIC_CODE_FK_PK = @IC1PR_FIC_CODE_FK_PK" & _
                ") AND (IC1PR_PR_CODE_FK_PK = @IC1PR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC1PR_FIC_CODE_FK_PK, IC1PR_PR_CODE_FK_PK FROM THERIAQUE.IC1PR_TERME1PRODU" & _
                "IT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC1PR_FIC_CODE_FK_PK, IC1PR_PR_CODE_FK_PK FROM THERIAQUE.IC1PR_TERME1PRODU" & _
                "IT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC1PR_FIC_CODE_FK_PK = @IC1PR_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable = New dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable, ByVal IC1PR_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1PR_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC1PR_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1PR_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable = New dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1PR_TERME1PRODUITDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC1PR_TERME1PRODUIT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC1PR_FIC_CODE_FK_PK As Integer, ByVal Original_IC1PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC1PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC1PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC1PR_FIC_CODE_FK_PK As Integer, ByVal IC1PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC1PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC1PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC1PR_FIC_CODE_FK_PK As Integer, ByVal IC1PR_PR_CODE_FK_PK As Integer, ByVal Original_IC1PR_FIC_CODE_FK_PK As Integer, ByVal Original_IC1PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC1PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC1PR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC1PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC1PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC1PR_FIC_CODE_FK_PK As Integer, ByVal Original_IC1PR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC1PR_FIC_CODE_FK_PK, Original_IC1PR_PR_CODE_FK_PK, Original_IC1PR_FIC_CODE_FK_PK, Original_IC1PR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IC1SP_TERME1SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC1SP_TERME1SPECIALITE"
            tableMapping.ColumnMappings.Add("IC1SP_FIC_CODE_FK_PK", "IC1SP_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC1SP_SP_CODE_FK_PK", "IC1SP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC1SP_TERME1SPECIALITE] WHERE (([IC1SP_FIC_CODE_FK_PK] ="& _ 
                " @Original_IC1SP_FIC_CODE_FK_PK) AND ([IC1SP_SP_CODE_FK_PK] = @Original_IC1SP_SP"& _ 
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC1SP_TERME1SPECIALITE] ([IC1SP_FIC_CODE_FK_PK], [IC1SP_"& _ 
                "SP_CODE_FK_PK]) VALUES (@IC1SP_FIC_CODE_FK_PK, @IC1SP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IC"& _ 
                "1SP_FIC_CODE_FK_PK, IC1SP_SP_CODE_FK_PK FROM THERIAQUE.IC1SP_TERME1SPECIALITE WH"& _ 
                "ERE (IC1SP_FIC_CODE_FK_PK = @IC1SP_FIC_CODE_FK_PK) AND (IC1SP_SP_CODE_FK_PK = @I"& _ 
                "C1SP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC1SP_TERME1SPECIALITE] SET [IC1SP_FIC_CODE_FK_PK] = @IC1SP_F"& _ 
                "IC_CODE_FK_PK, [IC1SP_SP_CODE_FK_PK] = @IC1SP_SP_CODE_FK_PK WHERE (([IC1SP_FIC_C"& _ 
                "ODE_FK_PK] = @Original_IC1SP_FIC_CODE_FK_PK) AND ([IC1SP_SP_CODE_FK_PK] = @Origi"& _ 
                "nal_IC1SP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IC1SP_FIC_CODE_FK_PK, IC1SP_SP_CODE_FK_PK FRO"& _ 
                "M THERIAQUE.IC1SP_TERME1SPECIALITE WHERE (IC1SP_FIC_CODE_FK_PK = @IC1SP_FIC_CODE"& _ 
                "_FK_PK) AND (IC1SP_SP_CODE_FK_PK = @IC1SP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC1SP_FIC_CODE_FK_PK, IC1SP_SP_CODE_FK_PK FROM THERIAQUE.IC1SP_TERME1SPECI" & _
                "ALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC1SP_FIC_CODE_FK_PK, IC1SP_SP_CODE_FK_PK FROM THERIAQUE.IC1SP_TERME1SPECI" & _
                "ALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC1SP_FIC_CODE_FK_PK = @IC1SP_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable, ByVal IC1SP_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1SP_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC1SP_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1SP_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1SP_TERME1SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC1SP_TERME1SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC1SP_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC1SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC1SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC1SP_FIC_CODE_FK_PK As Integer, ByVal IC1SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC1SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC1SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC1SP_FIC_CODE_FK_PK As Integer, ByVal IC1SP_SP_CODE_FK_PK As Integer, ByVal Original_IC1SP_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC1SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC1SP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC1SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC1SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC1SP_FIC_CODE_FK_PK As Integer, ByVal Original_IC1SP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC1SP_FIC_CODE_FK_PK, Original_IC1SP_SP_CODE_FK_PK, Original_IC1SP_FIC_CODE_FK_PK, Original_IC1SP_SP_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IC2SAC_TERME2SUBACTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC2SAC_TERME2SUBACT"
            tableMapping.ColumnMappings.Add("IC2SAC_FIC_CODE_FK_PK", "IC2SAC_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC2SAC_SAC_CODE_FK_PK", "IC2SAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC2SAC_TERME2SUBACT] WHERE (([IC2SAC_FIC_CODE_FK_PK] = @" & _
                "Original_IC2SAC_FIC_CODE_FK_PK) AND ([IC2SAC_SAC_CODE_FK_PK] = @Original_IC2SAC_" & _
                "SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC2SAC_TERME2SUBACT] ([IC2SAC_FIC_CODE_FK_PK], [IC2SAC_S" & _
                "AC_CODE_FK_PK]) VALUES (@IC2SAC_FIC_CODE_FK_PK, @IC2SAC_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " IC2SAC_FIC_CODE_FK_PK, IC2SAC_SAC_CODE_FK_PK FROM THERIAQUE.IC2SAC_TERME2SUBACT" & _
                " WHERE (IC2SAC_FIC_CODE_FK_PK = @IC2SAC_FIC_CODE_FK_PK) AND (IC2SAC_SAC_CODE_FK_" & _
                "PK = @IC2SAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC2SAC_TERME2SUBACT] SET [IC2SAC_FIC_CODE_FK_PK] = @IC2SAC_FI" & _
                "C_CODE_FK_PK, [IC2SAC_SAC_CODE_FK_PK] = @IC2SAC_SAC_CODE_FK_PK WHERE (([IC2SAC_F" & _
                "IC_CODE_FK_PK] = @Original_IC2SAC_FIC_CODE_FK_PK) AND ([IC2SAC_SAC_CODE_FK_PK] =" & _
                " @Original_IC2SAC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC2SAC_FIC_CODE_FK_PK, IC2SAC_SAC_CO" & _
                "DE_FK_PK FROM THERIAQUE.IC2SAC_TERME2SUBACT WHERE (IC2SAC_FIC_CODE_FK_PK = @IC2S" & _
                "AC_FIC_CODE_FK_PK) AND (IC2SAC_SAC_CODE_FK_PK = @IC2SAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC2SAC_FIC_CODE_FK_PK, IC2SAC_SAC_CODE_FK_PK FROM THERIAQUE.IC2SAC_TERME2S" & _
                "UBACT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC2SAC_FIC_CODE_FK_PK, IC2SAC_SAC_CODE_FK_PK FROM THERIAQUE.IC2SAC_TERME2S" & _
                "UBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC2SAC_FIC_CODE_FK_PK = @IC2SAC_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAC_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAC_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable = New dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable, ByVal IC2SAC_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2SAC_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC2SAC_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2SAC_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable = New dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAC_TERME2SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC2SAC_TERME2SUBACT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC2SAC_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC2SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC2SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC2SAC_FIC_CODE_FK_PK As Integer, ByVal IC2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC2SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC2SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC2SAC_FIC_CODE_FK_PK As Integer, ByVal IC2SAC_SAC_CODE_FK_PK As Integer, ByVal Original_IC2SAC_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC2SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC2SAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC2SAC_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC2SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC2SAC_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC2SAC_FIC_CODE_FK_PK, Original_IC2SAC_SAC_CODE_FK_PK, Original_IC2SAC_FIC_CODE_FK_PK, Original_IC2SAC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IC2SAU_TERME2SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC2SAU_TERME2SUBAUX"
            tableMapping.ColumnMappings.Add("IC2SAU_FIC_CODE_FK_PK", "IC2SAU_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC2SAU_SAU_CODE_FK_PK", "IC2SAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC2SAU_TERME2SUBAUX] WHERE (([IC2SAU_FIC_CODE_FK_PK] = @"& _ 
                "Original_IC2SAU_FIC_CODE_FK_PK) AND ([IC2SAU_SAU_CODE_FK_PK] = @Original_IC2SAU_"& _ 
                "SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC2SAU_TERME2SUBAUX] ([IC2SAU_FIC_CODE_FK_PK], [IC2SAU_S"& _ 
                "AU_CODE_FK_PK]) VALUES (@IC2SAU_FIC_CODE_FK_PK, @IC2SAU_SAU_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " IC2SAU_FIC_CODE_FK_PK, IC2SAU_SAU_CODE_FK_PK FROM THERIAQUE.IC2SAU_TERME2SUBAUX"& _ 
                " WHERE (IC2SAU_FIC_CODE_FK_PK = @IC2SAU_FIC_CODE_FK_PK) AND (IC2SAU_SAU_CODE_FK_"& _ 
                "PK = @IC2SAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC2SAU_TERME2SUBAUX] SET [IC2SAU_FIC_CODE_FK_PK] = @IC2SAU_FI"& _ 
                "C_CODE_FK_PK, [IC2SAU_SAU_CODE_FK_PK] = @IC2SAU_SAU_CODE_FK_PK WHERE (([IC2SAU_F"& _ 
                "IC_CODE_FK_PK] = @Original_IC2SAU_FIC_CODE_FK_PK) AND ([IC2SAU_SAU_CODE_FK_PK] ="& _ 
                " @Original_IC2SAU_SAU_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IC2SAU_FIC_CODE_FK_PK, IC2SAU_SAU_CO"& _ 
                "DE_FK_PK FROM THERIAQUE.IC2SAU_TERME2SUBAUX WHERE (IC2SAU_FIC_CODE_FK_PK = @IC2S"& _ 
                "AU_FIC_CODE_FK_PK) AND (IC2SAU_SAU_CODE_FK_PK = @IC2SAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC2SAU_FIC_CODE_FK_PK, IC2SAU_SAU_CODE_FK_PK FROM THERIAQUE.IC2SAU_TERME2S" & _
                "UBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC2SAU_FIC_CODE_FK_PK, IC2SAU_SAU_CODE_FK_PK FROM THERIAQUE.IC2SAU_TERME2S" & _
                "UBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC2SAU_FIC_CODE_FK_PK = @IC2SAU_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SAU_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SAU_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable, ByVal IC2SAU_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2SAU_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC2SAU_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2SAU_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SAU_TERME2SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC2SAU_TERME2SUBAUX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC2SAU_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC2SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC2SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC2SAU_FIC_CODE_FK_PK As Integer, ByVal IC2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC2SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC2SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC2SAU_FIC_CODE_FK_PK As Integer, ByVal IC2SAU_SAU_CODE_FK_PK As Integer, ByVal Original_IC2SAU_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC2SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC2SAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC2SAU_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC2SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC2SAU_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC2SAU_FIC_CODE_FK_PK, Original_IC2SAU_SAU_CODE_FK_PK, Original_IC2SAU_FIC_CODE_FK_PK, Original_IC2SAU_SAU_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IC2PR_TERME2PRODUITTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC2PR_TERME2PRODUIT"
            tableMapping.ColumnMappings.Add("IC2PR_FIC_CODE_FK_PK", "IC2PR_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC2PR_PR_CODE_FK_PK", "IC2PR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC2PR_TERME2PRODUIT] WHERE (([IC2PR_FIC_CODE_FK_PK] = @O" & _
                "riginal_IC2PR_FIC_CODE_FK_PK) AND ([IC2PR_PR_CODE_FK_PK] = @Original_IC2PR_PR_CO" & _
                "DE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC2PR_TERME2PRODUIT] ([IC2PR_FIC_CODE_FK_PK], [IC2PR_PR_" & _
                "CODE_FK_PK]) VALUES (@IC2PR_FIC_CODE_FK_PK, @IC2PR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC2PR" & _
                "_FIC_CODE_FK_PK, IC2PR_PR_CODE_FK_PK FROM THERIAQUE.IC2PR_TERME2PRODUIT WHERE (I" & _
                "C2PR_FIC_CODE_FK_PK = @IC2PR_FIC_CODE_FK_PK) AND (IC2PR_PR_CODE_FK_PK = @IC2PR_P" & _
                "R_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC2PR_TERME2PRODUIT] SET [IC2PR_FIC_CODE_FK_PK] = @IC2PR_FIC_" & _
                "CODE_FK_PK, [IC2PR_PR_CODE_FK_PK] = @IC2PR_PR_CODE_FK_PK WHERE (([IC2PR_FIC_CODE" & _
                "_FK_PK] = @Original_IC2PR_FIC_CODE_FK_PK) AND ([IC2PR_PR_CODE_FK_PK] = @Original" & _
                "_IC2PR_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC2PR_FIC_CODE_FK_PK, IC2PR_PR_CODE_FK_PK FROM T" & _
                "HERIAQUE.IC2PR_TERME2PRODUIT WHERE (IC2PR_FIC_CODE_FK_PK = @IC2PR_FIC_CODE_FK_PK" & _
                ") AND (IC2PR_PR_CODE_FK_PK = @IC2PR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC2PR_FIC_CODE_FK_PK, IC2PR_PR_CODE_FK_PK FROM THERIAQUE.IC2PR_TERME2PRODU" & _
                "IT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC2PR_FIC_CODE_FK_PK, IC2PR_PR_CODE_FK_PK FROM THERIAQUE.IC2PR_TERME2PRODU" & _
                "IT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC2PR_FIC_CODE_FK_PK = @IC2PR_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2PR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2PR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable = New dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable, ByVal IC2PR_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2PR_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC2PR_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2PR_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable = New dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2PR_TERME2PRODUITDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC2PR_TERME2PRODUIT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC2PR_FIC_CODE_FK_PK As Integer, ByVal Original_IC2PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC2PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC2PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC2PR_FIC_CODE_FK_PK As Integer, ByVal IC2PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC2PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC2PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC2PR_FIC_CODE_FK_PK As Integer, ByVal IC2PR_PR_CODE_FK_PK As Integer, ByVal Original_IC2PR_FIC_CODE_FK_PK As Integer, ByVal Original_IC2PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC2PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC2PR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC2PR_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC2PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC2PR_FIC_CODE_FK_PK As Integer, ByVal Original_IC2PR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC2PR_FIC_CODE_FK_PK, Original_IC2PR_PR_CODE_FK_PK, Original_IC2PR_FIC_CODE_FK_PK, Original_IC2PR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IC2SP_TERME2SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC2SP_TERME2SPECIALITE"
            tableMapping.ColumnMappings.Add("IC2SP_FIC_CODE_FK_PK", "IC2SP_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC2SP_SP_CODE_FK_PK", "IC2SP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC2SP_TERME2SPECIALITE] WHERE (([IC2SP_FIC_CODE_FK_PK] ="& _ 
                " @Original_IC2SP_FIC_CODE_FK_PK) AND ([IC2SP_SP_CODE_FK_PK] = @Original_IC2SP_SP"& _ 
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC2SP_TERME2SPECIALITE] ([IC2SP_FIC_CODE_FK_PK], [IC2SP_"& _ 
                "SP_CODE_FK_PK]) VALUES (@IC2SP_FIC_CODE_FK_PK, @IC2SP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IC"& _ 
                "2SP_FIC_CODE_FK_PK, IC2SP_SP_CODE_FK_PK FROM THERIAQUE.IC2SP_TERME2SPECIALITE WH"& _ 
                "ERE (IC2SP_FIC_CODE_FK_PK = @IC2SP_FIC_CODE_FK_PK) AND (IC2SP_SP_CODE_FK_PK = @I"& _ 
                "C2SP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC2SP_TERME2SPECIALITE] SET [IC2SP_FIC_CODE_FK_PK] = @IC2SP_F"& _ 
                "IC_CODE_FK_PK, [IC2SP_SP_CODE_FK_PK] = @IC2SP_SP_CODE_FK_PK WHERE (([IC2SP_FIC_C"& _ 
                "ODE_FK_PK] = @Original_IC2SP_FIC_CODE_FK_PK) AND ([IC2SP_SP_CODE_FK_PK] = @Origi"& _ 
                "nal_IC2SP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IC2SP_FIC_CODE_FK_PK, IC2SP_SP_CODE_FK_PK FRO"& _ 
                "M THERIAQUE.IC2SP_TERME2SPECIALITE WHERE (IC2SP_FIC_CODE_FK_PK = @IC2SP_FIC_CODE"& _ 
                "_FK_PK) AND (IC2SP_SP_CODE_FK_PK = @IC2SP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC2SP_FIC_CODE_FK_PK, IC2SP_SP_CODE_FK_PK FROM THERIAQUE.IC2SP_TERME2SPECI" & _
                "ALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC2SP_FIC_CODE_FK_PK, IC2SP_SP_CODE_FK_PK FROM THERIAQUE.IC2SP_TERME2SPECI" & _
                "ALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC2SP_FIC_CODE_FK_PK = @IC2SP_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2SP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2SP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable, ByVal IC2SP_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2SP_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC2SP_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2SP_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2SP_TERME2SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC2SP_TERME2SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC2SP_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC2SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC2SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC2SP_FIC_CODE_FK_PK As Integer, ByVal IC2SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC2SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC2SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC2SP_FIC_CODE_FK_PK As Integer, ByVal IC2SP_SP_CODE_FK_PK As Integer, ByVal Original_IC2SP_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC2SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC2SP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC2SP_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC2SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC2SP_FIC_CODE_FK_PK As Integer, ByVal Original_IC2SP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IC2SP_FIC_CODE_FK_PK, Original_IC2SP_SP_CODE_FK_PK, Original_IC2SP_FIC_CODE_FK_PK, Original_IC2SP_SP_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ICSOL_INCOMPATIBILITE_SOLUTIONTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICSOL_INCOMPATIBILITE_SOLUTION"
            tableMapping.ColumnMappings.Add("ICSOL_FIC_CODE_FK_PK", "ICSOL_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICSOL_CDF_SOLIC_CODE_FK_PK", "ICSOL_CDF_SOLIC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICSOL_INCOMPATIBILITE_SOLUTION] WHERE (([ICSOL_FIC_CODE_" & _
                "FK_PK] = @Original_ICSOL_FIC_CODE_FK_PK) AND ([ICSOL_CDF_SOLIC_CODE_FK_PK] = @Or" & _
                "iginal_ICSOL_CDF_SOLIC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICSOL_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICSOL_INCOMPATIBILITE_SOLUTION] ([ICSOL_FIC_CODE_FK_PK]," & _
                " [ICSOL_CDF_SOLIC_CODE_FK_PK]) VALUES (@ICSOL_FIC_CODE_FK_PK, @ICSOL_CDF_SOLIC_C" & _
                "ODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICSOL_FIC_CODE_FK_PK, ICSOL_CDF_SOLIC_CODE_FK_PK FROM THERIA" & _
                "QUE.ICSOL_INCOMPATIBILITE_SOLUTION WHERE (ICSOL_CDF_SOLIC_CODE_FK_PK = @ICSOL_CD" & _
                "F_SOLIC_CODE_FK_PK) AND (ICSOL_FIC_CODE_FK_PK = @ICSOL_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICSOL_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICSOL_INCOMPATIBILITE_SOLUTION] SET [ICSOL_FIC_CODE_FK_PK] = " & _
                "@ICSOL_FIC_CODE_FK_PK, [ICSOL_CDF_SOLIC_CODE_FK_PK] = @ICSOL_CDF_SOLIC_CODE_FK_P" & _
                "K WHERE (([ICSOL_FIC_CODE_FK_PK] = @Original_ICSOL_FIC_CODE_FK_PK) AND ([ICSOL_C" & _
                "DF_SOLIC_CODE_FK_PK] = @Original_ICSOL_CDF_SOLIC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICSOL_FIC" & _
                "_CODE_FK_PK, ICSOL_CDF_SOLIC_CODE_FK_PK FROM THERIAQUE.ICSOL_INCOMPATIBILITE_SOL" & _
                "UTION WHERE (ICSOL_CDF_SOLIC_CODE_FK_PK = @ICSOL_CDF_SOLIC_CODE_FK_PK) AND (ICSO" & _
                "L_FIC_CODE_FK_PK = @ICSOL_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICSOL_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICSOL_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_CDF_SOLIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICSOL_FIC_CODE_FK_PK, ICSOL_CDF_SOLIC_CODE_FK_PK FROM THERIAQUE.ICSOL_INCO" & _
                "MPATIBILITE_SOLUTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICSOL_FIC_CODE_FK_PK, ICSOL_CDF_SOLIC_CODE_FK_PK FROM THERIAQUE.ICSOL_INCO" & _
                "MPATIBILITE_SOLUTION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICSOL_FIC_CODE_FK_PK = @ICSOL_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICSOL_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICSOL_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable = New dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable, ByVal ICSOL_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICSOL_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICSOL_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICSOL_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable = New dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICSOL_INCOMPATIBILITE_SOLUTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICSOL_INCOMPATIBILITE_SOLUTION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICSOL_FIC_CODE_FK_PK As Integer, ByVal Original_ICSOL_CDF_SOLIC_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICSOL_FIC_CODE_FK_PK, Integer)
            If (Original_ICSOL_CDF_SOLIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICSOL_CDF_SOLIC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICSOL_CDF_SOLIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICSOL_FIC_CODE_FK_PK As Integer, ByVal ICSOL_CDF_SOLIC_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICSOL_FIC_CODE_FK_PK, Integer)
            If (ICSOL_CDF_SOLIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICSOL_CDF_SOLIC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICSOL_CDF_SOLIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICSOL_FIC_CODE_FK_PK As Integer, ByVal ICSOL_CDF_SOLIC_CODE_FK_PK As String, ByVal Original_ICSOL_FIC_CODE_FK_PK As Integer, ByVal Original_ICSOL_CDF_SOLIC_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICSOL_FIC_CODE_FK_PK, Integer)
            If (ICSOL_CDF_SOLIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICSOL_CDF_SOLIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICSOL_CDF_SOLIC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ICSOL_FIC_CODE_FK_PK, Integer)
            If (Original_ICSOL_CDF_SOLIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICSOL_CDF_SOLIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICSOL_CDF_SOLIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_ICSOL_FIC_CODE_FK_PK As Integer, ByVal Original_ICSOL_CDF_SOLIC_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_ICSOL_FIC_CODE_FK_PK, Original_ICSOL_CDF_SOLIC_CODE_FK_PK, Original_ICSOL_FIC_CODE_FK_PK, Original_ICSOL_CDF_SOLIC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ICCT1_CONCENTRATION1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICCT1_CONCENTRATION1"
            tableMapping.ColumnMappings.Add("ICCT1_FIC_CODE_FK_PK", "ICCT1_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICCT1_NUMSEQ_PK", "ICCT1_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("ICCT1_CONCENTRATION1", "ICCT1_CONCENTRATION1")
            tableMapping.ColumnMappings.Add("ICCT1_CDF_UDOSE_CODE_FK", "ICCT1_CDF_UDOSE_CODE_FK")
            tableMapping.ColumnMappings.Add("ICCT1_NUMORD", "ICCT1_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICCT1_CONCENTRATION1] WHERE (([ICCT1_FIC_CODE_FK_PK] = @"& _ 
                "Original_ICCT1_FIC_CODE_FK_PK) AND ([ICCT1_NUMSEQ_PK] = @Original_ICCT1_NUMSEQ_P"& _ 
                "K) AND ((@IsNull_ICCT1_CONCENTRATION1 = 1 AND [ICCT1_CONCENTRATION1] IS NULL) OR"& _ 
                " ([ICCT1_CONCENTRATION1] = @Original_ICCT1_CONCENTRATION1)) AND ((@IsNull_ICCT1_"& _ 
                "CDF_UDOSE_CODE_FK = 1 AND [ICCT1_CDF_UDOSE_CODE_FK] IS NULL) OR ([ICCT1_CDF_UDOS"& _ 
                "E_CODE_FK] = @Original_ICCT1_CDF_UDOSE_CODE_FK)) AND ((@IsNull_ICCT1_NUMORD = 1 "& _ 
                "AND [ICCT1_NUMORD] IS NULL) OR ([ICCT1_NUMORD] = @Original_ICCT1_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT1_CONCENTRATION1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CONCENTRATION1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_CONCENTRATION1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CONCENTRATION1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT1_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICCT1_CONCENTRATION1] ([ICCT1_FIC_CODE_FK_PK], [ICCT1_NU"& _ 
                "MSEQ_PK], [ICCT1_CONCENTRATION1], [ICCT1_CDF_UDOSE_CODE_FK], [ICCT1_NUMORD]) VAL"& _ 
                "UES (@ICCT1_FIC_CODE_FK_PK, @ICCT1_NUMSEQ_PK, @ICCT1_CONCENTRATION1, @ICCT1_CDF_"& _ 
                "UDOSE_CODE_FK, @ICCT1_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICCT1_FIC_CODE_FK_PK, ICCT1_NUMSEQ_PK, IC"& _ 
                "CT1_CONCENTRATION1, ICCT1_CDF_UDOSE_CODE_FK, ICCT1_NUMORD FROM THERIAQUE.ICCT1_C"& _ 
                "ONCENTRATION1 WHERE (ICCT1_FIC_CODE_FK_PK = @ICCT1_FIC_CODE_FK_PK) AND (ICCT1_NU"& _ 
                "MSEQ_PK = @ICCT1_NUMSEQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_CONCENTRATION1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CONCENTRATION1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICCT1_CONCENTRATION1] SET [ICCT1_FIC_CODE_FK_PK] = @ICCT1_FIC"& _ 
                "_CODE_FK_PK, [ICCT1_NUMSEQ_PK] = @ICCT1_NUMSEQ_PK, [ICCT1_CONCENTRATION1] = @ICC"& _ 
                "T1_CONCENTRATION1, [ICCT1_CDF_UDOSE_CODE_FK] = @ICCT1_CDF_UDOSE_CODE_FK, [ICCT1_"& _ 
                "NUMORD] = @ICCT1_NUMORD WHERE (([ICCT1_FIC_CODE_FK_PK] = @Original_ICCT1_FIC_COD"& _ 
                "E_FK_PK) AND ([ICCT1_NUMSEQ_PK] = @Original_ICCT1_NUMSEQ_PK) AND ((@IsNull_ICCT1"& _ 
                "_CONCENTRATION1 = 1 AND [ICCT1_CONCENTRATION1] IS NULL) OR ([ICCT1_CONCENTRATION"& _ 
                "1] = @Original_ICCT1_CONCENTRATION1)) AND ((@IsNull_ICCT1_CDF_UDOSE_CODE_FK = 1 "& _ 
                "AND [ICCT1_CDF_UDOSE_CODE_FK] IS NULL) OR ([ICCT1_CDF_UDOSE_CODE_FK] = @Original"& _ 
                "_ICCT1_CDF_UDOSE_CODE_FK)) AND ((@IsNull_ICCT1_NUMORD = 1 AND [ICCT1_NUMORD] IS "& _ 
                "NULL) OR ([ICCT1_NUMORD] = @Original_ICCT1_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICCT1_FIC_CODE_FK_"& _ 
                "PK, ICCT1_NUMSEQ_PK, ICCT1_CONCENTRATION1, ICCT1_CDF_UDOSE_CODE_FK, ICCT1_NUMORD"& _ 
                " FROM THERIAQUE.ICCT1_CONCENTRATION1 WHERE (ICCT1_FIC_CODE_FK_PK = @ICCT1_FIC_CO"& _ 
                "DE_FK_PK) AND (ICCT1_NUMSEQ_PK = @ICCT1_NUMSEQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_CONCENTRATION1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CONCENTRATION1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT1_CONCENTRATION1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CONCENTRATION1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_CONCENTRATION1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CONCENTRATION1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT1_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICCT1_FIC_CODE_FK_PK, ICCT1_NUMSEQ_PK, ICCT1_CONCENTRATION1, ICCT1_CDF_UDO" & _
                "SE_CODE_FK, ICCT1_NUMORD FROM THERIAQUE.ICCT1_CONCENTRATION1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICCT1_FIC_CODE_FK_PK, ICCT1_NUMSEQ_PK, ICCT1_CONCENTRATION1, ICCT1_CDF_UDO" & _
                "SE_CODE_FK, ICCT1_NUMORD FROM THERIAQUE.ICCT1_CONCENTRATION1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICCT1_FIC_CO" & _
                "DE_FK_PK = @ICCT1_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT1_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT1_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable = New dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable, ByVal ICCT1_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICCT1_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICCT1_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICCT1_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable = New dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCT1_CONCENTRATION1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICCT1_CONCENTRATION1")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICCT1_FIC_CODE_FK_PK As Integer, ByVal Original_ICCT1_NUMSEQ_PK As Integer, ByVal Original_ICCT1_CONCENTRATION1 As String, ByVal Original_ICCT1_CDF_UDOSE_CODE_FK As String, ByVal Original_ICCT1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICCT1_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICCT1_NUMSEQ_PK, Integer)
            If (Original_ICCT1_CONCENTRATION1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ICCT1_CONCENTRATION1, String)
            End If
            If (Original_ICCT1_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ICCT1_CDF_UDOSE_CODE_FK, String)
            End If
            If (Original_ICCT1_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ICCT1_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICCT1_FIC_CODE_FK_PK As Integer, ByVal ICCT1_NUMSEQ_PK As Integer, ByVal ICCT1_CONCENTRATION1 As String, ByVal ICCT1_CDF_UDOSE_CODE_FK As String, ByVal ICCT1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICCT1_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICCT1_NUMSEQ_PK, Integer)
            If (ICCT1_CONCENTRATION1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ICCT1_CONCENTRATION1, String)
            End If
            If (ICCT1_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ICCT1_CDF_UDOSE_CODE_FK, String)
            End If
            If (ICCT1_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ICCT1_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICCT1_FIC_CODE_FK_PK As Integer, ByVal ICCT1_NUMSEQ_PK As Integer, ByVal ICCT1_CONCENTRATION1 As String, ByVal ICCT1_CDF_UDOSE_CODE_FK As String, ByVal ICCT1_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICCT1_FIC_CODE_FK_PK As Integer, ByVal Original_ICCT1_NUMSEQ_PK As Integer, ByVal Original_ICCT1_CONCENTRATION1 As String, ByVal Original_ICCT1_CDF_UDOSE_CODE_FK As String, ByVal Original_ICCT1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICCT1_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICCT1_NUMSEQ_PK, Integer)
            If (ICCT1_CONCENTRATION1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ICCT1_CONCENTRATION1, String)
            End If
            If (ICCT1_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ICCT1_CDF_UDOSE_CODE_FK, String)
            End If
            If (ICCT1_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ICCT1_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ICCT1_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ICCT1_NUMSEQ_PK, Integer)
            If (Original_ICCT1_CONCENTRATION1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ICCT1_CONCENTRATION1, String)
            End If
            If (Original_ICCT1_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ICCT1_CDF_UDOSE_CODE_FK, String)
            End If
            If (Original_ICCT1_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ICCT1_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICCT1_CONCENTRATION1 As String, ByVal ICCT1_CDF_UDOSE_CODE_FK As String, ByVal ICCT1_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICCT1_FIC_CODE_FK_PK As Integer, ByVal Original_ICCT1_NUMSEQ_PK As Integer, ByVal Original_ICCT1_CONCENTRATION1 As String, ByVal Original_ICCT1_CDF_UDOSE_CODE_FK As String, ByVal Original_ICCT1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_ICCT1_FIC_CODE_FK_PK, Original_ICCT1_NUMSEQ_PK, ICCT1_CONCENTRATION1, ICCT1_CDF_UDOSE_CODE_FK, ICCT1_NUMORD, Original_ICCT1_FIC_CODE_FK_PK, Original_ICCT1_NUMSEQ_PK, Original_ICCT1_CONCENTRATION1, Original_ICCT1_CDF_UDOSE_CODE_FK, Original_ICCT1_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IC1VE_INCOMPATIBILITE_VECTEUR1TableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC1VE_INCOMPATIBILITE_VECTEUR1"
            tableMapping.ColumnMappings.Add("IC1VE_FIC_CODE_FK_PK", "IC1VE_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC1VE_CDF_VEIC_CODE_FK_PK", "IC1VE_CDF_VEIC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC1VE_INCOMPATIBILITE_VECTEUR1] WHERE (([IC1VE_FIC_CODE_" & _
                "FK_PK] = @Original_IC1VE_FIC_CODE_FK_PK) AND ([IC1VE_CDF_VEIC_CODE_FK_PK] = @Ori" & _
                "ginal_IC1VE_CDF_VEIC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC1VE_INCOMPATIBILITE_VECTEUR1] ([IC1VE_FIC_CODE_FK_PK]," & _
                " [IC1VE_CDF_VEIC_CODE_FK_PK]) VALUES (@IC1VE_FIC_CODE_FK_PK, @IC1VE_CDF_VEIC_COD" & _
                "E_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC1VE_FIC_CODE_FK_PK, IC1VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE" & _
                ".IC1VE_INCOMPATIBILITE_VECTEUR1 WHERE (IC1VE_CDF_VEIC_CODE_FK_PK = @IC1VE_CDF_VE" & _
                "IC_CODE_FK_PK) AND (IC1VE_FIC_CODE_FK_PK = @IC1VE_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC1VE_INCOMPATIBILITE_VECTEUR1] SET [IC1VE_FIC_CODE_FK_PK] = " & _
                "@IC1VE_FIC_CODE_FK_PK, [IC1VE_CDF_VEIC_CODE_FK_PK] = @IC1VE_CDF_VEIC_CODE_FK_PK " & _
                "WHERE (([IC1VE_FIC_CODE_FK_PK] = @Original_IC1VE_FIC_CODE_FK_PK) AND ([IC1VE_CDF" & _
                "_VEIC_CODE_FK_PK] = @Original_IC1VE_CDF_VEIC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC1VE_FIC_COD" & _
                "E_FK_PK, IC1VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE.IC1VE_INCOMPATIBILITE_VECTEUR1" & _
                " WHERE (IC1VE_CDF_VEIC_CODE_FK_PK = @IC1VE_CDF_VEIC_CODE_FK_PK) AND (IC1VE_FIC_C" & _
                "ODE_FK_PK = @IC1VE_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC1VE_FIC_CODE_FK_PK, IC1VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE.IC1VE_INCOM" & _
                "PATIBILITE_VECTEUR1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC1VE_FIC_CODE_FK_PK, IC1VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE.IC1VE_INCOM" & _
                "PATIBILITE_VECTEUR1" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC1VE_FIC_CODE_FK_PK = @IC1VE_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC1VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC1VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable = New dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable, ByVal IC1VE_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1VE_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC1VE_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC1VE_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable = New dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC1VE_INCOMPATIBILITE_VECTEUR1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC1VE_INCOMPATIBILITE_VECTEUR1")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC1VE_FIC_CODE_FK_PK As Integer, ByVal Original_IC1VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC1VE_FIC_CODE_FK_PK, Integer)
            If (Original_IC1VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IC1VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC1VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC1VE_FIC_CODE_FK_PK As Integer, ByVal IC1VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC1VE_FIC_CODE_FK_PK, Integer)
            If (IC1VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IC1VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC1VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC1VE_FIC_CODE_FK_PK As Integer, ByVal IC1VE_CDF_VEIC_CODE_FK_PK As String, ByVal Original_IC1VE_FIC_CODE_FK_PK As Integer, ByVal Original_IC1VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC1VE_FIC_CODE_FK_PK, Integer)
            If (IC1VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IC1VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC1VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC1VE_FIC_CODE_FK_PK, Integer)
            If (Original_IC1VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IC1VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC1VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC1VE_FIC_CODE_FK_PK As Integer, ByVal Original_IC1VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_IC1VE_FIC_CODE_FK_PK, Original_IC1VE_CDF_VEIC_CODE_FK_PK, Original_IC1VE_FIC_CODE_FK_PK, Original_IC1VE_CDF_VEIC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ICCT2_CONCENTRATION2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICCT2_CONCENTRATION2"
            tableMapping.ColumnMappings.Add("ICCT2_FIC_CODE_FK_PK", "ICCT2_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICCT2_NUMSEQ_PK", "ICCT2_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("ICCT2_CONCENTRATION2", "ICCT2_CONCENTRATION2")
            tableMapping.ColumnMappings.Add("ICCT2_CDF_UDOSE_CODE_FK", "ICCT2_CDF_UDOSE_CODE_FK")
            tableMapping.ColumnMappings.Add("ICCT2_NUMORD", "ICCT2_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICCT2_CONCENTRATION2] WHERE (([ICCT2_FIC_CODE_FK_PK] = @"& _ 
                "Original_ICCT2_FIC_CODE_FK_PK) AND ([ICCT2_NUMSEQ_PK] = @Original_ICCT2_NUMSEQ_P"& _ 
                "K) AND ((@IsNull_ICCT2_CONCENTRATION2 = 1 AND [ICCT2_CONCENTRATION2] IS NULL) OR"& _ 
                " ([ICCT2_CONCENTRATION2] = @Original_ICCT2_CONCENTRATION2)) AND ((@IsNull_ICCT2_"& _ 
                "CDF_UDOSE_CODE_FK = 1 AND [ICCT2_CDF_UDOSE_CODE_FK] IS NULL) OR ([ICCT2_CDF_UDOS"& _ 
                "E_CODE_FK] = @Original_ICCT2_CDF_UDOSE_CODE_FK)) AND ((@IsNull_ICCT2_NUMORD = 1 "& _ 
                "AND [ICCT2_NUMORD] IS NULL) OR ([ICCT2_NUMORD] = @Original_ICCT2_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT2_CONCENTRATION2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CONCENTRATION2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_CONCENTRATION2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CONCENTRATION2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT2_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICCT2_CONCENTRATION2] ([ICCT2_FIC_CODE_FK_PK], [ICCT2_NU"& _ 
                "MSEQ_PK], [ICCT2_CONCENTRATION2], [ICCT2_CDF_UDOSE_CODE_FK], [ICCT2_NUMORD]) VAL"& _ 
                "UES (@ICCT2_FIC_CODE_FK_PK, @ICCT2_NUMSEQ_PK, @ICCT2_CONCENTRATION2, @ICCT2_CDF_"& _ 
                "UDOSE_CODE_FK, @ICCT2_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICCT2_FIC_CODE_FK_PK, ICCT2_NUMSEQ_PK, IC"& _ 
                "CT2_CONCENTRATION2, ICCT2_CDF_UDOSE_CODE_FK, ICCT2_NUMORD FROM THERIAQUE.ICCT2_C"& _ 
                "ONCENTRATION2 WHERE (ICCT2_FIC_CODE_FK_PK = @ICCT2_FIC_CODE_FK_PK) AND (ICCT2_NU"& _ 
                "MSEQ_PK = @ICCT2_NUMSEQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_CONCENTRATION2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CONCENTRATION2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICCT2_CONCENTRATION2] SET [ICCT2_FIC_CODE_FK_PK] = @ICCT2_FIC"& _ 
                "_CODE_FK_PK, [ICCT2_NUMSEQ_PK] = @ICCT2_NUMSEQ_PK, [ICCT2_CONCENTRATION2] = @ICC"& _ 
                "T2_CONCENTRATION2, [ICCT2_CDF_UDOSE_CODE_FK] = @ICCT2_CDF_UDOSE_CODE_FK, [ICCT2_"& _ 
                "NUMORD] = @ICCT2_NUMORD WHERE (([ICCT2_FIC_CODE_FK_PK] = @Original_ICCT2_FIC_COD"& _ 
                "E_FK_PK) AND ([ICCT2_NUMSEQ_PK] = @Original_ICCT2_NUMSEQ_PK) AND ((@IsNull_ICCT2"& _ 
                "_CONCENTRATION2 = 1 AND [ICCT2_CONCENTRATION2] IS NULL) OR ([ICCT2_CONCENTRATION"& _ 
                "2] = @Original_ICCT2_CONCENTRATION2)) AND ((@IsNull_ICCT2_CDF_UDOSE_CODE_FK = 1 "& _ 
                "AND [ICCT2_CDF_UDOSE_CODE_FK] IS NULL) OR ([ICCT2_CDF_UDOSE_CODE_FK] = @Original"& _ 
                "_ICCT2_CDF_UDOSE_CODE_FK)) AND ((@IsNull_ICCT2_NUMORD = 1 AND [ICCT2_NUMORD] IS "& _ 
                "NULL) OR ([ICCT2_NUMORD] = @Original_ICCT2_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICCT2_FIC_CODE_FK_"& _ 
                "PK, ICCT2_NUMSEQ_PK, ICCT2_CONCENTRATION2, ICCT2_CDF_UDOSE_CODE_FK, ICCT2_NUMORD"& _ 
                " FROM THERIAQUE.ICCT2_CONCENTRATION2 WHERE (ICCT2_FIC_CODE_FK_PK = @ICCT2_FIC_CO"& _ 
                "DE_FK_PK) AND (ICCT2_NUMSEQ_PK = @ICCT2_NUMSEQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_CONCENTRATION2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CONCENTRATION2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_NUMSEQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT2_CONCENTRATION2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CONCENTRATION2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_CONCENTRATION2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CONCENTRATION2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_CDF_UDOSE_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICCT2_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCT2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICCT2_FIC_CODE_FK_PK, ICCT2_NUMSEQ_PK, ICCT2_CONCENTRATION2, ICCT2_CDF_UDO" & _
                "SE_CODE_FK, ICCT2_NUMORD FROM THERIAQUE.ICCT2_CONCENTRATION2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICCT2_FIC_CODE_FK_PK, ICCT2_NUMSEQ_PK, ICCT2_CONCENTRATION2, ICCT2_CDF_UDO" & _
                "SE_CODE_FK, ICCT2_NUMORD FROM THERIAQUE.ICCT2_CONCENTRATION2" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICCT2_FIC_CO" & _
                "DE_FK_PK = @ICCT2_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCT2_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCT2_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable = New dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable, ByVal ICCT2_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICCT2_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICCT2_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICCT2_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable = New dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCT2_CONCENTRATION2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICCT2_CONCENTRATION2")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICCT2_FIC_CODE_FK_PK As Integer, ByVal Original_ICCT2_NUMSEQ_PK As Integer, ByVal Original_ICCT2_CONCENTRATION2 As String, ByVal Original_ICCT2_CDF_UDOSE_CODE_FK As String, ByVal Original_ICCT2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICCT2_FIC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICCT2_NUMSEQ_PK, Integer)
            If (Original_ICCT2_CONCENTRATION2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ICCT2_CONCENTRATION2, String)
            End If
            If (Original_ICCT2_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ICCT2_CDF_UDOSE_CODE_FK, String)
            End If
            If (Original_ICCT2_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ICCT2_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICCT2_FIC_CODE_FK_PK As Integer, ByVal ICCT2_NUMSEQ_PK As Integer, ByVal ICCT2_CONCENTRATION2 As String, ByVal ICCT2_CDF_UDOSE_CODE_FK As String, ByVal ICCT2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICCT2_FIC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICCT2_NUMSEQ_PK, Integer)
            If (ICCT2_CONCENTRATION2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ICCT2_CONCENTRATION2, String)
            End If
            If (ICCT2_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ICCT2_CDF_UDOSE_CODE_FK, String)
            End If
            If (ICCT2_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ICCT2_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICCT2_FIC_CODE_FK_PK As Integer, ByVal ICCT2_NUMSEQ_PK As Integer, ByVal ICCT2_CONCENTRATION2 As String, ByVal ICCT2_CDF_UDOSE_CODE_FK As String, ByVal ICCT2_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICCT2_FIC_CODE_FK_PK As Integer, ByVal Original_ICCT2_NUMSEQ_PK As Integer, ByVal Original_ICCT2_CONCENTRATION2 As String, ByVal Original_ICCT2_CDF_UDOSE_CODE_FK As String, ByVal Original_ICCT2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICCT2_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICCT2_NUMSEQ_PK, Integer)
            If (ICCT2_CONCENTRATION2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ICCT2_CONCENTRATION2, String)
            End If
            If (ICCT2_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ICCT2_CDF_UDOSE_CODE_FK, String)
            End If
            If (ICCT2_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ICCT2_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ICCT2_FIC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ICCT2_NUMSEQ_PK, Integer)
            If (Original_ICCT2_CONCENTRATION2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ICCT2_CONCENTRATION2, String)
            End If
            If (Original_ICCT2_CDF_UDOSE_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ICCT2_CDF_UDOSE_CODE_FK, String)
            End If
            If (Original_ICCT2_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ICCT2_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICCT2_CONCENTRATION2 As String, ByVal ICCT2_CDF_UDOSE_CODE_FK As String, ByVal ICCT2_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICCT2_FIC_CODE_FK_PK As Integer, ByVal Original_ICCT2_NUMSEQ_PK As Integer, ByVal Original_ICCT2_CONCENTRATION2 As String, ByVal Original_ICCT2_CDF_UDOSE_CODE_FK As String, ByVal Original_ICCT2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_ICCT2_FIC_CODE_FK_PK, Original_ICCT2_NUMSEQ_PK, ICCT2_CONCENTRATION2, ICCT2_CDF_UDOSE_CODE_FK, ICCT2_NUMORD, Original_ICCT2_FIC_CODE_FK_PK, Original_ICCT2_NUMSEQ_PK, Original_ICCT2_CONCENTRATION2, Original_ICCT2_CDF_UDOSE_CODE_FK, Original_ICCT2_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IC2VE_INCOMPATIBILITE_VECTEUR2TableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IC2VE_INCOMPATIBILITE_VECTEUR2"
            tableMapping.ColumnMappings.Add("IC2VE_FIC_CODE_FK_PK", "IC2VE_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IC2VE_CDF_VEIC_CODE_FK_PK", "IC2VE_CDF_VEIC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IC2VE_INCOMPATIBILITE_VECTEUR2] WHERE (([IC2VE_FIC_CODE_" & _
                "FK_PK] = @Original_IC2VE_FIC_CODE_FK_PK) AND ([IC2VE_CDF_VEIC_CODE_FK_PK] = @Ori" & _
                "ginal_IC2VE_CDF_VEIC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IC2VE_INCOMPATIBILITE_VECTEUR2] ([IC2VE_FIC_CODE_FK_PK]," & _
                " [IC2VE_CDF_VEIC_CODE_FK_PK]) VALUES (@IC2VE_FIC_CODE_FK_PK, @IC2VE_CDF_VEIC_COD" & _
                "E_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC2VE_FIC_CODE_FK_PK, IC2VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE" & _
                ".IC2VE_INCOMPATIBILITE_VECTEUR2 WHERE (IC2VE_CDF_VEIC_CODE_FK_PK = @IC2VE_CDF_VE" & _
                "IC_CODE_FK_PK) AND (IC2VE_FIC_CODE_FK_PK = @IC2VE_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IC2VE_INCOMPATIBILITE_VECTEUR2] SET [IC2VE_FIC_CODE_FK_PK] = " & _
                "@IC2VE_FIC_CODE_FK_PK, [IC2VE_CDF_VEIC_CODE_FK_PK] = @IC2VE_CDF_VEIC_CODE_FK_PK " & _
                "WHERE (([IC2VE_FIC_CODE_FK_PK] = @Original_IC2VE_FIC_CODE_FK_PK) AND ([IC2VE_CDF" & _
                "_VEIC_CODE_FK_PK] = @Original_IC2VE_CDF_VEIC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IC2VE_FIC_COD" & _
                "E_FK_PK, IC2VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE.IC2VE_INCOMPATIBILITE_VECTEUR2" & _
                " WHERE (IC2VE_CDF_VEIC_CODE_FK_PK = @IC2VE_CDF_VEIC_CODE_FK_PK) AND (IC2VE_FIC_C" & _
                "ODE_FK_PK = @IC2VE_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_CDF_VEIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IC2VE_FIC_CODE_FK_PK, IC2VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE.IC2VE_INCOM" & _
                "PATIBILITE_VECTEUR2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IC2VE_FIC_CODE_FK_PK, IC2VE_CDF_VEIC_CODE_FK_PK FROM THERIAQUE.IC2VE_INCOM" & _
                "PATIBILITE_VECTEUR2" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IC2VE_FIC_CODE_FK_PK = @IC2VE_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IC2VE_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IC2VE_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable = New dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable, ByVal IC2VE_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2VE_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IC2VE_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IC2VE_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable = New dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.IC2VE_INCOMPATIBILITE_VECTEUR2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "IC2VE_INCOMPATIBILITE_VECTEUR2")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IC2VE_FIC_CODE_FK_PK As Integer, ByVal Original_IC2VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IC2VE_FIC_CODE_FK_PK, Integer)
            If (Original_IC2VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IC2VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IC2VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IC2VE_FIC_CODE_FK_PK As Integer, ByVal IC2VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IC2VE_FIC_CODE_FK_PK, Integer)
            If (IC2VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IC2VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IC2VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IC2VE_FIC_CODE_FK_PK As Integer, ByVal IC2VE_CDF_VEIC_CODE_FK_PK As String, ByVal Original_IC2VE_FIC_CODE_FK_PK As Integer, ByVal Original_IC2VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IC2VE_FIC_CODE_FK_PK, Integer)
            If (IC2VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IC2VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IC2VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IC2VE_FIC_CODE_FK_PK, Integer)
            If (Original_IC2VE_CDF_VEIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IC2VE_CDF_VEIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IC2VE_CDF_VEIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IC2VE_FIC_CODE_FK_PK As Integer, ByVal Original_IC2VE_CDF_VEIC_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_IC2VE_FIC_CODE_FK_PK, Original_IC2VE_CDF_VEIC_CODE_FK_PK, Original_IC2VE_FIC_CODE_FK_PK, Original_IC2VE_CDF_VEIC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ICMA_INCOMPATIBILITE_MATERIAUTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICMA_INCOMPATIBILITE_MATERIAU"
            tableMapping.ColumnMappings.Add("ICMA_FIC_CODE_FK_PK", "ICMA_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICMA_CDF_MAIC_CODE_FK_PK", "ICMA_CDF_MAIC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICMA_INCOMPATIBILITE_MATERIAU] WHERE (([ICMA_FIC_CODE_FK"& _ 
                "_PK] = @Original_ICMA_FIC_CODE_FK_PK) AND ([ICMA_CDF_MAIC_CODE_FK_PK] = @Origina"& _ 
                "l_ICMA_CDF_MAIC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICMA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICMA_INCOMPATIBILITE_MATERIAU] ([ICMA_FIC_CODE_FK_PK], ["& _ 
                "ICMA_CDF_MAIC_CODE_FK_PK]) VALUES (@ICMA_FIC_CODE_FK_PK, @ICMA_CDF_MAIC_CODE_FK_"& _ 
                "PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICMA_FIC_CODE_FK_PK, ICMA_CDF_MAIC_CODE_FK_PK FROM THERIAQUE.ICMA_I"& _ 
                "NCOMPATIBILITE_MATERIAU WHERE (ICMA_CDF_MAIC_CODE_FK_PK = @ICMA_CDF_MAIC_CODE_FK"& _ 
                "_PK) AND (ICMA_FIC_CODE_FK_PK = @ICMA_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICMA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICMA_INCOMPATIBILITE_MATERIAU] SET [ICMA_FIC_CODE_FK_PK] = @I"& _ 
                "CMA_FIC_CODE_FK_PK, [ICMA_CDF_MAIC_CODE_FK_PK] = @ICMA_CDF_MAIC_CODE_FK_PK WHERE"& _ 
                " (([ICMA_FIC_CODE_FK_PK] = @Original_ICMA_FIC_CODE_FK_PK) AND ([ICMA_CDF_MAIC_CO"& _ 
                "DE_FK_PK] = @Original_ICMA_CDF_MAIC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICMA_FIC_CODE_FK_PK, I"& _ 
                "CMA_CDF_MAIC_CODE_FK_PK FROM THERIAQUE.ICMA_INCOMPATIBILITE_MATERIAU WHERE (ICMA"& _ 
                "_CDF_MAIC_CODE_FK_PK = @ICMA_CDF_MAIC_CODE_FK_PK) AND (ICMA_FIC_CODE_FK_PK = @IC"& _ 
                "MA_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICMA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICMA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_CDF_MAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICMA_FIC_CODE_FK_PK, ICMA_CDF_MAIC_CODE_FK_PK FROM THERIAQUE.ICMA_INCOMPAT" & _
                "IBILITE_MATERIAU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICMA_FIC_CODE_FK_PK, ICMA_CDF_MAIC_CODE_FK_PK FROM THERIAQUE.ICMA_INCOMPAT" & _
                "IBILITE_MATERIAU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICMA_FIC_CODE_FK_PK = @ICMA_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICMA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICMA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable = New dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable, ByVal ICMA_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICMA_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICMA_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICMA_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable = New dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICMA_INCOMPATIBILITE_MATERIAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICMA_INCOMPATIBILITE_MATERIAU")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICMA_FIC_CODE_FK_PK As Integer, ByVal Original_ICMA_CDF_MAIC_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICMA_FIC_CODE_FK_PK, Integer)
            If (Original_ICMA_CDF_MAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICMA_CDF_MAIC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICMA_CDF_MAIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICMA_FIC_CODE_FK_PK As Integer, ByVal ICMA_CDF_MAIC_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICMA_FIC_CODE_FK_PK, Integer)
            If (ICMA_CDF_MAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICMA_CDF_MAIC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICMA_CDF_MAIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICMA_FIC_CODE_FK_PK As Integer, ByVal ICMA_CDF_MAIC_CODE_FK_PK As String, ByVal Original_ICMA_FIC_CODE_FK_PK As Integer, ByVal Original_ICMA_CDF_MAIC_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICMA_FIC_CODE_FK_PK, Integer)
            If (ICMA_CDF_MAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICMA_CDF_MAIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICMA_CDF_MAIC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ICMA_FIC_CODE_FK_PK, Integer)
            If (Original_ICMA_CDF_MAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICMA_CDF_MAIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICMA_CDF_MAIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_ICMA_FIC_CODE_FK_PK As Integer, ByVal Original_ICMA_CDF_MAIC_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_ICMA_FIC_CODE_FK_PK, Original_ICMA_CDF_MAIC_CODE_FK_PK, Original_ICMA_FIC_CODE_FK_PK, Original_ICMA_CDF_MAIC_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ICCO_INCOMPATIBILITE_CONTENANTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICCO_INCOMPATIBILITE_CONTENANT"
            tableMapping.ColumnMappings.Add("ICCO_FIC_CODE_FK_PK", "ICCO_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICCO_CDF_COIC_CODE_FK_PK", "ICCO_CDF_COIC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICCO_INCOMPATIBILITE_CONTENANT] WHERE (([ICCO_FIC_CODE_F" & _
                "K_PK] = @Original_ICCO_FIC_CODE_FK_PK) AND ([ICCO_CDF_COIC_CODE_FK_PK] = @Origin" & _
                "al_ICCO_CDF_COIC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCO_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICCO_INCOMPATIBILITE_CONTENANT] ([ICCO_FIC_CODE_FK_PK], " & _
                "[ICCO_CDF_COIC_CODE_FK_PK]) VALUES (@ICCO_FIC_CODE_FK_PK, @ICCO_CDF_COIC_CODE_FK" & _
                "_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICCO_FIC_CODE_FK_PK, ICCO_CDF_COIC_CODE_FK_PK FROM THERIAQUE.ICCO_" & _
                "INCOMPATIBILITE_CONTENANT WHERE (ICCO_CDF_COIC_CODE_FK_PK = @ICCO_CDF_COIC_CODE_" & _
                "FK_PK) AND (ICCO_FIC_CODE_FK_PK = @ICCO_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCO_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICCO_INCOMPATIBILITE_CONTENANT] SET [ICCO_FIC_CODE_FK_PK] = @" & _
                "ICCO_FIC_CODE_FK_PK, [ICCO_CDF_COIC_CODE_FK_PK] = @ICCO_CDF_COIC_CODE_FK_PK WHER" & _
                "E (([ICCO_FIC_CODE_FK_PK] = @Original_ICCO_FIC_CODE_FK_PK) AND ([ICCO_CDF_COIC_C" & _
                "ODE_FK_PK] = @Original_ICCO_CDF_COIC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICCO_FIC_CODE_FK_PK, " & _
                "ICCO_CDF_COIC_CODE_FK_PK FROM THERIAQUE.ICCO_INCOMPATIBILITE_CONTENANT WHERE (IC" & _
                "CO_CDF_COIC_CODE_FK_PK = @ICCO_CDF_COIC_CODE_FK_PK) AND (ICCO_FIC_CODE_FK_PK = @" & _
                "ICCO_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCO_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCO_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_CDF_COIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICCO_FIC_CODE_FK_PK, ICCO_CDF_COIC_CODE_FK_PK FROM THERIAQUE.ICCO_INCOMPAT" & _
                "IBILITE_CONTENANT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICCO_FIC_CODE_FK_PK, ICCO_CDF_COIC_CODE_FK_PK FROM THERIAQUE.ICCO_INCOMPAT" & _
                "IBILITE_CONTENANT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICCO_FIC_CODE_FK_PK = @ICCO_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICCO_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICCO_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable = New dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable, ByVal ICCO_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICCO_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICCO_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICCO_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable = New dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICCO_INCOMPATIBILITE_CONTENANTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICCO_INCOMPATIBILITE_CONTENANT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICCO_FIC_CODE_FK_PK As Integer, ByVal Original_ICCO_CDF_COIC_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICCO_FIC_CODE_FK_PK, Integer)
            If (Original_ICCO_CDF_COIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICCO_CDF_COIC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICCO_CDF_COIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICCO_FIC_CODE_FK_PK As Integer, ByVal ICCO_CDF_COIC_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICCO_FIC_CODE_FK_PK, Integer)
            If (ICCO_CDF_COIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICCO_CDF_COIC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICCO_CDF_COIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICCO_FIC_CODE_FK_PK As Integer, ByVal ICCO_CDF_COIC_CODE_FK_PK As String, ByVal Original_ICCO_FIC_CODE_FK_PK As Integer, ByVal Original_ICCO_CDF_COIC_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICCO_FIC_CODE_FK_PK, Integer)
            If (ICCO_CDF_COIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICCO_CDF_COIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICCO_CDF_COIC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ICCO_FIC_CODE_FK_PK, Integer)
            If (Original_ICCO_CDF_COIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICCO_CDF_COIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICCO_CDF_COIC_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_ICCO_FIC_CODE_FK_PK As Integer, ByVal Original_ICCO_CDF_COIC_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_ICCO_FIC_CODE_FK_PK, Original_ICCO_CDF_COIC_CODE_FK_PK, Original_ICCO_FIC_CODE_FK_PK, Original_ICCO_CDF_COIC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ICNA_INCOMPATIBILITE_NATURETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICNA_INCOMPATIBILITE_NATURE"
            tableMapping.ColumnMappings.Add("ICNA_FIC_CODE_FK_PK", "ICNA_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICNA_CDF_NAIC_CODE_FK_PK", "ICNA_CDF_NAIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICNA_NUMORD", "ICNA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICNA_INCOMPATIBILITE_NATURE] WHERE (([ICNA_FIC_CODE_FK_P"& _ 
                "K] = @Original_ICNA_FIC_CODE_FK_PK) AND ([ICNA_CDF_NAIC_CODE_FK_PK] = @Original_"& _ 
                "ICNA_CDF_NAIC_CODE_FK_PK) AND ((@IsNull_ICNA_NUMORD = 1 AND [ICNA_NUMORD] IS NUL"& _ 
                "L) OR ([ICNA_NUMORD] = @Original_ICNA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICNA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICNA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICNA_INCOMPATIBILITE_NATURE] ([ICNA_FIC_CODE_FK_PK], [IC"& _ 
                "NA_CDF_NAIC_CODE_FK_PK], [ICNA_NUMORD]) VALUES (@ICNA_FIC_CODE_FK_PK, @ICNA_CDF_"& _ 
                "NAIC_CODE_FK_PK, @ICNA_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICNA_FIC_CODE_FK_PK, ICNA_CDF_NAIC_CODE_"& _ 
                "FK_PK, ICNA_NUMORD FROM THERIAQUE.ICNA_INCOMPATIBILITE_NATURE WHERE (ICNA_CDF_NA"& _ 
                "IC_CODE_FK_PK = @ICNA_CDF_NAIC_CODE_FK_PK) AND (ICNA_FIC_CODE_FK_PK = @ICNA_FIC_"& _ 
                "CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICNA_INCOMPATIBILITE_NATURE] SET [ICNA_FIC_CODE_FK_PK] = @ICN"& _ 
                "A_FIC_CODE_FK_PK, [ICNA_CDF_NAIC_CODE_FK_PK] = @ICNA_CDF_NAIC_CODE_FK_PK, [ICNA_"& _ 
                "NUMORD] = @ICNA_NUMORD WHERE (([ICNA_FIC_CODE_FK_PK] = @Original_ICNA_FIC_CODE_F"& _ 
                "K_PK) AND ([ICNA_CDF_NAIC_CODE_FK_PK] = @Original_ICNA_CDF_NAIC_CODE_FK_PK) AND "& _ 
                "((@IsNull_ICNA_NUMORD = 1 AND [ICNA_NUMORD] IS NULL) OR ([ICNA_NUMORD] = @Origin"& _ 
                "al_ICNA_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICNA_FIC_CODE_FK_PK, ICNA_CDF_NAIC_CODE_FK_PK, ICNA_N"& _ 
                "UMORD FROM THERIAQUE.ICNA_INCOMPATIBILITE_NATURE WHERE (ICNA_CDF_NAIC_CODE_FK_PK"& _ 
                " = @ICNA_CDF_NAIC_CODE_FK_PK) AND (ICNA_FIC_CODE_FK_PK = @ICNA_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICNA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_CDF_NAIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICNA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICNA_FIC_CODE_FK_PK, ICNA_CDF_NAIC_CODE_FK_PK, ICNA_NUMORD FROM THERIAQUE." & _
                "ICNA_INCOMPATIBILITE_NATURE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICNA_FIC_CODE_FK_PK, ICNA_CDF_NAIC_CODE_FK_PK, ICNA_NUMORD FROM THERIAQUE." & _
                "ICNA_INCOMPATIBILITE_NATURE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICNA_FIC_CODE_FK_PK = @ICNA_FIC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICNA_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICNA_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable = New dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable, ByVal ICNA_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICNA_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICNA_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICNA_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable = New dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICNA_INCOMPATIBILITE_NATUREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICNA_INCOMPATIBILITE_NATURE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICNA_FIC_CODE_FK_PK As Integer, ByVal Original_ICNA_CDF_NAIC_CODE_FK_PK As String, ByVal Original_ICNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICNA_FIC_CODE_FK_PK, Integer)
            If (Original_ICNA_CDF_NAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICNA_CDF_NAIC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICNA_CDF_NAIC_CODE_FK_PK, String)
            End If
            If (Original_ICNA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ICNA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICNA_FIC_CODE_FK_PK As Integer, ByVal ICNA_CDF_NAIC_CODE_FK_PK As String, ByVal ICNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICNA_FIC_CODE_FK_PK, Integer)
            If (ICNA_CDF_NAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICNA_CDF_NAIC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICNA_CDF_NAIC_CODE_FK_PK, String)
            End If
            If (ICNA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ICNA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICNA_FIC_CODE_FK_PK As Integer, ByVal ICNA_CDF_NAIC_CODE_FK_PK As String, ByVal ICNA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICNA_FIC_CODE_FK_PK As Integer, ByVal Original_ICNA_CDF_NAIC_CODE_FK_PK As String, ByVal Original_ICNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICNA_FIC_CODE_FK_PK, Integer)
            If (ICNA_CDF_NAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICNA_CDF_NAIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICNA_CDF_NAIC_CODE_FK_PK, String)
            End If
            If (ICNA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ICNA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICNA_FIC_CODE_FK_PK, Integer)
            If (Original_ICNA_CDF_NAIC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICNA_CDF_NAIC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ICNA_CDF_NAIC_CODE_FK_PK, String)
            End If
            If (Original_ICNA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ICNA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICNA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICNA_FIC_CODE_FK_PK As Integer, ByVal Original_ICNA_CDF_NAIC_CODE_FK_PK As String, ByVal Original_ICNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_ICNA_FIC_CODE_FK_PK, Original_ICNA_CDF_NAIC_CODE_FK_PK, ICNA_NUMORD, Original_ICNA_FIC_CODE_FK_PK, Original_ICNA_CDF_NAIC_CODE_FK_PK, Original_ICNA_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ICDUR_INCOMPATIBILITE_DUREETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICDUR_INCOMPATIBILITE_DUREE"
            tableMapping.ColumnMappings.Add("ICDUR_FIC_CODE_FK_PK", "ICDUR_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICDUR_CDF_DUR_CODE_FK_PK", "ICDUR_CDF_DUR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICDUR_NUMORD", "ICDUR_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICDUR_INCOMPATIBILITE_DUREE] WHERE (([ICDUR_FIC_CODE_FK_" & _
                "PK] = @Original_ICDUR_FIC_CODE_FK_PK) AND ([ICDUR_CDF_DUR_CODE_FK_PK] = @Origina" & _
                "l_ICDUR_CDF_DUR_CODE_FK_PK) AND ((@IsNull_ICDUR_NUMORD = 1 AND [ICDUR_NUMORD] IS" & _
                " NULL) OR ([ICDUR_NUMORD] = @Original_ICDUR_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICDUR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICDUR_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICDUR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICDUR_INCOMPATIBILITE_DUREE] ([ICDUR_FIC_CODE_FK_PK], [I" & _
                "CDUR_CDF_DUR_CODE_FK_PK], [ICDUR_NUMORD]) VALUES (@ICDUR_FIC_CODE_FK_PK, @ICDUR_" & _
                "CDF_DUR_CODE_FK_PK, @ICDUR_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICDUR_FIC_CODE_FK_PK, ICDUR_CDF_DUR_" & _
                "CODE_FK_PK, ICDUR_NUMORD FROM THERIAQUE.ICDUR_INCOMPATIBILITE_DUREE WHERE (ICDUR" & _
                "_CDF_DUR_CODE_FK_PK = @ICDUR_CDF_DUR_CODE_FK_PK) AND (ICDUR_FIC_CODE_FK_PK = @IC" & _
                "DUR_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICDUR_INCOMPATIBILITE_DUREE] SET [ICDUR_FIC_CODE_FK_PK] = @IC" & _
                "DUR_FIC_CODE_FK_PK, [ICDUR_CDF_DUR_CODE_FK_PK] = @ICDUR_CDF_DUR_CODE_FK_PK, [ICD" & _
                "UR_NUMORD] = @ICDUR_NUMORD WHERE (([ICDUR_FIC_CODE_FK_PK] = @Original_ICDUR_FIC_" & _
                "CODE_FK_PK) AND ([ICDUR_CDF_DUR_CODE_FK_PK] = @Original_ICDUR_CDF_DUR_CODE_FK_PK" & _
                ") AND ((@IsNull_ICDUR_NUMORD = 1 AND [ICDUR_NUMORD] IS NULL) OR ([ICDUR_NUMORD] " & _
                "= @Original_ICDUR_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICDUR_FIC_CODE_FK_PK, ICDUR_CDF_DUR_CODE_FK" & _
                "_PK, ICDUR_NUMORD FROM THERIAQUE.ICDUR_INCOMPATIBILITE_DUREE WHERE (ICDUR_CDF_DU" & _
                "R_CODE_FK_PK = @ICDUR_CDF_DUR_CODE_FK_PK) AND (ICDUR_FIC_CODE_FK_PK = @ICDUR_FIC" & _
                "_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICDUR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_CDF_DUR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICDUR_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICDUR_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICDUR_FIC_CODE_FK_PK, ICDUR_CDF_DUR_CODE_FK_PK, ICDUR_NUMORD FROM THERIAQU" & _
                "E.ICDUR_INCOMPATIBILITE_DUREE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICDUR_FIC_CODE_FK_PK, ICDUR_CDF_DUR_CODE_FK_PK, ICDUR_NUMORD FROM THERIAQU" & _
                "E.ICDUR_INCOMPATIBILITE_DUREE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICDUR_FIC_CODE_FK_PK = @ICDUR_FIC_CODE_FK_P" & _
                "K"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICDUR_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICDUR_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable = New dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable, ByVal ICDUR_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICDUR_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICDUR_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICDUR_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable = New dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICDUR_INCOMPATIBILITE_DUREEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICDUR_INCOMPATIBILITE_DUREE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICDUR_FIC_CODE_FK_PK As Integer, ByVal Original_ICDUR_CDF_DUR_CODE_FK_PK As String, ByVal Original_ICDUR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICDUR_FIC_CODE_FK_PK, Integer)
            If (Original_ICDUR_CDF_DUR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICDUR_CDF_DUR_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICDUR_CDF_DUR_CODE_FK_PK, String)
            End If
            If (Original_ICDUR_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ICDUR_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICDUR_FIC_CODE_FK_PK As Integer, ByVal ICDUR_CDF_DUR_CODE_FK_PK As String, ByVal ICDUR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICDUR_FIC_CODE_FK_PK, Integer)
            If (ICDUR_CDF_DUR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICDUR_CDF_DUR_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICDUR_CDF_DUR_CODE_FK_PK, String)
            End If
            If (ICDUR_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ICDUR_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICDUR_FIC_CODE_FK_PK As Integer, ByVal ICDUR_CDF_DUR_CODE_FK_PK As String, ByVal ICDUR_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICDUR_FIC_CODE_FK_PK As Integer, ByVal Original_ICDUR_CDF_DUR_CODE_FK_PK As String, ByVal Original_ICDUR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICDUR_FIC_CODE_FK_PK, Integer)
            If (ICDUR_CDF_DUR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICDUR_CDF_DUR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICDUR_CDF_DUR_CODE_FK_PK, String)
            End If
            If (ICDUR_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ICDUR_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICDUR_FIC_CODE_FK_PK, Integer)
            If (Original_ICDUR_CDF_DUR_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICDUR_CDF_DUR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ICDUR_CDF_DUR_CODE_FK_PK, String)
            End If
            If (Original_ICDUR_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ICDUR_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICDUR_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICDUR_FIC_CODE_FK_PK As Integer, ByVal Original_ICDUR_CDF_DUR_CODE_FK_PK As String, ByVal Original_ICDUR_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_ICDUR_FIC_CODE_FK_PK, Original_ICDUR_CDF_DUR_CODE_FK_PK, ICDUR_NUMORD, Original_ICDUR_FIC_CODE_FK_PK, Original_ICDUR_CDF_DUR_CODE_FK_PK, Original_ICDUR_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ICTMP_INCOMPA_TEMPERATURETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICTMP_INCOMPA_TEMPERATURE"
            tableMapping.ColumnMappings.Add("ICTMP_FIC_CODE_FK_PK", "ICTMP_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICTMP_CDF_TEMP_CODE_FK_PK", "ICTMP_CDF_TEMP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICTMP_NUMORD", "ICTMP_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICTMP_INCOMPA_TEMPERATURE] WHERE (([ICTMP_FIC_CODE_FK_PK"& _ 
                "] = @Original_ICTMP_FIC_CODE_FK_PK) AND ([ICTMP_CDF_TEMP_CODE_FK_PK] = @Original"& _ 
                "_ICTMP_CDF_TEMP_CODE_FK_PK) AND ((@IsNull_ICTMP_NUMORD = 1 AND [ICTMP_NUMORD] IS"& _ 
                " NULL) OR ([ICTMP_NUMORD] = @Original_ICTMP_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICTMP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICTMP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICTMP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICTMP_INCOMPA_TEMPERATURE] ([ICTMP_FIC_CODE_FK_PK], [ICT"& _ 
                "MP_CDF_TEMP_CODE_FK_PK], [ICTMP_NUMORD]) VALUES (@ICTMP_FIC_CODE_FK_PK, @ICTMP_C"& _ 
                "DF_TEMP_CODE_FK_PK, @ICTMP_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICTMP_FIC_CODE_FK_PK, ICTMP_CDF_TEMP"& _ 
                "_CODE_FK_PK, ICTMP_NUMORD FROM THERIAQUE.ICTMP_INCOMPA_TEMPERATURE WHERE (ICTMP_"& _ 
                "CDF_TEMP_CODE_FK_PK = @ICTMP_CDF_TEMP_CODE_FK_PK) AND (ICTMP_FIC_CODE_FK_PK = @I"& _ 
                "CTMP_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICTMP_INCOMPA_TEMPERATURE] SET [ICTMP_FIC_CODE_FK_PK] = @ICTM"& _ 
                "P_FIC_CODE_FK_PK, [ICTMP_CDF_TEMP_CODE_FK_PK] = @ICTMP_CDF_TEMP_CODE_FK_PK, [ICT"& _ 
                "MP_NUMORD] = @ICTMP_NUMORD WHERE (([ICTMP_FIC_CODE_FK_PK] = @Original_ICTMP_FIC_"& _ 
                "CODE_FK_PK) AND ([ICTMP_CDF_TEMP_CODE_FK_PK] = @Original_ICTMP_CDF_TEMP_CODE_FK_"& _ 
                "PK) AND ((@IsNull_ICTMP_NUMORD = 1 AND [ICTMP_NUMORD] IS NULL) OR ([ICTMP_NUMORD"& _ 
                "] = @Original_ICTMP_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ICTMP_FIC_CODE_FK_PK, ICTMP_CDF_TEMP_CODE"& _ 
                "_FK_PK, ICTMP_NUMORD FROM THERIAQUE.ICTMP_INCOMPA_TEMPERATURE WHERE (ICTMP_CDF_T"& _ 
                "EMP_CODE_FK_PK = @ICTMP_CDF_TEMP_CODE_FK_PK) AND (ICTMP_FIC_CODE_FK_PK = @ICTMP_"& _ 
                "FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICTMP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_CDF_TEMP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICTMP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICTMP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICTMP_FIC_CODE_FK_PK, ICTMP_CDF_TEMP_CODE_FK_PK, ICTMP_NUMORD FROM THERIAQ" & _
                "UE.ICTMP_INCOMPA_TEMPERATURE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICTMP_FIC_CODE_FK_PK, ICTMP_CDF_TEMP_CODE_FK_PK, ICTMP_NUMORD FROM THERIAQ" & _
                "UE.ICTMP_INCOMPA_TEMPERATURE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICTMP_FIC_CODE_FK_PK = @ICTMP_FIC_CODE_FK_PK" & _
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICTMP_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICTMP_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable = New dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable, ByVal ICTMP_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICTMP_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICTMP_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICTMP_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable = New dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICTMP_INCOMPA_TEMPERATUREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICTMP_INCOMPA_TEMPERATURE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICTMP_FIC_CODE_FK_PK As Integer, ByVal Original_ICTMP_CDF_TEMP_CODE_FK_PK As String, ByVal Original_ICTMP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICTMP_FIC_CODE_FK_PK, Integer)
            If (Original_ICTMP_CDF_TEMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICTMP_CDF_TEMP_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICTMP_CDF_TEMP_CODE_FK_PK, String)
            End If
            If (Original_ICTMP_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ICTMP_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICTMP_FIC_CODE_FK_PK As Integer, ByVal ICTMP_CDF_TEMP_CODE_FK_PK As String, ByVal ICTMP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICTMP_FIC_CODE_FK_PK, Integer)
            If (ICTMP_CDF_TEMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICTMP_CDF_TEMP_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICTMP_CDF_TEMP_CODE_FK_PK, String)
            End If
            If (ICTMP_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ICTMP_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICTMP_FIC_CODE_FK_PK As Integer, ByVal ICTMP_CDF_TEMP_CODE_FK_PK As String, ByVal ICTMP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICTMP_FIC_CODE_FK_PK As Integer, ByVal Original_ICTMP_CDF_TEMP_CODE_FK_PK As String, ByVal Original_ICTMP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICTMP_FIC_CODE_FK_PK, Integer)
            If (ICTMP_CDF_TEMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICTMP_CDF_TEMP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICTMP_CDF_TEMP_CODE_FK_PK, String)
            End If
            If (ICTMP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ICTMP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICTMP_FIC_CODE_FK_PK, Integer)
            If (Original_ICTMP_CDF_TEMP_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICTMP_CDF_TEMP_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ICTMP_CDF_TEMP_CODE_FK_PK, String)
            End If
            If (Original_ICTMP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ICTMP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICTMP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICTMP_FIC_CODE_FK_PK As Integer, ByVal Original_ICTMP_CDF_TEMP_CODE_FK_PK As String, ByVal Original_ICTMP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_ICTMP_FIC_CODE_FK_PK, Original_ICTMP_CDF_TEMP_CODE_FK_PK, ICTMP_NUMORD, Original_ICTMP_FIC_CODE_FK_PK, Original_ICTMP_CDF_TEMP_CODE_FK_PK, Original_ICTMP_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ICLUM_INCOMPATIBILITE_LUMIERETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ICLUM_INCOMPATIBILITE_LUMIERE"
            tableMapping.ColumnMappings.Add("ICLUM_FIC_CODE_FK_PK", "ICLUM_FIC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICLUM_CDF_LUM_CODE_FK_PK", "ICLUM_CDF_LUM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("ICLUM_NUMORD", "ICLUM_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ICLUM_INCOMPATIBILITE_LUMIERE] WHERE (([ICLUM_FIC_CODE_F" & _
                "K_PK] = @Original_ICLUM_FIC_CODE_FK_PK) AND ([ICLUM_CDF_LUM_CODE_FK_PK] = @Origi" & _
                "nal_ICLUM_CDF_LUM_CODE_FK_PK) AND ((@IsNull_ICLUM_NUMORD = 1 AND [ICLUM_NUMORD] " & _
                "IS NULL) OR ([ICLUM_NUMORD] = @Original_ICLUM_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICLUM_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICLUM_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICLUM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ICLUM_INCOMPATIBILITE_LUMIERE] ([ICLUM_FIC_CODE_FK_PK], " & _
                "[ICLUM_CDF_LUM_CODE_FK_PK], [ICLUM_NUMORD]) VALUES (@ICLUM_FIC_CODE_FK_PK, @ICLU" & _
                "M_CDF_LUM_CODE_FK_PK, @ICLUM_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICLUM_FIC_CODE_FK_PK, ICLUM_CDF_LU" & _
                "M_CODE_FK_PK, ICLUM_NUMORD FROM THERIAQUE.ICLUM_INCOMPATIBILITE_LUMIERE WHERE (I" & _
                "CLUM_CDF_LUM_CODE_FK_PK = @ICLUM_CDF_LUM_CODE_FK_PK) AND (ICLUM_FIC_CODE_FK_PK =" & _
                " @ICLUM_FIC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ICLUM_INCOMPATIBILITE_LUMIERE] SET [ICLUM_FIC_CODE_FK_PK] = @" & _
                "ICLUM_FIC_CODE_FK_PK, [ICLUM_CDF_LUM_CODE_FK_PK] = @ICLUM_CDF_LUM_CODE_FK_PK, [I" & _
                "CLUM_NUMORD] = @ICLUM_NUMORD WHERE (([ICLUM_FIC_CODE_FK_PK] = @Original_ICLUM_FI" & _
                "C_CODE_FK_PK) AND ([ICLUM_CDF_LUM_CODE_FK_PK] = @Original_ICLUM_CDF_LUM_CODE_FK_" & _
                "PK) AND ((@IsNull_ICLUM_NUMORD = 1 AND [ICLUM_NUMORD] IS NULL) OR ([ICLUM_NUMORD" & _
                "] = @Original_ICLUM_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT ICLUM_FIC_CODE_FK_PK, ICLUM_CDF_LUM_CODE_" & _
                "FK_PK, ICLUM_NUMORD FROM THERIAQUE.ICLUM_INCOMPATIBILITE_LUMIERE WHERE (ICLUM_CD" & _
                "F_LUM_CODE_FK_PK = @ICLUM_CDF_LUM_CODE_FK_PK) AND (ICLUM_FIC_CODE_FK_PK = @ICLUM" & _
                "_FIC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICLUM_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_CDF_LUM_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ICLUM_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ICLUM_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ICLUM_FIC_CODE_FK_PK, ICLUM_CDF_LUM_CODE_FK_PK, ICLUM_NUMORD FROM THERIAQU" & _
                "E.ICLUM_INCOMPATIBILITE_LUMIERE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ICLUM_FIC_CODE_FK_PK, ICLUM_CDF_LUM_CODE_FK_PK, ICLUM_NUMORD FROM THERIAQU" & _
                "E.ICLUM_INCOMPATIBILITE_LUMIERE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ICLUM_FIC_CODE_FK_PK = @ICLUM_FIC_CODE_FK" & _
                "_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ICLUM_FIC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ICLUM_FIC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable = New dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable, ByVal ICLUM_FIC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICLUM_FIC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ICLUM_FIC_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ICLUM_FIC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable = New dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance2.ICLUM_INCOMPATIBILITE_LUMIEREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance2) As Integer
            Return Me.Adapter.Update(dataSet, "ICLUM_INCOMPATIBILITE_LUMIERE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ICLUM_FIC_CODE_FK_PK As Integer, ByVal Original_ICLUM_CDF_LUM_CODE_FK_PK As String, ByVal Original_ICLUM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ICLUM_FIC_CODE_FK_PK, Integer)
            If (Original_ICLUM_CDF_LUM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICLUM_CDF_LUM_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ICLUM_CDF_LUM_CODE_FK_PK, String)
            End If
            If (Original_ICLUM_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ICLUM_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ICLUM_FIC_CODE_FK_PK As Integer, ByVal ICLUM_CDF_LUM_CODE_FK_PK As String, ByVal ICLUM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ICLUM_FIC_CODE_FK_PK, Integer)
            If (ICLUM_CDF_LUM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICLUM_CDF_LUM_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ICLUM_CDF_LUM_CODE_FK_PK, String)
            End If
            If (ICLUM_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ICLUM_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICLUM_FIC_CODE_FK_PK As Integer, ByVal ICLUM_CDF_LUM_CODE_FK_PK As String, ByVal ICLUM_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICLUM_FIC_CODE_FK_PK As Integer, ByVal Original_ICLUM_CDF_LUM_CODE_FK_PK As String, ByVal Original_ICLUM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ICLUM_FIC_CODE_FK_PK, Integer)
            If (ICLUM_CDF_LUM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ICLUM_CDF_LUM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ICLUM_CDF_LUM_CODE_FK_PK, String)
            End If
            If (ICLUM_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ICLUM_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ICLUM_FIC_CODE_FK_PK, Integer)
            If (Original_ICLUM_CDF_LUM_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ICLUM_CDF_LUM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ICLUM_CDF_LUM_CODE_FK_PK, String)
            End If
            If (Original_ICLUM_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ICLUM_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ICLUM_NUMORD As Global.System.Nullable(Of Short), ByVal Original_ICLUM_FIC_CODE_FK_PK As Integer, ByVal Original_ICLUM_CDF_LUM_CODE_FK_PK As String, ByVal Original_ICLUM_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_ICLUM_FIC_CODE_FK_PK, Original_ICLUM_CDF_LUM_CODE_FK_PK, ICLUM_NUMORD, Original_ICLUM_FIC_CODE_FK_PK, Original_ICLUM_CDF_LUM_CODE_FK_PK, Original_ICLUM_NUMORD)
        End Function
    End Class
End Namespace
