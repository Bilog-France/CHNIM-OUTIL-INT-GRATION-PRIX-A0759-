'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.42
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Nomenclature1"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Nomenclature1
    Inherits System.Data.DataSet
    
    Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
    
    Private tableSYSP_SYNONYME_SPECIALITE As SYSP_SYNONYME_SPECIALITEDataTable
    
    Private tableSPLAB_SPECIALITE_LABO As SPLAB_SPECIALITE_LABODataTable
    
    Private tableSPLABEX_SPE_LABO_EXPLOITANT As SPLABEX_SPE_LABO_EXPLOITANTDataTable
    
    Private tableSPVO_SPECIALITE_VOIE As SPVO_SPECIALITE_VOIEDataTable
    
    Private tableSPFO_SPECIALITE_FORME As SPFO_SPECIALITE_FORMEDataTable
    
    Private tableSPFOCFO_SPE_FORME_COMPFORME As SPFOCFO_SPE_FORME_COMPFORMEDataTable
    
    Private tableSPFOCPI_SPE_FORME_COMPINFO As SPFOCPI_SPE_FORME_COMPINFODataTable
    
    Private tableCOMPO_COMPOSITION As COMPO_COMPOSITIONDataTable
    
    Private tableCOSAC_COMPO_SUBACT As COSAC_COMPO_SUBACTDataTable
    
    Private tableCOSAU_COMPO_SUBAUX As COSAU_COMPO_SUBAUXDataTable
    
    Private tableCOTEN_COMPO_TENEUR As COTEN_COMPO_TENEURDataTable
    
    Private tableSPADM_SPECIALITE_MODEADM As SPADM_SPECIALITE_MODEADMDataTable
    
    Private tableSPTEN_SPECIALITE_TENEUR As SPTEN_SPECIALITE_TENEURDataTable
    
    Private tableSPCPH_SPECIALITE_CLASSEPH As SPCPH_SPECIALITE_CLASSEPHDataTable
    
    Private tableSPDDD_DOSE_USUELLE_JOUR As SPDDD_DOSE_USUELLE_JOURDataTable
    
    Private tableSPCH_SPECIALITE_CHOIX As SPCH_SPECIALITE_CHOIXDataTable
    
    Private tableSPRMO_SPECIALITE_RMO As SPRMO_SPECIALITE_RMODataTable
    
    Private tableSPFTR_SPECIALITE_TRANSPARENCE As SPFTR_SPECIALITE_TRANSPARENCEDataTable
    
    Private tableSPFTH_SPEC_INFOTHERAPEUTIQUE As SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
    
    Private tableSPATR_SPEC_AVISTRANSPARENCE As SPATR_SPEC_AVISTRANSPARENCEDataTable
    
    Private tableSPSMR_SERVICE_MEDICAL_RENDU As SPSMR_SERVICE_MEDICAL_RENDUDataTable
    
    Private tableSPCPD_SPE_CDT_PRESCR As SPCPD_SPE_CDT_PRESCRDataTable
    
    Private tablePRIUCD_PRIX_UCD As PRIUCD_PRIX_UCDDataTable
    
    Private tablePRE_PRESENTATION As PRE_PRESENTATIONDataTable
    
    Private tableSPFOTX_SPE_FORME_TEXTE As SPFOTX_SPE_FORME_TEXTEDataTable
    
    Private relationFK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE As System.Data.DataRelation
    
    Private relationFK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME As System.Data.DataRelation
    
    Private relationFK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO As System.Data.DataRelation
    
    Private relationFK_SP_SPECIALITE_COTEN_COMPO_TENEUR As System.Data.DataRelation
    
    Private relationFK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM As System.Data.DataRelation
    
    Private relationFK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR As System.Data.DataRelation
    
    Private relationFK3_COSAC_COMPO_SUBACT As System.Data.DataRelation
    
    Private relationFK3_COSAU_COMPO_SUBAUX As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            If (Not (ds.Tables("SYSP_SYNONYME_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SYSP_SYNONYME_SPECIALITEDataTable(ds.Tables("SYSP_SYNONYME_SPECIALITE")))
            End If
            If (Not (ds.Tables("SPLAB_SPECIALITE_LABO")) Is Nothing) Then
                MyBase.Tables.Add(New SPLAB_SPECIALITE_LABODataTable(ds.Tables("SPLAB_SPECIALITE_LABO")))
            End If
            If (Not (ds.Tables("SPLABEX_SPE_LABO_EXPLOITANT")) Is Nothing) Then
                MyBase.Tables.Add(New SPLABEX_SPE_LABO_EXPLOITANTDataTable(ds.Tables("SPLABEX_SPE_LABO_EXPLOITANT")))
            End If
            If (Not (ds.Tables("SPVO_SPECIALITE_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New SPVO_SPECIALITE_VOIEDataTable(ds.Tables("SPVO_SPECIALITE_VOIE")))
            End If
            If (Not (ds.Tables("SPFO_SPECIALITE_FORME")) Is Nothing) Then
                MyBase.Tables.Add(New SPFO_SPECIALITE_FORMEDataTable(ds.Tables("SPFO_SPECIALITE_FORME")))
            End If
            If (Not (ds.Tables("SPFOCFO_SPE_FORME_COMPFORME")) Is Nothing) Then
                MyBase.Tables.Add(New SPFOCFO_SPE_FORME_COMPFORMEDataTable(ds.Tables("SPFOCFO_SPE_FORME_COMPFORME")))
            End If
            If (Not (ds.Tables("SPFOCPI_SPE_FORME_COMPINFO")) Is Nothing) Then
                MyBase.Tables.Add(New SPFOCPI_SPE_FORME_COMPINFODataTable(ds.Tables("SPFOCPI_SPE_FORME_COMPINFO")))
            End If
            If (Not (ds.Tables("COMPO_COMPOSITION")) Is Nothing) Then
                MyBase.Tables.Add(New COMPO_COMPOSITIONDataTable(ds.Tables("COMPO_COMPOSITION")))
            End If
            If (Not (ds.Tables("COSAC_COMPO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New COSAC_COMPO_SUBACTDataTable(ds.Tables("COSAC_COMPO_SUBACT")))
            End If
            If (Not (ds.Tables("COSAU_COMPO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New COSAU_COMPO_SUBAUXDataTable(ds.Tables("COSAU_COMPO_SUBAUX")))
            End If
            If (Not (ds.Tables("COTEN_COMPO_TENEUR")) Is Nothing) Then
                MyBase.Tables.Add(New COTEN_COMPO_TENEURDataTable(ds.Tables("COTEN_COMPO_TENEUR")))
            End If
            If (Not (ds.Tables("SPADM_SPECIALITE_MODEADM")) Is Nothing) Then
                MyBase.Tables.Add(New SPADM_SPECIALITE_MODEADMDataTable(ds.Tables("SPADM_SPECIALITE_MODEADM")))
            End If
            If (Not (ds.Tables("SPTEN_SPECIALITE_TENEUR")) Is Nothing) Then
                MyBase.Tables.Add(New SPTEN_SPECIALITE_TENEURDataTable(ds.Tables("SPTEN_SPECIALITE_TENEUR")))
            End If
            If (Not (ds.Tables("SPCPH_SPECIALITE_CLASSEPH")) Is Nothing) Then
                MyBase.Tables.Add(New SPCPH_SPECIALITE_CLASSEPHDataTable(ds.Tables("SPCPH_SPECIALITE_CLASSEPH")))
            End If
            If (Not (ds.Tables("SPDDD_DOSE_USUELLE_JOUR")) Is Nothing) Then
                MyBase.Tables.Add(New SPDDD_DOSE_USUELLE_JOURDataTable(ds.Tables("SPDDD_DOSE_USUELLE_JOUR")))
            End If
            If (Not (ds.Tables("SPCH_SPECIALITE_CHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New SPCH_SPECIALITE_CHOIXDataTable(ds.Tables("SPCH_SPECIALITE_CHOIX")))
            End If
            If (Not (ds.Tables("SPRMO_SPECIALITE_RMO")) Is Nothing) Then
                MyBase.Tables.Add(New SPRMO_SPECIALITE_RMODataTable(ds.Tables("SPRMO_SPECIALITE_RMO")))
            End If
            If (Not (ds.Tables("SPFTR_SPECIALITE_TRANSPARENCE")) Is Nothing) Then
                MyBase.Tables.Add(New SPFTR_SPECIALITE_TRANSPARENCEDataTable(ds.Tables("SPFTR_SPECIALITE_TRANSPARENCE")))
            End If
            If (Not (ds.Tables("SPFTH_SPEC_INFOTHERAPEUTIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable(ds.Tables("SPFTH_SPEC_INFOTHERAPEUTIQUE")))
            End If
            If (Not (ds.Tables("SPATR_SPEC_AVISTRANSPARENCE")) Is Nothing) Then
                MyBase.Tables.Add(New SPATR_SPEC_AVISTRANSPARENCEDataTable(ds.Tables("SPATR_SPEC_AVISTRANSPARENCE")))
            End If
            If (Not (ds.Tables("SPSMR_SERVICE_MEDICAL_RENDU")) Is Nothing) Then
                MyBase.Tables.Add(New SPSMR_SERVICE_MEDICAL_RENDUDataTable(ds.Tables("SPSMR_SERVICE_MEDICAL_RENDU")))
            End If
            If (Not (ds.Tables("SPCPD_SPE_CDT_PRESCR")) Is Nothing) Then
                MyBase.Tables.Add(New SPCPD_SPE_CDT_PRESCRDataTable(ds.Tables("SPCPD_SPE_CDT_PRESCR")))
            End If
            If (Not (ds.Tables("PRIUCD_PRIX_UCD")) Is Nothing) Then
                MyBase.Tables.Add(New PRIUCD_PRIX_UCDDataTable(ds.Tables("PRIUCD_PRIX_UCD")))
            End If
            If (Not (ds.Tables("PRE_PRESENTATION")) Is Nothing) Then
                MyBase.Tables.Add(New PRE_PRESENTATIONDataTable(ds.Tables("PRE_PRESENTATION")))
            End If
            If (Not (ds.Tables("SPFOTX_SPE_FORME_TEXTE")) Is Nothing) Then
                MyBase.Tables.Add(New SPFOTX_SPE_FORME_TEXTEDataTable(ds.Tables("SPFOTX_SPE_FORME_TEXTE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_SPECIALITE() As SP_SPECIALITEDataTable
        Get
            Return Me.tableSP_SPECIALITE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYSP_SYNONYME_SPECIALITE() As SYSP_SYNONYME_SPECIALITEDataTable
        Get
            Return Me.tableSYSP_SYNONYME_SPECIALITE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPLAB_SPECIALITE_LABO() As SPLAB_SPECIALITE_LABODataTable
        Get
            Return Me.tableSPLAB_SPECIALITE_LABO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPLABEX_SPE_LABO_EXPLOITANT() As SPLABEX_SPE_LABO_EXPLOITANTDataTable
        Get
            Return Me.tableSPLABEX_SPE_LABO_EXPLOITANT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPVO_SPECIALITE_VOIE() As SPVO_SPECIALITE_VOIEDataTable
        Get
            Return Me.tableSPVO_SPECIALITE_VOIE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPFO_SPECIALITE_FORME() As SPFO_SPECIALITE_FORMEDataTable
        Get
            Return Me.tableSPFO_SPECIALITE_FORME
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPFOCFO_SPE_FORME_COMPFORME() As SPFOCFO_SPE_FORME_COMPFORMEDataTable
        Get
            Return Me.tableSPFOCFO_SPE_FORME_COMPFORME
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPFOCPI_SPE_FORME_COMPINFO() As SPFOCPI_SPE_FORME_COMPINFODataTable
        Get
            Return Me.tableSPFOCPI_SPE_FORME_COMPINFO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COMPO_COMPOSITION() As COMPO_COMPOSITIONDataTable
        Get
            Return Me.tableCOMPO_COMPOSITION
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COSAC_COMPO_SUBACT() As COSAC_COMPO_SUBACTDataTable
        Get
            Return Me.tableCOSAC_COMPO_SUBACT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COSAU_COMPO_SUBAUX() As COSAU_COMPO_SUBAUXDataTable
        Get
            Return Me.tableCOSAU_COMPO_SUBAUX
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COTEN_COMPO_TENEUR() As COTEN_COMPO_TENEURDataTable
        Get
            Return Me.tableCOTEN_COMPO_TENEUR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPADM_SPECIALITE_MODEADM() As SPADM_SPECIALITE_MODEADMDataTable
        Get
            Return Me.tableSPADM_SPECIALITE_MODEADM
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPTEN_SPECIALITE_TENEUR() As SPTEN_SPECIALITE_TENEURDataTable
        Get
            Return Me.tableSPTEN_SPECIALITE_TENEUR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPCPH_SPECIALITE_CLASSEPH() As SPCPH_SPECIALITE_CLASSEPHDataTable
        Get
            Return Me.tableSPCPH_SPECIALITE_CLASSEPH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPDDD_DOSE_USUELLE_JOUR() As SPDDD_DOSE_USUELLE_JOURDataTable
        Get
            Return Me.tableSPDDD_DOSE_USUELLE_JOUR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPCH_SPECIALITE_CHOIX() As SPCH_SPECIALITE_CHOIXDataTable
        Get
            Return Me.tableSPCH_SPECIALITE_CHOIX
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPRMO_SPECIALITE_RMO() As SPRMO_SPECIALITE_RMODataTable
        Get
            Return Me.tableSPRMO_SPECIALITE_RMO
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPFTR_SPECIALITE_TRANSPARENCE() As SPFTR_SPECIALITE_TRANSPARENCEDataTable
        Get
            Return Me.tableSPFTR_SPECIALITE_TRANSPARENCE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPFTH_SPEC_INFOTHERAPEUTIQUE() As SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
        Get
            Return Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPATR_SPEC_AVISTRANSPARENCE() As SPATR_SPEC_AVISTRANSPARENCEDataTable
        Get
            Return Me.tableSPATR_SPEC_AVISTRANSPARENCE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPSMR_SERVICE_MEDICAL_RENDU() As SPSMR_SERVICE_MEDICAL_RENDUDataTable
        Get
            Return Me.tableSPSMR_SERVICE_MEDICAL_RENDU
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPCPD_SPE_CDT_PRESCR() As SPCPD_SPE_CDT_PRESCRDataTable
        Get
            Return Me.tableSPCPD_SPE_CDT_PRESCR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRIUCD_PRIX_UCD() As PRIUCD_PRIX_UCDDataTable
        Get
            Return Me.tablePRIUCD_PRIX_UCD
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRE_PRESENTATION() As PRE_PRESENTATIONDataTable
        Get
            Return Me.tablePRE_PRESENTATION
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SPFOTX_SPE_FORME_TEXTE() As SPFOTX_SPE_FORME_TEXTEDataTable
        Get
            Return Me.tableSPFOTX_SPE_FORME_TEXTE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Nomenclature1 = CType(MyBase.Clone,dsTheriaque_Nomenclature1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            If (Not (ds.Tables("SYSP_SYNONYME_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SYSP_SYNONYME_SPECIALITEDataTable(ds.Tables("SYSP_SYNONYME_SPECIALITE")))
            End If
            If (Not (ds.Tables("SPLAB_SPECIALITE_LABO")) Is Nothing) Then
                MyBase.Tables.Add(New SPLAB_SPECIALITE_LABODataTable(ds.Tables("SPLAB_SPECIALITE_LABO")))
            End If
            If (Not (ds.Tables("SPLABEX_SPE_LABO_EXPLOITANT")) Is Nothing) Then
                MyBase.Tables.Add(New SPLABEX_SPE_LABO_EXPLOITANTDataTable(ds.Tables("SPLABEX_SPE_LABO_EXPLOITANT")))
            End If
            If (Not (ds.Tables("SPVO_SPECIALITE_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New SPVO_SPECIALITE_VOIEDataTable(ds.Tables("SPVO_SPECIALITE_VOIE")))
            End If
            If (Not (ds.Tables("SPFO_SPECIALITE_FORME")) Is Nothing) Then
                MyBase.Tables.Add(New SPFO_SPECIALITE_FORMEDataTable(ds.Tables("SPFO_SPECIALITE_FORME")))
            End If
            If (Not (ds.Tables("SPFOCFO_SPE_FORME_COMPFORME")) Is Nothing) Then
                MyBase.Tables.Add(New SPFOCFO_SPE_FORME_COMPFORMEDataTable(ds.Tables("SPFOCFO_SPE_FORME_COMPFORME")))
            End If
            If (Not (ds.Tables("SPFOCPI_SPE_FORME_COMPINFO")) Is Nothing) Then
                MyBase.Tables.Add(New SPFOCPI_SPE_FORME_COMPINFODataTable(ds.Tables("SPFOCPI_SPE_FORME_COMPINFO")))
            End If
            If (Not (ds.Tables("COMPO_COMPOSITION")) Is Nothing) Then
                MyBase.Tables.Add(New COMPO_COMPOSITIONDataTable(ds.Tables("COMPO_COMPOSITION")))
            End If
            If (Not (ds.Tables("COSAC_COMPO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New COSAC_COMPO_SUBACTDataTable(ds.Tables("COSAC_COMPO_SUBACT")))
            End If
            If (Not (ds.Tables("COSAU_COMPO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New COSAU_COMPO_SUBAUXDataTable(ds.Tables("COSAU_COMPO_SUBAUX")))
            End If
            If (Not (ds.Tables("COTEN_COMPO_TENEUR")) Is Nothing) Then
                MyBase.Tables.Add(New COTEN_COMPO_TENEURDataTable(ds.Tables("COTEN_COMPO_TENEUR")))
            End If
            If (Not (ds.Tables("SPADM_SPECIALITE_MODEADM")) Is Nothing) Then
                MyBase.Tables.Add(New SPADM_SPECIALITE_MODEADMDataTable(ds.Tables("SPADM_SPECIALITE_MODEADM")))
            End If
            If (Not (ds.Tables("SPTEN_SPECIALITE_TENEUR")) Is Nothing) Then
                MyBase.Tables.Add(New SPTEN_SPECIALITE_TENEURDataTable(ds.Tables("SPTEN_SPECIALITE_TENEUR")))
            End If
            If (Not (ds.Tables("SPCPH_SPECIALITE_CLASSEPH")) Is Nothing) Then
                MyBase.Tables.Add(New SPCPH_SPECIALITE_CLASSEPHDataTable(ds.Tables("SPCPH_SPECIALITE_CLASSEPH")))
            End If
            If (Not (ds.Tables("SPDDD_DOSE_USUELLE_JOUR")) Is Nothing) Then
                MyBase.Tables.Add(New SPDDD_DOSE_USUELLE_JOURDataTable(ds.Tables("SPDDD_DOSE_USUELLE_JOUR")))
            End If
            If (Not (ds.Tables("SPCH_SPECIALITE_CHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New SPCH_SPECIALITE_CHOIXDataTable(ds.Tables("SPCH_SPECIALITE_CHOIX")))
            End If
            If (Not (ds.Tables("SPRMO_SPECIALITE_RMO")) Is Nothing) Then
                MyBase.Tables.Add(New SPRMO_SPECIALITE_RMODataTable(ds.Tables("SPRMO_SPECIALITE_RMO")))
            End If
            If (Not (ds.Tables("SPFTR_SPECIALITE_TRANSPARENCE")) Is Nothing) Then
                MyBase.Tables.Add(New SPFTR_SPECIALITE_TRANSPARENCEDataTable(ds.Tables("SPFTR_SPECIALITE_TRANSPARENCE")))
            End If
            If (Not (ds.Tables("SPFTH_SPEC_INFOTHERAPEUTIQUE")) Is Nothing) Then
                MyBase.Tables.Add(New SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable(ds.Tables("SPFTH_SPEC_INFOTHERAPEUTIQUE")))
            End If
            If (Not (ds.Tables("SPATR_SPEC_AVISTRANSPARENCE")) Is Nothing) Then
                MyBase.Tables.Add(New SPATR_SPEC_AVISTRANSPARENCEDataTable(ds.Tables("SPATR_SPEC_AVISTRANSPARENCE")))
            End If
            If (Not (ds.Tables("SPSMR_SERVICE_MEDICAL_RENDU")) Is Nothing) Then
                MyBase.Tables.Add(New SPSMR_SERVICE_MEDICAL_RENDUDataTable(ds.Tables("SPSMR_SERVICE_MEDICAL_RENDU")))
            End If
            If (Not (ds.Tables("SPCPD_SPE_CDT_PRESCR")) Is Nothing) Then
                MyBase.Tables.Add(New SPCPD_SPE_CDT_PRESCRDataTable(ds.Tables("SPCPD_SPE_CDT_PRESCR")))
            End If
            If (Not (ds.Tables("PRIUCD_PRIX_UCD")) Is Nothing) Then
                MyBase.Tables.Add(New PRIUCD_PRIX_UCDDataTable(ds.Tables("PRIUCD_PRIX_UCD")))
            End If
            If (Not (ds.Tables("PRE_PRESENTATION")) Is Nothing) Then
                MyBase.Tables.Add(New PRE_PRESENTATIONDataTable(ds.Tables("PRE_PRESENTATION")))
            End If
            If (Not (ds.Tables("SPFOTX_SPE_FORME_TEXTE")) Is Nothing) Then
                MyBase.Tables.Add(New SPFOTX_SPE_FORME_TEXTEDataTable(ds.Tables("SPFOTX_SPE_FORME_TEXTE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSP_SPECIALITE = CType(MyBase.Tables("SP_SPECIALITE"),SP_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSP_SPECIALITE) Is Nothing) Then
                Me.tableSP_SPECIALITE.InitVars
            End If
        End If
        Me.tableSYSP_SYNONYME_SPECIALITE = CType(MyBase.Tables("SYSP_SYNONYME_SPECIALITE"),SYSP_SYNONYME_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYSP_SYNONYME_SPECIALITE) Is Nothing) Then
                Me.tableSYSP_SYNONYME_SPECIALITE.InitVars
            End If
        End If
        Me.tableSPLAB_SPECIALITE_LABO = CType(MyBase.Tables("SPLAB_SPECIALITE_LABO"),SPLAB_SPECIALITE_LABODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPLAB_SPECIALITE_LABO) Is Nothing) Then
                Me.tableSPLAB_SPECIALITE_LABO.InitVars
            End If
        End If
        Me.tableSPLABEX_SPE_LABO_EXPLOITANT = CType(MyBase.Tables("SPLABEX_SPE_LABO_EXPLOITANT"),SPLABEX_SPE_LABO_EXPLOITANTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPLABEX_SPE_LABO_EXPLOITANT) Is Nothing) Then
                Me.tableSPLABEX_SPE_LABO_EXPLOITANT.InitVars
            End If
        End If
        Me.tableSPVO_SPECIALITE_VOIE = CType(MyBase.Tables("SPVO_SPECIALITE_VOIE"),SPVO_SPECIALITE_VOIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPVO_SPECIALITE_VOIE) Is Nothing) Then
                Me.tableSPVO_SPECIALITE_VOIE.InitVars
            End If
        End If
        Me.tableSPFO_SPECIALITE_FORME = CType(MyBase.Tables("SPFO_SPECIALITE_FORME"),SPFO_SPECIALITE_FORMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPFO_SPECIALITE_FORME) Is Nothing) Then
                Me.tableSPFO_SPECIALITE_FORME.InitVars
            End If
        End If
        Me.tableSPFOCFO_SPE_FORME_COMPFORME = CType(MyBase.Tables("SPFOCFO_SPE_FORME_COMPFORME"),SPFOCFO_SPE_FORME_COMPFORMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPFOCFO_SPE_FORME_COMPFORME) Is Nothing) Then
                Me.tableSPFOCFO_SPE_FORME_COMPFORME.InitVars
            End If
        End If
        Me.tableSPFOCPI_SPE_FORME_COMPINFO = CType(MyBase.Tables("SPFOCPI_SPE_FORME_COMPINFO"),SPFOCPI_SPE_FORME_COMPINFODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPFOCPI_SPE_FORME_COMPINFO) Is Nothing) Then
                Me.tableSPFOCPI_SPE_FORME_COMPINFO.InitVars
            End If
        End If
        Me.tableCOMPO_COMPOSITION = CType(MyBase.Tables("COMPO_COMPOSITION"),COMPO_COMPOSITIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOMPO_COMPOSITION) Is Nothing) Then
                Me.tableCOMPO_COMPOSITION.InitVars
            End If
        End If
        Me.tableCOSAC_COMPO_SUBACT = CType(MyBase.Tables("COSAC_COMPO_SUBACT"),COSAC_COMPO_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOSAC_COMPO_SUBACT) Is Nothing) Then
                Me.tableCOSAC_COMPO_SUBACT.InitVars
            End If
        End If
        Me.tableCOSAU_COMPO_SUBAUX = CType(MyBase.Tables("COSAU_COMPO_SUBAUX"),COSAU_COMPO_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOSAU_COMPO_SUBAUX) Is Nothing) Then
                Me.tableCOSAU_COMPO_SUBAUX.InitVars
            End If
        End If
        Me.tableCOTEN_COMPO_TENEUR = CType(MyBase.Tables("COTEN_COMPO_TENEUR"),COTEN_COMPO_TENEURDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOTEN_COMPO_TENEUR) Is Nothing) Then
                Me.tableCOTEN_COMPO_TENEUR.InitVars
            End If
        End If
        Me.tableSPADM_SPECIALITE_MODEADM = CType(MyBase.Tables("SPADM_SPECIALITE_MODEADM"),SPADM_SPECIALITE_MODEADMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPADM_SPECIALITE_MODEADM) Is Nothing) Then
                Me.tableSPADM_SPECIALITE_MODEADM.InitVars
            End If
        End If
        Me.tableSPTEN_SPECIALITE_TENEUR = CType(MyBase.Tables("SPTEN_SPECIALITE_TENEUR"),SPTEN_SPECIALITE_TENEURDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPTEN_SPECIALITE_TENEUR) Is Nothing) Then
                Me.tableSPTEN_SPECIALITE_TENEUR.InitVars
            End If
        End If
        Me.tableSPCPH_SPECIALITE_CLASSEPH = CType(MyBase.Tables("SPCPH_SPECIALITE_CLASSEPH"),SPCPH_SPECIALITE_CLASSEPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPCPH_SPECIALITE_CLASSEPH) Is Nothing) Then
                Me.tableSPCPH_SPECIALITE_CLASSEPH.InitVars
            End If
        End If
        Me.tableSPDDD_DOSE_USUELLE_JOUR = CType(MyBase.Tables("SPDDD_DOSE_USUELLE_JOUR"),SPDDD_DOSE_USUELLE_JOURDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPDDD_DOSE_USUELLE_JOUR) Is Nothing) Then
                Me.tableSPDDD_DOSE_USUELLE_JOUR.InitVars
            End If
        End If
        Me.tableSPCH_SPECIALITE_CHOIX = CType(MyBase.Tables("SPCH_SPECIALITE_CHOIX"),SPCH_SPECIALITE_CHOIXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPCH_SPECIALITE_CHOIX) Is Nothing) Then
                Me.tableSPCH_SPECIALITE_CHOIX.InitVars
            End If
        End If
        Me.tableSPRMO_SPECIALITE_RMO = CType(MyBase.Tables("SPRMO_SPECIALITE_RMO"),SPRMO_SPECIALITE_RMODataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPRMO_SPECIALITE_RMO) Is Nothing) Then
                Me.tableSPRMO_SPECIALITE_RMO.InitVars
            End If
        End If
        Me.tableSPFTR_SPECIALITE_TRANSPARENCE = CType(MyBase.Tables("SPFTR_SPECIALITE_TRANSPARENCE"),SPFTR_SPECIALITE_TRANSPARENCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPFTR_SPECIALITE_TRANSPARENCE) Is Nothing) Then
                Me.tableSPFTR_SPECIALITE_TRANSPARENCE.InitVars
            End If
        End If
        Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE = CType(MyBase.Tables("SPFTH_SPEC_INFOTHERAPEUTIQUE"),SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE) Is Nothing) Then
                Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE.InitVars
            End If
        End If
        Me.tableSPATR_SPEC_AVISTRANSPARENCE = CType(MyBase.Tables("SPATR_SPEC_AVISTRANSPARENCE"),SPATR_SPEC_AVISTRANSPARENCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPATR_SPEC_AVISTRANSPARENCE) Is Nothing) Then
                Me.tableSPATR_SPEC_AVISTRANSPARENCE.InitVars
            End If
        End If
        Me.tableSPSMR_SERVICE_MEDICAL_RENDU = CType(MyBase.Tables("SPSMR_SERVICE_MEDICAL_RENDU"),SPSMR_SERVICE_MEDICAL_RENDUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPSMR_SERVICE_MEDICAL_RENDU) Is Nothing) Then
                Me.tableSPSMR_SERVICE_MEDICAL_RENDU.InitVars
            End If
        End If
        Me.tableSPCPD_SPE_CDT_PRESCR = CType(MyBase.Tables("SPCPD_SPE_CDT_PRESCR"),SPCPD_SPE_CDT_PRESCRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPCPD_SPE_CDT_PRESCR) Is Nothing) Then
                Me.tableSPCPD_SPE_CDT_PRESCR.InitVars
            End If
        End If
        Me.tablePRIUCD_PRIX_UCD = CType(MyBase.Tables("PRIUCD_PRIX_UCD"),PRIUCD_PRIX_UCDDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRIUCD_PRIX_UCD) Is Nothing) Then
                Me.tablePRIUCD_PRIX_UCD.InitVars
            End If
        End If
        Me.tablePRE_PRESENTATION = CType(MyBase.Tables("PRE_PRESENTATION"),PRE_PRESENTATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRE_PRESENTATION) Is Nothing) Then
                Me.tablePRE_PRESENTATION.InitVars
            End If
        End If
        Me.tableSPFOTX_SPE_FORME_TEXTE = CType(MyBase.Tables("SPFOTX_SPE_FORME_TEXTE"),SPFOTX_SPE_FORME_TEXTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPFOTX_SPE_FORME_TEXTE) Is Nothing) Then
                Me.tableSPFOTX_SPE_FORME_TEXTE.InitVars
            End If
        End If
        Me.relationFK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE = Me.Relations("FK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE")
        Me.relationFK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME = Me.Relations("FK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME")
        Me.relationFK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO = Me.Relations("FK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO")
        Me.relationFK_SP_SPECIALITE_COTEN_COMPO_TENEUR = Me.Relations("FK_SP_SPECIALITE_COTEN_COMPO_TENEUR")
        Me.relationFK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM = Me.Relations("FK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM")
        Me.relationFK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR = Me.Relations("FK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR")
        Me.relationFK3_COSAC_COMPO_SUBACT = Me.Relations("FK3_COSAC_COMPO_SUBACT")
        Me.relationFK3_COSAU_COMPO_SUBAUX = Me.Relations("FK3_COSAU_COMPO_SUBAUX")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Nomenclature1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Nomenclature1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSP_SPECIALITE = New SP_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableSP_SPECIALITE)
        Me.tableSYSP_SYNONYME_SPECIALITE = New SYSP_SYNONYME_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableSYSP_SYNONYME_SPECIALITE)
        Me.tableSPLAB_SPECIALITE_LABO = New SPLAB_SPECIALITE_LABODataTable
        MyBase.Tables.Add(Me.tableSPLAB_SPECIALITE_LABO)
        Me.tableSPLABEX_SPE_LABO_EXPLOITANT = New SPLABEX_SPE_LABO_EXPLOITANTDataTable
        MyBase.Tables.Add(Me.tableSPLABEX_SPE_LABO_EXPLOITANT)
        Me.tableSPVO_SPECIALITE_VOIE = New SPVO_SPECIALITE_VOIEDataTable
        MyBase.Tables.Add(Me.tableSPVO_SPECIALITE_VOIE)
        Me.tableSPFO_SPECIALITE_FORME = New SPFO_SPECIALITE_FORMEDataTable
        MyBase.Tables.Add(Me.tableSPFO_SPECIALITE_FORME)
        Me.tableSPFOCFO_SPE_FORME_COMPFORME = New SPFOCFO_SPE_FORME_COMPFORMEDataTable
        MyBase.Tables.Add(Me.tableSPFOCFO_SPE_FORME_COMPFORME)
        Me.tableSPFOCPI_SPE_FORME_COMPINFO = New SPFOCPI_SPE_FORME_COMPINFODataTable
        MyBase.Tables.Add(Me.tableSPFOCPI_SPE_FORME_COMPINFO)
        Me.tableCOMPO_COMPOSITION = New COMPO_COMPOSITIONDataTable
        MyBase.Tables.Add(Me.tableCOMPO_COMPOSITION)
        Me.tableCOSAC_COMPO_SUBACT = New COSAC_COMPO_SUBACTDataTable
        MyBase.Tables.Add(Me.tableCOSAC_COMPO_SUBACT)
        Me.tableCOSAU_COMPO_SUBAUX = New COSAU_COMPO_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableCOSAU_COMPO_SUBAUX)
        Me.tableCOTEN_COMPO_TENEUR = New COTEN_COMPO_TENEURDataTable
        MyBase.Tables.Add(Me.tableCOTEN_COMPO_TENEUR)
        Me.tableSPADM_SPECIALITE_MODEADM = New SPADM_SPECIALITE_MODEADMDataTable
        MyBase.Tables.Add(Me.tableSPADM_SPECIALITE_MODEADM)
        Me.tableSPTEN_SPECIALITE_TENEUR = New SPTEN_SPECIALITE_TENEURDataTable
        MyBase.Tables.Add(Me.tableSPTEN_SPECIALITE_TENEUR)
        Me.tableSPCPH_SPECIALITE_CLASSEPH = New SPCPH_SPECIALITE_CLASSEPHDataTable
        MyBase.Tables.Add(Me.tableSPCPH_SPECIALITE_CLASSEPH)
        Me.tableSPDDD_DOSE_USUELLE_JOUR = New SPDDD_DOSE_USUELLE_JOURDataTable
        MyBase.Tables.Add(Me.tableSPDDD_DOSE_USUELLE_JOUR)
        Me.tableSPCH_SPECIALITE_CHOIX = New SPCH_SPECIALITE_CHOIXDataTable
        MyBase.Tables.Add(Me.tableSPCH_SPECIALITE_CHOIX)
        Me.tableSPRMO_SPECIALITE_RMO = New SPRMO_SPECIALITE_RMODataTable
        MyBase.Tables.Add(Me.tableSPRMO_SPECIALITE_RMO)
        Me.tableSPFTR_SPECIALITE_TRANSPARENCE = New SPFTR_SPECIALITE_TRANSPARENCEDataTable
        MyBase.Tables.Add(Me.tableSPFTR_SPECIALITE_TRANSPARENCE)
        Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE = New SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
        MyBase.Tables.Add(Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE)
        Me.tableSPATR_SPEC_AVISTRANSPARENCE = New SPATR_SPEC_AVISTRANSPARENCEDataTable
        MyBase.Tables.Add(Me.tableSPATR_SPEC_AVISTRANSPARENCE)
        Me.tableSPSMR_SERVICE_MEDICAL_RENDU = New SPSMR_SERVICE_MEDICAL_RENDUDataTable
        MyBase.Tables.Add(Me.tableSPSMR_SERVICE_MEDICAL_RENDU)
        Me.tableSPCPD_SPE_CDT_PRESCR = New SPCPD_SPE_CDT_PRESCRDataTable
        MyBase.Tables.Add(Me.tableSPCPD_SPE_CDT_PRESCR)
        Me.tablePRIUCD_PRIX_UCD = New PRIUCD_PRIX_UCDDataTable
        MyBase.Tables.Add(Me.tablePRIUCD_PRIX_UCD)
        Me.tablePRE_PRESENTATION = New PRE_PRESENTATIONDataTable
        MyBase.Tables.Add(Me.tablePRE_PRESENTATION)
        Me.tableSPFOTX_SPE_FORME_TEXTE = New SPFOTX_SPE_FORME_TEXTEDataTable
        MyBase.Tables.Add(Me.tableSPFOTX_SPE_FORME_TEXTE)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("FK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPVO_SPECIALITE_VOIE.SPVO_SP_CODE_FK_PKColumn})
        'Me.tableSPVO_SPECIALITE_VOIE.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME", New System.Data.DataColumn() {Me.tableSPFO_SPECIALITE_FORME.SPFO_SP_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_CDF_FO_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMSEQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SP_CODE_FK_PKColumn, Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_CDF_FO_CODE_FK_PKColumn, Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SPFO_NUMSEQ_FK_PKColumn})
        Me.tableSPFOCFO_SPE_FORME_COMPFORME.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO", New System.Data.DataColumn() {Me.tableSPFO_SPECIALITE_FORME.SPFO_SP_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_CDF_FO_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMSEQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SP_CODE_FK_PKColumn, Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_CDF_FO_CODE_FK_PKColumn, Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SPFO_NUMSEQ_FK_PKColumn})
        Me.tableSPFOCPI_SPE_FORME_COMPINFO.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FK_SP_SPECIALITE_COTEN_COMPO_TENEUR", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableCOTEN_COMPO_TENEUR.COTEN_SP_CODE_FK_PKColumn})
        'BFE 01-08-08
        'Me.tableCOTEN_COMPO_TENEUR.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPADM_SPECIALITE_MODEADM.SPADM_SP_CODE_FK_PKColumn})
        'BFE
        'Me.tableSPADM_SPECIALITE_MODEADM.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPTEN_SPECIALITE_TENEUR.SPTEN_SP_CODE_FK_PKColumn})
        'BFE
        'Me.tableSPTEN_SPECIALITE_TENEUR.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationFK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE = New System.Data.DataRelation("FK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPVO_SPECIALITE_VOIE.SPVO_SP_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE)
        Me.relationFK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME = New System.Data.DataRelation("FK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME", New System.Data.DataColumn() {Me.tableSPFO_SPECIALITE_FORME.SPFO_SP_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_CDF_FO_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMSEQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SP_CODE_FK_PKColumn, Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_CDF_FO_CODE_FK_PKColumn, Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SPFO_NUMSEQ_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME)
        Me.relationFK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO = New System.Data.DataRelation("FK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO", New System.Data.DataColumn() {Me.tableSPFO_SPECIALITE_FORME.SPFO_SP_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_CDF_FO_CODE_FK_PKColumn, Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMSEQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SP_CODE_FK_PKColumn, Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_CDF_FO_CODE_FK_PKColumn, Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SPFO_NUMSEQ_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO)
        Me.relationFK_SP_SPECIALITE_COTEN_COMPO_TENEUR = New System.Data.DataRelation("FK_SP_SPECIALITE_COTEN_COMPO_TENEUR", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableCOTEN_COMPO_TENEUR.COTEN_SP_CODE_FK_PKColumn}, False)
        'BFE 01-08-08
        'Me.Relations.Add(Me.relationFK_SP_SPECIALITE_COTEN_COMPO_TENEUR)
        Me.relationFK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM = New System.Data.DataRelation("FK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPADM_SPECIALITE_MODEADM.SPADM_SP_CODE_FK_PKColumn}, false)
        'BFE
        'Me.Relations.Add(Me.relationFK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM)
        Me.relationFK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR = New System.Data.DataRelation("FK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR", New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn}, New System.Data.DataColumn() {Me.tableSPTEN_SPECIALITE_TENEUR.SPTEN_SP_CODE_FK_PKColumn}, false)
        'BFE
        'Me.Relations.Add(Me.relationFK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR)
        Me.relationFK3_COSAC_COMPO_SUBACT = New System.Data.DataRelation("FK3_COSAC_COMPO_SUBACT", New System.Data.DataColumn() {Me.tableCOMPO_COMPOSITION.COMPO_SP_CODE_FK_PKColumn, Me.tableCOMPO_COMPOSITION.COMPO_NUM_PKColumn}, New System.Data.DataColumn() {Me.tableCOSAC_COMPO_SUBACT.COSAC_SP_CODE_FK_PKColumn, Me.tableCOSAC_COMPO_SUBACT.COSAC_COMPO_NUM_PKColumn}, false)
        Me.Relations.Add(Me.relationFK3_COSAC_COMPO_SUBACT)
        Me.relationFK3_COSAU_COMPO_SUBAUX = New System.Data.DataRelation("FK3_COSAU_COMPO_SUBAUX", New System.Data.DataColumn() {Me.tableCOMPO_COMPOSITION.COMPO_SP_CODE_FK_PKColumn, Me.tableCOMPO_COMPOSITION.COMPO_NUM_PKColumn}, New System.Data.DataColumn() {Me.tableCOSAU_COMPO_SUBAUX.COSAU_SP_CODE_FK_PKColumn, Me.tableCOSAU_COMPO_SUBAUX.COSAU_COMPO_NUM_PKColumn}, false)
        Me.Relations.Add(Me.relationFK3_COSAU_COMPO_SUBAUX)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSP_SPECIALITE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYSP_SYNONYME_SPECIALITE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPLAB_SPECIALITE_LABO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPLABEX_SPE_LABO_EXPLOITANT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPVO_SPECIALITE_VOIE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPFO_SPECIALITE_FORME() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPFOCFO_SPE_FORME_COMPFORME() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPFOCPI_SPE_FORME_COMPINFO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOMPO_COMPOSITION() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOSAC_COMPO_SUBACT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOSAU_COMPO_SUBAUX() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOTEN_COMPO_TENEUR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPADM_SPECIALITE_MODEADM() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPTEN_SPECIALITE_TENEUR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPCPH_SPECIALITE_CLASSEPH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPDDD_DOSE_USUELLE_JOUR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPCH_SPECIALITE_CHOIX() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPRMO_SPECIALITE_RMO() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPFTR_SPECIALITE_TRANSPARENCE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPFTH_SPEC_INFOTHERAPEUTIQUE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPATR_SPEC_AVISTRANSPARENCE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPSMR_SERVICE_MEDICAL_RENDU() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPCPD_SPE_CDT_PRESCR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRIUCD_PRIX_UCD() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePRE_PRESENTATION() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSPFOTX_SPE_FORME_TEXTE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub SP_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As SP_SPECIALITERowChangeEvent)
    
    Public Delegate Sub SYSP_SYNONYME_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As SYSP_SYNONYME_SPECIALITERowChangeEvent)
    
    Public Delegate Sub SPLAB_SPECIALITE_LABORowChangeEventHandler(ByVal sender As Object, ByVal e As SPLAB_SPECIALITE_LABORowChangeEvent)
    
    Public Delegate Sub SPLABEX_SPE_LABO_EXPLOITANTRowChangeEventHandler(ByVal sender As Object, ByVal e As SPLABEX_SPE_LABO_EXPLOITANTRowChangeEvent)
    
    Public Delegate Sub SPVO_SPECIALITE_VOIERowChangeEventHandler(ByVal sender As Object, ByVal e As SPVO_SPECIALITE_VOIERowChangeEvent)
    
    Public Delegate Sub SPFO_SPECIALITE_FORMERowChangeEventHandler(ByVal sender As Object, ByVal e As SPFO_SPECIALITE_FORMERowChangeEvent)
    
    Public Delegate Sub SPFOCFO_SPE_FORME_COMPFORMERowChangeEventHandler(ByVal sender As Object, ByVal e As SPFOCFO_SPE_FORME_COMPFORMERowChangeEvent)
    
    Public Delegate Sub SPFOCPI_SPE_FORME_COMPINFORowChangeEventHandler(ByVal sender As Object, ByVal e As SPFOCPI_SPE_FORME_COMPINFORowChangeEvent)
    
    Public Delegate Sub COMPO_COMPOSITIONRowChangeEventHandler(ByVal sender As Object, ByVal e As COMPO_COMPOSITIONRowChangeEvent)
    
    Public Delegate Sub COSAC_COMPO_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As COSAC_COMPO_SUBACTRowChangeEvent)
    
    Public Delegate Sub COSAU_COMPO_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As COSAU_COMPO_SUBAUXRowChangeEvent)
    
    Public Delegate Sub COTEN_COMPO_TENEURRowChangeEventHandler(ByVal sender As Object, ByVal e As COTEN_COMPO_TENEURRowChangeEvent)
    
    Public Delegate Sub SPADM_SPECIALITE_MODEADMRowChangeEventHandler(ByVal sender As Object, ByVal e As SPADM_SPECIALITE_MODEADMRowChangeEvent)
    
    Public Delegate Sub SPTEN_SPECIALITE_TENEURRowChangeEventHandler(ByVal sender As Object, ByVal e As SPTEN_SPECIALITE_TENEURRowChangeEvent)
    
    Public Delegate Sub SPCPH_SPECIALITE_CLASSEPHRowChangeEventHandler(ByVal sender As Object, ByVal e As SPCPH_SPECIALITE_CLASSEPHRowChangeEvent)
    
    Public Delegate Sub SPDDD_DOSE_USUELLE_JOURRowChangeEventHandler(ByVal sender As Object, ByVal e As SPDDD_DOSE_USUELLE_JOURRowChangeEvent)
    
    Public Delegate Sub SPCH_SPECIALITE_CHOIXRowChangeEventHandler(ByVal sender As Object, ByVal e As SPCH_SPECIALITE_CHOIXRowChangeEvent)
    
    Public Delegate Sub SPRMO_SPECIALITE_RMORowChangeEventHandler(ByVal sender As Object, ByVal e As SPRMO_SPECIALITE_RMORowChangeEvent)
    
    Public Delegate Sub SPFTR_SPECIALITE_TRANSPARENCERowChangeEventHandler(ByVal sender As Object, ByVal e As SPFTR_SPECIALITE_TRANSPARENCERowChangeEvent)
    
    Public Delegate Sub SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEventHandler(ByVal sender As Object, ByVal e As SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEvent)
    
    Public Delegate Sub SPATR_SPEC_AVISTRANSPARENCERowChangeEventHandler(ByVal sender As Object, ByVal e As SPATR_SPEC_AVISTRANSPARENCERowChangeEvent)
    
    Public Delegate Sub SPSMR_SERVICE_MEDICAL_RENDURowChangeEventHandler(ByVal sender As Object, ByVal e As SPSMR_SERVICE_MEDICAL_RENDURowChangeEvent)
    
    Public Delegate Sub SPCPD_SPE_CDT_PRESCRRowChangeEventHandler(ByVal sender As Object, ByVal e As SPCPD_SPE_CDT_PRESCRRowChangeEvent)
    
    Public Delegate Sub PRIUCD_PRIX_UCDRowChangeEventHandler(ByVal sender As Object, ByVal e As PRIUCD_PRIX_UCDRowChangeEvent)
    
    Public Delegate Sub PRE_PRESENTATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PRE_PRESENTATIONRowChangeEvent)
    
    Public Delegate Sub SPFOTX_SPE_FORME_TEXTERowChangeEventHandler(ByVal sender As Object, ByVal e As SPFOTX_SPE_FORME_TEXTERowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SP_SPECIALITEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSP_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnSP_GSP_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CDF_SLAB_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CDF_LI_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CATC_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CEPH_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CGE_CODE_FK As System.Data.DataColumn
        
        Private columnSP_PR_CODE_FK As System.Data.DataColumn
        
        Private columnSP_TYPE_SPE As System.Data.DataColumn
        
        Private columnSP_GREF_FK As System.Data.DataColumn
        
        Private columnSP_GREF_DATECR_FK As System.Data.DataColumn
        
        Private columnSP_NOM As System.Data.DataColumn
        
        Private columnSP_NOMCOMP As System.Data.DataColumn
        
        Private columnSP_PH As System.Data.DataColumn
        
        Private columnSP_CIPUCD As System.Data.DataColumn
        
        Private columnSP_DATECR As System.Data.DataColumn
        
        Private columnSP_DATEMJ As System.Data.DataColumn
        
        Private columnSP_NL As System.Data.DataColumn
        
        Private columnSP_APHP As System.Data.DataColumn
        
        Private columnSP_DATEJOGENE As System.Data.DataColumn
        
        Private columnSP_ORIGINE_GENE As System.Data.DataColumn
        
        Private columnSP_NOMLONG As System.Data.DataColumn
        
        Private columnSP_CDT_PRESCR_TEXTE As System.Data.DataColumn
        
        Private columnSP_ATC_DDD_TEXTE As System.Data.DataColumn

        Private columnSP_MONO_VIRTUELLE As System.Data.DataColumn

        Private columnSP_CIPUCD13 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SP_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GSP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_GSP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_SLAB_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_SLAB_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_LI_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_LI_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CATC_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CATC_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CEPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CEPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CGE_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CGE_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PR_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_PR_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_TYPE_SPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_TYPE_SPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_DATECR_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_DATECR_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMCOMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NOMCOMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PHColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_PH
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CIPUCDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CIPUCD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NLColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_APHPColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_APHP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEJOGENEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_DATEJOGENE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ORIGINE_GENEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_ORIGINE_GENE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMLONGColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NOMLONG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDT_PRESCR_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CDT_PRESCR_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ATC_DDD_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_ATC_DDD_TEXTE
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SP_MONO_VIRTUELLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_MONO_VIRTUELLE
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SP_CIPUCD13Column() As System.Data.DataColumn
            Get
                Return Me.columnSP_CIPUCD13
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_SPECIALITERow
            Get
                Return CType(Me.Rows(index),SP_SPECIALITERow)
            End Get
        End Property
        
        Public Event SP_SPECIALITERowChanging As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowChanged As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleting As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleted As SP_SPECIALITERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSP_SPECIALITERow( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As Integer, _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As Integer, _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As Integer, _
                    ByVal SP_GREF_DATECR_FK As Date, _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As Date, _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As Date, _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String, _
                    ByVal SP_MONO_VIRTUELLE As Boolean, _
                    ByVal SP_CIPUCD13 As String) As SP_SPECIALITERow
            Dim rowSP_SPECIALITERow As SP_SPECIALITERow = CType(Me.NewRow, SP_SPECIALITERow)
            rowSP_SPECIALITERow.ItemArray = New Object() {SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13}
            Me.Rows.Add(rowSP_SPECIALITERow)
            Return rowSP_SPECIALITERow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function FindBySP_CODE_SQ_PK(ByVal SP_CODE_SQ_PK As Integer) As SP_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {SP_CODE_SQ_PK}), SP_SPECIALITERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SP_SPECIALITEDataTable = CType(MyBase.Clone, SP_SPECIALITEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SP_SPECIALITEDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnSP_CODE_SQ_PK = MyBase.Columns("SP_CODE_SQ_PK")
            Me.columnSP_GSP_CODE_FK = MyBase.Columns("SP_GSP_CODE_FK")
            Me.columnSP_CDF_SLAB_CODE_FK = MyBase.Columns("SP_CDF_SLAB_CODE_FK")
            Me.columnSP_CDF_LI_CODE_FK = MyBase.Columns("SP_CDF_LI_CODE_FK")
            Me.columnSP_CATC_CODE_FK = MyBase.Columns("SP_CATC_CODE_FK")
            Me.columnSP_CEPH_CODE_FK = MyBase.Columns("SP_CEPH_CODE_FK")
            Me.columnSP_CGE_CODE_FK = MyBase.Columns("SP_CGE_CODE_FK")
            Me.columnSP_PR_CODE_FK = MyBase.Columns("SP_PR_CODE_FK")
            Me.columnSP_TYPE_SPE = MyBase.Columns("SP_TYPE_SPE")
            Me.columnSP_GREF_FK = MyBase.Columns("SP_GREF_FK")
            Me.columnSP_GREF_DATECR_FK = MyBase.Columns("SP_GREF_DATECR_FK")
            Me.columnSP_NOM = MyBase.Columns("SP_NOM")
            Me.columnSP_NOMCOMP = MyBase.Columns("SP_NOMCOMP")
            Me.columnSP_PH = MyBase.Columns("SP_PH")
            Me.columnSP_CIPUCD = MyBase.Columns("SP_CIPUCD")
            Me.columnSP_DATECR = MyBase.Columns("SP_DATECR")
            Me.columnSP_DATEMJ = MyBase.Columns("SP_DATEMJ")
            Me.columnSP_NL = MyBase.Columns("SP_NL")
            Me.columnSP_APHP = MyBase.Columns("SP_APHP")
            Me.columnSP_DATEJOGENE = MyBase.Columns("SP_DATEJOGENE")
            Me.columnSP_ORIGINE_GENE = MyBase.Columns("SP_ORIGINE_GENE")
            Me.columnSP_NOMLONG = MyBase.Columns("SP_NOMLONG")
            Me.columnSP_CDT_PRESCR_TEXTE = MyBase.Columns("SP_CDT_PRESCR_TEXTE")
            Me.columnSP_ATC_DDD_TEXTE = MyBase.Columns("SP_ATC_DDD_TEXTE")
            Me.columnSP_MONO_VIRTUELLE = MyBase.Columns("SP_MONO_VIRTUELLE")
            Me.columnSP_CIPUCD13 = MyBase.Columns("SP_CIPUCD13")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnSP_CODE_SQ_PK = New System.Data.DataColumn("SP_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CODE_SQ_PK)
            Me.columnSP_GSP_CODE_FK = New System.Data.DataColumn("SP_GSP_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GSP_CODE_FK)
            Me.columnSP_CDF_SLAB_CODE_FK = New System.Data.DataColumn("SP_CDF_SLAB_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_SLAB_CODE_FK)
            Me.columnSP_CDF_LI_CODE_FK = New System.Data.DataColumn("SP_CDF_LI_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_LI_CODE_FK)
            Me.columnSP_CATC_CODE_FK = New System.Data.DataColumn("SP_CATC_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CATC_CODE_FK)
            Me.columnSP_CEPH_CODE_FK = New System.Data.DataColumn("SP_CEPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CEPH_CODE_FK)
            Me.columnSP_CGE_CODE_FK = New System.Data.DataColumn("SP_CGE_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CGE_CODE_FK)
            Me.columnSP_PR_CODE_FK = New System.Data.DataColumn("SP_PR_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PR_CODE_FK)
            Me.columnSP_TYPE_SPE = New System.Data.DataColumn("SP_TYPE_SPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_TYPE_SPE)
            Me.columnSP_GREF_FK = New System.Data.DataColumn("SP_GREF_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_FK)
            Me.columnSP_GREF_DATECR_FK = New System.Data.DataColumn("SP_GREF_DATECR_FK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_DATECR_FK)
            Me.columnSP_NOM = New System.Data.DataColumn("SP_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOM)
            Me.columnSP_NOMCOMP = New System.Data.DataColumn("SP_NOMCOMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMCOMP)
            Me.columnSP_PH = New System.Data.DataColumn("SP_PH", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PH)
            Me.columnSP_CIPUCD = New System.Data.DataColumn("SP_CIPUCD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CIPUCD)
            Me.columnSP_DATECR = New System.Data.DataColumn("SP_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATECR)
            Me.columnSP_DATEMJ = New System.Data.DataColumn("SP_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEMJ)
            Me.columnSP_NL = New System.Data.DataColumn("SP_NL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NL)
            Me.columnSP_APHP = New System.Data.DataColumn("SP_APHP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_APHP)
            Me.columnSP_DATEJOGENE = New System.Data.DataColumn("SP_DATEJOGENE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEJOGENE)
            Me.columnSP_ORIGINE_GENE = New System.Data.DataColumn("SP_ORIGINE_GENE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ORIGINE_GENE)
            Me.columnSP_NOMLONG = New System.Data.DataColumn("SP_NOMLONG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMLONG)
            Me.columnSP_CDT_PRESCR_TEXTE = New System.Data.DataColumn("SP_CDT_PRESCR_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDT_PRESCR_TEXTE)
            Me.columnSP_ATC_DDD_TEXTE = New System.Data.DataColumn("SP_ATC_DDD_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ATC_DDD_TEXTE)
            Me.columnSP_MONO_VIRTUELLE = New Global.System.Data.DataColumn("SP_MONO_VIRTUELLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_MONO_VIRTUELLE)
            Me.columnSP_CIPUCD13 = New System.Data.DataColumn("SP_CIPUCD13", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CIPUCD13)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSP_CODE_SQ_PK}, True))
            Me.columnSP_CODE_SQ_PK.AllowDBNull = False
            Me.columnSP_CODE_SQ_PK.Unique = True
            Me.columnSP_CDF_SLAB_CODE_FK.AllowDBNull = False
            Me.columnSP_CDF_SLAB_CODE_FK.MaxLength = 10
            Me.columnSP_CDF_LI_CODE_FK.AllowDBNull = False
            Me.columnSP_CDF_LI_CODE_FK.MaxLength = 10
            Me.columnSP_CATC_CODE_FK.MaxLength = 10
            Me.columnSP_CEPH_CODE_FK.MaxLength = 10
            Me.columnSP_PR_CODE_FK.AllowDBNull = False
            Me.columnSP_TYPE_SPE.MaxLength = 1
            Me.columnSP_NOM.AllowDBNull = False
            Me.columnSP_NOM.MaxLength = 36
            Me.columnSP_NOMCOMP.MaxLength = 255
            Me.columnSP_PH.MaxLength = 10
            Me.columnSP_CIPUCD.MaxLength = 7
            Me.columnSP_DATECR.AllowDBNull = False
            Me.columnSP_NL.MaxLength = 13
            Me.columnSP_APHP.MaxLength = 7
            Me.columnSP_ORIGINE_GENE.MaxLength = 1
            Me.columnSP_NOMLONG.MaxLength = 255
            Me.columnSP_CDT_PRESCR_TEXTE.MaxLength = 4000
            Me.columnSP_ATC_DDD_TEXTE.MaxLength = 255
            Me.columnSP_CIPUCD13.MaxLength = 13
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSP_SPECIALITERow() As SP_SPECIALITERow
            Return CType(Me.NewRow, SP_SPECIALITERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SP_SPECIALITERow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_SPECIALITERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanged(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row, SP_SPECIALITERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanging(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row, SP_SPECIALITERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleted(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row, SP_SPECIALITERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleting(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row, SP_SPECIALITERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SP_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYSP_SYNONYME_SPECIALITEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYSP_NOM_PK As System.Data.DataColumn
        
        Private columnSYSP_SP_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYSP_SYNONYME_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSP_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYSP_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSP_SP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYSP_SP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYSP_SYNONYME_SPECIALITERow
            Get
                Return CType(Me.Rows(index),SYSP_SYNONYME_SPECIALITERow)
            End Get
        End Property
        
        Public Event SYSP_SYNONYME_SPECIALITERowChanging As SYSP_SYNONYME_SPECIALITERowChangeEventHandler
        
        Public Event SYSP_SYNONYME_SPECIALITERowChanged As SYSP_SYNONYME_SPECIALITERowChangeEventHandler
        
        Public Event SYSP_SYNONYME_SPECIALITERowDeleting As SYSP_SYNONYME_SPECIALITERowChangeEventHandler
        
        Public Event SYSP_SYNONYME_SPECIALITERowDeleted As SYSP_SYNONYME_SPECIALITERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYSP_SYNONYME_SPECIALITERow(ByVal row As SYSP_SYNONYME_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYSP_SYNONYME_SPECIALITERow(ByVal SYSP_NOM_PK As String, ByVal SYSP_SP_CODE_FK As Integer) As SYSP_SYNONYME_SPECIALITERow
            Dim rowSYSP_SYNONYME_SPECIALITERow As SYSP_SYNONYME_SPECIALITERow = CType(Me.NewRow,SYSP_SYNONYME_SPECIALITERow)
            rowSYSP_SYNONYME_SPECIALITERow.ItemArray = New Object() {SYSP_NOM_PK, SYSP_SP_CODE_FK}
            Me.Rows.Add(rowSYSP_SYNONYME_SPECIALITERow)
            Return rowSYSP_SYNONYME_SPECIALITERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYSP_NOM_PK(ByVal SYSP_NOM_PK As String) As SYSP_SYNONYME_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {SYSP_NOM_PK}),SYSP_SYNONYME_SPECIALITERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYSP_SYNONYME_SPECIALITEDataTable = CType(MyBase.Clone,SYSP_SYNONYME_SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYSP_SYNONYME_SPECIALITEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYSP_NOM_PK = MyBase.Columns("SYSP_NOM_PK")
            Me.columnSYSP_SP_CODE_FK = MyBase.Columns("SYSP_SP_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYSP_NOM_PK = New System.Data.DataColumn("SYSP_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSP_NOM_PK)
            Me.columnSYSP_SP_CODE_FK = New System.Data.DataColumn("SYSP_SP_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSP_SP_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYSP_NOM_PK}, true))
            Me.columnSYSP_NOM_PK.AllowDBNull = false
            Me.columnSYSP_NOM_PK.Unique = true
            Me.columnSYSP_NOM_PK.MaxLength = 40
            Me.columnSYSP_SP_CODE_FK.AllowDBNull = false
            Me.CaseSensitive = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYSP_SYNONYME_SPECIALITERow() As SYSP_SYNONYME_SPECIALITERow
            Return CType(Me.NewRow,SYSP_SYNONYME_SPECIALITERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYSP_SYNONYME_SPECIALITERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYSP_SYNONYME_SPECIALITERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYSP_SYNONYME_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent SYSP_SYNONYME_SPECIALITERowChanged(Me, New SYSP_SYNONYME_SPECIALITERowChangeEvent(CType(e.Row,SYSP_SYNONYME_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYSP_SYNONYME_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent SYSP_SYNONYME_SPECIALITERowChanging(Me, New SYSP_SYNONYME_SPECIALITERowChangeEvent(CType(e.Row,SYSP_SYNONYME_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYSP_SYNONYME_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent SYSP_SYNONYME_SPECIALITERowDeleted(Me, New SYSP_SYNONYME_SPECIALITERowChangeEvent(CType(e.Row,SYSP_SYNONYME_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYSP_SYNONYME_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent SYSP_SYNONYME_SPECIALITERowDeleting(Me, New SYSP_SYNONYME_SPECIALITERowChangeEvent(CType(e.Row,SYSP_SYNONYME_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYSP_SYNONYME_SPECIALITERow(ByVal row As SYSP_SYNONYME_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYSP_SYNONYME_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPLAB_SPECIALITE_LABODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPLAB_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPLAB_CDF_LAB_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPLAB_SPECIALITE_LABO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPLAB_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLAB_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPLAB_CDF_LAB_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLAB_CDF_LAB_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPLAB_SPECIALITE_LABORow
            Get
                Return CType(Me.Rows(index),SPLAB_SPECIALITE_LABORow)
            End Get
        End Property
        
        Public Event SPLAB_SPECIALITE_LABORowChanging As SPLAB_SPECIALITE_LABORowChangeEventHandler
        
        Public Event SPLAB_SPECIALITE_LABORowChanged As SPLAB_SPECIALITE_LABORowChangeEventHandler
        
        Public Event SPLAB_SPECIALITE_LABORowDeleting As SPLAB_SPECIALITE_LABORowChangeEventHandler
        
        Public Event SPLAB_SPECIALITE_LABORowDeleted As SPLAB_SPECIALITE_LABORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPLAB_SPECIALITE_LABORow(ByVal row As SPLAB_SPECIALITE_LABORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPLAB_SPECIALITE_LABORow(ByVal SPLAB_SP_CODE_FK_PK As Integer, ByVal SPLAB_CDF_LAB_CODE_FK_PK As String) As SPLAB_SPECIALITE_LABORow
            Dim rowSPLAB_SPECIALITE_LABORow As SPLAB_SPECIALITE_LABORow = CType(Me.NewRow,SPLAB_SPECIALITE_LABORow)
            rowSPLAB_SPECIALITE_LABORow.ItemArray = New Object() {SPLAB_SP_CODE_FK_PK, SPLAB_CDF_LAB_CODE_FK_PK}
            Me.Rows.Add(rowSPLAB_SPECIALITE_LABORow)
            Return rowSPLAB_SPECIALITE_LABORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPLAB_SP_CODE_FK_PKSPLAB_CDF_LAB_CODE_FK_PK(ByVal SPLAB_SP_CODE_FK_PK As Integer, ByVal SPLAB_CDF_LAB_CODE_FK_PK As String) As SPLAB_SPECIALITE_LABORow
            Return CType(Me.Rows.Find(New Object() {SPLAB_SP_CODE_FK_PK, SPLAB_CDF_LAB_CODE_FK_PK}),SPLAB_SPECIALITE_LABORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPLAB_SPECIALITE_LABODataTable = CType(MyBase.Clone,SPLAB_SPECIALITE_LABODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPLAB_SPECIALITE_LABODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPLAB_SP_CODE_FK_PK = MyBase.Columns("SPLAB_SP_CODE_FK_PK")
            Me.columnSPLAB_CDF_LAB_CODE_FK_PK = MyBase.Columns("SPLAB_CDF_LAB_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPLAB_SP_CODE_FK_PK = New System.Data.DataColumn("SPLAB_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPLAB_SP_CODE_FK_PK)
            Me.columnSPLAB_CDF_LAB_CODE_FK_PK = New System.Data.DataColumn("SPLAB_CDF_LAB_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPLAB_CDF_LAB_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPLAB_SP_CODE_FK_PK, Me.columnSPLAB_CDF_LAB_CODE_FK_PK}, true))
            Me.columnSPLAB_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPLAB_CDF_LAB_CODE_FK_PK.AllowDBNull = false
            Me.columnSPLAB_CDF_LAB_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPLAB_SPECIALITE_LABORow() As SPLAB_SPECIALITE_LABORow
            Return CType(Me.NewRow,SPLAB_SPECIALITE_LABORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPLAB_SPECIALITE_LABORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPLAB_SPECIALITE_LABORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPLAB_SPECIALITE_LABORowChangedEvent) Is Nothing) Then
                RaiseEvent SPLAB_SPECIALITE_LABORowChanged(Me, New SPLAB_SPECIALITE_LABORowChangeEvent(CType(e.Row,SPLAB_SPECIALITE_LABORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPLAB_SPECIALITE_LABORowChangingEvent) Is Nothing) Then
                RaiseEvent SPLAB_SPECIALITE_LABORowChanging(Me, New SPLAB_SPECIALITE_LABORowChangeEvent(CType(e.Row,SPLAB_SPECIALITE_LABORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPLAB_SPECIALITE_LABORowDeletedEvent) Is Nothing) Then
                RaiseEvent SPLAB_SPECIALITE_LABORowDeleted(Me, New SPLAB_SPECIALITE_LABORowChangeEvent(CType(e.Row,SPLAB_SPECIALITE_LABORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPLAB_SPECIALITE_LABORowDeletingEvent) Is Nothing) Then
                RaiseEvent SPLAB_SPECIALITE_LABORowDeleting(Me, New SPLAB_SPECIALITE_LABORowChangeEvent(CType(e.Row,SPLAB_SPECIALITE_LABORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPLAB_SPECIALITE_LABORow(ByVal row As SPLAB_SPECIALITE_LABORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPLAB_SPECIALITE_LABODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPLABEX_SPE_LABO_EXPLOITANTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPLABEX_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPLABEX_CDF_LAB_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPLABEX_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPLABEX_SPE_LABO_EXPLOITANT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPLABEX_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLABEX_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPLABEX_CDF_LAB_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLABEX_CDF_LAB_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPLABEX_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLABEX_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPLABEX_SPE_LABO_EXPLOITANTRow
            Get
                Return CType(Me.Rows(index),SPLABEX_SPE_LABO_EXPLOITANTRow)
            End Get
        End Property
        
        Public Event SPLABEX_SPE_LABO_EXPLOITANTRowChanging As SPLABEX_SPE_LABO_EXPLOITANTRowChangeEventHandler
        
        Public Event SPLABEX_SPE_LABO_EXPLOITANTRowChanged As SPLABEX_SPE_LABO_EXPLOITANTRowChangeEventHandler
        
        Public Event SPLABEX_SPE_LABO_EXPLOITANTRowDeleting As SPLABEX_SPE_LABO_EXPLOITANTRowChangeEventHandler
        
        Public Event SPLABEX_SPE_LABO_EXPLOITANTRowDeleted As SPLABEX_SPE_LABO_EXPLOITANTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPLABEX_SPE_LABO_EXPLOITANTRow(ByVal row As SPLABEX_SPE_LABO_EXPLOITANTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPLABEX_SPE_LABO_EXPLOITANTRow(ByVal SPLABEX_SP_CODE_FK_PK As Integer, ByVal SPLABEX_CDF_LAB_CODE_FK_PK As String, ByVal SPLABEX_NUMORD As Short) As SPLABEX_SPE_LABO_EXPLOITANTRow
            Dim rowSPLABEX_SPE_LABO_EXPLOITANTRow As SPLABEX_SPE_LABO_EXPLOITANTRow = CType(Me.NewRow,SPLABEX_SPE_LABO_EXPLOITANTRow)
            rowSPLABEX_SPE_LABO_EXPLOITANTRow.ItemArray = New Object() {SPLABEX_SP_CODE_FK_PK, SPLABEX_CDF_LAB_CODE_FK_PK, SPLABEX_NUMORD}
            Me.Rows.Add(rowSPLABEX_SPE_LABO_EXPLOITANTRow)
            Return rowSPLABEX_SPE_LABO_EXPLOITANTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPLABEX_SP_CODE_FK_PKSPLABEX_CDF_LAB_CODE_FK_PK(ByVal SPLABEX_SP_CODE_FK_PK As Integer, ByVal SPLABEX_CDF_LAB_CODE_FK_PK As String) As SPLABEX_SPE_LABO_EXPLOITANTRow
            Return CType(Me.Rows.Find(New Object() {SPLABEX_SP_CODE_FK_PK, SPLABEX_CDF_LAB_CODE_FK_PK}),SPLABEX_SPE_LABO_EXPLOITANTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPLABEX_SPE_LABO_EXPLOITANTDataTable = CType(MyBase.Clone,SPLABEX_SPE_LABO_EXPLOITANTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPLABEX_SPE_LABO_EXPLOITANTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPLABEX_SP_CODE_FK_PK = MyBase.Columns("SPLABEX_SP_CODE_FK_PK")
            Me.columnSPLABEX_CDF_LAB_CODE_FK_PK = MyBase.Columns("SPLABEX_CDF_LAB_CODE_FK_PK")
            Me.columnSPLABEX_NUMORD = MyBase.Columns("SPLABEX_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPLABEX_SP_CODE_FK_PK = New System.Data.DataColumn("SPLABEX_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPLABEX_SP_CODE_FK_PK)
            Me.columnSPLABEX_CDF_LAB_CODE_FK_PK = New System.Data.DataColumn("SPLABEX_CDF_LAB_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPLABEX_CDF_LAB_CODE_FK_PK)
            Me.columnSPLABEX_NUMORD = New System.Data.DataColumn("SPLABEX_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPLABEX_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPLABEX_SP_CODE_FK_PK, Me.columnSPLABEX_CDF_LAB_CODE_FK_PK}, true))
            Me.columnSPLABEX_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPLABEX_CDF_LAB_CODE_FK_PK.AllowDBNull = false
            Me.columnSPLABEX_CDF_LAB_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPLABEX_SPE_LABO_EXPLOITANTRow() As SPLABEX_SPE_LABO_EXPLOITANTRow
            Return CType(Me.NewRow,SPLABEX_SPE_LABO_EXPLOITANTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPLABEX_SPE_LABO_EXPLOITANTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPLABEX_SPE_LABO_EXPLOITANTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPLABEX_SPE_LABO_EXPLOITANTRowChangedEvent) Is Nothing) Then
                RaiseEvent SPLABEX_SPE_LABO_EXPLOITANTRowChanged(Me, New SPLABEX_SPE_LABO_EXPLOITANTRowChangeEvent(CType(e.Row,SPLABEX_SPE_LABO_EXPLOITANTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPLABEX_SPE_LABO_EXPLOITANTRowChangingEvent) Is Nothing) Then
                RaiseEvent SPLABEX_SPE_LABO_EXPLOITANTRowChanging(Me, New SPLABEX_SPE_LABO_EXPLOITANTRowChangeEvent(CType(e.Row,SPLABEX_SPE_LABO_EXPLOITANTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPLABEX_SPE_LABO_EXPLOITANTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPLABEX_SPE_LABO_EXPLOITANTRowDeleted(Me, New SPLABEX_SPE_LABO_EXPLOITANTRowChangeEvent(CType(e.Row,SPLABEX_SPE_LABO_EXPLOITANTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPLABEX_SPE_LABO_EXPLOITANTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPLABEX_SPE_LABO_EXPLOITANTRowDeleting(Me, New SPLABEX_SPE_LABO_EXPLOITANTRowChangeEvent(CType(e.Row,SPLABEX_SPE_LABO_EXPLOITANTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPLABEX_SPE_LABO_EXPLOITANTRow(ByVal row As SPLABEX_SPE_LABO_EXPLOITANTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPLABEX_SPE_LABO_EXPLOITANTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPVO_SPECIALITE_VOIEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPVO_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPVO_CDF_VO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPVO_NUMSEQ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPVO_SPECIALITE_VOIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPVO_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPVO_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPVO_CDF_VO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPVO_CDF_VO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPVO_NUMSEQColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPVO_NUMSEQ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPVO_SPECIALITE_VOIERow
            Get
                Return CType(Me.Rows(index),SPVO_SPECIALITE_VOIERow)
            End Get
        End Property
        
        Public Event SPVO_SPECIALITE_VOIERowChanging As SPVO_SPECIALITE_VOIERowChangeEventHandler
        
        Public Event SPVO_SPECIALITE_VOIERowChanged As SPVO_SPECIALITE_VOIERowChangeEventHandler
        
        Public Event SPVO_SPECIALITE_VOIERowDeleting As SPVO_SPECIALITE_VOIERowChangeEventHandler
        
        Public Event SPVO_SPECIALITE_VOIERowDeleted As SPVO_SPECIALITE_VOIERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPVO_SPECIALITE_VOIERow(ByVal row As SPVO_SPECIALITE_VOIERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPVO_SPECIALITE_VOIERow(ByVal parentSP_SPECIALITERowByFK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE As SP_SPECIALITERow, ByVal SPVO_CDF_VO_CODE_FK_PK As String, ByVal SPVO_NUMSEQ As Short) As SPVO_SPECIALITE_VOIERow
            Dim rowSPVO_SPECIALITE_VOIERow As SPVO_SPECIALITE_VOIERow = CType(Me.NewRow,SPVO_SPECIALITE_VOIERow)
            rowSPVO_SPECIALITE_VOIERow.ItemArray = New Object() {parentSP_SPECIALITERowByFK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE(0), SPVO_CDF_VO_CODE_FK_PK, SPVO_NUMSEQ}
            Me.Rows.Add(rowSPVO_SPECIALITE_VOIERow)
            Return rowSPVO_SPECIALITE_VOIERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPVO_SP_CODE_FK_PKSPVO_CDF_VO_CODE_FK_PK(ByVal SPVO_SP_CODE_FK_PK As Integer, ByVal SPVO_CDF_VO_CODE_FK_PK As String) As SPVO_SPECIALITE_VOIERow
            Return CType(Me.Rows.Find(New Object() {SPVO_SP_CODE_FK_PK, SPVO_CDF_VO_CODE_FK_PK}),SPVO_SPECIALITE_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPVO_SPECIALITE_VOIEDataTable = CType(MyBase.Clone,SPVO_SPECIALITE_VOIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPVO_SPECIALITE_VOIEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPVO_SP_CODE_FK_PK = MyBase.Columns("SPVO_SP_CODE_FK_PK")
            Me.columnSPVO_CDF_VO_CODE_FK_PK = MyBase.Columns("SPVO_CDF_VO_CODE_FK_PK")
            Me.columnSPVO_NUMSEQ = MyBase.Columns("SPVO_NUMSEQ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPVO_SP_CODE_FK_PK = New System.Data.DataColumn("SPVO_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPVO_SP_CODE_FK_PK)
            Me.columnSPVO_CDF_VO_CODE_FK_PK = New System.Data.DataColumn("SPVO_CDF_VO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPVO_CDF_VO_CODE_FK_PK)
            Me.columnSPVO_NUMSEQ = New System.Data.DataColumn("SPVO_NUMSEQ", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPVO_NUMSEQ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPVO_SP_CODE_FK_PK, Me.columnSPVO_CDF_VO_CODE_FK_PK}, true))
            Me.columnSPVO_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPVO_CDF_VO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPVO_CDF_VO_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPVO_SPECIALITE_VOIERow() As SPVO_SPECIALITE_VOIERow
            Return CType(Me.NewRow,SPVO_SPECIALITE_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPVO_SPECIALITE_VOIERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPVO_SPECIALITE_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPVO_SPECIALITE_VOIERowChangedEvent) Is Nothing) Then
                RaiseEvent SPVO_SPECIALITE_VOIERowChanged(Me, New SPVO_SPECIALITE_VOIERowChangeEvent(CType(e.Row,SPVO_SPECIALITE_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPVO_SPECIALITE_VOIERowChangingEvent) Is Nothing) Then
                RaiseEvent SPVO_SPECIALITE_VOIERowChanging(Me, New SPVO_SPECIALITE_VOIERowChangeEvent(CType(e.Row,SPVO_SPECIALITE_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPVO_SPECIALITE_VOIERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPVO_SPECIALITE_VOIERowDeleted(Me, New SPVO_SPECIALITE_VOIERowChangeEvent(CType(e.Row,SPVO_SPECIALITE_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPVO_SPECIALITE_VOIERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPVO_SPECIALITE_VOIERowDeleting(Me, New SPVO_SPECIALITE_VOIERowChangeEvent(CType(e.Row,SPVO_SPECIALITE_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPVO_SPECIALITE_VOIERow(ByVal row As SPVO_SPECIALITE_VOIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPVO_SPECIALITE_VOIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPFO_SPECIALITE_FORMEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPFO_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFO_CDF_FO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFO_NUMSEQ_PK As System.Data.DataColumn
        
        Private columnSPFO_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPFO_SPECIALITE_FORME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFO_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFO_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFO_CDF_FO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFO_CDF_FO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFO_NUMSEQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFO_NUMSEQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFO_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFO_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPFO_SPECIALITE_FORMERow
            Get
                Return CType(Me.Rows(index),SPFO_SPECIALITE_FORMERow)
            End Get
        End Property
        
        Public Event SPFO_SPECIALITE_FORMERowChanging As SPFO_SPECIALITE_FORMERowChangeEventHandler
        
        Public Event SPFO_SPECIALITE_FORMERowChanged As SPFO_SPECIALITE_FORMERowChangeEventHandler
        
        Public Event SPFO_SPECIALITE_FORMERowDeleting As SPFO_SPECIALITE_FORMERowChangeEventHandler
        
        Public Event SPFO_SPECIALITE_FORMERowDeleted As SPFO_SPECIALITE_FORMERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPFO_SPECIALITE_FORMERow(ByVal row As SPFO_SPECIALITE_FORMERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPFO_SPECIALITE_FORMERow(ByVal SPFO_SP_CODE_FK_PK As Integer, ByVal SPFO_CDF_FO_CODE_FK_PK As String, ByVal SPFO_NUMSEQ_PK As Integer, ByVal SPFO_NUMORD As Short) As SPFO_SPECIALITE_FORMERow
            Dim rowSPFO_SPECIALITE_FORMERow As SPFO_SPECIALITE_FORMERow = CType(Me.NewRow,SPFO_SPECIALITE_FORMERow)
            rowSPFO_SPECIALITE_FORMERow.ItemArray = New Object() {SPFO_SP_CODE_FK_PK, SPFO_CDF_FO_CODE_FK_PK, SPFO_NUMSEQ_PK, SPFO_NUMORD}
            Me.Rows.Add(rowSPFO_SPECIALITE_FORMERow)
            Return rowSPFO_SPECIALITE_FORMERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPFO_SP_CODE_FK_PKSPFO_CDF_FO_CODE_FK_PKSPFO_NUMSEQ_PK(ByVal SPFO_SP_CODE_FK_PK As Integer, ByVal SPFO_CDF_FO_CODE_FK_PK As String, ByVal SPFO_NUMSEQ_PK As Integer) As SPFO_SPECIALITE_FORMERow
            Return CType(Me.Rows.Find(New Object() {SPFO_SP_CODE_FK_PK, SPFO_CDF_FO_CODE_FK_PK, SPFO_NUMSEQ_PK}),SPFO_SPECIALITE_FORMERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPFO_SPECIALITE_FORMEDataTable = CType(MyBase.Clone,SPFO_SPECIALITE_FORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPFO_SPECIALITE_FORMEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPFO_SP_CODE_FK_PK = MyBase.Columns("SPFO_SP_CODE_FK_PK")
            Me.columnSPFO_CDF_FO_CODE_FK_PK = MyBase.Columns("SPFO_CDF_FO_CODE_FK_PK")
            Me.columnSPFO_NUMSEQ_PK = MyBase.Columns("SPFO_NUMSEQ_PK")
            Me.columnSPFO_NUMORD = MyBase.Columns("SPFO_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPFO_SP_CODE_FK_PK = New System.Data.DataColumn("SPFO_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFO_SP_CODE_FK_PK)
            Me.columnSPFO_CDF_FO_CODE_FK_PK = New System.Data.DataColumn("SPFO_CDF_FO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFO_CDF_FO_CODE_FK_PK)
            Me.columnSPFO_NUMSEQ_PK = New System.Data.DataColumn("SPFO_NUMSEQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFO_NUMSEQ_PK)
            Me.columnSPFO_NUMORD = New System.Data.DataColumn("SPFO_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFO_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPFO_SP_CODE_FK_PK, Me.columnSPFO_CDF_FO_CODE_FK_PK, Me.columnSPFO_NUMSEQ_PK}, true))
            Me.columnSPFO_SP_CODE_FK_PK.AllowDBNull = False
            Me.columnSPFO_CDF_FO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFO_CDF_FO_CODE_FK_PK.MaxLength = 10
            Me.columnSPFO_NUMSEQ_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPFO_SPECIALITE_FORMERow() As SPFO_SPECIALITE_FORMERow
            Return CType(Me.NewRow,SPFO_SPECIALITE_FORMERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPFO_SPECIALITE_FORMERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPFO_SPECIALITE_FORMERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPFO_SPECIALITE_FORMERowChangedEvent) Is Nothing) Then
                RaiseEvent SPFO_SPECIALITE_FORMERowChanged(Me, New SPFO_SPECIALITE_FORMERowChangeEvent(CType(e.Row,SPFO_SPECIALITE_FORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPFO_SPECIALITE_FORMERowChangingEvent) Is Nothing) Then
                RaiseEvent SPFO_SPECIALITE_FORMERowChanging(Me, New SPFO_SPECIALITE_FORMERowChangeEvent(CType(e.Row,SPFO_SPECIALITE_FORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPFO_SPECIALITE_FORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPFO_SPECIALITE_FORMERowDeleted(Me, New SPFO_SPECIALITE_FORMERowChangeEvent(CType(e.Row,SPFO_SPECIALITE_FORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPFO_SPECIALITE_FORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPFO_SPECIALITE_FORMERowDeleting(Me, New SPFO_SPECIALITE_FORMERowChangeEvent(CType(e.Row,SPFO_SPECIALITE_FORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPFO_SPECIALITE_FORMERow(ByVal row As SPFO_SPECIALITE_FORMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPFO_SPECIALITE_FORMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPFOCFO_SPE_FORME_COMPFORMEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPFOCFO_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCFO_CDF_FO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCFO_SPFO_NUMSEQ_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCFO_CDF_CFO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCFO_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPFOCFO_SPE_FORME_COMPFORME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCFO_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCFO_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCFO_CDF_FO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCFO_CDF_FO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCFO_SPFO_NUMSEQ_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCFO_SPFO_NUMSEQ_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCFO_CDF_CFO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCFO_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCFO_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPFOCFO_SPE_FORME_COMPFORMERow
            Get
                Return CType(Me.Rows(index),SPFOCFO_SPE_FORME_COMPFORMERow)
            End Get
        End Property
        
        Public Event SPFOCFO_SPE_FORME_COMPFORMERowChanging As SPFOCFO_SPE_FORME_COMPFORMERowChangeEventHandler
        
        Public Event SPFOCFO_SPE_FORME_COMPFORMERowChanged As SPFOCFO_SPE_FORME_COMPFORMERowChangeEventHandler
        
        Public Event SPFOCFO_SPE_FORME_COMPFORMERowDeleting As SPFOCFO_SPE_FORME_COMPFORMERowChangeEventHandler
        
        Public Event SPFOCFO_SPE_FORME_COMPFORMERowDeleted As SPFOCFO_SPE_FORME_COMPFORMERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPFOCFO_SPE_FORME_COMPFORMERow(ByVal row As SPFOCFO_SPE_FORME_COMPFORMERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPFOCFO_SPE_FORME_COMPFORMERow(ByVal SPFOCFO_SP_CODE_FK_PK As Integer, ByVal SPFOCFO_CDF_FO_CODE_FK_PK As String, ByVal SPFOCFO_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCFO_CDF_CFO_CODE_FK_PK As String, ByVal SPFOCFO_NUMORD As Short) As SPFOCFO_SPE_FORME_COMPFORMERow
            Dim rowSPFOCFO_SPE_FORME_COMPFORMERow As SPFOCFO_SPE_FORME_COMPFORMERow = CType(Me.NewRow,SPFOCFO_SPE_FORME_COMPFORMERow)
            rowSPFOCFO_SPE_FORME_COMPFORMERow.ItemArray = New Object() {SPFOCFO_SP_CODE_FK_PK, SPFOCFO_CDF_FO_CODE_FK_PK, SPFOCFO_SPFO_NUMSEQ_FK_PK, SPFOCFO_CDF_CFO_CODE_FK_PK, SPFOCFO_NUMORD}
            Me.Rows.Add(rowSPFOCFO_SPE_FORME_COMPFORMERow)
            Return rowSPFOCFO_SPE_FORME_COMPFORMERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPFOCFO_SP_CODE_FK_PKSPFOCFO_CDF_FO_CODE_FK_PKSPFOCFO_SPFO_NUMSEQ_FK_PKSPFOCFO_CDF_CFO_CODE_FK_PK(ByVal SPFOCFO_SP_CODE_FK_PK As Integer, ByVal SPFOCFO_CDF_FO_CODE_FK_PK As String, ByVal SPFOCFO_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCFO_CDF_CFO_CODE_FK_PK As String) As SPFOCFO_SPE_FORME_COMPFORMERow
            Return CType(Me.Rows.Find(New Object() {SPFOCFO_SP_CODE_FK_PK, SPFOCFO_CDF_FO_CODE_FK_PK, SPFOCFO_SPFO_NUMSEQ_FK_PK, SPFOCFO_CDF_CFO_CODE_FK_PK}),SPFOCFO_SPE_FORME_COMPFORMERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPFOCFO_SPE_FORME_COMPFORMEDataTable = CType(MyBase.Clone,SPFOCFO_SPE_FORME_COMPFORMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPFOCFO_SPE_FORME_COMPFORMEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPFOCFO_SP_CODE_FK_PK = MyBase.Columns("SPFOCFO_SP_CODE_FK_PK")
            Me.columnSPFOCFO_CDF_FO_CODE_FK_PK = MyBase.Columns("SPFOCFO_CDF_FO_CODE_FK_PK")
            Me.columnSPFOCFO_SPFO_NUMSEQ_FK_PK = MyBase.Columns("SPFOCFO_SPFO_NUMSEQ_FK_PK")
            Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK = MyBase.Columns("SPFOCFO_CDF_CFO_CODE_FK_PK")
            Me.columnSPFOCFO_NUMORD = MyBase.Columns("SPFOCFO_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPFOCFO_SP_CODE_FK_PK = New System.Data.DataColumn("SPFOCFO_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCFO_SP_CODE_FK_PK)
            Me.columnSPFOCFO_CDF_FO_CODE_FK_PK = New System.Data.DataColumn("SPFOCFO_CDF_FO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCFO_CDF_FO_CODE_FK_PK)
            Me.columnSPFOCFO_SPFO_NUMSEQ_FK_PK = New System.Data.DataColumn("SPFOCFO_SPFO_NUMSEQ_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCFO_SPFO_NUMSEQ_FK_PK)
            Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK = New System.Data.DataColumn("SPFOCFO_CDF_CFO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK)
            Me.columnSPFOCFO_NUMORD = New System.Data.DataColumn("SPFOCFO_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCFO_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPFOCFO_SP_CODE_FK_PK, Me.columnSPFOCFO_CDF_FO_CODE_FK_PK, Me.columnSPFOCFO_SPFO_NUMSEQ_FK_PK, Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK}, true))
            Me.columnSPFOCFO_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOCFO_CDF_FO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOCFO_CDF_FO_CODE_FK_PK.MaxLength = 10
            Me.columnSPFOCFO_SPFO_NUMSEQ_FK_PK.AllowDBNull = false
            Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOCFO_CDF_CFO_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPFOCFO_SPE_FORME_COMPFORMERow() As SPFOCFO_SPE_FORME_COMPFORMERow
            Return CType(Me.NewRow,SPFOCFO_SPE_FORME_COMPFORMERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPFOCFO_SPE_FORME_COMPFORMERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPFOCFO_SPE_FORME_COMPFORMERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPFOCFO_SPE_FORME_COMPFORMERowChangedEvent) Is Nothing) Then
                RaiseEvent SPFOCFO_SPE_FORME_COMPFORMERowChanged(Me, New SPFOCFO_SPE_FORME_COMPFORMERowChangeEvent(CType(e.Row,SPFOCFO_SPE_FORME_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPFOCFO_SPE_FORME_COMPFORMERowChangingEvent) Is Nothing) Then
                RaiseEvent SPFOCFO_SPE_FORME_COMPFORMERowChanging(Me, New SPFOCFO_SPE_FORME_COMPFORMERowChangeEvent(CType(e.Row,SPFOCFO_SPE_FORME_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPFOCFO_SPE_FORME_COMPFORMERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPFOCFO_SPE_FORME_COMPFORMERowDeleted(Me, New SPFOCFO_SPE_FORME_COMPFORMERowChangeEvent(CType(e.Row,SPFOCFO_SPE_FORME_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPFOCFO_SPE_FORME_COMPFORMERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPFOCFO_SPE_FORME_COMPFORMERowDeleting(Me, New SPFOCFO_SPE_FORME_COMPFORMERowChangeEvent(CType(e.Row,SPFOCFO_SPE_FORME_COMPFORMERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPFOCFO_SPE_FORME_COMPFORMERow(ByVal row As SPFOCFO_SPE_FORME_COMPFORMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPFOCFO_SPE_FORME_COMPFORMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPFOCPI_SPE_FORME_COMPINFODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPFOCPI_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCPI_CDF_FO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCPI_SPFO_NUMSEQ_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCPI_CDF_CPI_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOCPI_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPFOCPI_SPE_FORME_COMPINFO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCPI_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCPI_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCPI_CDF_FO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCPI_CDF_FO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCPI_SPFO_NUMSEQ_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCPI_SPFO_NUMSEQ_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCPI_CDF_CPI_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOCPI_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOCPI_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPFOCPI_SPE_FORME_COMPINFORow
            Get
                Return CType(Me.Rows(index),SPFOCPI_SPE_FORME_COMPINFORow)
            End Get
        End Property
        
        Public Event SPFOCPI_SPE_FORME_COMPINFORowChanging As SPFOCPI_SPE_FORME_COMPINFORowChangeEventHandler
        
        Public Event SPFOCPI_SPE_FORME_COMPINFORowChanged As SPFOCPI_SPE_FORME_COMPINFORowChangeEventHandler
        
        Public Event SPFOCPI_SPE_FORME_COMPINFORowDeleting As SPFOCPI_SPE_FORME_COMPINFORowChangeEventHandler
        
        Public Event SPFOCPI_SPE_FORME_COMPINFORowDeleted As SPFOCPI_SPE_FORME_COMPINFORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPFOCPI_SPE_FORME_COMPINFORow(ByVal row As SPFOCPI_SPE_FORME_COMPINFORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPFOCPI_SPE_FORME_COMPINFORow(ByVal SPFOCPI_SP_CODE_FK_PK As Integer, ByVal SPFOCPI_CDF_FO_CODE_FK_PK As String, ByVal SPFOCPI_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCPI_CDF_CPI_CODE_FK_PK As String, ByVal SPFOCPI_NUMORD As Short) As SPFOCPI_SPE_FORME_COMPINFORow
            Dim rowSPFOCPI_SPE_FORME_COMPINFORow As SPFOCPI_SPE_FORME_COMPINFORow = CType(Me.NewRow,SPFOCPI_SPE_FORME_COMPINFORow)
            rowSPFOCPI_SPE_FORME_COMPINFORow.ItemArray = New Object() {SPFOCPI_SP_CODE_FK_PK, SPFOCPI_CDF_FO_CODE_FK_PK, SPFOCPI_SPFO_NUMSEQ_FK_PK, SPFOCPI_CDF_CPI_CODE_FK_PK, SPFOCPI_NUMORD}
            Me.Rows.Add(rowSPFOCPI_SPE_FORME_COMPINFORow)
            Return rowSPFOCPI_SPE_FORME_COMPINFORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPFOCPI_SP_CODE_FK_PKSPFOCPI_CDF_FO_CODE_FK_PKSPFOCPI_SPFO_NUMSEQ_FK_PKSPFOCPI_CDF_CPI_CODE_FK_PK(ByVal SPFOCPI_SP_CODE_FK_PK As Integer, ByVal SPFOCPI_CDF_FO_CODE_FK_PK As String, ByVal SPFOCPI_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCPI_CDF_CPI_CODE_FK_PK As String) As SPFOCPI_SPE_FORME_COMPINFORow
            Return CType(Me.Rows.Find(New Object() {SPFOCPI_SP_CODE_FK_PK, SPFOCPI_CDF_FO_CODE_FK_PK, SPFOCPI_SPFO_NUMSEQ_FK_PK, SPFOCPI_CDF_CPI_CODE_FK_PK}),SPFOCPI_SPE_FORME_COMPINFORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPFOCPI_SPE_FORME_COMPINFODataTable = CType(MyBase.Clone,SPFOCPI_SPE_FORME_COMPINFODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPFOCPI_SPE_FORME_COMPINFODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPFOCPI_SP_CODE_FK_PK = MyBase.Columns("SPFOCPI_SP_CODE_FK_PK")
            Me.columnSPFOCPI_CDF_FO_CODE_FK_PK = MyBase.Columns("SPFOCPI_CDF_FO_CODE_FK_PK")
            Me.columnSPFOCPI_SPFO_NUMSEQ_FK_PK = MyBase.Columns("SPFOCPI_SPFO_NUMSEQ_FK_PK")
            Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK = MyBase.Columns("SPFOCPI_CDF_CPI_CODE_FK_PK")
            Me.columnSPFOCPI_NUMORD = MyBase.Columns("SPFOCPI_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPFOCPI_SP_CODE_FK_PK = New System.Data.DataColumn("SPFOCPI_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCPI_SP_CODE_FK_PK)
            Me.columnSPFOCPI_CDF_FO_CODE_FK_PK = New System.Data.DataColumn("SPFOCPI_CDF_FO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCPI_CDF_FO_CODE_FK_PK)
            Me.columnSPFOCPI_SPFO_NUMSEQ_FK_PK = New System.Data.DataColumn("SPFOCPI_SPFO_NUMSEQ_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCPI_SPFO_NUMSEQ_FK_PK)
            Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK = New System.Data.DataColumn("SPFOCPI_CDF_CPI_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK)
            Me.columnSPFOCPI_NUMORD = New System.Data.DataColumn("SPFOCPI_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOCPI_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPFOCPI_SP_CODE_FK_PK, Me.columnSPFOCPI_CDF_FO_CODE_FK_PK, Me.columnSPFOCPI_SPFO_NUMSEQ_FK_PK, Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK}, true))
            Me.columnSPFOCPI_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOCPI_CDF_FO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOCPI_CDF_FO_CODE_FK_PK.MaxLength = 10
            Me.columnSPFOCPI_SPFO_NUMSEQ_FK_PK.AllowDBNull = false
            Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOCPI_CDF_CPI_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPFOCPI_SPE_FORME_COMPINFORow() As SPFOCPI_SPE_FORME_COMPINFORow
            Return CType(Me.NewRow,SPFOCPI_SPE_FORME_COMPINFORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPFOCPI_SPE_FORME_COMPINFORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPFOCPI_SPE_FORME_COMPINFORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPFOCPI_SPE_FORME_COMPINFORowChangedEvent) Is Nothing) Then
                RaiseEvent SPFOCPI_SPE_FORME_COMPINFORowChanged(Me, New SPFOCPI_SPE_FORME_COMPINFORowChangeEvent(CType(e.Row,SPFOCPI_SPE_FORME_COMPINFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPFOCPI_SPE_FORME_COMPINFORowChangingEvent) Is Nothing) Then
                RaiseEvent SPFOCPI_SPE_FORME_COMPINFORowChanging(Me, New SPFOCPI_SPE_FORME_COMPINFORowChangeEvent(CType(e.Row,SPFOCPI_SPE_FORME_COMPINFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPFOCPI_SPE_FORME_COMPINFORowDeletedEvent) Is Nothing) Then
                RaiseEvent SPFOCPI_SPE_FORME_COMPINFORowDeleted(Me, New SPFOCPI_SPE_FORME_COMPINFORowChangeEvent(CType(e.Row,SPFOCPI_SPE_FORME_COMPINFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPFOCPI_SPE_FORME_COMPINFORowDeletingEvent) Is Nothing) Then
                RaiseEvent SPFOCPI_SPE_FORME_COMPINFORowDeleting(Me, New SPFOCPI_SPE_FORME_COMPINFORowChangeEvent(CType(e.Row,SPFOCPI_SPE_FORME_COMPINFORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPFOCPI_SPE_FORME_COMPINFORow(ByVal row As SPFOCPI_SPE_FORME_COMPINFORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPFOCPI_SPE_FORME_COMPINFODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COMPO_COMPOSITIONDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOMPO_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOMPO_NUM_PK As System.Data.DataColumn
        
        Private columnCOMPO_CDF_GAL_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COMPO_COMPOSITION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPO_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOMPO_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPO_NUM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOMPO_NUM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPO_CDF_GAL_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOMPO_CDF_GAL_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COMPO_COMPOSITIONRow
            Get
                Return CType(Me.Rows(index),COMPO_COMPOSITIONRow)
            End Get
        End Property
        
        Public Event COMPO_COMPOSITIONRowChanging As COMPO_COMPOSITIONRowChangeEventHandler
        
        Public Event COMPO_COMPOSITIONRowChanged As COMPO_COMPOSITIONRowChangeEventHandler
        
        Public Event COMPO_COMPOSITIONRowDeleting As COMPO_COMPOSITIONRowChangeEventHandler
        
        Public Event COMPO_COMPOSITIONRowDeleted As COMPO_COMPOSITIONRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOMPO_COMPOSITIONRow(ByVal row As COMPO_COMPOSITIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOMPO_COMPOSITIONRow(ByVal COMPO_SP_CODE_FK_PK As Integer, ByVal COMPO_NUM_PK As Byte, ByVal COMPO_CDF_GAL_CODE_FK As String) As COMPO_COMPOSITIONRow
            Dim rowCOMPO_COMPOSITIONRow As COMPO_COMPOSITIONRow = CType(Me.NewRow,COMPO_COMPOSITIONRow)
            rowCOMPO_COMPOSITIONRow.ItemArray = New Object() {COMPO_SP_CODE_FK_PK, COMPO_NUM_PK, COMPO_CDF_GAL_CODE_FK}
            Me.Rows.Add(rowCOMPO_COMPOSITIONRow)
            Return rowCOMPO_COMPOSITIONRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOMPO_SP_CODE_FK_PKCOMPO_NUM_PK(ByVal COMPO_SP_CODE_FK_PK As Integer, ByVal COMPO_NUM_PK As Byte) As COMPO_COMPOSITIONRow
            Return CType(Me.Rows.Find(New Object() {COMPO_SP_CODE_FK_PK, COMPO_NUM_PK}),COMPO_COMPOSITIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As COMPO_COMPOSITIONDataTable = CType(MyBase.Clone,COMPO_COMPOSITIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New COMPO_COMPOSITIONDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOMPO_SP_CODE_FK_PK = MyBase.Columns("COMPO_SP_CODE_FK_PK")
            Me.columnCOMPO_NUM_PK = MyBase.Columns("COMPO_NUM_PK")
            Me.columnCOMPO_CDF_GAL_CODE_FK = MyBase.Columns("COMPO_CDF_GAL_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOMPO_SP_CODE_FK_PK = New System.Data.DataColumn("COMPO_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPO_SP_CODE_FK_PK)
            Me.columnCOMPO_NUM_PK = New System.Data.DataColumn("COMPO_NUM_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPO_NUM_PK)
            Me.columnCOMPO_CDF_GAL_CODE_FK = New System.Data.DataColumn("COMPO_CDF_GAL_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPO_CDF_GAL_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCOMPO_SP_CODE_FK_PK, Me.columnCOMPO_NUM_PK}, true))
            Me.columnCOMPO_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnCOMPO_NUM_PK.AllowDBNull = false
            Me.columnCOMPO_CDF_GAL_CODE_FK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOMPO_COMPOSITIONRow() As COMPO_COMPOSITIONRow
            Return CType(Me.NewRow,COMPO_COMPOSITIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New COMPO_COMPOSITIONRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COMPO_COMPOSITIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COMPO_COMPOSITIONRowChangedEvent) Is Nothing) Then
                RaiseEvent COMPO_COMPOSITIONRowChanged(Me, New COMPO_COMPOSITIONRowChangeEvent(CType(e.Row,COMPO_COMPOSITIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COMPO_COMPOSITIONRowChangingEvent) Is Nothing) Then
                RaiseEvent COMPO_COMPOSITIONRowChanging(Me, New COMPO_COMPOSITIONRowChangeEvent(CType(e.Row,COMPO_COMPOSITIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COMPO_COMPOSITIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent COMPO_COMPOSITIONRowDeleted(Me, New COMPO_COMPOSITIONRowChangeEvent(CType(e.Row,COMPO_COMPOSITIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COMPO_COMPOSITIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent COMPO_COMPOSITIONRowDeleting(Me, New COMPO_COMPOSITIONRowChangeEvent(CType(e.Row,COMPO_COMPOSITIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOMPO_COMPOSITIONRow(ByVal row As COMPO_COMPOSITIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COMPO_COMPOSITIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COSAC_COMPO_SUBACTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOSAC_SAC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOSAC_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOSAC_DOSAGE As System.Data.DataColumn
        
        Private columnCOSAC_UNITEDOSAGE As System.Data.DataColumn
        
        Private columnCOSAC_COMPO_NUM_PK As System.Data.DataColumn
        
        Private columnCOSAC_SAC_BASE_CODE_FK As System.Data.DataColumn
        
        Private columnCOSAC_DOSAGE_BASE As System.Data.DataColumn
        
        Private columnCOSAC_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COSAC_COMPO_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_SAC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_DOSAGEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_DOSAGE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_UNITEDOSAGEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_UNITEDOSAGE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_COMPO_NUM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_COMPO_NUM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_SAC_BASE_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_SAC_BASE_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_DOSAGE_BASEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_DOSAGE_BASE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAC_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAC_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COSAC_COMPO_SUBACTRow
            Get
                Return CType(Me.Rows(index),COSAC_COMPO_SUBACTRow)
            End Get
        End Property
        
        Public Event COSAC_COMPO_SUBACTRowChanging As COSAC_COMPO_SUBACTRowChangeEventHandler
        
        Public Event COSAC_COMPO_SUBACTRowChanged As COSAC_COMPO_SUBACTRowChangeEventHandler
        
        Public Event COSAC_COMPO_SUBACTRowDeleting As COSAC_COMPO_SUBACTRowChangeEventHandler
        
        Public Event COSAC_COMPO_SUBACTRowDeleted As COSAC_COMPO_SUBACTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOSAC_COMPO_SUBACTRow(ByVal row As COSAC_COMPO_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOSAC_COMPO_SUBACTRow(ByVal COSAC_SAC_CODE_FK_PK As Integer, ByVal COSAC_SP_CODE_FK_PK As Integer, ByVal COSAC_DOSAGE As String, ByVal COSAC_UNITEDOSAGE As String, ByVal COSAC_COMPO_NUM_PK As Byte, ByVal COSAC_SAC_BASE_CODE_FK As Integer, ByVal COSAC_DOSAGE_BASE As Decimal, ByVal COSAC_NUMORD As Short) As COSAC_COMPO_SUBACTRow
            Dim rowCOSAC_COMPO_SUBACTRow As COSAC_COMPO_SUBACTRow = CType(Me.NewRow,COSAC_COMPO_SUBACTRow)
            rowCOSAC_COMPO_SUBACTRow.ItemArray = New Object() {COSAC_SAC_CODE_FK_PK, COSAC_SP_CODE_FK_PK, COSAC_DOSAGE, COSAC_UNITEDOSAGE, COSAC_COMPO_NUM_PK, COSAC_SAC_BASE_CODE_FK, COSAC_DOSAGE_BASE, COSAC_NUMORD}
            Me.Rows.Add(rowCOSAC_COMPO_SUBACTRow)
            Return rowCOSAC_COMPO_SUBACTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOSAC_SAC_CODE_FK_PKCOSAC_SP_CODE_FK_PKCOSAC_COMPO_NUM_PK(ByVal COSAC_SAC_CODE_FK_PK As Integer, ByVal COSAC_SP_CODE_FK_PK As Integer, ByVal COSAC_COMPO_NUM_PK As Byte) As COSAC_COMPO_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {COSAC_SAC_CODE_FK_PK, COSAC_SP_CODE_FK_PK, COSAC_COMPO_NUM_PK}),COSAC_COMPO_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As COSAC_COMPO_SUBACTDataTable = CType(MyBase.Clone,COSAC_COMPO_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New COSAC_COMPO_SUBACTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOSAC_SAC_CODE_FK_PK = MyBase.Columns("COSAC_SAC_CODE_FK_PK")
            Me.columnCOSAC_SP_CODE_FK_PK = MyBase.Columns("COSAC_SP_CODE_FK_PK")
            Me.columnCOSAC_DOSAGE = MyBase.Columns("COSAC_DOSAGE")
            Me.columnCOSAC_UNITEDOSAGE = MyBase.Columns("COSAC_UNITEDOSAGE")
            Me.columnCOSAC_COMPO_NUM_PK = MyBase.Columns("COSAC_COMPO_NUM_PK")
            Me.columnCOSAC_SAC_BASE_CODE_FK = MyBase.Columns("COSAC_SAC_BASE_CODE_FK")
            Me.columnCOSAC_DOSAGE_BASE = MyBase.Columns("COSAC_DOSAGE_BASE")
            Me.columnCOSAC_NUMORD = MyBase.Columns("COSAC_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOSAC_SAC_CODE_FK_PK = New System.Data.DataColumn("COSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_SAC_CODE_FK_PK)
            Me.columnCOSAC_SP_CODE_FK_PK = New System.Data.DataColumn("COSAC_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_SP_CODE_FK_PK)
            Me.columnCOSAC_DOSAGE = New System.Data.DataColumn("COSAC_DOSAGE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_DOSAGE)
            Me.columnCOSAC_UNITEDOSAGE = New System.Data.DataColumn("COSAC_UNITEDOSAGE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_UNITEDOSAGE)
            Me.columnCOSAC_COMPO_NUM_PK = New System.Data.DataColumn("COSAC_COMPO_NUM_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_COMPO_NUM_PK)
            Me.columnCOSAC_SAC_BASE_CODE_FK = New System.Data.DataColumn("COSAC_SAC_BASE_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_SAC_BASE_CODE_FK)
            Me.columnCOSAC_DOSAGE_BASE = New System.Data.DataColumn("COSAC_DOSAGE_BASE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_DOSAGE_BASE)
            Me.columnCOSAC_NUMORD = New System.Data.DataColumn("COSAC_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAC_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCOSAC_SAC_CODE_FK_PK, Me.columnCOSAC_SP_CODE_FK_PK, Me.columnCOSAC_COMPO_NUM_PK}, true))
            Me.columnCOSAC_SAC_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAC_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAC_DOSAGE.MaxLength = 17
            Me.columnCOSAC_UNITEDOSAGE.MaxLength = 40
            Me.columnCOSAC_COMPO_NUM_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOSAC_COMPO_SUBACTRow() As COSAC_COMPO_SUBACTRow
            Return CType(Me.NewRow,COSAC_COMPO_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New COSAC_COMPO_SUBACTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COSAC_COMPO_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COSAC_COMPO_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent COSAC_COMPO_SUBACTRowChanged(Me, New COSAC_COMPO_SUBACTRowChangeEvent(CType(e.Row,COSAC_COMPO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COSAC_COMPO_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent COSAC_COMPO_SUBACTRowChanging(Me, New COSAC_COMPO_SUBACTRowChangeEvent(CType(e.Row,COSAC_COMPO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COSAC_COMPO_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent COSAC_COMPO_SUBACTRowDeleted(Me, New COSAC_COMPO_SUBACTRowChangeEvent(CType(e.Row,COSAC_COMPO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COSAC_COMPO_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent COSAC_COMPO_SUBACTRowDeleting(Me, New COSAC_COMPO_SUBACTRowChangeEvent(CType(e.Row,COSAC_COMPO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOSAC_COMPO_SUBACTRow(ByVal row As COSAC_COMPO_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COSAC_COMPO_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COSAU_COMPO_SUBAUXDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOSAU_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOSAU_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOSAU_DOSAGE As System.Data.DataColumn
        
        Private columnCOSAU_UNITEDOSAGE As System.Data.DataColumn
        
        Private columnCOSAU_COMPO_NUM_PK As System.Data.DataColumn
        
        Private columnCOSAU_GREF_CODE_FK As System.Data.DataColumn
        
        Private columnCOSAU_GREF_DATECR_FK As System.Data.DataColumn
        
        Private columnCOSAU_GREF_NUMORD As System.Data.DataColumn
        
        Private columnCOSAU_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COSAU_COMPO_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_DOSAGEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_DOSAGE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_UNITEDOSAGEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_UNITEDOSAGE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_COMPO_NUM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_COMPO_NUM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_DATECR_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_DATECR_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_GREF_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_GREF_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSAU_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOSAU_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COSAU_COMPO_SUBAUXRow
            Get
                Return CType(Me.Rows(index),COSAU_COMPO_SUBAUXRow)
            End Get
        End Property
        
        Public Event COSAU_COMPO_SUBAUXRowChanging As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUXRowChanged As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUXRowDeleting As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        Public Event COSAU_COMPO_SUBAUXRowDeleted As COSAU_COMPO_SUBAUXRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOSAU_COMPO_SUBAUXRow(ByVal row As COSAU_COMPO_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOSAU_COMPO_SUBAUXRow(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_COMPO_NUM_PK As Byte, ByVal COSAU_GREF_CODE_FK As Integer, ByVal COSAU_GREF_DATECR_FK As Date, ByVal COSAU_GREF_NUMORD As Short, ByVal COSAU_NUMORD As Short) As COSAU_COMPO_SUBAUXRow
            Dim rowCOSAU_COMPO_SUBAUXRow As COSAU_COMPO_SUBAUXRow = CType(Me.NewRow,COSAU_COMPO_SUBAUXRow)
            rowCOSAU_COMPO_SUBAUXRow.ItemArray = New Object() {COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD}
            Me.Rows.Add(rowCOSAU_COMPO_SUBAUXRow)
            Return rowCOSAU_COMPO_SUBAUXRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOSAU_SAU_CODE_FK_PKCOSAU_SP_CODE_FK_PKCOSAU_COMPO_NUM_PK(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_COMPO_NUM_PK As Byte) As COSAU_COMPO_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_COMPO_NUM_PK}),COSAU_COMPO_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As COSAU_COMPO_SUBAUXDataTable = CType(MyBase.Clone,COSAU_COMPO_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New COSAU_COMPO_SUBAUXDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOSAU_SAU_CODE_FK_PK = MyBase.Columns("COSAU_SAU_CODE_FK_PK")
            Me.columnCOSAU_SP_CODE_FK_PK = MyBase.Columns("COSAU_SP_CODE_FK_PK")
            Me.columnCOSAU_DOSAGE = MyBase.Columns("COSAU_DOSAGE")
            Me.columnCOSAU_UNITEDOSAGE = MyBase.Columns("COSAU_UNITEDOSAGE")
            Me.columnCOSAU_COMPO_NUM_PK = MyBase.Columns("COSAU_COMPO_NUM_PK")
            Me.columnCOSAU_GREF_CODE_FK = MyBase.Columns("COSAU_GREF_CODE_FK")
            Me.columnCOSAU_GREF_DATECR_FK = MyBase.Columns("COSAU_GREF_DATECR_FK")
            Me.columnCOSAU_GREF_NUMORD = MyBase.Columns("COSAU_GREF_NUMORD")
            Me.columnCOSAU_NUMORD = MyBase.Columns("COSAU_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOSAU_SAU_CODE_FK_PK = New System.Data.DataColumn("COSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_SAU_CODE_FK_PK)
            Me.columnCOSAU_SP_CODE_FK_PK = New System.Data.DataColumn("COSAU_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_SP_CODE_FK_PK)
            Me.columnCOSAU_DOSAGE = New System.Data.DataColumn("COSAU_DOSAGE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_DOSAGE)
            Me.columnCOSAU_UNITEDOSAGE = New System.Data.DataColumn("COSAU_UNITEDOSAGE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_UNITEDOSAGE)
            Me.columnCOSAU_COMPO_NUM_PK = New System.Data.DataColumn("COSAU_COMPO_NUM_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_COMPO_NUM_PK)
            Me.columnCOSAU_GREF_CODE_FK = New System.Data.DataColumn("COSAU_GREF_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_CODE_FK)
            Me.columnCOSAU_GREF_DATECR_FK = New System.Data.DataColumn("COSAU_GREF_DATECR_FK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_DATECR_FK)
            Me.columnCOSAU_GREF_NUMORD = New System.Data.DataColumn("COSAU_GREF_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_GREF_NUMORD)
            Me.columnCOSAU_NUMORD = New System.Data.DataColumn("COSAU_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOSAU_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCOSAU_SAU_CODE_FK_PK, Me.columnCOSAU_SP_CODE_FK_PK, Me.columnCOSAU_COMPO_NUM_PK}, true))
            Me.columnCOSAU_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAU_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnCOSAU_DOSAGE.MaxLength = 17
            Me.columnCOSAU_UNITEDOSAGE.MaxLength = 40
            Me.columnCOSAU_COMPO_NUM_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOSAU_COMPO_SUBAUXRow() As COSAU_COMPO_SUBAUXRow
            Return CType(Me.NewRow,COSAU_COMPO_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New COSAU_COMPO_SUBAUXRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COSAU_COMPO_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowChanged(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowChanging(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowDeleted(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COSAU_COMPO_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent COSAU_COMPO_SUBAUXRowDeleting(Me, New COSAU_COMPO_SUBAUXRowChangeEvent(CType(e.Row,COSAU_COMPO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOSAU_COMPO_SUBAUXRow(ByVal row As COSAU_COMPO_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COSAU_COMPO_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COTEN_COMPO_TENEURDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOTEN_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOTEN_CDF_TEN_CODE_FK_PK As System.Data.DataColumn
        
        Private columnCOTEN_QUALIFICATIF As System.Data.DataColumn
        
        Private columnCOTEN_DOSAGE As System.Data.DataColumn
        
        Private columnCOTEN_CDF_UD_CODE_FK As System.Data.DataColumn
        
        Private columnCOTEN_DOSAGE_EQUIV As System.Data.DataColumn
        
        Private columnCOTEN_CDF_UD_EQUIV_CODE_FK As System.Data.DataColumn
        
        Private columnCOTEN_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COTEN_COMPO_TENEUR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_CDF_TEN_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_CDF_TEN_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_QUALIFICATIFColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_QUALIFICATIF
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_DOSAGEColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_DOSAGE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_CDF_UD_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_CDF_UD_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_DOSAGE_EQUIVColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_DOSAGE_EQUIV
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_CDF_UD_EQUIV_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_CDF_UD_EQUIV_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COTEN_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnCOTEN_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COTEN_COMPO_TENEURRow
            Get
                Return CType(Me.Rows(index),COTEN_COMPO_TENEURRow)
            End Get
        End Property
        
        Public Event COTEN_COMPO_TENEURRowChanging As COTEN_COMPO_TENEURRowChangeEventHandler
        
        Public Event COTEN_COMPO_TENEURRowChanged As COTEN_COMPO_TENEURRowChangeEventHandler
        
        Public Event COTEN_COMPO_TENEURRowDeleting As COTEN_COMPO_TENEURRowChangeEventHandler
        
        Public Event COTEN_COMPO_TENEURRowDeleted As COTEN_COMPO_TENEURRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOTEN_COMPO_TENEURRow(ByVal row As COTEN_COMPO_TENEURRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOTEN_COMPO_TENEURRow(ByVal parentSP_SPECIALITERowByFK_SP_SPECIALITE_COTEN_COMPO_TENEUR As SP_SPECIALITERow, ByVal COTEN_CDF_TEN_CODE_FK_PK As String, ByVal COTEN_QUALIFICATIF As String, ByVal COTEN_DOSAGE As Decimal, ByVal COTEN_CDF_UD_CODE_FK As String, ByVal COTEN_DOSAGE_EQUIV As Decimal, ByVal COTEN_CDF_UD_EQUIV_CODE_FK As String, ByVal COTEN_NUMORD As Short) As COTEN_COMPO_TENEURRow
            Dim rowCOTEN_COMPO_TENEURRow As COTEN_COMPO_TENEURRow = CType(Me.NewRow,COTEN_COMPO_TENEURRow)
            rowCOTEN_COMPO_TENEURRow.ItemArray = New Object() {parentSP_SPECIALITERowByFK_SP_SPECIALITE_COTEN_COMPO_TENEUR(0), COTEN_CDF_TEN_CODE_FK_PK, COTEN_QUALIFICATIF, COTEN_DOSAGE, COTEN_CDF_UD_CODE_FK, COTEN_DOSAGE_EQUIV, COTEN_CDF_UD_EQUIV_CODE_FK, COTEN_NUMORD}
            Me.Rows.Add(rowCOTEN_COMPO_TENEURRow)
            Return rowCOTEN_COMPO_TENEURRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOTEN_SP_CODE_FK_PKCOTEN_CDF_TEN_CODE_FK_PK(ByVal COTEN_SP_CODE_FK_PK As Integer, ByVal COTEN_CDF_TEN_CODE_FK_PK As String) As COTEN_COMPO_TENEURRow
            Return CType(Me.Rows.Find(New Object() {COTEN_SP_CODE_FK_PK, COTEN_CDF_TEN_CODE_FK_PK}),COTEN_COMPO_TENEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As COTEN_COMPO_TENEURDataTable = CType(MyBase.Clone,COTEN_COMPO_TENEURDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New COTEN_COMPO_TENEURDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOTEN_SP_CODE_FK_PK = MyBase.Columns("COTEN_SP_CODE_FK_PK")
            Me.columnCOTEN_CDF_TEN_CODE_FK_PK = MyBase.Columns("COTEN_CDF_TEN_CODE_FK_PK")
            Me.columnCOTEN_QUALIFICATIF = MyBase.Columns("COTEN_QUALIFICATIF")
            Me.columnCOTEN_DOSAGE = MyBase.Columns("COTEN_DOSAGE")
            Me.columnCOTEN_CDF_UD_CODE_FK = MyBase.Columns("COTEN_CDF_UD_CODE_FK")
            Me.columnCOTEN_DOSAGE_EQUIV = MyBase.Columns("COTEN_DOSAGE_EQUIV")
            Me.columnCOTEN_CDF_UD_EQUIV_CODE_FK = MyBase.Columns("COTEN_CDF_UD_EQUIV_CODE_FK")
            Me.columnCOTEN_NUMORD = MyBase.Columns("COTEN_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOTEN_SP_CODE_FK_PK = New System.Data.DataColumn("COTEN_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_SP_CODE_FK_PK)
            Me.columnCOTEN_CDF_TEN_CODE_FK_PK = New System.Data.DataColumn("COTEN_CDF_TEN_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_CDF_TEN_CODE_FK_PK)
            Me.columnCOTEN_QUALIFICATIF = New System.Data.DataColumn("COTEN_QUALIFICATIF", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_QUALIFICATIF)
            Me.columnCOTEN_DOSAGE = New System.Data.DataColumn("COTEN_DOSAGE", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_DOSAGE)
            Me.columnCOTEN_CDF_UD_CODE_FK = New System.Data.DataColumn("COTEN_CDF_UD_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_CDF_UD_CODE_FK)
            Me.columnCOTEN_DOSAGE_EQUIV = New System.Data.DataColumn("COTEN_DOSAGE_EQUIV", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_DOSAGE_EQUIV)
            Me.columnCOTEN_CDF_UD_EQUIV_CODE_FK = New System.Data.DataColumn("COTEN_CDF_UD_EQUIV_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_CDF_UD_EQUIV_CODE_FK)
            Me.columnCOTEN_NUMORD = New System.Data.DataColumn("COTEN_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOTEN_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCOTEN_SP_CODE_FK_PK, Me.columnCOTEN_CDF_TEN_CODE_FK_PK}, true))
            Me.columnCOTEN_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnCOTEN_CDF_TEN_CODE_FK_PK.AllowDBNull = false
            Me.columnCOTEN_CDF_TEN_CODE_FK_PK.MaxLength = 10
            Me.columnCOTEN_QUALIFICATIF.MaxLength = 3
            Me.columnCOTEN_CDF_UD_CODE_FK.MaxLength = 10
            Me.columnCOTEN_CDF_UD_EQUIV_CODE_FK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOTEN_COMPO_TENEURRow() As COTEN_COMPO_TENEURRow
            Return CType(Me.NewRow,COTEN_COMPO_TENEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New COTEN_COMPO_TENEURRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(COTEN_COMPO_TENEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COTEN_COMPO_TENEURRowChangedEvent) Is Nothing) Then
                RaiseEvent COTEN_COMPO_TENEURRowChanged(Me, New COTEN_COMPO_TENEURRowChangeEvent(CType(e.Row,COTEN_COMPO_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COTEN_COMPO_TENEURRowChangingEvent) Is Nothing) Then
                RaiseEvent COTEN_COMPO_TENEURRowChanging(Me, New COTEN_COMPO_TENEURRowChangeEvent(CType(e.Row,COTEN_COMPO_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COTEN_COMPO_TENEURRowDeletedEvent) Is Nothing) Then
                RaiseEvent COTEN_COMPO_TENEURRowDeleted(Me, New COTEN_COMPO_TENEURRowChangeEvent(CType(e.Row,COTEN_COMPO_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COTEN_COMPO_TENEURRowDeletingEvent) Is Nothing) Then
                RaiseEvent COTEN_COMPO_TENEURRowDeleting(Me, New COTEN_COMPO_TENEURRowChangeEvent(CType(e.Row,COTEN_COMPO_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOTEN_COMPO_TENEURRow(ByVal row As COTEN_COMPO_TENEURRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COTEN_COMPO_TENEURDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPADM_SPECIALITE_MODEADMDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPADM_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPADM_LIBELLE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPADM_SPECIALITE_MODEADM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPADM_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPADM_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPADM_LIBELLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPADM_LIBELLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPADM_SPECIALITE_MODEADMRow
            Get
                Return CType(Me.Rows(index),SPADM_SPECIALITE_MODEADMRow)
            End Get
        End Property
        
        Public Event SPADM_SPECIALITE_MODEADMRowChanging As SPADM_SPECIALITE_MODEADMRowChangeEventHandler
        
        Public Event SPADM_SPECIALITE_MODEADMRowChanged As SPADM_SPECIALITE_MODEADMRowChangeEventHandler
        
        Public Event SPADM_SPECIALITE_MODEADMRowDeleting As SPADM_SPECIALITE_MODEADMRowChangeEventHandler
        
        Public Event SPADM_SPECIALITE_MODEADMRowDeleted As SPADM_SPECIALITE_MODEADMRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPADM_SPECIALITE_MODEADMRow(ByVal row As SPADM_SPECIALITE_MODEADMRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPADM_SPECIALITE_MODEADMRow(ByVal parentSP_SPECIALITERowByFK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM As SP_SPECIALITERow, ByVal SPADM_LIBELLE As String) As SPADM_SPECIALITE_MODEADMRow
            Dim rowSPADM_SPECIALITE_MODEADMRow As SPADM_SPECIALITE_MODEADMRow = CType(Me.NewRow,SPADM_SPECIALITE_MODEADMRow)
            rowSPADM_SPECIALITE_MODEADMRow.ItemArray = New Object() {parentSP_SPECIALITERowByFK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM(0), SPADM_LIBELLE}
            Me.Rows.Add(rowSPADM_SPECIALITE_MODEADMRow)
            Return rowSPADM_SPECIALITE_MODEADMRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPADM_SP_CODE_FK_PK(ByVal SPADM_SP_CODE_FK_PK As Integer) As SPADM_SPECIALITE_MODEADMRow
            Return CType(Me.Rows.Find(New Object() {SPADM_SP_CODE_FK_PK}),SPADM_SPECIALITE_MODEADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPADM_SPECIALITE_MODEADMDataTable = CType(MyBase.Clone,SPADM_SPECIALITE_MODEADMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPADM_SPECIALITE_MODEADMDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPADM_SP_CODE_FK_PK = MyBase.Columns("SPADM_SP_CODE_FK_PK")
            Me.columnSPADM_LIBELLE = MyBase.Columns("SPADM_LIBELLE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPADM_SP_CODE_FK_PK = New System.Data.DataColumn("SPADM_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPADM_SP_CODE_FK_PK)
            Me.columnSPADM_LIBELLE = New System.Data.DataColumn("SPADM_LIBELLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPADM_LIBELLE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPADM_SP_CODE_FK_PK}, true))
            Me.columnSPADM_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPADM_SP_CODE_FK_PK.Unique = true
            Me.columnSPADM_LIBELLE.AllowDBNull = false
            Me.columnSPADM_LIBELLE.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPADM_SPECIALITE_MODEADMRow() As SPADM_SPECIALITE_MODEADMRow
            Return CType(Me.NewRow,SPADM_SPECIALITE_MODEADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPADM_SPECIALITE_MODEADMRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPADM_SPECIALITE_MODEADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPADM_SPECIALITE_MODEADMRowChangedEvent) Is Nothing) Then
                RaiseEvent SPADM_SPECIALITE_MODEADMRowChanged(Me, New SPADM_SPECIALITE_MODEADMRowChangeEvent(CType(e.Row,SPADM_SPECIALITE_MODEADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPADM_SPECIALITE_MODEADMRowChangingEvent) Is Nothing) Then
                RaiseEvent SPADM_SPECIALITE_MODEADMRowChanging(Me, New SPADM_SPECIALITE_MODEADMRowChangeEvent(CType(e.Row,SPADM_SPECIALITE_MODEADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPADM_SPECIALITE_MODEADMRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPADM_SPECIALITE_MODEADMRowDeleted(Me, New SPADM_SPECIALITE_MODEADMRowChangeEvent(CType(e.Row,SPADM_SPECIALITE_MODEADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPADM_SPECIALITE_MODEADMRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPADM_SPECIALITE_MODEADMRowDeleting(Me, New SPADM_SPECIALITE_MODEADMRowChangeEvent(CType(e.Row,SPADM_SPECIALITE_MODEADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPADM_SPECIALITE_MODEADMRow(ByVal row As SPADM_SPECIALITE_MODEADMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPADM_SPECIALITE_MODEADMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPTEN_SPECIALITE_TENEURDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPTEN_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPTEN_LIBELLE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPTEN_SPECIALITE_TENEUR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPTEN_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPTEN_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPTEN_LIBELLEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPTEN_LIBELLE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPTEN_SPECIALITE_TENEURRow
            Get
                Return CType(Me.Rows(index),SPTEN_SPECIALITE_TENEURRow)
            End Get
        End Property
        
        Public Event SPTEN_SPECIALITE_TENEURRowChanging As SPTEN_SPECIALITE_TENEURRowChangeEventHandler
        
        Public Event SPTEN_SPECIALITE_TENEURRowChanged As SPTEN_SPECIALITE_TENEURRowChangeEventHandler
        
        Public Event SPTEN_SPECIALITE_TENEURRowDeleting As SPTEN_SPECIALITE_TENEURRowChangeEventHandler
        
        Public Event SPTEN_SPECIALITE_TENEURRowDeleted As SPTEN_SPECIALITE_TENEURRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPTEN_SPECIALITE_TENEURRow(ByVal row As SPTEN_SPECIALITE_TENEURRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPTEN_SPECIALITE_TENEURRow(ByVal parentSP_SPECIALITERowByFK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR As SP_SPECIALITERow, ByVal SPTEN_LIBELLE As String) As SPTEN_SPECIALITE_TENEURRow
            Dim rowSPTEN_SPECIALITE_TENEURRow As SPTEN_SPECIALITE_TENEURRow = CType(Me.NewRow,SPTEN_SPECIALITE_TENEURRow)
            rowSPTEN_SPECIALITE_TENEURRow.ItemArray = New Object() {parentSP_SPECIALITERowByFK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR(0), SPTEN_LIBELLE}
            Me.Rows.Add(rowSPTEN_SPECIALITE_TENEURRow)
            Return rowSPTEN_SPECIALITE_TENEURRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPTEN_SP_CODE_FK_PK(ByVal SPTEN_SP_CODE_FK_PK As Integer) As SPTEN_SPECIALITE_TENEURRow
            Return CType(Me.Rows.Find(New Object() {SPTEN_SP_CODE_FK_PK}),SPTEN_SPECIALITE_TENEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPTEN_SPECIALITE_TENEURDataTable = CType(MyBase.Clone,SPTEN_SPECIALITE_TENEURDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPTEN_SPECIALITE_TENEURDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPTEN_SP_CODE_FK_PK = MyBase.Columns("SPTEN_SP_CODE_FK_PK")
            Me.columnSPTEN_LIBELLE = MyBase.Columns("SPTEN_LIBELLE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPTEN_SP_CODE_FK_PK = New System.Data.DataColumn("SPTEN_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPTEN_SP_CODE_FK_PK)
            Me.columnSPTEN_LIBELLE = New System.Data.DataColumn("SPTEN_LIBELLE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPTEN_LIBELLE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPTEN_SP_CODE_FK_PK}, true))
            Me.columnSPTEN_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPTEN_SP_CODE_FK_PK.Unique = true
            Me.columnSPTEN_LIBELLE.AllowDBNull = false
            Me.columnSPTEN_LIBELLE.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPTEN_SPECIALITE_TENEURRow() As SPTEN_SPECIALITE_TENEURRow
            Return CType(Me.NewRow,SPTEN_SPECIALITE_TENEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPTEN_SPECIALITE_TENEURRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPTEN_SPECIALITE_TENEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPTEN_SPECIALITE_TENEURRowChangedEvent) Is Nothing) Then
                RaiseEvent SPTEN_SPECIALITE_TENEURRowChanged(Me, New SPTEN_SPECIALITE_TENEURRowChangeEvent(CType(e.Row,SPTEN_SPECIALITE_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPTEN_SPECIALITE_TENEURRowChangingEvent) Is Nothing) Then
                RaiseEvent SPTEN_SPECIALITE_TENEURRowChanging(Me, New SPTEN_SPECIALITE_TENEURRowChangeEvent(CType(e.Row,SPTEN_SPECIALITE_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPTEN_SPECIALITE_TENEURRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPTEN_SPECIALITE_TENEURRowDeleted(Me, New SPTEN_SPECIALITE_TENEURRowChangeEvent(CType(e.Row,SPTEN_SPECIALITE_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPTEN_SPECIALITE_TENEURRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPTEN_SPECIALITE_TENEURRowDeleting(Me, New SPTEN_SPECIALITE_TENEURRowChangeEvent(CType(e.Row,SPTEN_SPECIALITE_TENEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPTEN_SPECIALITE_TENEURRow(ByVal row As SPTEN_SPECIALITE_TENEURRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPTEN_SPECIALITE_TENEURDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPCPH_SPECIALITE_CLASSEPHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPCPH_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCPH_CPH_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCPH_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPCPH_SPECIALITE_CLASSEPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPH_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPH_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPH_CPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPH_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPH_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPCPH_SPECIALITE_CLASSEPHRow
            Get
                Return CType(Me.Rows(index),SPCPH_SPECIALITE_CLASSEPHRow)
            End Get
        End Property
        
        Public Event SPCPH_SPECIALITE_CLASSEPHRowChanging As SPCPH_SPECIALITE_CLASSEPHRowChangeEventHandler
        
        Public Event SPCPH_SPECIALITE_CLASSEPHRowChanged As SPCPH_SPECIALITE_CLASSEPHRowChangeEventHandler
        
        Public Event SPCPH_SPECIALITE_CLASSEPHRowDeleting As SPCPH_SPECIALITE_CLASSEPHRowChangeEventHandler
        
        Public Event SPCPH_SPECIALITE_CLASSEPHRowDeleted As SPCPH_SPECIALITE_CLASSEPHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPCPH_SPECIALITE_CLASSEPHRow(ByVal row As SPCPH_SPECIALITE_CLASSEPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPCPH_SPECIALITE_CLASSEPHRow(ByVal SPCPH_SP_CODE_FK_PK As Integer, ByVal SPCPH_CPH_CODE_FK_PK As String, ByVal SPCPH_NUMORD As Short) As SPCPH_SPECIALITE_CLASSEPHRow
            Dim rowSPCPH_SPECIALITE_CLASSEPHRow As SPCPH_SPECIALITE_CLASSEPHRow = CType(Me.NewRow,SPCPH_SPECIALITE_CLASSEPHRow)
            rowSPCPH_SPECIALITE_CLASSEPHRow.ItemArray = New Object() {SPCPH_SP_CODE_FK_PK, SPCPH_CPH_CODE_FK_PK, SPCPH_NUMORD}
            Me.Rows.Add(rowSPCPH_SPECIALITE_CLASSEPHRow)
            Return rowSPCPH_SPECIALITE_CLASSEPHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPCPH_SP_CODE_FK_PKSPCPH_CPH_CODE_FK_PK(ByVal SPCPH_SP_CODE_FK_PK As Integer, ByVal SPCPH_CPH_CODE_FK_PK As String) As SPCPH_SPECIALITE_CLASSEPHRow
            Return CType(Me.Rows.Find(New Object() {SPCPH_SP_CODE_FK_PK, SPCPH_CPH_CODE_FK_PK}),SPCPH_SPECIALITE_CLASSEPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPCPH_SPECIALITE_CLASSEPHDataTable = CType(MyBase.Clone,SPCPH_SPECIALITE_CLASSEPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPCPH_SPECIALITE_CLASSEPHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPCPH_SP_CODE_FK_PK = MyBase.Columns("SPCPH_SP_CODE_FK_PK")
            Me.columnSPCPH_CPH_CODE_FK_PK = MyBase.Columns("SPCPH_CPH_CODE_FK_PK")
            Me.columnSPCPH_NUMORD = MyBase.Columns("SPCPH_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPCPH_SP_CODE_FK_PK = New System.Data.DataColumn("SPCPH_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPH_SP_CODE_FK_PK)
            Me.columnSPCPH_CPH_CODE_FK_PK = New System.Data.DataColumn("SPCPH_CPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPH_CPH_CODE_FK_PK)
            Me.columnSPCPH_NUMORD = New System.Data.DataColumn("SPCPH_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPH_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPCPH_SP_CODE_FK_PK, Me.columnSPCPH_CPH_CODE_FK_PK}, true))
            Me.columnSPCPH_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPCPH_SPECIALITE_CLASSEPHRow() As SPCPH_SPECIALITE_CLASSEPHRow
            Return CType(Me.NewRow,SPCPH_SPECIALITE_CLASSEPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPCPH_SPECIALITE_CLASSEPHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPCPH_SPECIALITE_CLASSEPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPCPH_SPECIALITE_CLASSEPHRowChangedEvent) Is Nothing) Then
                RaiseEvent SPCPH_SPECIALITE_CLASSEPHRowChanged(Me, New SPCPH_SPECIALITE_CLASSEPHRowChangeEvent(CType(e.Row,SPCPH_SPECIALITE_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPCPH_SPECIALITE_CLASSEPHRowChangingEvent) Is Nothing) Then
                RaiseEvent SPCPH_SPECIALITE_CLASSEPHRowChanging(Me, New SPCPH_SPECIALITE_CLASSEPHRowChangeEvent(CType(e.Row,SPCPH_SPECIALITE_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPCPH_SPECIALITE_CLASSEPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPCPH_SPECIALITE_CLASSEPHRowDeleted(Me, New SPCPH_SPECIALITE_CLASSEPHRowChangeEvent(CType(e.Row,SPCPH_SPECIALITE_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPCPH_SPECIALITE_CLASSEPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPCPH_SPECIALITE_CLASSEPHRowDeleting(Me, New SPCPH_SPECIALITE_CLASSEPHRowChangeEvent(CType(e.Row,SPCPH_SPECIALITE_CLASSEPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPCPH_SPECIALITE_CLASSEPHRow(ByVal row As SPCPH_SPECIALITE_CLASSEPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPCPH_SPECIALITE_CLASSEPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPDDD_DOSE_USUELLE_JOURDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPDDD_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPDDD_ATCDDD_CATC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPDDD_ATCDDD_DOSAGE_PK As System.Data.DataColumn
        
        Private columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPDDD_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPDDD_DOSE_USUELLE_JOUR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPDDD_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPDDD_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPDDD_ATCDDD_CATC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPDDD_ATCDDD_CDF_VO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPDDD_ATCDDD_DOSAGE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPDDD_ATCDDD_DOSAGE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPDDD_ATCDDD_CDF_UD_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPDDD_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPDDD_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPDDD_DOSE_USUELLE_JOURRow
            Get
                Return CType(Me.Rows(index),SPDDD_DOSE_USUELLE_JOURRow)
            End Get
        End Property
        
        Public Event SPDDD_DOSE_USUELLE_JOURRowChanging As SPDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        Public Event SPDDD_DOSE_USUELLE_JOURRowChanged As SPDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        Public Event SPDDD_DOSE_USUELLE_JOURRowDeleting As SPDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        Public Event SPDDD_DOSE_USUELLE_JOURRowDeleted As SPDDD_DOSE_USUELLE_JOURRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPDDD_DOSE_USUELLE_JOURRow(ByVal row As SPDDD_DOSE_USUELLE_JOURRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPDDD_DOSE_USUELLE_JOURRow(ByVal SPDDD_SP_CODE_FK_PK As Integer, ByVal SPDDD_ATCDDD_CATC_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_DOSAGE_PK As Decimal, ByVal SPDDD_ATCDDD_CDF_UD_CODE_FK_PK As String, ByVal SPDDD_NUMORD As Short) As SPDDD_DOSE_USUELLE_JOURRow
            Dim rowSPDDD_DOSE_USUELLE_JOURRow As SPDDD_DOSE_USUELLE_JOURRow = CType(Me.NewRow,SPDDD_DOSE_USUELLE_JOURRow)
            rowSPDDD_DOSE_USUELLE_JOURRow.ItemArray = New Object() {SPDDD_SP_CODE_FK_PK, SPDDD_ATCDDD_CATC_CODE_FK_PK, SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, SPDDD_ATCDDD_DOSAGE_PK, SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, SPDDD_NUMORD}
            Me.Rows.Add(rowSPDDD_DOSE_USUELLE_JOURRow)
            Return rowSPDDD_DOSE_USUELLE_JOURRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPDDD_SP_CODE_FK_PKSPDDD_ATCDDD_CATC_CODE_FK_PKSPDDD_ATCDDD_CDF_VO_CODE_FK_PKSPDDD_ATCDDD_DOSAGE_PKSPDDD_ATCDDD_CDF_UD_CODE_FK_PK(ByVal SPDDD_SP_CODE_FK_PK As Integer, ByVal SPDDD_ATCDDD_CATC_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_DOSAGE_PK As Decimal, ByVal SPDDD_ATCDDD_CDF_UD_CODE_FK_PK As String) As SPDDD_DOSE_USUELLE_JOURRow
            Return CType(Me.Rows.Find(New Object() {SPDDD_SP_CODE_FK_PK, SPDDD_ATCDDD_CATC_CODE_FK_PK, SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, SPDDD_ATCDDD_DOSAGE_PK, SPDDD_ATCDDD_CDF_UD_CODE_FK_PK}),SPDDD_DOSE_USUELLE_JOURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPDDD_DOSE_USUELLE_JOURDataTable = CType(MyBase.Clone,SPDDD_DOSE_USUELLE_JOURDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPDDD_DOSE_USUELLE_JOURDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPDDD_SP_CODE_FK_PK = MyBase.Columns("SPDDD_SP_CODE_FK_PK")
            Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK = MyBase.Columns("SPDDD_ATCDDD_CATC_CODE_FK_PK")
            Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK = MyBase.Columns("SPDDD_ATCDDD_CDF_VO_CODE_FK_PK")
            Me.columnSPDDD_ATCDDD_DOSAGE_PK = MyBase.Columns("SPDDD_ATCDDD_DOSAGE_PK")
            Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK = MyBase.Columns("SPDDD_ATCDDD_CDF_UD_CODE_FK_PK")
            Me.columnSPDDD_NUMORD = MyBase.Columns("SPDDD_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPDDD_SP_CODE_FK_PK = New System.Data.DataColumn("SPDDD_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPDDD_SP_CODE_FK_PK)
            Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK = New System.Data.DataColumn("SPDDD_ATCDDD_CATC_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK)
            Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK = New System.Data.DataColumn("SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK)
            Me.columnSPDDD_ATCDDD_DOSAGE_PK = New System.Data.DataColumn("SPDDD_ATCDDD_DOSAGE_PK", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPDDD_ATCDDD_DOSAGE_PK)
            Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK = New System.Data.DataColumn("SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK)
            Me.columnSPDDD_NUMORD = New System.Data.DataColumn("SPDDD_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPDDD_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPDDD_SP_CODE_FK_PK, Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK, Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK, Me.columnSPDDD_ATCDDD_DOSAGE_PK, Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK}, true))
            Me.columnSPDDD_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK.AllowDBNull = false
            Me.columnSPDDD_ATCDDD_CATC_CODE_FK_PK.MaxLength = 10
            Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPDDD_ATCDDD_CDF_VO_CODE_FK_PK.MaxLength = 10
            Me.columnSPDDD_ATCDDD_DOSAGE_PK.AllowDBNull = false
            Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK.AllowDBNull = false
            Me.columnSPDDD_ATCDDD_CDF_UD_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPDDD_DOSE_USUELLE_JOURRow() As SPDDD_DOSE_USUELLE_JOURRow
            Return CType(Me.NewRow,SPDDD_DOSE_USUELLE_JOURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPDDD_DOSE_USUELLE_JOURRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPDDD_DOSE_USUELLE_JOURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPDDD_DOSE_USUELLE_JOURRowChangedEvent) Is Nothing) Then
                RaiseEvent SPDDD_DOSE_USUELLE_JOURRowChanged(Me, New SPDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,SPDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPDDD_DOSE_USUELLE_JOURRowChangingEvent) Is Nothing) Then
                RaiseEvent SPDDD_DOSE_USUELLE_JOURRowChanging(Me, New SPDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,SPDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPDDD_DOSE_USUELLE_JOURRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPDDD_DOSE_USUELLE_JOURRowDeleted(Me, New SPDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,SPDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPDDD_DOSE_USUELLE_JOURRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPDDD_DOSE_USUELLE_JOURRowDeleting(Me, New SPDDD_DOSE_USUELLE_JOURRowChangeEvent(CType(e.Row,SPDDD_DOSE_USUELLE_JOURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPDDD_DOSE_USUELLE_JOURRow(ByVal row As SPDDD_DOSE_USUELLE_JOURRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPDDD_DOSE_USUELLE_JOURDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPCH_SPECIALITE_CHOIXDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPCH_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCH_CH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPCH_SPECIALITE_CHOIX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCH_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCH_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCH_CH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCH_CH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPCH_SPECIALITE_CHOIXRow
            Get
                Return CType(Me.Rows(index),SPCH_SPECIALITE_CHOIXRow)
            End Get
        End Property
        
        Public Event SPCH_SPECIALITE_CHOIXRowChanging As SPCH_SPECIALITE_CHOIXRowChangeEventHandler
        
        Public Event SPCH_SPECIALITE_CHOIXRowChanged As SPCH_SPECIALITE_CHOIXRowChangeEventHandler
        
        Public Event SPCH_SPECIALITE_CHOIXRowDeleting As SPCH_SPECIALITE_CHOIXRowChangeEventHandler
        
        Public Event SPCH_SPECIALITE_CHOIXRowDeleted As SPCH_SPECIALITE_CHOIXRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPCH_SPECIALITE_CHOIXRow(ByVal row As SPCH_SPECIALITE_CHOIXRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPCH_SPECIALITE_CHOIXRow(ByVal SPCH_SP_CODE_FK_PK As Integer, ByVal SPCH_CH_CODE_FK_PK As Integer) As SPCH_SPECIALITE_CHOIXRow
            Dim rowSPCH_SPECIALITE_CHOIXRow As SPCH_SPECIALITE_CHOIXRow = CType(Me.NewRow,SPCH_SPECIALITE_CHOIXRow)
            rowSPCH_SPECIALITE_CHOIXRow.ItemArray = New Object() {SPCH_SP_CODE_FK_PK, SPCH_CH_CODE_FK_PK}
            Me.Rows.Add(rowSPCH_SPECIALITE_CHOIXRow)
            Return rowSPCH_SPECIALITE_CHOIXRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPCH_SP_CODE_FK_PKSPCH_CH_CODE_FK_PK(ByVal SPCH_SP_CODE_FK_PK As Integer, ByVal SPCH_CH_CODE_FK_PK As Integer) As SPCH_SPECIALITE_CHOIXRow
            Return CType(Me.Rows.Find(New Object() {SPCH_SP_CODE_FK_PK, SPCH_CH_CODE_FK_PK}),SPCH_SPECIALITE_CHOIXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPCH_SPECIALITE_CHOIXDataTable = CType(MyBase.Clone,SPCH_SPECIALITE_CHOIXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPCH_SPECIALITE_CHOIXDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPCH_SP_CODE_FK_PK = MyBase.Columns("SPCH_SP_CODE_FK_PK")
            Me.columnSPCH_CH_CODE_FK_PK = MyBase.Columns("SPCH_CH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPCH_SP_CODE_FK_PK = New System.Data.DataColumn("SPCH_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCH_SP_CODE_FK_PK)
            Me.columnSPCH_CH_CODE_FK_PK = New System.Data.DataColumn("SPCH_CH_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCH_CH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPCH_SP_CODE_FK_PK, Me.columnSPCH_CH_CODE_FK_PK}, true))
            Me.columnSPCH_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCH_CH_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPCH_SPECIALITE_CHOIXRow() As SPCH_SPECIALITE_CHOIXRow
            Return CType(Me.NewRow,SPCH_SPECIALITE_CHOIXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPCH_SPECIALITE_CHOIXRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPCH_SPECIALITE_CHOIXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPCH_SPECIALITE_CHOIXRowChangedEvent) Is Nothing) Then
                RaiseEvent SPCH_SPECIALITE_CHOIXRowChanged(Me, New SPCH_SPECIALITE_CHOIXRowChangeEvent(CType(e.Row,SPCH_SPECIALITE_CHOIXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPCH_SPECIALITE_CHOIXRowChangingEvent) Is Nothing) Then
                RaiseEvent SPCH_SPECIALITE_CHOIXRowChanging(Me, New SPCH_SPECIALITE_CHOIXRowChangeEvent(CType(e.Row,SPCH_SPECIALITE_CHOIXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPCH_SPECIALITE_CHOIXRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPCH_SPECIALITE_CHOIXRowDeleted(Me, New SPCH_SPECIALITE_CHOIXRowChangeEvent(CType(e.Row,SPCH_SPECIALITE_CHOIXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPCH_SPECIALITE_CHOIXRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPCH_SPECIALITE_CHOIXRowDeleting(Me, New SPCH_SPECIALITE_CHOIXRowChangeEvent(CType(e.Row,SPCH_SPECIALITE_CHOIXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPCH_SPECIALITE_CHOIXRow(ByVal row As SPCH_SPECIALITE_CHOIXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPCH_SPECIALITE_CHOIXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPRMO_SPECIALITE_RMODataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPRMO_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPRMO_RMO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPRMO_CLRMO_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPRMO_SPECIALITE_RMO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPRMO_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPRMO_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPRMO_RMO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPRMO_RMO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPRMO_CLRMO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPRMO_CLRMO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPRMO_SPECIALITE_RMORow
            Get
                Return CType(Me.Rows(index),SPRMO_SPECIALITE_RMORow)
            End Get
        End Property
        
        Public Event SPRMO_SPECIALITE_RMORowChanging As SPRMO_SPECIALITE_RMORowChangeEventHandler
        
        Public Event SPRMO_SPECIALITE_RMORowChanged As SPRMO_SPECIALITE_RMORowChangeEventHandler
        
        Public Event SPRMO_SPECIALITE_RMORowDeleting As SPRMO_SPECIALITE_RMORowChangeEventHandler
        
        Public Event SPRMO_SPECIALITE_RMORowDeleted As SPRMO_SPECIALITE_RMORowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPRMO_SPECIALITE_RMORow(ByVal row As SPRMO_SPECIALITE_RMORow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPRMO_SPECIALITE_RMORow(ByVal SPRMO_SP_CODE_FK_PK As Integer, ByVal SPRMO_RMO_CODE_FK_PK As Byte, ByVal SPRMO_CLRMO_CODE_FK_PK As Byte) As SPRMO_SPECIALITE_RMORow
            Dim rowSPRMO_SPECIALITE_RMORow As SPRMO_SPECIALITE_RMORow = CType(Me.NewRow,SPRMO_SPECIALITE_RMORow)
            rowSPRMO_SPECIALITE_RMORow.ItemArray = New Object() {SPRMO_SP_CODE_FK_PK, SPRMO_RMO_CODE_FK_PK, SPRMO_CLRMO_CODE_FK_PK}
            Me.Rows.Add(rowSPRMO_SPECIALITE_RMORow)
            Return rowSPRMO_SPECIALITE_RMORow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPRMO_SP_CODE_FK_PKSPRMO_RMO_CODE_FK_PKSPRMO_CLRMO_CODE_FK_PK(ByVal SPRMO_SP_CODE_FK_PK As Integer, ByVal SPRMO_RMO_CODE_FK_PK As Byte, ByVal SPRMO_CLRMO_CODE_FK_PK As Byte) As SPRMO_SPECIALITE_RMORow
            Return CType(Me.Rows.Find(New Object() {SPRMO_SP_CODE_FK_PK, SPRMO_RMO_CODE_FK_PK, SPRMO_CLRMO_CODE_FK_PK}),SPRMO_SPECIALITE_RMORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPRMO_SPECIALITE_RMODataTable = CType(MyBase.Clone,SPRMO_SPECIALITE_RMODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPRMO_SPECIALITE_RMODataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPRMO_SP_CODE_FK_PK = MyBase.Columns("SPRMO_SP_CODE_FK_PK")
            Me.columnSPRMO_RMO_CODE_FK_PK = MyBase.Columns("SPRMO_RMO_CODE_FK_PK")
            Me.columnSPRMO_CLRMO_CODE_FK_PK = MyBase.Columns("SPRMO_CLRMO_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPRMO_SP_CODE_FK_PK = New System.Data.DataColumn("SPRMO_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPRMO_SP_CODE_FK_PK)
            Me.columnSPRMO_RMO_CODE_FK_PK = New System.Data.DataColumn("SPRMO_RMO_CODE_FK_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPRMO_RMO_CODE_FK_PK)
            Me.columnSPRMO_CLRMO_CODE_FK_PK = New System.Data.DataColumn("SPRMO_CLRMO_CODE_FK_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPRMO_CLRMO_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPRMO_SP_CODE_FK_PK, Me.columnSPRMO_RMO_CODE_FK_PK, Me.columnSPRMO_CLRMO_CODE_FK_PK}, true))
            Me.columnSPRMO_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPRMO_RMO_CODE_FK_PK.AllowDBNull = false
            Me.columnSPRMO_CLRMO_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPRMO_SPECIALITE_RMORow() As SPRMO_SPECIALITE_RMORow
            Return CType(Me.NewRow,SPRMO_SPECIALITE_RMORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPRMO_SPECIALITE_RMORow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPRMO_SPECIALITE_RMORow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPRMO_SPECIALITE_RMORowChangedEvent) Is Nothing) Then
                RaiseEvent SPRMO_SPECIALITE_RMORowChanged(Me, New SPRMO_SPECIALITE_RMORowChangeEvent(CType(e.Row,SPRMO_SPECIALITE_RMORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPRMO_SPECIALITE_RMORowChangingEvent) Is Nothing) Then
                RaiseEvent SPRMO_SPECIALITE_RMORowChanging(Me, New SPRMO_SPECIALITE_RMORowChangeEvent(CType(e.Row,SPRMO_SPECIALITE_RMORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPRMO_SPECIALITE_RMORowDeletedEvent) Is Nothing) Then
                RaiseEvent SPRMO_SPECIALITE_RMORowDeleted(Me, New SPRMO_SPECIALITE_RMORowChangeEvent(CType(e.Row,SPRMO_SPECIALITE_RMORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPRMO_SPECIALITE_RMORowDeletingEvent) Is Nothing) Then
                RaiseEvent SPRMO_SPECIALITE_RMORowDeleting(Me, New SPRMO_SPECIALITE_RMORowChangeEvent(CType(e.Row,SPRMO_SPECIALITE_RMORow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPRMO_SPECIALITE_RMORow(ByVal row As SPRMO_SPECIALITE_RMORow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPRMO_SPECIALITE_RMODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPFTR_SPECIALITE_TRANSPARENCEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPFTR_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFTR_FTR_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPFTR_SPECIALITE_TRANSPARENCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFTR_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFTR_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFTR_FTR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFTR_FTR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPFTR_SPECIALITE_TRANSPARENCERow
            Get
                Return CType(Me.Rows(index),SPFTR_SPECIALITE_TRANSPARENCERow)
            End Get
        End Property
        
        Public Event SPFTR_SPECIALITE_TRANSPARENCERowChanging As SPFTR_SPECIALITE_TRANSPARENCERowChangeEventHandler
        
        Public Event SPFTR_SPECIALITE_TRANSPARENCERowChanged As SPFTR_SPECIALITE_TRANSPARENCERowChangeEventHandler
        
        Public Event SPFTR_SPECIALITE_TRANSPARENCERowDeleting As SPFTR_SPECIALITE_TRANSPARENCERowChangeEventHandler
        
        Public Event SPFTR_SPECIALITE_TRANSPARENCERowDeleted As SPFTR_SPECIALITE_TRANSPARENCERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPFTR_SPECIALITE_TRANSPARENCERow(ByVal row As SPFTR_SPECIALITE_TRANSPARENCERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPFTR_SPECIALITE_TRANSPARENCERow(ByVal SPFTR_SP_CODE_FK_PK As Integer, ByVal SPFTR_FTR_CODE_FK_PK As Integer) As SPFTR_SPECIALITE_TRANSPARENCERow
            Dim rowSPFTR_SPECIALITE_TRANSPARENCERow As SPFTR_SPECIALITE_TRANSPARENCERow = CType(Me.NewRow,SPFTR_SPECIALITE_TRANSPARENCERow)
            rowSPFTR_SPECIALITE_TRANSPARENCERow.ItemArray = New Object() {SPFTR_SP_CODE_FK_PK, SPFTR_FTR_CODE_FK_PK}
            Me.Rows.Add(rowSPFTR_SPECIALITE_TRANSPARENCERow)
            Return rowSPFTR_SPECIALITE_TRANSPARENCERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPFTR_SP_CODE_FK_PKSPFTR_FTR_CODE_FK_PK(ByVal SPFTR_SP_CODE_FK_PK As Integer, ByVal SPFTR_FTR_CODE_FK_PK As Integer) As SPFTR_SPECIALITE_TRANSPARENCERow
            Return CType(Me.Rows.Find(New Object() {SPFTR_SP_CODE_FK_PK, SPFTR_FTR_CODE_FK_PK}),SPFTR_SPECIALITE_TRANSPARENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPFTR_SPECIALITE_TRANSPARENCEDataTable = CType(MyBase.Clone,SPFTR_SPECIALITE_TRANSPARENCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPFTR_SPECIALITE_TRANSPARENCEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPFTR_SP_CODE_FK_PK = MyBase.Columns("SPFTR_SP_CODE_FK_PK")
            Me.columnSPFTR_FTR_CODE_FK_PK = MyBase.Columns("SPFTR_FTR_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPFTR_SP_CODE_FK_PK = New System.Data.DataColumn("SPFTR_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFTR_SP_CODE_FK_PK)
            Me.columnSPFTR_FTR_CODE_FK_PK = New System.Data.DataColumn("SPFTR_FTR_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFTR_FTR_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPFTR_SP_CODE_FK_PK, Me.columnSPFTR_FTR_CODE_FK_PK}, true))
            Me.columnSPFTR_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFTR_FTR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPFTR_SPECIALITE_TRANSPARENCERow() As SPFTR_SPECIALITE_TRANSPARENCERow
            Return CType(Me.NewRow,SPFTR_SPECIALITE_TRANSPARENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPFTR_SPECIALITE_TRANSPARENCERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPFTR_SPECIALITE_TRANSPARENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPFTR_SPECIALITE_TRANSPARENCERowChangedEvent) Is Nothing) Then
                RaiseEvent SPFTR_SPECIALITE_TRANSPARENCERowChanged(Me, New SPFTR_SPECIALITE_TRANSPARENCERowChangeEvent(CType(e.Row,SPFTR_SPECIALITE_TRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPFTR_SPECIALITE_TRANSPARENCERowChangingEvent) Is Nothing) Then
                RaiseEvent SPFTR_SPECIALITE_TRANSPARENCERowChanging(Me, New SPFTR_SPECIALITE_TRANSPARENCERowChangeEvent(CType(e.Row,SPFTR_SPECIALITE_TRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPFTR_SPECIALITE_TRANSPARENCERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPFTR_SPECIALITE_TRANSPARENCERowDeleted(Me, New SPFTR_SPECIALITE_TRANSPARENCERowChangeEvent(CType(e.Row,SPFTR_SPECIALITE_TRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPFTR_SPECIALITE_TRANSPARENCERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPFTR_SPECIALITE_TRANSPARENCERowDeleting(Me, New SPFTR_SPECIALITE_TRANSPARENCERowChangeEvent(CType(e.Row,SPFTR_SPECIALITE_TRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPFTR_SPECIALITE_TRANSPARENCERow(ByVal row As SPFTR_SPECIALITE_TRANSPARENCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPFTR_SPECIALITE_TRANSPARENCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPFTH_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFTH_FTH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPFTH_SPEC_INFOTHERAPEUTIQUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFTH_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFTH_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFTH_FTH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFTH_FTH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPFTH_SPEC_INFOTHERAPEUTIQUERow
            Get
                Return CType(Me.Rows(index),SPFTH_SPEC_INFOTHERAPEUTIQUERow)
            End Get
        End Property
        
        Public Event SPFTH_SPEC_INFOTHERAPEUTIQUERowChanging As SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEventHandler
        
        Public Event SPFTH_SPEC_INFOTHERAPEUTIQUERowChanged As SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEventHandler
        
        Public Event SPFTH_SPEC_INFOTHERAPEUTIQUERowDeleting As SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEventHandler
        
        Public Event SPFTH_SPEC_INFOTHERAPEUTIQUERowDeleted As SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPFTH_SPEC_INFOTHERAPEUTIQUERow(ByVal row As SPFTH_SPEC_INFOTHERAPEUTIQUERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPFTH_SPEC_INFOTHERAPEUTIQUERow(ByVal SPFTH_SP_CODE_FK_PK As Integer, ByVal SPFTH_FTH_CODE_FK_PK As Integer) As SPFTH_SPEC_INFOTHERAPEUTIQUERow
            Dim rowSPFTH_SPEC_INFOTHERAPEUTIQUERow As SPFTH_SPEC_INFOTHERAPEUTIQUERow = CType(Me.NewRow,SPFTH_SPEC_INFOTHERAPEUTIQUERow)
            rowSPFTH_SPEC_INFOTHERAPEUTIQUERow.ItemArray = New Object() {SPFTH_SP_CODE_FK_PK, SPFTH_FTH_CODE_FK_PK}
            Me.Rows.Add(rowSPFTH_SPEC_INFOTHERAPEUTIQUERow)
            Return rowSPFTH_SPEC_INFOTHERAPEUTIQUERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPFTH_SP_CODE_FK_PKSPFTH_FTH_CODE_FK_PK(ByVal SPFTH_SP_CODE_FK_PK As Integer, ByVal SPFTH_FTH_CODE_FK_PK As Integer) As SPFTH_SPEC_INFOTHERAPEUTIQUERow
            Return CType(Me.Rows.Find(New Object() {SPFTH_SP_CODE_FK_PK, SPFTH_FTH_CODE_FK_PK}),SPFTH_SPEC_INFOTHERAPEUTIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable = CType(MyBase.Clone,SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPFTH_SP_CODE_FK_PK = MyBase.Columns("SPFTH_SP_CODE_FK_PK")
            Me.columnSPFTH_FTH_CODE_FK_PK = MyBase.Columns("SPFTH_FTH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPFTH_SP_CODE_FK_PK = New System.Data.DataColumn("SPFTH_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFTH_SP_CODE_FK_PK)
            Me.columnSPFTH_FTH_CODE_FK_PK = New System.Data.DataColumn("SPFTH_FTH_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFTH_FTH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPFTH_SP_CODE_FK_PK, Me.columnSPFTH_FTH_CODE_FK_PK}, true))
            Me.columnSPFTH_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFTH_FTH_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPFTH_SPEC_INFOTHERAPEUTIQUERow() As SPFTH_SPEC_INFOTHERAPEUTIQUERow
            Return CType(Me.NewRow,SPFTH_SPEC_INFOTHERAPEUTIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPFTH_SPEC_INFOTHERAPEUTIQUERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPFTH_SPEC_INFOTHERAPEUTIQUERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPFTH_SPEC_INFOTHERAPEUTIQUERowChangedEvent) Is Nothing) Then
                RaiseEvent SPFTH_SPEC_INFOTHERAPEUTIQUERowChanged(Me, New SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEvent(CType(e.Row,SPFTH_SPEC_INFOTHERAPEUTIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPFTH_SPEC_INFOTHERAPEUTIQUERowChangingEvent) Is Nothing) Then
                RaiseEvent SPFTH_SPEC_INFOTHERAPEUTIQUERowChanging(Me, New SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEvent(CType(e.Row,SPFTH_SPEC_INFOTHERAPEUTIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPFTH_SPEC_INFOTHERAPEUTIQUERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPFTH_SPEC_INFOTHERAPEUTIQUERowDeleted(Me, New SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEvent(CType(e.Row,SPFTH_SPEC_INFOTHERAPEUTIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPFTH_SPEC_INFOTHERAPEUTIQUERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPFTH_SPEC_INFOTHERAPEUTIQUERowDeleting(Me, New SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEvent(CType(e.Row,SPFTH_SPEC_INFOTHERAPEUTIQUERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPFTH_SPEC_INFOTHERAPEUTIQUERow(ByVal row As SPFTH_SPEC_INFOTHERAPEUTIQUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPATR_SPEC_AVISTRANSPARENCEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPATR_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPATR_ATR_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPATR_SPEC_AVISTRANSPARENCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPATR_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPATR_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPATR_ATR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPATR_ATR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPATR_SPEC_AVISTRANSPARENCERow
            Get
                Return CType(Me.Rows(index),SPATR_SPEC_AVISTRANSPARENCERow)
            End Get
        End Property
        
        Public Event SPATR_SPEC_AVISTRANSPARENCERowChanging As SPATR_SPEC_AVISTRANSPARENCERowChangeEventHandler
        
        Public Event SPATR_SPEC_AVISTRANSPARENCERowChanged As SPATR_SPEC_AVISTRANSPARENCERowChangeEventHandler
        
        Public Event SPATR_SPEC_AVISTRANSPARENCERowDeleting As SPATR_SPEC_AVISTRANSPARENCERowChangeEventHandler
        
        Public Event SPATR_SPEC_AVISTRANSPARENCERowDeleted As SPATR_SPEC_AVISTRANSPARENCERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPATR_SPEC_AVISTRANSPARENCERow(ByVal row As SPATR_SPEC_AVISTRANSPARENCERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPATR_SPEC_AVISTRANSPARENCERow(ByVal SPATR_SP_CODE_FK_PK As Integer, ByVal SPATR_ATR_CODE_FK_PK As Integer) As SPATR_SPEC_AVISTRANSPARENCERow
            Dim rowSPATR_SPEC_AVISTRANSPARENCERow As SPATR_SPEC_AVISTRANSPARENCERow = CType(Me.NewRow,SPATR_SPEC_AVISTRANSPARENCERow)
            rowSPATR_SPEC_AVISTRANSPARENCERow.ItemArray = New Object() {SPATR_SP_CODE_FK_PK, SPATR_ATR_CODE_FK_PK}
            Me.Rows.Add(rowSPATR_SPEC_AVISTRANSPARENCERow)
            Return rowSPATR_SPEC_AVISTRANSPARENCERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPATR_SP_CODE_FK_PKSPATR_ATR_CODE_FK_PK(ByVal SPATR_SP_CODE_FK_PK As Integer, ByVal SPATR_ATR_CODE_FK_PK As Integer) As SPATR_SPEC_AVISTRANSPARENCERow
            Return CType(Me.Rows.Find(New Object() {SPATR_SP_CODE_FK_PK, SPATR_ATR_CODE_FK_PK}),SPATR_SPEC_AVISTRANSPARENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPATR_SPEC_AVISTRANSPARENCEDataTable = CType(MyBase.Clone,SPATR_SPEC_AVISTRANSPARENCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPATR_SPEC_AVISTRANSPARENCEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPATR_SP_CODE_FK_PK = MyBase.Columns("SPATR_SP_CODE_FK_PK")
            Me.columnSPATR_ATR_CODE_FK_PK = MyBase.Columns("SPATR_ATR_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPATR_SP_CODE_FK_PK = New System.Data.DataColumn("SPATR_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPATR_SP_CODE_FK_PK)
            Me.columnSPATR_ATR_CODE_FK_PK = New System.Data.DataColumn("SPATR_ATR_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPATR_ATR_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPATR_SP_CODE_FK_PK, Me.columnSPATR_ATR_CODE_FK_PK}, true))
            Me.columnSPATR_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPATR_ATR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPATR_SPEC_AVISTRANSPARENCERow() As SPATR_SPEC_AVISTRANSPARENCERow
            Return CType(Me.NewRow,SPATR_SPEC_AVISTRANSPARENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPATR_SPEC_AVISTRANSPARENCERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPATR_SPEC_AVISTRANSPARENCERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPATR_SPEC_AVISTRANSPARENCERowChangedEvent) Is Nothing) Then
                RaiseEvent SPATR_SPEC_AVISTRANSPARENCERowChanged(Me, New SPATR_SPEC_AVISTRANSPARENCERowChangeEvent(CType(e.Row,SPATR_SPEC_AVISTRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPATR_SPEC_AVISTRANSPARENCERowChangingEvent) Is Nothing) Then
                RaiseEvent SPATR_SPEC_AVISTRANSPARENCERowChanging(Me, New SPATR_SPEC_AVISTRANSPARENCERowChangeEvent(CType(e.Row,SPATR_SPEC_AVISTRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPATR_SPEC_AVISTRANSPARENCERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPATR_SPEC_AVISTRANSPARENCERowDeleted(Me, New SPATR_SPEC_AVISTRANSPARENCERowChangeEvent(CType(e.Row,SPATR_SPEC_AVISTRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPATR_SPEC_AVISTRANSPARENCERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPATR_SPEC_AVISTRANSPARENCERowDeleting(Me, New SPATR_SPEC_AVISTRANSPARENCERowChangeEvent(CType(e.Row,SPATR_SPEC_AVISTRANSPARENCERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPATR_SPEC_AVISTRANSPARENCERow(ByVal row As SPATR_SPEC_AVISTRANSPARENCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPATR_SPEC_AVISTRANSPARENCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPSMR_SERVICE_MEDICAL_RENDUDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPSMR_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPSMR_CDF_SMR_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPSMR_NUM_ORD_PK As System.Data.DataColumn
        
        Private columnSPSMR_DATE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPSMR_SERVICE_MEDICAL_RENDU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPSMR_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPSMR_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPSMR_CDF_SMR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPSMR_CDF_SMR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPSMR_NUM_ORD_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPSMR_NUM_ORD_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPSMR_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPSMR_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPSMR_SERVICE_MEDICAL_RENDURow
            Get
                Return CType(Me.Rows(index),SPSMR_SERVICE_MEDICAL_RENDURow)
            End Get
        End Property
        
        Public Event SPSMR_SERVICE_MEDICAL_RENDURowChanging As SPSMR_SERVICE_MEDICAL_RENDURowChangeEventHandler
        
        Public Event SPSMR_SERVICE_MEDICAL_RENDURowChanged As SPSMR_SERVICE_MEDICAL_RENDURowChangeEventHandler
        
        Public Event SPSMR_SERVICE_MEDICAL_RENDURowDeleting As SPSMR_SERVICE_MEDICAL_RENDURowChangeEventHandler
        
        Public Event SPSMR_SERVICE_MEDICAL_RENDURowDeleted As SPSMR_SERVICE_MEDICAL_RENDURowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPSMR_SERVICE_MEDICAL_RENDURow(ByVal row As SPSMR_SERVICE_MEDICAL_RENDURow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPSMR_SERVICE_MEDICAL_RENDURow(ByVal SPSMR_SP_CODE_FK_PK As Integer, ByVal SPSMR_CDF_SMR_CODE_FK_PK As String, ByVal SPSMR_NUM_ORD_PK As Short, ByVal SPSMR_DATE As Date) As SPSMR_SERVICE_MEDICAL_RENDURow
            Dim rowSPSMR_SERVICE_MEDICAL_RENDURow As SPSMR_SERVICE_MEDICAL_RENDURow = CType(Me.NewRow,SPSMR_SERVICE_MEDICAL_RENDURow)
            rowSPSMR_SERVICE_MEDICAL_RENDURow.ItemArray = New Object() {SPSMR_SP_CODE_FK_PK, SPSMR_CDF_SMR_CODE_FK_PK, SPSMR_NUM_ORD_PK, SPSMR_DATE}
            Me.Rows.Add(rowSPSMR_SERVICE_MEDICAL_RENDURow)
            Return rowSPSMR_SERVICE_MEDICAL_RENDURow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPSMR_SP_CODE_FK_PKSPSMR_CDF_SMR_CODE_FK_PKSPSMR_NUM_ORD_PK(ByVal SPSMR_SP_CODE_FK_PK As Integer, ByVal SPSMR_CDF_SMR_CODE_FK_PK As String, ByVal SPSMR_NUM_ORD_PK As Short) As SPSMR_SERVICE_MEDICAL_RENDURow
            Return CType(Me.Rows.Find(New Object() {SPSMR_SP_CODE_FK_PK, SPSMR_CDF_SMR_CODE_FK_PK, SPSMR_NUM_ORD_PK}),SPSMR_SERVICE_MEDICAL_RENDURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPSMR_SERVICE_MEDICAL_RENDUDataTable = CType(MyBase.Clone,SPSMR_SERVICE_MEDICAL_RENDUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPSMR_SERVICE_MEDICAL_RENDUDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPSMR_SP_CODE_FK_PK = MyBase.Columns("SPSMR_SP_CODE_FK_PK")
            Me.columnSPSMR_CDF_SMR_CODE_FK_PK = MyBase.Columns("SPSMR_CDF_SMR_CODE_FK_PK")
            Me.columnSPSMR_NUM_ORD_PK = MyBase.Columns("SPSMR_NUM_ORD_PK")
            Me.columnSPSMR_DATE = MyBase.Columns("SPSMR_DATE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPSMR_SP_CODE_FK_PK = New System.Data.DataColumn("SPSMR_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPSMR_SP_CODE_FK_PK)
            Me.columnSPSMR_CDF_SMR_CODE_FK_PK = New System.Data.DataColumn("SPSMR_CDF_SMR_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPSMR_CDF_SMR_CODE_FK_PK)
            Me.columnSPSMR_NUM_ORD_PK = New System.Data.DataColumn("SPSMR_NUM_ORD_PK", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPSMR_NUM_ORD_PK)
            Me.columnSPSMR_DATE = New System.Data.DataColumn("SPSMR_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPSMR_DATE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPSMR_SP_CODE_FK_PK, Me.columnSPSMR_CDF_SMR_CODE_FK_PK, Me.columnSPSMR_NUM_ORD_PK}, true))
            Me.columnSPSMR_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPSMR_CDF_SMR_CODE_FK_PK.AllowDBNull = false
            Me.columnSPSMR_CDF_SMR_CODE_FK_PK.MaxLength = 10
            Me.columnSPSMR_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPSMR_SERVICE_MEDICAL_RENDURow() As SPSMR_SERVICE_MEDICAL_RENDURow
            Return CType(Me.NewRow,SPSMR_SERVICE_MEDICAL_RENDURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPSMR_SERVICE_MEDICAL_RENDURow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPSMR_SERVICE_MEDICAL_RENDURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPSMR_SERVICE_MEDICAL_RENDURowChangedEvent) Is Nothing) Then
                RaiseEvent SPSMR_SERVICE_MEDICAL_RENDURowChanged(Me, New SPSMR_SERVICE_MEDICAL_RENDURowChangeEvent(CType(e.Row,SPSMR_SERVICE_MEDICAL_RENDURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPSMR_SERVICE_MEDICAL_RENDURowChangingEvent) Is Nothing) Then
                RaiseEvent SPSMR_SERVICE_MEDICAL_RENDURowChanging(Me, New SPSMR_SERVICE_MEDICAL_RENDURowChangeEvent(CType(e.Row,SPSMR_SERVICE_MEDICAL_RENDURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPSMR_SERVICE_MEDICAL_RENDURowDeletedEvent) Is Nothing) Then
                RaiseEvent SPSMR_SERVICE_MEDICAL_RENDURowDeleted(Me, New SPSMR_SERVICE_MEDICAL_RENDURowChangeEvent(CType(e.Row,SPSMR_SERVICE_MEDICAL_RENDURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPSMR_SERVICE_MEDICAL_RENDURowDeletingEvent) Is Nothing) Then
                RaiseEvent SPSMR_SERVICE_MEDICAL_RENDURowDeleting(Me, New SPSMR_SERVICE_MEDICAL_RENDURowChangeEvent(CType(e.Row,SPSMR_SERVICE_MEDICAL_RENDURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPSMR_SERVICE_MEDICAL_RENDURow(ByVal row As SPSMR_SERVICE_MEDICAL_RENDURow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPSMR_SERVICE_MEDICAL_RENDUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPCPD_SPE_CDT_PRESCRDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPCPD_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCPD_CDF_STP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPCPD_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPCPD_SPE_CDT_PRESCR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPD_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPD_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPD_CDF_STP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPD_CDF_STP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPCPD_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPCPD_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPCPD_SPE_CDT_PRESCRRow
            Get
                Return CType(Me.Rows(index),SPCPD_SPE_CDT_PRESCRRow)
            End Get
        End Property
        
        Public Event SPCPD_SPE_CDT_PRESCRRowChanging As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        Public Event SPCPD_SPE_CDT_PRESCRRowChanged As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        Public Event SPCPD_SPE_CDT_PRESCRRowDeleting As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        Public Event SPCPD_SPE_CDT_PRESCRRowDeleted As SPCPD_SPE_CDT_PRESCRRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPCPD_SPE_CDT_PRESCRRow(ByVal row As SPCPD_SPE_CDT_PRESCRRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPCPD_SPE_CDT_PRESCRRow(ByVal SPCPD_SP_CODE_FK_PK As Integer, ByVal SPCPD_CDF_STP_CODE_FK_PK As String, ByVal SPCPD_NUMORD As Short) As SPCPD_SPE_CDT_PRESCRRow
            Dim rowSPCPD_SPE_CDT_PRESCRRow As SPCPD_SPE_CDT_PRESCRRow = CType(Me.NewRow,SPCPD_SPE_CDT_PRESCRRow)
            rowSPCPD_SPE_CDT_PRESCRRow.ItemArray = New Object() {SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_NUMORD}
            Me.Rows.Add(rowSPCPD_SPE_CDT_PRESCRRow)
            Return rowSPCPD_SPE_CDT_PRESCRRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPCPD_SPE_CDT_PRESCRDataTable = CType(MyBase.Clone,SPCPD_SPE_CDT_PRESCRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPCPD_SPE_CDT_PRESCRDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPCPD_SP_CODE_FK_PK = MyBase.Columns("SPCPD_SP_CODE_FK_PK")
            Me.columnSPCPD_CDF_STP_CODE_FK_PK = MyBase.Columns("SPCPD_CDF_STP_CODE_FK_PK")
            Me.columnSPCPD_NUMORD = MyBase.Columns("SPCPD_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPCPD_SP_CODE_FK_PK = New System.Data.DataColumn("SPCPD_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPD_SP_CODE_FK_PK)
            Me.columnSPCPD_CDF_STP_CODE_FK_PK = New System.Data.DataColumn("SPCPD_CDF_STP_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPD_CDF_STP_CODE_FK_PK)
            Me.columnSPCPD_NUMORD = New System.Data.DataColumn("SPCPD_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPCPD_NUMORD)
            Me.columnSPCPD_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCPD_CDF_STP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPCPD_CDF_STP_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPCPD_SPE_CDT_PRESCRRow() As SPCPD_SPE_CDT_PRESCRRow
            Return CType(Me.NewRow,SPCPD_SPE_CDT_PRESCRRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPCPD_SPE_CDT_PRESCRRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPCPD_SPE_CDT_PRESCRRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowChangedEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowChanged(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowChangingEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowChanging(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowDeletedEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowDeleted(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPCPD_SPE_CDT_PRESCRRowDeletingEvent) Is Nothing) Then
                RaiseEvent SPCPD_SPE_CDT_PRESCRRowDeleting(Me, New SPCPD_SPE_CDT_PRESCRRowChangeEvent(CType(e.Row,SPCPD_SPE_CDT_PRESCRRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPCPD_SPE_CDT_PRESCRRow(ByVal row As SPCPD_SPE_CDT_PRESCRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPCPD_SPE_CDT_PRESCRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRIUCD_PRIX_UCDDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPRIUCD_UCD_CODE_PK As System.Data.DataColumn
        
        Private columnPRIUCD_CODE_LISTE_PK As System.Data.DataColumn
        
        Private columnPRIUCD_DATE_APPLI_PK As System.Data.DataColumn
        
        Private columnPRIUCD_PFHT As System.Data.DataColumn
        
        Private columnPRIUCD_PTTC As System.Data.DataColumn

        Private columnPRIUCD_Valide As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRIUCD_PRIX_UCD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIUCD_UCD_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRIUCD_UCD_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIUCD_CODE_LISTE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRIUCD_CODE_LISTE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIUCD_DATE_APPLI_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRIUCD_DATE_APPLI_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIUCD_PFHTColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRIUCD_PFHT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIUCD_PTTCColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRIUCD_PTTC
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PRIUCD_ValideColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRIUCD_Valide
            End Get
        End Property

        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRIUCD_PRIX_UCDRow
            Get
                Return CType(Me.Rows(index),PRIUCD_PRIX_UCDRow)
            End Get
        End Property
        
        Public Event PRIUCD_PRIX_UCDRowChanging As PRIUCD_PRIX_UCDRowChangeEventHandler
        
        Public Event PRIUCD_PRIX_UCDRowChanged As PRIUCD_PRIX_UCDRowChangeEventHandler
        
        Public Event PRIUCD_PRIX_UCDRowDeleting As PRIUCD_PRIX_UCDRowChangeEventHandler
        
        Public Event PRIUCD_PRIX_UCDRowDeleted As PRIUCD_PRIX_UCDRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRIUCD_PRIX_UCDRow(ByVal row As PRIUCD_PRIX_UCDRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPRIUCD_PRIX_UCDRow(ByVal PRIUCD_UCD_CODE_PK As String, ByVal PRIUCD_CODE_LISTE_PK As Byte, ByVal PRIUCD_DATE_APPLI_PK As Date, ByVal PRIUCD_PFHT As Decimal, ByVal PRIUCD_PTTC As Decimal, ByVal PRIUCD_Valide As Boolean) As PRIUCD_PRIX_UCDRow
            Dim rowPRIUCD_PRIX_UCDRow As PRIUCD_PRIX_UCDRow = CType(Me.NewRow, PRIUCD_PRIX_UCDRow)
            rowPRIUCD_PRIX_UCDRow.ItemArray = New Object() {PRIUCD_UCD_CODE_PK, PRIUCD_CODE_LISTE_PK, PRIUCD_DATE_APPLI_PK, PRIUCD_PFHT, PRIUCD_PTTC, PRIUCD_Valide}
            Me.Rows.Add(rowPRIUCD_PRIX_UCDRow)
            Return rowPRIUCD_PRIX_UCDRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRIUCD_UCD_CODE_PKPRIUCD_CODE_LISTE_PKPRIUCD_DATE_APPLI_PK(ByVal PRIUCD_UCD_CODE_PK As String, ByVal PRIUCD_CODE_LISTE_PK As Byte, ByVal PRIUCD_DATE_APPLI_PK As Date) As PRIUCD_PRIX_UCDRow
            Return CType(Me.Rows.Find(New Object() {PRIUCD_UCD_CODE_PK, PRIUCD_CODE_LISTE_PK, PRIUCD_DATE_APPLI_PK}),PRIUCD_PRIX_UCDRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PRIUCD_PRIX_UCDDataTable = CType(MyBase.Clone,PRIUCD_PRIX_UCDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PRIUCD_PRIX_UCDDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRIUCD_UCD_CODE_PK = MyBase.Columns("PRIUCD_UCD_CODE_PK")
            Me.columnPRIUCD_CODE_LISTE_PK = MyBase.Columns("PRIUCD_CODE_LISTE_PK")
            Me.columnPRIUCD_DATE_APPLI_PK = MyBase.Columns("PRIUCD_DATE_APPLI_PK")
            Me.columnPRIUCD_PFHT = MyBase.Columns("PRIUCD_PFHT")
            Me.columnPRIUCD_PTTC = MyBase.Columns("PRIUCD_PTTC")
            Me.columnPRIUCD_Valide = MyBase.Columns("PRIUCD_Valide")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRIUCD_UCD_CODE_PK = New System.Data.DataColumn("PRIUCD_UCD_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIUCD_UCD_CODE_PK)
            Me.columnPRIUCD_CODE_LISTE_PK = New System.Data.DataColumn("PRIUCD_CODE_LISTE_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIUCD_CODE_LISTE_PK)
            Me.columnPRIUCD_DATE_APPLI_PK = New System.Data.DataColumn("PRIUCD_DATE_APPLI_PK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIUCD_DATE_APPLI_PK)
            Me.columnPRIUCD_PFHT = New System.Data.DataColumn("PRIUCD_PFHT", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIUCD_PFHT)
            Me.columnPRIUCD_PTTC = New System.Data.DataColumn("PRIUCD_PTTC", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIUCD_PTTC)
            Me.columnPRIUCD_Valide = New System.Data.DataColumn("PRIUCD_Valide", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIUCD_Valide)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPRIUCD_UCD_CODE_PK, Me.columnPRIUCD_CODE_LISTE_PK, Me.columnPRIUCD_DATE_APPLI_PK}, true))
            Me.columnPRIUCD_UCD_CODE_PK.AllowDBNull = false
            Me.columnPRIUCD_UCD_CODE_PK.MaxLength = 10
            Me.columnPRIUCD_CODE_LISTE_PK.AllowDBNull = false
            Me.columnPRIUCD_DATE_APPLI_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRIUCD_PRIX_UCDRow() As PRIUCD_PRIX_UCDRow
            Return CType(Me.NewRow,PRIUCD_PRIX_UCDRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PRIUCD_PRIX_UCDRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRIUCD_PRIX_UCDRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRIUCD_PRIX_UCDRowChangedEvent) Is Nothing) Then
                RaiseEvent PRIUCD_PRIX_UCDRowChanged(Me, New PRIUCD_PRIX_UCDRowChangeEvent(CType(e.Row,PRIUCD_PRIX_UCDRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRIUCD_PRIX_UCDRowChangingEvent) Is Nothing) Then
                RaiseEvent PRIUCD_PRIX_UCDRowChanging(Me, New PRIUCD_PRIX_UCDRowChangeEvent(CType(e.Row,PRIUCD_PRIX_UCDRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRIUCD_PRIX_UCDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRIUCD_PRIX_UCDRowDeleted(Me, New PRIUCD_PRIX_UCDRowChangeEvent(CType(e.Row,PRIUCD_PRIX_UCDRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRIUCD_PRIX_UCDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRIUCD_PRIX_UCDRowDeleting(Me, New PRIUCD_PRIX_UCDRowChangeEvent(CType(e.Row,PRIUCD_PRIX_UCDRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRIUCD_PRIX_UCDRow(ByVal row As PRIUCD_PRIX_UCDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRIUCD_PRIX_UCDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRE_PRESENTATIONDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPRE_CODE_PK As System.Data.DataColumn
        
        Private columnPRE_SP_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_EAN_REF As System.Data.DataColumn
        
        Private columnPRE_NBUNITE As System.Data.DataColumn
        
        Private columnPRE_CDF_UP_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_CACDT_TEXTE As System.Data.DataColumn
        
        Private columnPRE_CDF_RH_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_CDF_LI_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_ETAT_COMMER As System.Data.DataColumn
        
        Private columnPRE_DATECOMMER As System.Data.DataColumn
        
        Private columnPRE_DATESUP As System.Data.DataColumn
        
        Private columnPRE_CDF_PU_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_CEPH_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_CATC_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_NATUCD_CDF_CODE_FK As System.Data.DataColumn
        
        Private columnPRE_NATUCD_CDF_NUM_FK As System.Data.DataColumn
        
        Private columnPRE_DATEJOCIP As System.Data.DataColumn
        
        Private columnPRE_AGRCOLL As System.Data.DataColumn
        
        Private columnPRE_DATEJOCOLL As System.Data.DataColumn
        
        Private columnPRE_DATEFINCOLL As System.Data.DataColumn
        
        Private columnPRE_DATE_APPLIFINCOLL As System.Data.DataColumn
        
        Private columnPRE_PARTSTATUT As System.Data.DataColumn
        
        Private columnPRE_TSS_TEXTE As System.Data.DataColumn
        
        Private columnPRE_CONSAPOUV As System.Data.DataColumn
        
        Private columnPRE_LIB_CEPS As System.Data.DataColumn
        
        Private columnPRE_ADMIN As System.Data.DataColumn
        
        Private columnPRE_DATECR As System.Data.DataColumn
        
        Private columnPRE_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRE_PRESENTATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_SP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_SP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_EAN_REFColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_EAN_REF
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_NBUNITEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_NBUNITE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_UP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_UP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CACDT_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CACDT_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_RH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_RH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_LI_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_LI_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_ETAT_COMMERColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_ETAT_COMMER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATECOMMERColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATECOMMER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATESUPColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATESUP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CDF_PU_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CDF_PU_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CEPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CEPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CATC_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CATC_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_NATUCD_CDF_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_NATUCD_CDF_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_NATUCD_CDF_NUM_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_NATUCD_CDF_NUM_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEJOCIPColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEJOCIP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_AGRCOLLColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_AGRCOLL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEJOCOLLColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEJOCOLL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEFINCOLLColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEFINCOLL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATE_APPLIFINCOLLColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATE_APPLIFINCOLL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_PARTSTATUTColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_PARTSTATUT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_TSS_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_TSS_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_CONSAPOUVColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_CONSAPOUV
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_LIB_CEPSColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_LIB_CEPS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_ADMINColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_ADMIN
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRE_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnPRE_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRE_PRESENTATIONRow
            Get
                Return CType(Me.Rows(index),PRE_PRESENTATIONRow)
            End Get
        End Property
        
        Public Event PRE_PRESENTATIONRowChanging As PRE_PRESENTATIONRowChangeEventHandler
        
        Public Event PRE_PRESENTATIONRowChanged As PRE_PRESENTATIONRowChangeEventHandler
        
        Public Event PRE_PRESENTATIONRowDeleting As PRE_PRESENTATIONRowChangeEventHandler
        
        Public Event PRE_PRESENTATIONRowDeleted As PRE_PRESENTATIONRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPRE_PRESENTATIONRow(ByVal row As PRE_PRESENTATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPRE_PRESENTATIONRow( _
                    ByVal PRE_CODE_PK As String,  _
                    ByVal PRE_SP_CODE_FK As Integer,  _
                    ByVal PRE_EAN_REF As String,  _
                    ByVal PRE_NBUNITE As Short,  _
                    ByVal PRE_CDF_UP_CODE_FK As String,  _
                    ByVal PRE_CACDT_TEXTE As String,  _
                    ByVal PRE_CDF_RH_CODE_FK As String,  _
                    ByVal PRE_CDF_LI_CODE_FK As String,  _
                    ByVal PRE_ETAT_COMMER As String,  _
                    ByVal PRE_DATECOMMER As Date,  _
                    ByVal PRE_DATESUP As Date,  _
                    ByVal PRE_CDF_PU_CODE_FK As String,  _
                    ByVal PRE_CEPH_CODE_FK As String,  _
                    ByVal PRE_CATC_CODE_FK As String,  _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String,  _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String,  _
                    ByVal PRE_DATEJOCIP As Date,  _
                    ByVal PRE_AGRCOLL As String,  _
                    ByVal PRE_DATEJOCOLL As Date,  _
                    ByVal PRE_DATEFINCOLL As Date,  _
                    ByVal PRE_DATE_APPLIFINCOLL As Date,  _
                    ByVal PRE_PARTSTATUT As String,  _
                    ByVal PRE_TSS_TEXTE As String,  _
                    ByVal PRE_CONSAPOUV As String,  _
                    ByVal PRE_LIB_CEPS As String,  _
                    ByVal PRE_ADMIN As String,  _
                    ByVal PRE_DATECR As Date,  _
                    ByVal PRE_DATEMJ As Date) As PRE_PRESENTATIONRow
            Dim rowPRE_PRESENTATIONRow As PRE_PRESENTATIONRow = CType(Me.NewRow,PRE_PRESENTATIONRow)
            rowPRE_PRESENTATIONRow.ItemArray = New Object() {PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ETAT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PRE_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PRE_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATUT, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ}
            Me.Rows.Add(rowPRE_PRESENTATIONRow)
            Return rowPRE_PRESENTATIONRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRE_CODE_PK(ByVal PRE_CODE_PK As String) As PRE_PRESENTATIONRow
            Return CType(Me.Rows.Find(New Object() {PRE_CODE_PK}),PRE_PRESENTATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PRE_PRESENTATIONDataTable = CType(MyBase.Clone,PRE_PRESENTATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PRE_PRESENTATIONDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRE_CODE_PK = MyBase.Columns("PRE_CODE_PK")
            Me.columnPRE_SP_CODE_FK = MyBase.Columns("PRE_SP_CODE_FK")
            Me.columnPRE_EAN_REF = MyBase.Columns("PRE_EAN_REF")
            Me.columnPRE_NBUNITE = MyBase.Columns("PRE_NBUNITE")
            Me.columnPRE_CDF_UP_CODE_FK = MyBase.Columns("PRE_CDF_UP_CODE_FK")
            Me.columnPRE_CACDT_TEXTE = MyBase.Columns("PRE_CACDT_TEXTE")
            Me.columnPRE_CDF_RH_CODE_FK = MyBase.Columns("PRE_CDF_RH_CODE_FK")
            Me.columnPRE_CDF_LI_CODE_FK = MyBase.Columns("PRE_CDF_LI_CODE_FK")
            Me.columnPRE_ETAT_COMMER = MyBase.Columns("PRE_ETAT_COMMER")
            Me.columnPRE_DATECOMMER = MyBase.Columns("PRE_DATECOMMER")
            Me.columnPRE_DATESUP = MyBase.Columns("PRE_DATESUP")
            Me.columnPRE_CDF_PU_CODE_FK = MyBase.Columns("PRE_CDF_PU_CODE_FK")
            Me.columnPRE_CEPH_CODE_FK = MyBase.Columns("PRE_CEPH_CODE_FK")
            Me.columnPRE_CATC_CODE_FK = MyBase.Columns("PRE_CATC_CODE_FK")
            Me.columnPRE_NATUCD_CDF_CODE_FK = MyBase.Columns("PRE_NATUCD_CDF_CODE_FK")
            Me.columnPRE_NATUCD_CDF_NUM_FK = MyBase.Columns("PRE_NATUCD_CDF_NUM_FK")
            Me.columnPRE_DATEJOCIP = MyBase.Columns("PRE_DATEJOCIP")
            Me.columnPRE_AGRCOLL = MyBase.Columns("PRE_AGRCOLL")
            Me.columnPRE_DATEJOCOLL = MyBase.Columns("PRE_DATEJOCOLL")
            Me.columnPRE_DATEFINCOLL = MyBase.Columns("PRE_DATEFINCOLL")
            Me.columnPRE_DATE_APPLIFINCOLL = MyBase.Columns("PRE_DATE_APPLIFINCOLL")
            Me.columnPRE_PARTSTATUT = MyBase.Columns("PRE_PARTSTATUT")
            Me.columnPRE_TSS_TEXTE = MyBase.Columns("PRE_TSS_TEXTE")
            Me.columnPRE_CONSAPOUV = MyBase.Columns("PRE_CONSAPOUV")
            Me.columnPRE_LIB_CEPS = MyBase.Columns("PRE_LIB_CEPS")
            Me.columnPRE_ADMIN = MyBase.Columns("PRE_ADMIN")
            Me.columnPRE_DATECR = MyBase.Columns("PRE_DATECR")
            Me.columnPRE_DATEMJ = MyBase.Columns("PRE_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRE_CODE_PK = New System.Data.DataColumn("PRE_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CODE_PK)
            Me.columnPRE_SP_CODE_FK = New System.Data.DataColumn("PRE_SP_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_SP_CODE_FK)
            Me.columnPRE_EAN_REF = New System.Data.DataColumn("PRE_EAN_REF", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_EAN_REF)
            Me.columnPRE_NBUNITE = New System.Data.DataColumn("PRE_NBUNITE", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_NBUNITE)
            Me.columnPRE_CDF_UP_CODE_FK = New System.Data.DataColumn("PRE_CDF_UP_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_UP_CODE_FK)
            Me.columnPRE_CACDT_TEXTE = New System.Data.DataColumn("PRE_CACDT_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CACDT_TEXTE)
            Me.columnPRE_CDF_RH_CODE_FK = New System.Data.DataColumn("PRE_CDF_RH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_RH_CODE_FK)
            Me.columnPRE_CDF_LI_CODE_FK = New System.Data.DataColumn("PRE_CDF_LI_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_LI_CODE_FK)
            Me.columnPRE_ETAT_COMMER = New System.Data.DataColumn("PRE_ETAT_COMMER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_ETAT_COMMER)
            Me.columnPRE_DATECOMMER = New System.Data.DataColumn("PRE_DATECOMMER", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATECOMMER)
            Me.columnPRE_DATESUP = New System.Data.DataColumn("PRE_DATESUP", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATESUP)
            Me.columnPRE_CDF_PU_CODE_FK = New System.Data.DataColumn("PRE_CDF_PU_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CDF_PU_CODE_FK)
            Me.columnPRE_CEPH_CODE_FK = New System.Data.DataColumn("PRE_CEPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CEPH_CODE_FK)
            Me.columnPRE_CATC_CODE_FK = New System.Data.DataColumn("PRE_CATC_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CATC_CODE_FK)
            Me.columnPRE_NATUCD_CDF_CODE_FK = New System.Data.DataColumn("PRE_NATUCD_CDF_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_NATUCD_CDF_CODE_FK)
            Me.columnPRE_NATUCD_CDF_NUM_FK = New System.Data.DataColumn("PRE_NATUCD_CDF_NUM_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_NATUCD_CDF_NUM_FK)
            Me.columnPRE_DATEJOCIP = New System.Data.DataColumn("PRE_DATEJOCIP", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEJOCIP)
            Me.columnPRE_AGRCOLL = New System.Data.DataColumn("PRE_AGRCOLL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_AGRCOLL)
            Me.columnPRE_DATEJOCOLL = New System.Data.DataColumn("PRE_DATEJOCOLL", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEJOCOLL)
            Me.columnPRE_DATEFINCOLL = New System.Data.DataColumn("PRE_DATEFINCOLL", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEFINCOLL)
            Me.columnPRE_DATE_APPLIFINCOLL = New System.Data.DataColumn("PRE_DATE_APPLIFINCOLL", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATE_APPLIFINCOLL)
            Me.columnPRE_PARTSTATUT = New System.Data.DataColumn("PRE_PARTSTATUT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_PARTSTATUT)
            Me.columnPRE_TSS_TEXTE = New System.Data.DataColumn("PRE_TSS_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_TSS_TEXTE)
            Me.columnPRE_CONSAPOUV = New System.Data.DataColumn("PRE_CONSAPOUV", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_CONSAPOUV)
            Me.columnPRE_LIB_CEPS = New System.Data.DataColumn("PRE_LIB_CEPS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_LIB_CEPS)
            Me.columnPRE_ADMIN = New System.Data.DataColumn("PRE_ADMIN", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_ADMIN)
            Me.columnPRE_DATECR = New System.Data.DataColumn("PRE_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATECR)
            Me.columnPRE_DATEMJ = New System.Data.DataColumn("PRE_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRE_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPRE_CODE_PK}, true))
            Me.columnPRE_CODE_PK.AllowDBNull = false
            Me.columnPRE_CODE_PK.Unique = true
            Me.columnPRE_CODE_PK.MaxLength = 10
            Me.columnPRE_SP_CODE_FK.AllowDBNull = false
            Me.columnPRE_EAN_REF.MaxLength = 13
            Me.columnPRE_CDF_UP_CODE_FK.MaxLength = 10
            Me.columnPRE_CACDT_TEXTE.MaxLength = 4000
            Me.columnPRE_CDF_RH_CODE_FK.AllowDBNull = false
            Me.columnPRE_CDF_RH_CODE_FK.MaxLength = 10
            Me.columnPRE_CDF_LI_CODE_FK.MaxLength = 10
            Me.columnPRE_ETAT_COMMER.MaxLength = 2
            Me.columnPRE_CDF_PU_CODE_FK.MaxLength = 10
            Me.columnPRE_CEPH_CODE_FK.MaxLength = 10
            Me.columnPRE_CATC_CODE_FK.MaxLength = 10
            Me.columnPRE_NATUCD_CDF_CODE_FK.MaxLength = 10
            Me.columnPRE_NATUCD_CDF_NUM_FK.MaxLength = 2
            Me.columnPRE_AGRCOLL.MaxLength = 1
            Me.columnPRE_PARTSTATUT.MaxLength = 4000
            Me.columnPRE_TSS_TEXTE.MaxLength = 4000
            Me.columnPRE_CONSAPOUV.MaxLength = 2147483647
            Me.columnPRE_LIB_CEPS.MaxLength = 750
            Me.columnPRE_ADMIN.MaxLength = 600
            Me.columnPRE_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPRE_PRESENTATIONRow() As PRE_PRESENTATIONRow
            Return CType(Me.NewRow,PRE_PRESENTATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PRE_PRESENTATIONRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRE_PRESENTATIONRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRE_PRESENTATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowChanged(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRE_PRESENTATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowChanging(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRE_PRESENTATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowDeleted(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRE_PRESENTATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRE_PRESENTATIONRowDeleting(Me, New PRE_PRESENTATIONRowChangeEvent(CType(e.Row,PRE_PRESENTATIONRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePRE_PRESENTATIONRow(ByVal row As PRE_PRESENTATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRE_PRESENTATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SPFOTX_SPE_FORME_TEXTEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPFOTX_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSPFOTX_TEXTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SPFOTX_SPE_FORME_TEXTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOTX_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOTX_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPFOTX_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPFOTX_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SPFOTX_SPE_FORME_TEXTERow
            Get
                Return CType(Me.Rows(index),SPFOTX_SPE_FORME_TEXTERow)
            End Get
        End Property
        
        Public Event SPFOTX_SPE_FORME_TEXTERowChanging As SPFOTX_SPE_FORME_TEXTERowChangeEventHandler
        
        Public Event SPFOTX_SPE_FORME_TEXTERowChanged As SPFOTX_SPE_FORME_TEXTERowChangeEventHandler
        
        Public Event SPFOTX_SPE_FORME_TEXTERowDeleting As SPFOTX_SPE_FORME_TEXTERowChangeEventHandler
        
        Public Event SPFOTX_SPE_FORME_TEXTERowDeleted As SPFOTX_SPE_FORME_TEXTERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSPFOTX_SPE_FORME_TEXTERow(ByVal row As SPFOTX_SPE_FORME_TEXTERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSPFOTX_SPE_FORME_TEXTERow(ByVal SPFOTX_SP_CODE_FK_PK As Integer, ByVal SPFOTX_TEXTE As String) As SPFOTX_SPE_FORME_TEXTERow
            Dim rowSPFOTX_SPE_FORME_TEXTERow As SPFOTX_SPE_FORME_TEXTERow = CType(Me.NewRow,SPFOTX_SPE_FORME_TEXTERow)
            rowSPFOTX_SPE_FORME_TEXTERow.ItemArray = New Object() {SPFOTX_SP_CODE_FK_PK, SPFOTX_TEXTE}
            Me.Rows.Add(rowSPFOTX_SPE_FORME_TEXTERow)
            Return rowSPFOTX_SPE_FORME_TEXTERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySPFOTX_SP_CODE_FK_PK(ByVal SPFOTX_SP_CODE_FK_PK As Integer) As SPFOTX_SPE_FORME_TEXTERow
            Return CType(Me.Rows.Find(New Object() {SPFOTX_SP_CODE_FK_PK}),SPFOTX_SPE_FORME_TEXTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPFOTX_SPE_FORME_TEXTEDataTable = CType(MyBase.Clone,SPFOTX_SPE_FORME_TEXTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPFOTX_SPE_FORME_TEXTEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPFOTX_SP_CODE_FK_PK = MyBase.Columns("SPFOTX_SP_CODE_FK_PK")
            Me.columnSPFOTX_TEXTE = MyBase.Columns("SPFOTX_TEXTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPFOTX_SP_CODE_FK_PK = New System.Data.DataColumn("SPFOTX_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOTX_SP_CODE_FK_PK)
            Me.columnSPFOTX_TEXTE = New System.Data.DataColumn("SPFOTX_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPFOTX_TEXTE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPFOTX_SP_CODE_FK_PK}, true))
            Me.columnSPFOTX_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnSPFOTX_SP_CODE_FK_PK.Unique = true
            Me.columnSPFOTX_TEXTE.AllowDBNull = false
            Me.columnSPFOTX_TEXTE.MaxLength = 4000
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSPFOTX_SPE_FORME_TEXTERow() As SPFOTX_SPE_FORME_TEXTERow
            Return CType(Me.NewRow,SPFOTX_SPE_FORME_TEXTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPFOTX_SPE_FORME_TEXTERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPFOTX_SPE_FORME_TEXTERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPFOTX_SPE_FORME_TEXTERowChangedEvent) Is Nothing) Then
                RaiseEvent SPFOTX_SPE_FORME_TEXTERowChanged(Me, New SPFOTX_SPE_FORME_TEXTERowChangeEvent(CType(e.Row,SPFOTX_SPE_FORME_TEXTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPFOTX_SPE_FORME_TEXTERowChangingEvent) Is Nothing) Then
                RaiseEvent SPFOTX_SPE_FORME_TEXTERowChanging(Me, New SPFOTX_SPE_FORME_TEXTERowChangeEvent(CType(e.Row,SPFOTX_SPE_FORME_TEXTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPFOTX_SPE_FORME_TEXTERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPFOTX_SPE_FORME_TEXTERowDeleted(Me, New SPFOTX_SPE_FORME_TEXTERowChangeEvent(CType(e.Row,SPFOTX_SPE_FORME_TEXTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPFOTX_SPE_FORME_TEXTERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPFOTX_SPE_FORME_TEXTERowDeleting(Me, New SPFOTX_SPE_FORME_TEXTERowChangeEvent(CType(e.Row,SPFOTX_SPE_FORME_TEXTERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSPFOTX_SPE_FORME_TEXTERow(ByVal row As SPFOTX_SPE_FORME_TEXTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Nomenclature1 = New dsTheriaque_Nomenclature1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPFOTX_SPE_FORME_TEXTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SP_SPECIALITERow
        Inherits System.Data.DataRow
        
        Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_SPECIALITE = CType(Me.Table,SP_SPECIALITEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GSP_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_GSP_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_SLAB_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_LI_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CATC_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CEPH_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CGE_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CGE_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PR_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_TYPE_SPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_TYPE_SPE' dans la table 'SP_SPECIALITE' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_FK' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_DATECR_FK' dans la table 'SP_SPECIALITE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOM() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMCOMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMCOMP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_PHColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_PH' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PHColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CIPUCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CIPUCD' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATECR() As Date
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEMJ' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NLColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_NL' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_APHP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_APHPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_APHP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEJOGENE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEJOGENE' dans la table 'SP_SPECIALITE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ORIGINE_GENE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_ORIGINE_GENE' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMLONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMLONG' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDT_PRESCR_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CDT_PRESCR_TEXTE' dans la table 'SP_SPECIALITE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ATC_DDD_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_ATC_DDD_TEXTE' dans la table 'SP_SPECIALITE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SP_MONO_VIRTUELLE() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'SP_MONO_VIRTUELLEColumn' dans la table 'SP_SPECIALITE' e" & _
                            "st DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Boolean)
                Me(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SP_CIPUCD13() As String
            Get
                Try
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CIPUCD13Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CIPUCD13' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSP_SPECIALITE.SP_CIPUCD13Column) = value
            End Set
        End Property
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GSP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GSP_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CATC_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CEPH_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CGE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CGE_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_TYPE_SPENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_TYPE_SPENull()
            Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_DATECR_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMCOMPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMCOMPNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_PHNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_PHColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_PHNull()
            Me(Me.tableSP_SPECIALITE.SP_PHColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CIPUCDNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CIPUCDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CIPUCDNull()
            Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEMJNull()
            Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NLNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NLNull()
            Me(Me.tableSP_SPECIALITE.SP_NLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_APHPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_APHPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_APHPNull()
            Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEJOGENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEJOGENENull()
            Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ORIGINE_GENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ORIGINE_GENENull()
            Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMLONGNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMLONGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMLONGNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CDT_PRESCR_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CDT_PRESCR_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ATC_DDD_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ATC_DDD_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSP_MONO_VIRTUELLENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSP_MONO_VIRTUELLENull()
            Me(Me.tableSP_SPECIALITE.SP_MONO_VIRTUELLEColumn) = Global.System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSP_CIPUCD13Null() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CIPUCD13Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSP_CIPUCD13Null()
            Me(Me.tableSP_SPECIALITE.SP_CIPUCD13Column) = System.Convert.DBNull
        End Sub

        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPTEN_SPECIALITE_TENEURRows() As SPTEN_SPECIALITE_TENEURRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR")),SPTEN_SPECIALITE_TENEURRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPADM_SPECIALITE_MODEADMRows() As SPADM_SPECIALITE_MODEADMRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM")),SPADM_SPECIALITE_MODEADMRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCOTEN_COMPO_TENEURRows() As COTEN_COMPO_TENEURRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SP_SPECIALITE_COTEN_COMPO_TENEUR")),COTEN_COMPO_TENEURRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPVO_SPECIALITE_VOIERows() As SPVO_SPECIALITE_VOIERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE")),SPVO_SPECIALITE_VOIERow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYSP_SYNONYME_SPECIALITERow
        Inherits System.Data.DataRow
        
        Private tableSYSP_SYNONYME_SPECIALITE As SYSP_SYNONYME_SPECIALITEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYSP_SYNONYME_SPECIALITE = CType(Me.Table,SYSP_SYNONYME_SPECIALITEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSP_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYSP_SYNONYME_SPECIALITE.SYSP_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYSP_SYNONYME_SPECIALITE.SYSP_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSP_SP_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSYSP_SYNONYME_SPECIALITE.SYSP_SP_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYSP_SYNONYME_SPECIALITE.SYSP_SP_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPLAB_SPECIALITE_LABORow
        Inherits System.Data.DataRow
        
        Private tableSPLAB_SPECIALITE_LABO As SPLAB_SPECIALITE_LABODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPLAB_SPECIALITE_LABO = CType(Me.Table,SPLAB_SPECIALITE_LABODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLAB_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPLAB_SPECIALITE_LABO.SPLAB_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPLAB_SPECIALITE_LABO.SPLAB_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLAB_CDF_LAB_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPLAB_SPECIALITE_LABO.SPLAB_CDF_LAB_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPLAB_SPECIALITE_LABO.SPLAB_CDF_LAB_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPLABEX_SPE_LABO_EXPLOITANTRow
        Inherits System.Data.DataRow
        
        Private tableSPLABEX_SPE_LABO_EXPLOITANT As SPLABEX_SPE_LABO_EXPLOITANTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPLABEX_SPE_LABO_EXPLOITANT = CType(Me.Table,SPLABEX_SPE_LABO_EXPLOITANTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLABEX_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLABEX_CDF_LAB_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_CDF_LAB_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_CDF_LAB_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLABEX_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPLABEX_NUMORD' dans la table 'SPLABEX_SPE_LABO_EXPLOI"& _ 
                            "TANT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPLABEX_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPLABEX_NUMORDNull()
            Me(Me.tableSPLABEX_SPE_LABO_EXPLOITANT.SPLABEX_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPVO_SPECIALITE_VOIERow
        Inherits System.Data.DataRow
        
        Private tableSPVO_SPECIALITE_VOIE As SPVO_SPECIALITE_VOIEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPVO_SPECIALITE_VOIE = CType(Me.Table,SPVO_SPECIALITE_VOIEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPVO_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPVO_CDF_VO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_CDF_VO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_CDF_VO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPVO_NUMSEQ() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_NUMSEQColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPVO_NUMSEQ' dans la table 'SPVO_SPECIALITE_VOIE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_NUMSEQColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_SPECIALITERow() As SP_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE")),SP_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SP_SPECIALITE_SPVO_SPECIALITE_VOIE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPVO_NUMSEQNull() As Boolean
            Return Me.IsNull(Me.tableSPVO_SPECIALITE_VOIE.SPVO_NUMSEQColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPVO_NUMSEQNull()
            Me(Me.tableSPVO_SPECIALITE_VOIE.SPVO_NUMSEQColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPFO_SPECIALITE_FORMERow
        Inherits System.Data.DataRow
        
        Private tableSPFO_SPECIALITE_FORME As SPFO_SPECIALITE_FORMEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPFO_SPECIALITE_FORME = CType(Me.Table,SPFO_SPECIALITE_FORMEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFO_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFO_CDF_FO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_CDF_FO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_CDF_FO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFO_NUMSEQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMSEQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPFO_NUMORD' dans la table 'SPFO_SPECIALITE_FORME' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPFO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPFO_NUMORDNull()
            Me(Me.tableSPFO_SPECIALITE_FORME.SPFO_NUMORDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPFOCPI_SPE_FORME_COMPINFORows() As SPFOCPI_SPE_FORME_COMPINFORow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO")),SPFOCPI_SPE_FORME_COMPINFORow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPFOCFO_SPE_FORME_COMPFORMERows() As SPFOCFO_SPE_FORME_COMPFORMERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME")),SPFOCFO_SPE_FORME_COMPFORMERow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPFOCFO_SPE_FORME_COMPFORMERow
        Inherits System.Data.DataRow
        
        Private tableSPFOCFO_SPE_FORME_COMPFORME As SPFOCFO_SPE_FORME_COMPFORMEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPFOCFO_SPE_FORME_COMPFORME = CType(Me.Table,SPFOCFO_SPE_FORME_COMPFORMEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCFO_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCFO_CDF_FO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_CDF_FO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_CDF_FO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCFO_SPFO_NUMSEQ_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SPFO_NUMSEQ_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_SPFO_NUMSEQ_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCFO_CDF_CFO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_CDF_CFO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_CDF_CFO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCFO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPFOCFO_NUMORD' dans la table 'SPFOCFO_SPE_FORME_COMPF"& _ 
                            "ORME' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFO_SPECIALITE_FORMERowParent() As SPFO_SPECIALITE_FORMERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME")),SPFO_SPECIALITE_FORMERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SPFO_SPECIALITE_FORME_SPFOCFO_SPE_FORME_COMPFORME"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPFOCFO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPFOCFO_NUMORDNull()
            Me(Me.tableSPFOCFO_SPE_FORME_COMPFORME.SPFOCFO_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPFOCPI_SPE_FORME_COMPINFORow
        Inherits System.Data.DataRow
        
        Private tableSPFOCPI_SPE_FORME_COMPINFO As SPFOCPI_SPE_FORME_COMPINFODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPFOCPI_SPE_FORME_COMPINFO = CType(Me.Table,SPFOCPI_SPE_FORME_COMPINFODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCPI_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCPI_CDF_FO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_CDF_FO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_CDF_FO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCPI_SPFO_NUMSEQ_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SPFO_NUMSEQ_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_SPFO_NUMSEQ_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCPI_CDF_CPI_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_CDF_CPI_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_CDF_CPI_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOCPI_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPFOCPI_NUMORD' dans la table 'SPFOCPI_SPE_FORME_COMPI"& _ 
                            "NFO' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFO_SPECIALITE_FORMERowParent() As SPFO_SPECIALITE_FORMERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO")),SPFO_SPECIALITE_FORMERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SPFO_SPECIALITE_FORME_SPFOCPI_SPE_FORME_COMPINFO"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPFOCPI_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPFOCPI_NUMORDNull()
            Me(Me.tableSPFOCPI_SPE_FORME_COMPINFO.SPFOCPI_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COMPO_COMPOSITIONRow
        Inherits System.Data.DataRow
        
        Private tableCOMPO_COMPOSITION As COMPO_COMPOSITIONDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOMPO_COMPOSITION = CType(Me.Table,COMPO_COMPOSITIONDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPO_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOMPO_COMPOSITION.COMPO_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOMPO_COMPOSITION.COMPO_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPO_NUM_PK() As Byte
            Get
                Return CType(Me(Me.tableCOMPO_COMPOSITION.COMPO_NUM_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableCOMPO_COMPOSITION.COMPO_NUM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPO_CDF_GAL_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOMPO_COMPOSITION.COMPO_CDF_GAL_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COMPO_CDF_GAL_CODE_FK' dans la table 'COMPO_COMPOSITIO"& _ 
                            "N' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOMPO_COMPOSITION.COMPO_CDF_GAL_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPO_CDF_GAL_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOMPO_COMPOSITION.COMPO_CDF_GAL_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPO_CDF_GAL_CODE_FKNull()
            Me(Me.tableCOMPO_COMPOSITION.COMPO_CDF_GAL_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCOSAC_COMPO_SUBACTRows() As COSAC_COMPO_SUBACTRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK3_COSAC_COMPO_SUBACT")),COSAC_COMPO_SUBACTRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCOSAU_COMPO_SUBAUXRows() As COSAU_COMPO_SUBAUXRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK3_COSAU_COMPO_SUBAUX")),COSAU_COMPO_SUBAUXRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COSAC_COMPO_SUBACTRow
        Inherits System.Data.DataRow
        
        Private tableCOSAC_COMPO_SUBACT As COSAC_COMPO_SUBACTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOSAC_COMPO_SUBACT = CType(Me.Table,COSAC_COMPO_SUBACTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_DOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAC_DOSAGE' dans la table 'COSAC_COMPO_SUBACT' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_UNITEDOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_UNITEDOSAGEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAC_UNITEDOSAGE' dans la table 'COSAC_COMPO_SUBACT' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_UNITEDOSAGEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_COMPO_NUM_PK() As Byte
            Get
                Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_COMPO_NUM_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_COMPO_NUM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_SAC_BASE_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SAC_BASE_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAC_SAC_BASE_CODE_FK' dans la table 'COSAC_COMPO_SUB"& _ 
                            "ACT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SAC_BASE_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_DOSAGE_BASE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGE_BASEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAC_DOSAGE_BASE' dans la table 'COSAC_COMPO_SUBACT' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGE_BASEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAC_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAC_NUMORD' dans la table 'COSAC_COMPO_SUBACT' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPO_COMPOSITIONRowParent() As COMPO_COMPOSITIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK3_COSAC_COMPO_SUBACT")),COMPO_COMPOSITIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK3_COSAC_COMPO_SUBACT"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAC_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAC_DOSAGENull()
            Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAC_UNITEDOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAC_COMPO_SUBACT.COSAC_UNITEDOSAGEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAC_UNITEDOSAGENull()
            Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_UNITEDOSAGEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAC_SAC_BASE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAC_COMPO_SUBACT.COSAC_SAC_BASE_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAC_SAC_BASE_CODE_FKNull()
            Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_SAC_BASE_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAC_DOSAGE_BASENull() As Boolean
            Return Me.IsNull(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGE_BASEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAC_DOSAGE_BASENull()
            Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_DOSAGE_BASEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAC_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAC_COMPO_SUBACT.COSAC_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAC_NUMORDNull()
            Me(Me.tableCOSAC_COMPO_SUBACT.COSAC_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COSAU_COMPO_SUBAUXRow
        Inherits System.Data.DataRow
        
        Private tableCOSAU_COMPO_SUBAUX As COSAU_COMPO_SUBAUXDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOSAU_COMPO_SUBAUX = CType(Me.Table,COSAU_COMPO_SUBAUXDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_DOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_DOSAGE' dans la table 'COSAU_COMPO_SUBAUX' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_UNITEDOSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_UNITEDOSAGE' dans la table 'COSAU_COMPO_SUBAUX' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_COMPO_NUM_PK() As Byte
            Get
                Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_COMPO_NUM_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_COMPO_NUM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_CODE_FK' dans la table 'COSAU_COMPO_SUBAUX'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_DATECR_FK' dans la table 'COSAU_COMPO_SUBAU"& _ 
                            "X' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_GREF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_GREF_NUMORD' dans la table 'COSAU_COMPO_SUBAUX' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COSAU_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COSAU_NUMORD' dans la table 'COSAU_COMPO_SUBAUX' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPO_COMPOSITIONRowParent() As COMPO_COMPOSITIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK3_COSAU_COMPO_SUBAUX")),COMPO_COMPOSITIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK3_COSAU_COMPO_SUBAUX"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_DOSAGENull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_DOSAGEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_UNITEDOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_UNITEDOSAGENull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_UNITEDOSAGEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_CODE_FKNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_DATECR_FKNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_DATECR_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_GREF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_GREF_NUMORDNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_GREF_NUMORDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSAU_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSAU_NUMORDNull()
            Me(Me.tableCOSAU_COMPO_SUBAUX.COSAU_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COTEN_COMPO_TENEURRow
        Inherits System.Data.DataRow
        
        Private tableCOTEN_COMPO_TENEUR As COTEN_COMPO_TENEURDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOTEN_COMPO_TENEUR = CType(Me.Table,COTEN_COMPO_TENEURDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_CDF_TEN_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_TEN_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_TEN_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_QUALIFICATIF() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_QUALIFICATIFColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COTEN_QUALIFICATIF' dans la table 'COTEN_COMPO_TENEUR'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_QUALIFICATIFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_DOSAGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGEColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COTEN_DOSAGE' dans la table 'COTEN_COMPO_TENEUR' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_CDF_UD_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COTEN_CDF_UD_CODE_FK' dans la table 'COTEN_COMPO_TENEU"& _ 
                            "R' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_DOSAGE_EQUIV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGE_EQUIVColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COTEN_DOSAGE_EQUIV' dans la table 'COTEN_COMPO_TENEUR'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGE_EQUIVColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_CDF_UD_EQUIV_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_EQUIV_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COTEN_CDF_UD_EQUIV_CODE_FK' dans la table 'COTEN_COMPO"& _ 
                            "_TENEUR' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_EQUIV_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COTEN_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'COTEN_NUMORD' dans la table 'COTEN_COMPO_TENEUR' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_SPECIALITERow() As SP_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SP_SPECIALITE_COTEN_COMPO_TENEUR")),SP_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SP_SPECIALITE_COTEN_COMPO_TENEUR"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOTEN_QUALIFICATIFNull() As Boolean
            Return Me.IsNull(Me.tableCOTEN_COMPO_TENEUR.COTEN_QUALIFICATIFColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOTEN_QUALIFICATIFNull()
            Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_QUALIFICATIFColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOTEN_DOSAGENull() As Boolean
            Return Me.IsNull(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOTEN_DOSAGENull()
            Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOTEN_CDF_UD_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOTEN_CDF_UD_CODE_FKNull()
            Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOTEN_DOSAGE_EQUIVNull() As Boolean
            Return Me.IsNull(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGE_EQUIVColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOTEN_DOSAGE_EQUIVNull()
            Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_DOSAGE_EQUIVColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOTEN_CDF_UD_EQUIV_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_EQUIV_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOTEN_CDF_UD_EQUIV_CODE_FKNull()
            Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_CDF_UD_EQUIV_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOTEN_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableCOTEN_COMPO_TENEUR.COTEN_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOTEN_NUMORDNull()
            Me(Me.tableCOTEN_COMPO_TENEUR.COTEN_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPADM_SPECIALITE_MODEADMRow
        Inherits System.Data.DataRow
        
        Private tableSPADM_SPECIALITE_MODEADM As SPADM_SPECIALITE_MODEADMDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPADM_SPECIALITE_MODEADM = CType(Me.Table,SPADM_SPECIALITE_MODEADMDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPADM_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPADM_SPECIALITE_MODEADM.SPADM_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPADM_SPECIALITE_MODEADM.SPADM_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPADM_LIBELLE() As String
            Get
                Return CType(Me(Me.tableSPADM_SPECIALITE_MODEADM.SPADM_LIBELLEColumn),String)
            End Get
            Set
                Me(Me.tableSPADM_SPECIALITE_MODEADM.SPADM_LIBELLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_SPECIALITERow() As SP_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM")),SP_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SP_SPECIALITE_SPADM_SPECIALITE_MODEADM"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPTEN_SPECIALITE_TENEURRow
        Inherits System.Data.DataRow
        
        Private tableSPTEN_SPECIALITE_TENEUR As SPTEN_SPECIALITE_TENEURDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPTEN_SPECIALITE_TENEUR = CType(Me.Table,SPTEN_SPECIALITE_TENEURDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPTEN_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPTEN_SPECIALITE_TENEUR.SPTEN_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPTEN_SPECIALITE_TENEUR.SPTEN_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPTEN_LIBELLE() As String
            Get
                Return CType(Me(Me.tableSPTEN_SPECIALITE_TENEUR.SPTEN_LIBELLEColumn),String)
            End Get
            Set
                Me(Me.tableSPTEN_SPECIALITE_TENEUR.SPTEN_LIBELLEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_SPECIALITERow() As SP_SPECIALITERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR")),SP_SPECIALITERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SP_SPECIALITE_SPTEN_SPECIALITE_TENEUR"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPCPH_SPECIALITE_CLASSEPHRow
        Inherits System.Data.DataRow
        
        Private tableSPCPH_SPECIALITE_CLASSEPH As SPCPH_SPECIALITE_CLASSEPHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPCPH_SPECIALITE_CLASSEPH = CType(Me.Table,SPCPH_SPECIALITE_CLASSEPHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPH_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPCPH_NUMORD' dans la table 'SPCPH_SPECIALITE_CLASSEPH"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPCPH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPCPH_NUMORDNull()
            Me(Me.tableSPCPH_SPECIALITE_CLASSEPH.SPCPH_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPDDD_DOSE_USUELLE_JOURRow
        Inherits System.Data.DataRow
        
        Private tableSPDDD_DOSE_USUELLE_JOUR As SPDDD_DOSE_USUELLE_JOURDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPDDD_DOSE_USUELLE_JOUR = CType(Me.Table,SPDDD_DOSE_USUELLE_JOURDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPDDD_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPDDD_ATCDDD_CATC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_CATC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_CATC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPDDD_ATCDDD_CDF_VO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_CDF_VO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_CDF_VO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPDDD_ATCDDD_DOSAGE_PK() As Decimal
            Get
                Return CType(Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_DOSAGE_PKColumn),Decimal)
            End Get
            Set
                Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_DOSAGE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPDDD_ATCDDD_CDF_UD_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_CDF_UD_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_ATCDDD_CDF_UD_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPDDD_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPDDD_NUMORD' dans la table 'SPDDD_DOSE_USUELLE_JOUR' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPDDD_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPDDD_NUMORDNull()
            Me(Me.tableSPDDD_DOSE_USUELLE_JOUR.SPDDD_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPCH_SPECIALITE_CHOIXRow
        Inherits System.Data.DataRow
        
        Private tableSPCH_SPECIALITE_CHOIX As SPCH_SPECIALITE_CHOIXDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPCH_SPECIALITE_CHOIX = CType(Me.Table,SPCH_SPECIALITE_CHOIXDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCH_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPCH_SPECIALITE_CHOIX.SPCH_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPCH_SPECIALITE_CHOIX.SPCH_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCH_CH_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPCH_SPECIALITE_CHOIX.SPCH_CH_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPCH_SPECIALITE_CHOIX.SPCH_CH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPRMO_SPECIALITE_RMORow
        Inherits System.Data.DataRow
        
        Private tableSPRMO_SPECIALITE_RMO As SPRMO_SPECIALITE_RMODataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPRMO_SPECIALITE_RMO = CType(Me.Table,SPRMO_SPECIALITE_RMODataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPRMO_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPRMO_SPECIALITE_RMO.SPRMO_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPRMO_SPECIALITE_RMO.SPRMO_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPRMO_RMO_CODE_FK_PK() As Byte
            Get
                Return CType(Me(Me.tableSPRMO_SPECIALITE_RMO.SPRMO_RMO_CODE_FK_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableSPRMO_SPECIALITE_RMO.SPRMO_RMO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPRMO_CLRMO_CODE_FK_PK() As Byte
            Get
                Return CType(Me(Me.tableSPRMO_SPECIALITE_RMO.SPRMO_CLRMO_CODE_FK_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableSPRMO_SPECIALITE_RMO.SPRMO_CLRMO_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPFTR_SPECIALITE_TRANSPARENCERow
        Inherits System.Data.DataRow
        
        Private tableSPFTR_SPECIALITE_TRANSPARENCE As SPFTR_SPECIALITE_TRANSPARENCEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPFTR_SPECIALITE_TRANSPARENCE = CType(Me.Table,SPFTR_SPECIALITE_TRANSPARENCEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFTR_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFTR_SPECIALITE_TRANSPARENCE.SPFTR_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFTR_SPECIALITE_TRANSPARENCE.SPFTR_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFTR_FTR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFTR_SPECIALITE_TRANSPARENCE.SPFTR_FTR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFTR_SPECIALITE_TRANSPARENCE.SPFTR_FTR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPFTH_SPEC_INFOTHERAPEUTIQUERow
        Inherits System.Data.DataRow
        
        Private tableSPFTH_SPEC_INFOTHERAPEUTIQUE As SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE = CType(Me.Table,SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFTH_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE.SPFTH_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE.SPFTH_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFTH_FTH_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE.SPFTH_FTH_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFTH_SPEC_INFOTHERAPEUTIQUE.SPFTH_FTH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPATR_SPEC_AVISTRANSPARENCERow
        Inherits System.Data.DataRow
        
        Private tableSPATR_SPEC_AVISTRANSPARENCE As SPATR_SPEC_AVISTRANSPARENCEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPATR_SPEC_AVISTRANSPARENCE = CType(Me.Table,SPATR_SPEC_AVISTRANSPARENCEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPATR_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPATR_SPEC_AVISTRANSPARENCE.SPATR_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPATR_SPEC_AVISTRANSPARENCE.SPATR_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPATR_ATR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPATR_SPEC_AVISTRANSPARENCE.SPATR_ATR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPATR_SPEC_AVISTRANSPARENCE.SPATR_ATR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPSMR_SERVICE_MEDICAL_RENDURow
        Inherits System.Data.DataRow
        
        Private tableSPSMR_SERVICE_MEDICAL_RENDU As SPSMR_SERVICE_MEDICAL_RENDUDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPSMR_SERVICE_MEDICAL_RENDU = CType(Me.Table,SPSMR_SERVICE_MEDICAL_RENDUDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPSMR_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPSMR_CDF_SMR_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_CDF_SMR_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_CDF_SMR_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPSMR_NUM_ORD_PK() As Short
            Get
                Return CType(Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_NUM_ORD_PKColumn),Short)
            End Get
            Set
                Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_NUM_ORD_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPSMR_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPSMR_DATE' dans la table 'SPSMR_SERVICE_MEDICAL_RENDU"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPSMR_DATENull() As Boolean
            Return Me.IsNull(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPSMR_DATENull()
            Me(Me.tableSPSMR_SERVICE_MEDICAL_RENDU.SPSMR_DATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPCPD_SPE_CDT_PRESCRRow
        Inherits System.Data.DataRow
        
        Private tableSPCPD_SPE_CDT_PRESCR As SPCPD_SPE_CDT_PRESCRDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPCPD_SPE_CDT_PRESCR = CType(Me.Table,SPCPD_SPE_CDT_PRESCRDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPD_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPD_CDF_STP_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_CDF_STP_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_CDF_STP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPCPD_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPCPD_NUMORD' dans la table 'SPCPD_SPE_CDT_PRESCR' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPCPD_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPCPD_NUMORDNull()
            Me(Me.tableSPCPD_SPE_CDT_PRESCR.SPCPD_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRIUCD_PRIX_UCDRow
        Inherits System.Data.DataRow
        
        Private tablePRIUCD_PRIX_UCD As PRIUCD_PRIX_UCDDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRIUCD_PRIX_UCD = CType(Me.Table,PRIUCD_PRIX_UCDDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIUCD_UCD_CODE_PK() As String
            Get
                Return CType(Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_UCD_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_UCD_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIUCD_CODE_LISTE_PK() As Byte
            Get
                Return CType(Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_CODE_LISTE_PKColumn),Byte)
            End Get
            Set
                Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_CODE_LISTE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIUCD_DATE_APPLI_PK() As Date
            Get
                Return CType(Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_DATE_APPLI_PKColumn),Date)
            End Get
            Set
                Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_DATE_APPLI_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIUCD_PFHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PFHTColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRIUCD_PFHT' dans la table 'PRIUCD_PRIX_UCD' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PFHTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIUCD_PTTC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PTTCColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRIUCD_PTTC' dans la table 'PRIUCD_PRIX_UCD' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PTTCColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PRIUCD_Valide() As Boolean
            Get
                Try
                    Return CType(Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_ValideColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'PRIUCD_Valide' dans la table 'PRIUCD_PRIX_UCD" & _
                            "' est DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Boolean)
                Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_ValideColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIUCD_PFHTNull() As Boolean
            Return Me.IsNull(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PFHTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIUCD_PFHTNull()
            Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PFHTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIUCD_PTTCNull() As Boolean
            Return Me.IsNull(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PTTCColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIUCD_PTTCNull()
            Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_PTTCColumn) = System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
       Public Function IsPRIUCD_ValideNull() As Boolean
            Return Me.IsNull(Me.tablePRIUCD_PRIX_UCD.PRIUCD_ValideColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPRIUCD_ValideNull()
            Me(Me.tablePRIUCD_PRIX_UCD.PRIUCD_ValideColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRE_PRESENTATIONRow
        Inherits System.Data.DataRow
        
        Private tablePRE_PRESENTATION As PRE_PRESENTATIONDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRE_PRESENTATION = CType(Me.Table,PRE_PRESENTATIONDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CODE_PK() As String
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_SP_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_SP_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_SP_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_EAN_REF() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_EAN_REF' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_NBUNITE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_NBUNITE' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_UP_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CDF_UP_CODE_FK' dans la table 'PRE_PRESENTATION' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CACDT_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CACDT_TEXTE' dans la table 'PRE_PRESENTATION' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_RH_CODE_FK() As String
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_RH_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_RH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_LI_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CDF_LI_CODE_FK' dans la table 'PRE_PRESENTATION' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_ETAT_COMMER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_ETAT_COMMER' dans la table 'PRE_PRESENTATION' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATECOMMER() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATECOMMER' dans la table 'PRE_PRESENTATION' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATESUP() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATESUP' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CDF_PU_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CDF_PU_CODE_FK' dans la table 'PRE_PRESENTATION' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CEPH_CODE_FK' dans la table 'PRE_PRESENTATION' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CATC_CODE_FK' dans la table 'PRE_PRESENTATION' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_NATUCD_CDF_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_NATUCD_CDF_CODE_FK' dans la table 'PRE_PRESENTATIO"& _ 
                            "N' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_NATUCD_CDF_NUM_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_NATUCD_CDF_NUM_FK' dans la table 'PRE_PRESENTATION"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEJOCIP() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEJOCIP' dans la table 'PRE_PRESENTATION' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_AGRCOLL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_AGRCOLL' dans la table 'PRE_PRESENTATION' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEJOCOLL() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEJOCOLL' dans la table 'PRE_PRESENTATION' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEFINCOLL() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEFINCOLL' dans la table 'PRE_PRESENTATION' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATE_APPLIFINCOLL() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATE_APPLIFINCOLL' dans la table 'PRE_PRESENTATION"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_PARTSTATUT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_PARTSTATUT' dans la table 'PRE_PRESENTATION' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_TSS_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_TSS_TEXTE' dans la table 'PRE_PRESENTATION' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_CONSAPOUV() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_CONSAPOUV' dans la table 'PRE_PRESENTATION' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_LIB_CEPS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_LIB_CEPS' dans la table 'PRE_PRESENTATION' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_ADMIN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_ADMINColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_ADMIN' dans la table 'PRE_PRESENTATION' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_ADMINColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATECR() As Date
            Get
                Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRE_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PRE_DATEMJ' dans la table 'PRE_PRESENTATION' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_EAN_REFNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_EAN_REFNull()
            Me(Me.tablePRE_PRESENTATION.PRE_EAN_REFColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_NBUNITENull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_NBUNITENull()
            Me(Me.tablePRE_PRESENTATION.PRE_NBUNITEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CDF_UP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CDF_UP_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CDF_UP_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CACDT_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CACDT_TEXTENull()
            Me(Me.tablePRE_PRESENTATION.PRE_CACDT_TEXTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CDF_LI_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CDF_LI_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CDF_LI_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_ETAT_COMMERNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_ETAT_COMMERNull()
            Me(Me.tablePRE_PRESENTATION.PRE_ETAT_COMMERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATECOMMERNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATECOMMERNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATECOMMERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATESUPNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATESUPNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATESUPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CDF_PU_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CDF_PU_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CDF_PU_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CEPH_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CEPH_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CATC_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CATC_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_NATUCD_CDF_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_NATUCD_CDF_CODE_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_NATUCD_CDF_NUM_FKNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_NATUCD_CDF_NUM_FKNull()
            Me(Me.tablePRE_PRESENTATION.PRE_NATUCD_CDF_NUM_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEJOCIPNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEJOCIPNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCIPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_AGRCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_AGRCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_AGRCOLLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEJOCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEJOCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEJOCOLLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEFINCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEFINCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEFINCOLLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATE_APPLIFINCOLLNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATE_APPLIFINCOLLNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATE_APPLIFINCOLLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_PARTSTATUTNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_PARTSTATUTNull()
            Me(Me.tablePRE_PRESENTATION.PRE_PARTSTATUTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_TSS_TEXTENull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_TSS_TEXTENull()
            Me(Me.tablePRE_PRESENTATION.PRE_TSS_TEXTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_CONSAPOUVNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_CONSAPOUVNull()
            Me(Me.tablePRE_PRESENTATION.PRE_CONSAPOUVColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_LIB_CEPSNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_LIB_CEPSNull()
            Me(Me.tablePRE_PRESENTATION.PRE_LIB_CEPSColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_ADMINNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_ADMINColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_ADMINNull()
            Me(Me.tablePRE_PRESENTATION.PRE_ADMINColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRE_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRE_DATEMJNull()
            Me(Me.tablePRE_PRESENTATION.PRE_DATEMJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPFOTX_SPE_FORME_TEXTERow
        Inherits System.Data.DataRow
        
        Private tableSPFOTX_SPE_FORME_TEXTE As SPFOTX_SPE_FORME_TEXTEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPFOTX_SPE_FORME_TEXTE = CType(Me.Table,SPFOTX_SPE_FORME_TEXTEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOTX_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSPFOTX_SPE_FORME_TEXTE.SPFOTX_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSPFOTX_SPE_FORME_TEXTE.SPFOTX_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPFOTX_TEXTE() As String
            Get
                Return CType(Me(Me.tableSPFOTX_SPE_FORME_TEXTE.SPFOTX_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableSPFOTX_SPE_FORME_TEXTE.SPFOTX_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SP_SPECIALITERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SP_SPECIALITERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SP_SPECIALITERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SP_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYSP_SYNONYME_SPECIALITERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYSP_SYNONYME_SPECIALITERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYSP_SYNONYME_SPECIALITERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYSP_SYNONYME_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPLAB_SPECIALITE_LABORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPLAB_SPECIALITE_LABORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPLAB_SPECIALITE_LABORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPLAB_SPECIALITE_LABORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPLABEX_SPE_LABO_EXPLOITANTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPLABEX_SPE_LABO_EXPLOITANTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPLABEX_SPE_LABO_EXPLOITANTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPLABEX_SPE_LABO_EXPLOITANTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPVO_SPECIALITE_VOIERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPVO_SPECIALITE_VOIERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPVO_SPECIALITE_VOIERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPVO_SPECIALITE_VOIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPFO_SPECIALITE_FORMERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPFO_SPECIALITE_FORMERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPFO_SPECIALITE_FORMERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPFO_SPECIALITE_FORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPFOCFO_SPE_FORME_COMPFORMERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPFOCFO_SPE_FORME_COMPFORMERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPFOCFO_SPE_FORME_COMPFORMERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPFOCFO_SPE_FORME_COMPFORMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPFOCPI_SPE_FORME_COMPINFORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPFOCPI_SPE_FORME_COMPINFORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPFOCPI_SPE_FORME_COMPINFORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPFOCPI_SPE_FORME_COMPINFORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COMPO_COMPOSITIONRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As COMPO_COMPOSITIONRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COMPO_COMPOSITIONRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COMPO_COMPOSITIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COSAC_COMPO_SUBACTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As COSAC_COMPO_SUBACTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COSAC_COMPO_SUBACTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COSAC_COMPO_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COSAU_COMPO_SUBAUXRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As COSAU_COMPO_SUBAUXRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COSAU_COMPO_SUBAUXRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COSAU_COMPO_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COTEN_COMPO_TENEURRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As COTEN_COMPO_TENEURRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COTEN_COMPO_TENEURRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COTEN_COMPO_TENEURRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPADM_SPECIALITE_MODEADMRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPADM_SPECIALITE_MODEADMRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPADM_SPECIALITE_MODEADMRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPADM_SPECIALITE_MODEADMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPTEN_SPECIALITE_TENEURRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPTEN_SPECIALITE_TENEURRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPTEN_SPECIALITE_TENEURRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPTEN_SPECIALITE_TENEURRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPCPH_SPECIALITE_CLASSEPHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPCPH_SPECIALITE_CLASSEPHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPCPH_SPECIALITE_CLASSEPHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPCPH_SPECIALITE_CLASSEPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPDDD_DOSE_USUELLE_JOURRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPDDD_DOSE_USUELLE_JOURRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPDDD_DOSE_USUELLE_JOURRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPDDD_DOSE_USUELLE_JOURRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPCH_SPECIALITE_CHOIXRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPCH_SPECIALITE_CHOIXRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPCH_SPECIALITE_CHOIXRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPCH_SPECIALITE_CHOIXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPRMO_SPECIALITE_RMORowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPRMO_SPECIALITE_RMORow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPRMO_SPECIALITE_RMORow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPRMO_SPECIALITE_RMORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPFTR_SPECIALITE_TRANSPARENCERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPFTR_SPECIALITE_TRANSPARENCERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPFTR_SPECIALITE_TRANSPARENCERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPFTR_SPECIALITE_TRANSPARENCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPFTH_SPEC_INFOTHERAPEUTIQUERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPFTH_SPEC_INFOTHERAPEUTIQUERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPFTH_SPEC_INFOTHERAPEUTIQUERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPFTH_SPEC_INFOTHERAPEUTIQUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPATR_SPEC_AVISTRANSPARENCERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPATR_SPEC_AVISTRANSPARENCERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPATR_SPEC_AVISTRANSPARENCERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPATR_SPEC_AVISTRANSPARENCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPSMR_SERVICE_MEDICAL_RENDURowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPSMR_SERVICE_MEDICAL_RENDURow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPSMR_SERVICE_MEDICAL_RENDURow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPSMR_SERVICE_MEDICAL_RENDURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPCPD_SPE_CDT_PRESCRRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPCPD_SPE_CDT_PRESCRRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPCPD_SPE_CDT_PRESCRRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPCPD_SPE_CDT_PRESCRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRIUCD_PRIX_UCDRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PRIUCD_PRIX_UCDRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRIUCD_PRIX_UCDRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRIUCD_PRIX_UCDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRE_PRESENTATIONRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PRE_PRESENTATIONRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRE_PRESENTATIONRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRE_PRESENTATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPFOTX_SPE_FORME_TEXTERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPFOTX_SPE_FORME_TEXTERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPFOTX_SPE_FORME_TEXTERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPFOTX_SPE_FORME_TEXTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Nomenclature1TableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SP_SPECIALITETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SP_SPECIALITE"
            tableMapping.ColumnMappings.Add("SP_CODE_SQ_PK", "SP_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SP_GSP_CODE_FK", "SP_GSP_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_SLAB_CODE_FK", "SP_CDF_SLAB_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_LI_CODE_FK", "SP_CDF_LI_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CATC_CODE_FK", "SP_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CEPH_CODE_FK", "SP_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CGE_CODE_FK", "SP_CGE_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_PR_CODE_FK", "SP_PR_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_TYPE_SPE", "SP_TYPE_SPE")
            tableMapping.ColumnMappings.Add("SP_GREF_FK", "SP_GREF_FK")
            tableMapping.ColumnMappings.Add("SP_GREF_DATECR_FK", "SP_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("SP_NOM", "SP_NOM")
            tableMapping.ColumnMappings.Add("SP_NOMCOMP", "SP_NOMCOMP")
            tableMapping.ColumnMappings.Add("SP_PH", "SP_PH")
            tableMapping.ColumnMappings.Add("SP_CIPUCD", "SP_CIPUCD")
            tableMapping.ColumnMappings.Add("SP_DATECR", "SP_DATECR")
            tableMapping.ColumnMappings.Add("SP_DATEMJ", "SP_DATEMJ")
            tableMapping.ColumnMappings.Add("SP_NL", "SP_NL")
            tableMapping.ColumnMappings.Add("SP_APHP", "SP_APHP")
            tableMapping.ColumnMappings.Add("SP_DATEJOGENE", "SP_DATEJOGENE")
            tableMapping.ColumnMappings.Add("SP_ORIGINE_GENE", "SP_ORIGINE_GENE")
            tableMapping.ColumnMappings.Add("SP_NOMLONG", "SP_NOMLONG")
            tableMapping.ColumnMappings.Add("SP_CDT_PRESCR_TEXTE", "SP_CDT_PRESCR_TEXTE")
            tableMapping.ColumnMappings.Add("SP_ATC_DDD_TEXTE", "SP_ATC_DDD_TEXTE")
            tableMapping.ColumnMappings.Add("SP_MONO_VIRTUELLE", "SP_MONO_VIRTUELLE")
            tableMapping.ColumnMappings.Add("SP_CIPUCD13", "SP_CIPUCD13")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SP_SPECIALITE] WHERE (([SP_CODE_SQ_PK] = @Original_SP_CO" & _
                "DE_SQ_PK) AND ((@IsNull_SP_GSP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP" & _
                "_GSP_CODE_FK] = @Original_SP_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Origina" & _
                "l_SP_CDF_SLAB_CODE_FK) AND ([SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) A" & _
                "ND ((@IsNull_SP_CATC_CODE_FK = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_COD" & _
                "E_FK] = @Original_SP_CATC_CODE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CE" & _
                "PH_CODE_FK] IS NULL) OR ([SP_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@" & _
                "IsNull_SP_CGE_CODE_FK = 1 AND [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @" & _
                "Original_SP_CGE_CODE_FK)) AND ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((" & _
                "@IsNull_SP_TYPE_SPE = 1 AND [SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original" & _
                "_SP_TYPE_SPE)) AND ((@IsNull_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GR" & _
                "EF_FK] = @Original_SP_GREF_FK)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF" & _
                "_DATECR_FK] IS NULL) OR ([SP_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND" & _
                " ([SP_NOM] = @Original_SP_NOM) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS " & _
                "NULL) OR ([SP_NOMCOMP] = @Original_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_" & _
                "PH] IS NULL) OR ([SP_PH] = @Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP" & _
                "_CIPUCD] IS NULL) OR ([SP_CIPUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Or" & _
                "iginal_SP_DATECR) AND ((@IsNull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_D" & _
                "ATEMJ] = @Original_SP_DATEMJ)) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR (" & _
                "[SP_NL] = @Original_SP_NL)) AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR " & _
                "([SP_APHP] = @Original_SP_APHP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOG" & _
                "ENE] IS NULL) OR ([SP_DATEJOGENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_O" & _
                "RIGINE_GENE = 1 AND [SP_ORIGINE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original" & _
                "_SP_ORIGINE_GENE)) AND ((@IsNull_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([S" & _
                "P_NOMLONG] = @Original_SP_NOMLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [S" & _
                "P_CDT_PRESCR_TEXTE] IS NULL) OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR" & _
                "_TEXTE)) AND ((@IsNull_SP_ATC_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR (" & _
                "[SP_ATC_DDD_TEXTE] = @Original_SP_ATC_DDD_TEXTE)) AND ((@IsNull_SP_MONO_VIRTUELL" & _
                "E = 1 AND [SP_MONO_VIRTUELLE] IS NULL) OR ([SP_MONO_VIRTUELLE] = @Original_SP_MO" & _
                "NO_VIRTUELLE))AND ((@IsNull_SP_CIPUCD13 = 1 AND [SP_CIPUCD13] IS NULL) OR ([SP_C" & _
                "IPUCD13] = @Original_SP_CIPUCD13)))"
            
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD13", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD13", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))

            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SP_SPECIALITE] ([SP_CODE_SQ_PK], [SP_GSP_CODE_FK], [SP_C" & _
                "DF_SLAB_CODE_FK], [SP_CDF_LI_CODE_FK], [SP_CATC_CODE_FK], [SP_CEPH_CODE_FK], [SP" & _
                "_CGE_CODE_FK], [SP_PR_CODE_FK], [SP_TYPE_SPE], [SP_GREF_FK], [SP_GREF_DATECR_FK]" & _
                ", [SP_NOM], [SP_NOMCOMP], [SP_PH], [SP_CIPUCD], [SP_DATECR], [SP_DATEMJ], [SP_NL" & _
                "], [SP_APHP], [SP_DATEJOGENE], [SP_ORIGINE_GENE], [SP_NOMLONG], [SP_CDT_PRESCR_T" & _
                "EXTE], [SP_ATC_DDD_TEXTE], [SP_MONO_VIRTUELLE], [SP_CIPUCD13]) VALUES (@SP_CODE_SQ_PK, @SP_GSP_CODE_FK, @SP_CDF_SLAB" & _
                "_CODE_FK, @SP_CDF_LI_CODE_FK, @SP_CATC_CODE_FK, @SP_CEPH_CODE_FK, @SP_CGE_CODE_F" & _
                "K, @SP_PR_CODE_FK, @SP_TYPE_SPE, @SP_GREF_FK, @SP_GREF_DATECR_FK, @SP_NOM, @SP_N" & _
                "OMCOMP, @SP_PH, @SP_CIPUCD, @SP_DATECR, @SP_DATEMJ, @SP_NL, @SP_APHP, @SP_DATEJO" & _
                "GENE, @SP_ORIGINE_GENE, @SP_NOMLONG, @SP_CDT_PRESCR_TEXTE, @SP_ATC_DDD_TEXTE, @SP_MONO_VIRTUELLE, @SP_CIPUCD13);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP" & _
                "_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_G" & _
                "REF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_D" & _
                "ATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR" & _
                "_TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13 FROM THERIAQUE.SP_SPECIALITE WHERE (SP_CODE_SQ_PK = @SP" & _
                "_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CIPUCD13", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SP_SPECIALITE] SET [SP_CODE_SQ_PK] = @SP_CODE_SQ_PK, [SP_GSP_" & _
                "CODE_FK] = @SP_GSP_CODE_FK, [SP_CDF_SLAB_CODE_FK] = @SP_CDF_SLAB_CODE_FK, [SP_CD" & _
                "F_LI_CODE_FK] = @SP_CDF_LI_CODE_FK, [SP_CATC_CODE_FK] = @SP_CATC_CODE_FK, [SP_CE" & _
                "PH_CODE_FK] = @SP_CEPH_CODE_FK, [SP_CGE_CODE_FK] = @SP_CGE_CODE_FK, [SP_PR_CODE_" & _
                "FK] = @SP_PR_CODE_FK, [SP_TYPE_SPE] = @SP_TYPE_SPE, [SP_GREF_FK] = @SP_GREF_FK, " & _
                "[SP_GREF_DATECR_FK] = @SP_GREF_DATECR_FK, [SP_NOM] = @SP_NOM, [SP_NOMCOMP] = @SP" & _
                "_NOMCOMP, [SP_PH] = @SP_PH, [SP_CIPUCD] = @SP_CIPUCD, [SP_DATECR] = @SP_DATECR, " & _
                "[SP_DATEMJ] = @SP_DATEMJ, [SP_NL] = @SP_NL, [SP_APHP] = @SP_APHP, [SP_DATEJOGENE" & _
                "] = @SP_DATEJOGENE, [SP_ORIGINE_GENE] = @SP_ORIGINE_GENE, [SP_NOMLONG] = @SP_NOM" & _
                "LONG, [SP_CDT_PRESCR_TEXTE] = @SP_CDT_PRESCR_TEXTE, [SP_ATC_DDD_TEXTE] = @SP_ATC" & _
                "_DDD_TEXTE, [SP_MONO_VIRTUELLE] = @SP_MONO_VIRTUELLE, [SP_CIPUCD13] = @SP_CIPUCD13  WHERE (([SP_CODE_SQ_PK] = @Original_SP_CODE_SQ_PK) AND ((@IsNull_SP_G" & _
                "SP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP_GSP_CODE_FK] = @Original_SP" & _
                "_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Original_SP_CDF_SLAB_CODE_FK) AND (" & _
                "[SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) AND ((@IsNull_SP_CATC_CODE_FK" & _
                " = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_CODE_FK] = @Original_SP_CATC_CO" & _
                "DE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CEPH_CODE_FK] IS NULL) OR ([SP" & _
                "_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@IsNull_SP_CGE_CODE_FK = 1 AN" & _
                "D [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @Original_SP_CGE_CODE_FK)) AN" & _
                "D ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((@IsNull_SP_TYPE_SPE = 1 AND " & _
                "[SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original_SP_TYPE_SPE)) AND ((@IsNull" & _
                "_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GREF_FK] = @Original_SP_GREF_F" & _
                "K)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF_DATECR_FK] IS NULL) OR ([SP" & _
                "_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND ([SP_NOM] = @Original_SP_NO" & _
                "M) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS NULL) OR ([SP_NOMCOMP] = @Or" & _
                "iginal_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_PH] IS NULL) OR ([SP_PH] = @" & _
                "Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP_CIPUCD] IS NULL) OR ([SP_CI" & _
                "PUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Original_SP_DATECR) AND ((@IsN" & _
                "ull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_DATEMJ] = @Original_SP_DATEMJ" & _
                ")) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR ([SP_NL] = @Original_SP_NL)) " & _
                "AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR ([SP_APHP] = @Original_SP_AP" & _
                "HP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOGENE] IS NULL) OR ([SP_DATEJO" & _
                "GENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_ORIGINE_GENE = 1 AND [SP_ORIG" & _
                "INE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original_SP_ORIGINE_GENE)) AND ((@Is" & _
                "Null_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([SP_NOMLONG] = @Original_SP_NO" & _
                "MLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [SP_CDT_PRESCR_TEXTE] IS NULL)" & _
                " OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR_TEXTE)) AND ((@IsNull_SP_AT" & _
                "C_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR ([SP_ATC_DDD_TEXTE] = @Origin" & _
                "al_SP_ATC_DDD_TEXTE))AND ((@IsNull_SP_MONO_VIRTUELLE = 1 AND [SP_MONO_VIRTUELLE] IS NULL)" & _
                " OR ([SP_MONO_VIRTUELLE] = @Original_SP_MONO_VIRTUELLE))AND ((@IsNull_SP_CIPUCD13 = 1 AND [SP_CIPUCD13] IS NULL) OR ([SP_CI" & _
                "PUCD13] = @Original_SP_CIPUCD13)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_" & _
                "FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_C" & _
                "ODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, S" & _
                "P_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, " & _
                "SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13  FROM THERIAQUE.SP_SPECIALITE W" & _
                "HERE (SP_CODE_SQ_PK = @SP_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_MONO_VIRTUELLE", System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CIPUCD13", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_MONO_VIRTUELLE", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SP_MONO_VIRTUELLE", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD13", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD13", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD13", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_" & _
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR" & _
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA" & _
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_" & _
                "TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13 FROM THERIAQUE.SP_SPECIALITE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_" & _
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR" & _
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA" & _
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_" & _
                "TEXTE, SP_ATC_DDD_TEXTE, SP_MONO_VIRTUELLE, SP_CIPUCD13 FROM THERIAQUE.SP_SPECIALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SP_CODE_SQ_PK = @S" & _
                "P_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable = New dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable, ByVal SP_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SP_CODE_SQ_PK As Integer) As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable = New dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SP_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SP_SPECIALITE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String, _
                    ByVal Original_SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean), _
                    ByVal Original_SP_CIPUCD13 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SP_CODE_SQ_PK, Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SP_CDF_SLAB_CODE_FK, String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SP_CDF_LI_CODE_FK, String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SP_CATC_CODE_FK, String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SP_CEPH_CODE_FK, String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SP_PR_CODE_FK, Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SP_TYPE_SPE, String)
            End If
            If (Original_SP_GREF_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SP_NOM, String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SP_NOMCOMP, String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SP_PH, String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SP_CIPUCD, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_SP_DATECR, Date)
            If (Original_SP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SP_NL, String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_SP_APHP, String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_SP_ORIGINE_GENE, String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_SP_NOMLONG, String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_SP_CDT_PRESCR_TEXTE, String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_SP_ATC_DDD_TEXTE, String)
            End If
            If (Original_SP_MONO_VIRTUELLE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_SP_MONO_VIRTUELLE.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_SP_CIPUCD13, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String, _
                    ByVal SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean), _
                    ByVal SP_CIPUCD13 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK, String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK, String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK, String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK, String)
            End If
            If (SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(SP_PR_CODE_FK, Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SP_TYPE_SPE, String)
            End If
            If (SP_GREF_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SP_NOM, String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SP_NOMCOMP, String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SP_PH, String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SP_CIPUCD, String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(SP_DATECR, Date)
            If (SP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SP_NL, String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SP_APHP, String)
            End If
            If (SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE, String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SP_NOMLONG, String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE, String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE, String)
            End If
            If (SP_MONO_VIRTUELLE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SP_MONO_VIRTUELLE.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SP_CIPUCD13, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String, _
                    ByVal SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean), _
                    ByVal SP_CIPUCD13 As String, _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String, _
                    ByVal Original_SP_MONO_VIRTUELLE As Global.System.Nullable(Of Boolean), _
                    ByVal Original_SP_CIPUCD13 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK, String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK, String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK, String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK, String)
            End If
            If (SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SP_PR_CODE_FK, Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SP_TYPE_SPE, String)
            End If
            If (SP_GREF_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SP_NOM, String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SP_NOMCOMP, String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SP_PH, String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SP_CIPUCD, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SP_DATECR, Date)
            If (SP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SP_NL, String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SP_APHP, String)
            End If
            If (SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE, String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SP_NOMLONG, String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE, String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE, String)
            End If
            If (SP_MONO_VIRTUELLE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SP_MONO_VIRTUELLE.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SP_CIPUCD13, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SP_CODE_SQ_PK, Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_SP_CDF_SLAB_CODE_FK, String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SP_CDF_LI_CODE_FK, String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SP_CATC_CODE_FK, String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SP_CEPH_CODE_FK, String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_SP_PR_CODE_FK, Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SP_TYPE_SPE, String)
            End If
            If (Original_SP_GREF_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_SP_NOM, String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_SP_NOMCOMP, String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_SP_PH, String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_SP_CIPUCD, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_SP_DATECR, Date)
            If (Original_SP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_SP_NL, String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_SP_APHP, String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_SP_ORIGINE_GENE, String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_SP_NOMLONG, String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_SP_CDT_PRESCR_TEXTE, String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_SP_ATC_DDD_TEXTE, String)
            End If
            If (Original_SP_MONO_VIRTUELLE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_SP_MONO_VIRTUELLE.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_SP_CIPUCD13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_SP_CIPUCD13, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYSP_SYNONYME_SPECIALITETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYSP_SYNONYME_SPECIALITE"
            tableMapping.ColumnMappings.Add("SYSP_NOM_PK", "SYSP_NOM_PK")
            tableMapping.ColumnMappings.Add("SYSP_SP_CODE_FK", "SYSP_SP_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYSP_SYNONYME_SPECIALITE] WHERE (([SYSP_NOM_PK] = @Origi" & _
                "nal_SYSP_NOM_PK) AND ([SYSP_SP_CODE_FK] = @Original_SYSP_SP_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSP_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSP_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_SP_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYSP_SYNONYME_SPECIALITE] ([SYSP_NOM_PK], [SYSP_SP_CODE_" & _
                "FK]) VALUES (@SYSP_NOM_PK, @SYSP_SP_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYSP_NOM_PK, SYSP_SP_CODE_" & _
                "FK FROM THERIAQUE.SYSP_SYNONYME_SPECIALITE WHERE (SYSP_NOM_PK = @SYSP_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSP_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSP_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_SP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYSP_SYNONYME_SPECIALITE] SET [SYSP_NOM_PK] = @SYSP_NOM_PK, [" & _
                "SYSP_SP_CODE_FK] = @SYSP_SP_CODE_FK WHERE (([SYSP_NOM_PK] = @Original_SYSP_NOM_P" & _
                "K) AND ([SYSP_SP_CODE_FK] = @Original_SYSP_SP_CODE_FK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYSP_NOM_PK, SY" & _
                "SP_SP_CODE_FK FROM THERIAQUE.SYSP_SYNONYME_SPECIALITE WHERE (SYSP_NOM_PK = @SYSP" & _
                "_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSP_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSP_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_SP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSP_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSP_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSP_SP_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYSP_NOM_PK, SYSP_SP_CODE_FK FROM THERIAQUE.SYSP_SYNONYME_SPECIALITE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYSP_NOM_PK, SYSP_SP_CODE_FK FROM THERIAQUE.SYSP_SYNONYME_SPECIALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "wher" & _
                "e SYSP_SP_CODE_FK = @SYSP_SP_CODE_FK "
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSP_SP_CODE_FK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SYSP_SP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable = New dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable, ByVal SYSP_SP_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYSP_SP_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYSP_SP_CODE_FK As Integer) As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYSP_SP_CODE_FK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable = New dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SYSP_SYNONYME_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SYSP_SYNONYME_SPECIALITE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYSP_NOM_PK As String, ByVal Original_SYSP_SP_CODE_FK As Integer) As Integer
            If (Original_SYSP_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYSP_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYSP_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYSP_SP_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYSP_NOM_PK As String, ByVal SYSP_SP_CODE_FK As Integer) As Integer
            If (SYSP_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYSP_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYSP_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYSP_SP_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYSP_NOM_PK As String, ByVal SYSP_SP_CODE_FK As Integer, ByVal Original_SYSP_NOM_PK As String, ByVal Original_SYSP_SP_CODE_FK As Integer) As Integer
            If (SYSP_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYSP_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYSP_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYSP_SP_CODE_FK, Integer)
            If (Original_SYSP_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYSP_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYSP_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYSP_SP_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPLAB_SPECIALITE_LABOTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPLAB_SPECIALITE_LABO"
            tableMapping.ColumnMappings.Add("SPLAB_SP_CODE_FK_PK", "SPLAB_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPLAB_CDF_LAB_CODE_FK_PK", "SPLAB_CDF_LAB_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPLAB_SPECIALITE_LABO] WHERE (([SPLAB_SP_CODE_FK_PK] = @"& _ 
                "Original_SPLAB_SP_CODE_FK_PK) AND ([SPLAB_CDF_LAB_CODE_FK_PK] = @Original_SPLAB_"& _ 
                "CDF_LAB_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLAB_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLAB_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPLAB_SPECIALITE_LABO] ([SPLAB_SP_CODE_FK_PK], [SPLAB_CD"& _ 
                "F_LAB_CODE_FK_PK]) VALUES (@SPLAB_SP_CODE_FK_PK, @SPLAB_CDF_LAB_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT SPLAB_SP_CODE_FK_PK, SPLAB_CDF_LAB_CODE_FK_PK FROM THERIAQUE.SPLAB_SPECIALI"& _ 
                "TE_LABO WHERE (SPLAB_CDF_LAB_CODE_FK_PK = @SPLAB_CDF_LAB_CODE_FK_PK) AND (SPLAB_"& _ 
                "SP_CODE_FK_PK = @SPLAB_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLAB_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLAB_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPLAB_SPECIALITE_LABO] SET [SPLAB_SP_CODE_FK_PK] = @SPLAB_SP_"& _ 
                "CODE_FK_PK, [SPLAB_CDF_LAB_CODE_FK_PK] = @SPLAB_CDF_LAB_CODE_FK_PK WHERE (([SPLA"& _ 
                "B_SP_CODE_FK_PK] = @Original_SPLAB_SP_CODE_FK_PK) AND ([SPLAB_CDF_LAB_CODE_FK_PK"& _ 
                "] = @Original_SPLAB_CDF_LAB_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPLAB_SP_CODE_FK_PK, SPLAB_CDF"& _ 
                "_LAB_CODE_FK_PK FROM THERIAQUE.SPLAB_SPECIALITE_LABO WHERE (SPLAB_CDF_LAB_CODE_F"& _ 
                "K_PK = @SPLAB_CDF_LAB_CODE_FK_PK) AND (SPLAB_SP_CODE_FK_PK = @SPLAB_SP_CODE_FK_P"& _ 
                "K)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLAB_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLAB_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLAB_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLAB_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPLAB_SP_CODE_FK_PK, SPLAB_CDF_LAB_CODE_FK_PK FROM THERIAQUE.SPLAB_SPECIAL" & _
                "ITE_LABO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPLAB_SP_CODE_FK_PK, SPLAB_CDF_LAB_CODE_FK_PK FROM THERIAQUE.SPLAB_SPECIAL" & _
                "ITE_LABO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where SPLAB_SP_CODE_FK_PK = @SPLAB_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLAB_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPLAB_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable = New dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable, ByVal SPLAB_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPLAB_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPLAB_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPLAB_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable = New dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPLAB_SPECIALITE_LABODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPLAB_SPECIALITE_LABO")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPLAB_SP_CODE_FK_PK As Integer, ByVal Original_SPLAB_CDF_LAB_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPLAB_SP_CODE_FK_PK, Integer)
            If (Original_SPLAB_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPLAB_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPLAB_CDF_LAB_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPLAB_SP_CODE_FK_PK As Integer, ByVal SPLAB_CDF_LAB_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPLAB_SP_CODE_FK_PK, Integer)
            If (SPLAB_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPLAB_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPLAB_CDF_LAB_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPLAB_SP_CODE_FK_PK As Integer, ByVal SPLAB_CDF_LAB_CODE_FK_PK As String, ByVal Original_SPLAB_SP_CODE_FK_PK As Integer, ByVal Original_SPLAB_CDF_LAB_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPLAB_SP_CODE_FK_PK, Integer)
            If (SPLAB_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPLAB_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPLAB_CDF_LAB_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPLAB_SP_CODE_FK_PK, Integer)
            If (Original_SPLAB_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPLAB_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPLAB_CDF_LAB_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPLABEX_SPE_LABO_EXPLOITANTTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPLABEX_SPE_LABO_EXPLOITANT"
            tableMapping.ColumnMappings.Add("SPLABEX_SP_CODE_FK_PK", "SPLABEX_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPLABEX_CDF_LAB_CODE_FK_PK", "SPLABEX_CDF_LAB_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPLABEX_NUMORD", "SPLABEX_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPLABEX_SPE_LABO_EXPLOITANT] WHERE (([SPLABEX_SP_CODE_FK" & _
                "_PK] = @Original_SPLABEX_SP_CODE_FK_PK) AND ([SPLABEX_CDF_LAB_CODE_FK_PK] = @Ori" & _
                "ginal_SPLABEX_CDF_LAB_CODE_FK_PK) AND ((@IsNull_SPLABEX_NUMORD = 1 AND [SPLABEX_" & _
                "NUMORD] IS NULL) OR ([SPLABEX_NUMORD] = @Original_SPLABEX_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLABEX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPLABEX_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLABEX_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPLABEX_SPE_LABO_EXPLOITANT] ([SPLABEX_SP_CODE_FK_PK], [" & _
                "SPLABEX_CDF_LAB_CODE_FK_PK], [SPLABEX_NUMORD]) VALUES (@SPLABEX_SP_CODE_FK_PK, @" & _
                "SPLABEX_CDF_LAB_CODE_FK_PK, @SPLABEX_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPLABEX_SP_CODE_FK_PK, SPL" & _
                "ABEX_CDF_LAB_CODE_FK_PK, SPLABEX_NUMORD FROM THERIAQUE.SPLABEX_SPE_LABO_EXPLOITA" & _
                "NT WHERE (SPLABEX_CDF_LAB_CODE_FK_PK = @SPLABEX_CDF_LAB_CODE_FK_PK) AND (SPLABEX" & _
                "_SP_CODE_FK_PK = @SPLABEX_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPLABEX_SPE_LABO_EXPLOITANT] SET [SPLABEX_SP_CODE_FK_PK] = @S" & _
                "PLABEX_SP_CODE_FK_PK, [SPLABEX_CDF_LAB_CODE_FK_PK] = @SPLABEX_CDF_LAB_CODE_FK_PK" & _
                ", [SPLABEX_NUMORD] = @SPLABEX_NUMORD WHERE (([SPLABEX_SP_CODE_FK_PK] = @Original" & _
                "_SPLABEX_SP_CODE_FK_PK) AND ([SPLABEX_CDF_LAB_CODE_FK_PK] = @Original_SPLABEX_CD" & _
                "F_LAB_CODE_FK_PK) AND ((@IsNull_SPLABEX_NUMORD = 1 AND [SPLABEX_NUMORD] IS NULL)" & _
                " OR ([SPLABEX_NUMORD] = @Original_SPLABEX_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPLABEX_SP_CODE_FK_" & _
                "PK, SPLABEX_CDF_LAB_CODE_FK_PK, SPLABEX_NUMORD FROM THERIAQUE.SPLABEX_SPE_LABO_E" & _
                "XPLOITANT WHERE (SPLABEX_CDF_LAB_CODE_FK_PK = @SPLABEX_CDF_LAB_CODE_FK_PK) AND (" & _
                "SPLABEX_SP_CODE_FK_PK = @SPLABEX_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLABEX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_CDF_LAB_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPLABEX_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPLABEX_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPLABEX_SP_CODE_FK_PK, SPLABEX_CDF_LAB_CODE_FK_PK, SPLABEX_NUMORD FROM THE" & _
                "RIAQUE.SPLABEX_SPE_LABO_EXPLOITANT"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPLABEX_SP_CODE_FK_PK, SPLABEX_CDF_LAB_CODE_FK_PK, SPLABEX_NUMORD FROM THE" & _
                "RIAQUE.SPLABEX_SPE_LABO_EXPLOITANT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SPLABEX_SP_CODE_FK_PK = @SPLABEX_SP_" & _
                "CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPLABEX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPLABEX_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable = New dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable, ByVal SPLABEX_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPLABEX_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPLABEX_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPLABEX_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable = New dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPLABEX_SPE_LABO_EXPLOITANTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPLABEX_SPE_LABO_EXPLOITANT")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPLABEX_SP_CODE_FK_PK As Integer, ByVal Original_SPLABEX_CDF_LAB_CODE_FK_PK As String, ByVal Original_SPLABEX_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPLABEX_SP_CODE_FK_PK, Integer)
            If (Original_SPLABEX_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPLABEX_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPLABEX_CDF_LAB_CODE_FK_PK, String)
            End If
            If (Original_SPLABEX_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPLABEX_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPLABEX_SP_CODE_FK_PK As Integer, ByVal SPLABEX_CDF_LAB_CODE_FK_PK As String, ByVal SPLABEX_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPLABEX_SP_CODE_FK_PK, Integer)
            If (SPLABEX_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPLABEX_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPLABEX_CDF_LAB_CODE_FK_PK, String)
            End If
            If (SPLABEX_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPLABEX_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPLABEX_SP_CODE_FK_PK As Integer, ByVal SPLABEX_CDF_LAB_CODE_FK_PK As String, ByVal SPLABEX_NUMORD As System.Nullable(Of Short), ByVal Original_SPLABEX_SP_CODE_FK_PK As Integer, ByVal Original_SPLABEX_CDF_LAB_CODE_FK_PK As String, ByVal Original_SPLABEX_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPLABEX_SP_CODE_FK_PK, Integer)
            If (SPLABEX_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPLABEX_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPLABEX_CDF_LAB_CODE_FK_PK, String)
            End If
            If (SPLABEX_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPLABEX_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPLABEX_SP_CODE_FK_PK, Integer)
            If (Original_SPLABEX_CDF_LAB_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPLABEX_CDF_LAB_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPLABEX_CDF_LAB_CODE_FK_PK, String)
            End If
            If (Original_SPLABEX_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPLABEX_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPVO_SPECIALITE_VOIETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPVO_SPECIALITE_VOIE"
            tableMapping.ColumnMappings.Add("SPVO_SP_CODE_FK_PK", "SPVO_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPVO_CDF_VO_CODE_FK_PK", "SPVO_CDF_VO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPVO_NUMSEQ", "SPVO_NUMSEQ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPVO_SPECIALITE_VOIE] WHERE (([SPVO_SP_CODE_FK_PK] = @Or"& _ 
                "iginal_SPVO_SP_CODE_FK_PK) AND ([SPVO_CDF_VO_CODE_FK_PK] = @Original_SPVO_CDF_VO"& _ 
                "_CODE_FK_PK) AND ((@IsNull_SPVO_NUMSEQ = 1 AND [SPVO_NUMSEQ] IS NULL) OR ([SPVO_"& _ 
                "NUMSEQ] = @Original_SPVO_NUMSEQ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPVO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPVO_NUMSEQ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_NUMSEQ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPVO_NUMSEQ", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_NUMSEQ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPVO_SPECIALITE_VOIE] ([SPVO_SP_CODE_FK_PK], [SPVO_CDF_V"& _ 
                "O_CODE_FK_PK], [SPVO_NUMSEQ]) VALUES (@SPVO_SP_CODE_FK_PK, @SPVO_CDF_VO_CODE_FK_"& _ 
                "PK, @SPVO_NUMSEQ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPVO_SP_CODE_FK_PK, SPVO_CDF_VO_CODE_FK_PK, SPVO_NUMS"& _ 
                "EQ FROM THERIAQUE.SPVO_SPECIALITE_VOIE WHERE (SPVO_CDF_VO_CODE_FK_PK = @SPVO_CDF"& _ 
                "_VO_CODE_FK_PK) AND (SPVO_SP_CODE_FK_PK = @SPVO_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_NUMSEQ", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_NUMSEQ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPVO_SPECIALITE_VOIE] SET [SPVO_SP_CODE_FK_PK] = @SPVO_SP_COD"& _ 
                "E_FK_PK, [SPVO_CDF_VO_CODE_FK_PK] = @SPVO_CDF_VO_CODE_FK_PK, [SPVO_NUMSEQ] = @SP"& _ 
                "VO_NUMSEQ WHERE (([SPVO_SP_CODE_FK_PK] = @Original_SPVO_SP_CODE_FK_PK) AND ([SPV"& _ 
                "O_CDF_VO_CODE_FK_PK] = @Original_SPVO_CDF_VO_CODE_FK_PK) AND ((@IsNull_SPVO_NUMS"& _ 
                "EQ = 1 AND [SPVO_NUMSEQ] IS NULL) OR ([SPVO_NUMSEQ] = @Original_SPVO_NUMSEQ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPVO_SP_CODE_FK_PK, SPVO_CDF_VO_CODE_FK_PK, SPVO_NUMSEQ FROM THERIAQUE.S"& _ 
                "PVO_SPECIALITE_VOIE WHERE (SPVO_CDF_VO_CODE_FK_PK = @SPVO_CDF_VO_CODE_FK_PK) AND"& _ 
                " (SPVO_SP_CODE_FK_PK = @SPVO_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_NUMSEQ", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_NUMSEQ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPVO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPVO_NUMSEQ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_NUMSEQ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPVO_NUMSEQ", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPVO_NUMSEQ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPVO_SP_CODE_FK_PK, SPVO_CDF_VO_CODE_FK_PK, SPVO_NUMSEQ FROM THERIAQUE.SPV" & _
                "O_SPECIALITE_VOIE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPVO_SP_CODE_FK_PK, SPVO_CDF_VO_CODE_FK_PK, SPVO_NUMSEQ FROM THERIAQUE.SPV" & _
                "O_SPECIALITE_VOIE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPVO_SP_CODE_FK_PK = @SPVO_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPVO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPVO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable = New dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable, ByVal SPVO_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPVO_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPVO_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPVO_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable = New dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPVO_SPECIALITE_VOIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPVO_SPECIALITE_VOIE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPVO_SP_CODE_FK_PK As Integer, ByVal Original_SPVO_CDF_VO_CODE_FK_PK As String, ByVal Original_SPVO_NUMSEQ As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPVO_SP_CODE_FK_PK, Integer)
            If (Original_SPVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_SPVO_NUMSEQ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPVO_NUMSEQ.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPVO_SP_CODE_FK_PK As Integer, ByVal SPVO_CDF_VO_CODE_FK_PK As String, ByVal SPVO_NUMSEQ As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPVO_SP_CODE_FK_PK, Integer)
            If (SPVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (SPVO_NUMSEQ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPVO_NUMSEQ.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPVO_SP_CODE_FK_PK As Integer, ByVal SPVO_CDF_VO_CODE_FK_PK As String, ByVal SPVO_NUMSEQ As System.Nullable(Of Short), ByVal Original_SPVO_SP_CODE_FK_PK As Integer, ByVal Original_SPVO_CDF_VO_CODE_FK_PK As String, ByVal Original_SPVO_NUMSEQ As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPVO_SP_CODE_FK_PK, Integer)
            If (SPVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (SPVO_NUMSEQ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPVO_NUMSEQ.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPVO_SP_CODE_FK_PK, Integer)
            If (Original_SPVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_SPVO_NUMSEQ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPVO_NUMSEQ.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPFO_SPECIALITE_FORMETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPFO_SPECIALITE_FORME"
            tableMapping.ColumnMappings.Add("SPFO_SP_CODE_FK_PK", "SPFO_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFO_CDF_FO_CODE_FK_PK", "SPFO_CDF_FO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFO_NUMSEQ_PK", "SPFO_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("SPFO_NUMORD", "SPFO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPFO_SPECIALITE_FORME] WHERE (([SPFO_SP_CODE_FK_PK] = @O" & _
                "riginal_SPFO_SP_CODE_FK_PK) AND ([SPFO_CDF_FO_CODE_FK_PK] = @Original_SPFO_CDF_F" & _
                "O_CODE_FK_PK) AND ([SPFO_NUMSEQ_PK] = @Original_SPFO_NUMSEQ_PK) AND ((@IsNull_SP" & _
                "FO_NUMORD = 1 AND [SPFO_NUMORD] IS NULL) OR ([SPFO_NUMORD] = @Original_SPFO_NUMO" & _
                "RD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_NUMSEQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMSEQ_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPFO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPFO_SPECIALITE_FORME] ([SPFO_SP_CODE_FK_PK], [SPFO_CDF_" & _
                "FO_CODE_FK_PK], [SPFO_NUMSEQ_PK], [SPFO_NUMORD]) VALUES (@SPFO_SP_CODE_FK_PK, @S" & _
                "PFO_CDF_FO_CODE_FK_PK, @SPFO_NUMSEQ_PK, @SPFO_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPFO_SP_CODE_FK_P" & _
                "K, SPFO_CDF_FO_CODE_FK_PK, SPFO_NUMSEQ_PK, SPFO_NUMORD FROM THERIAQUE.SPFO_SPECI" & _
                "ALITE_FORME WHERE (SPFO_CDF_FO_CODE_FK_PK = @SPFO_CDF_FO_CODE_FK_PK) AND (SPFO_N" & _
                "UMSEQ_PK = @SPFO_NUMSEQ_PK) AND (SPFO_SP_CODE_FK_PK = @SPFO_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_NUMSEQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMSEQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPFO_SPECIALITE_FORME] SET [SPFO_SP_CODE_FK_PK] = @SPFO_SP_CO" & _
                "DE_FK_PK, [SPFO_CDF_FO_CODE_FK_PK] = @SPFO_CDF_FO_CODE_FK_PK, [SPFO_NUMSEQ_PK] =" & _
                " @SPFO_NUMSEQ_PK, [SPFO_NUMORD] = @SPFO_NUMORD WHERE (([SPFO_SP_CODE_FK_PK] = @O" & _
                "riginal_SPFO_SP_CODE_FK_PK) AND ([SPFO_CDF_FO_CODE_FK_PK] = @Original_SPFO_CDF_F" & _
                "O_CODE_FK_PK) AND ([SPFO_NUMSEQ_PK] = @Original_SPFO_NUMSEQ_PK) AND ((@IsNull_SP" & _
                "FO_NUMORD = 1 AND [SPFO_NUMORD] IS NULL) OR ([SPFO_NUMORD] = @Original_SPFO_NUMO" & _
                "RD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPFO_SP_CODE_FK_PK, SPFO_CDF_FO_CODE_FK_PK, SPFO_NUMSEQ_PK, SPFO_" & _
                "NUMORD FROM THERIAQUE.SPFO_SPECIALITE_FORME WHERE (SPFO_CDF_FO_CODE_FK_PK = @SPF" & _
                "O_CDF_FO_CODE_FK_PK) AND (SPFO_NUMSEQ_PK = @SPFO_NUMSEQ_PK) AND (SPFO_SP_CODE_FK" & _
                "_PK = @SPFO_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_NUMSEQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMSEQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_NUMSEQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMSEQ_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPFO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFO_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPFO_SP_CODE_FK_PK, SPFO_CDF_FO_CODE_FK_PK, SPFO_NUMSEQ_PK, SPFO_NUMORD FR" & _
                "OM THERIAQUE.SPFO_SPECIALITE_FORME"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPFO_SP_CODE_FK_PK, SPFO_CDF_FO_CODE_FK_PK, SPFO_NUMSEQ_PK, SPFO_NUMORD FR" & _
                "OM THERIAQUE.SPFO_SPECIALITE_FORME" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SPFO_SP_CODE_FK_PK = @SPFO_SP_CODE_FK" & _
                "_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable = New dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable, ByVal SPFO_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFO_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPFO_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFO_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable = New dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPFO_SPECIALITE_FORMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPFO_SPECIALITE_FORME")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPFO_SP_CODE_FK_PK As Integer, ByVal Original_SPFO_CDF_FO_CODE_FK_PK As String, ByVal Original_SPFO_NUMSEQ_PK As Integer, ByVal Original_SPFO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPFO_SP_CODE_FK_PK, Integer)
            If (Original_SPFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPFO_NUMSEQ_PK, Integer)
            If (Original_SPFO_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SPFO_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPFO_SP_CODE_FK_PK As Integer, ByVal SPFO_CDF_FO_CODE_FK_PK As String, ByVal SPFO_NUMSEQ_PK As Integer, ByVal SPFO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPFO_SP_CODE_FK_PK, Integer)
            If (SPFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPFO_NUMSEQ_PK, Integer)
            If (SPFO_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPFO_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPFO_SP_CODE_FK_PK As Integer, ByVal SPFO_CDF_FO_CODE_FK_PK As String, ByVal SPFO_NUMSEQ_PK As Integer, ByVal SPFO_NUMORD As System.Nullable(Of Short), ByVal Original_SPFO_SP_CODE_FK_PK As Integer, ByVal Original_SPFO_CDF_FO_CODE_FK_PK As String, ByVal Original_SPFO_NUMSEQ_PK As Integer, ByVal Original_SPFO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPFO_SP_CODE_FK_PK, Integer)
            If (SPFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPFO_NUMSEQ_PK, Integer)
            If (SPFO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPFO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPFO_SP_CODE_FK_PK, Integer)
            If (Original_SPFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPFO_NUMSEQ_PK, Integer)
            If (Original_SPFO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPFO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPFOCFO_SPE_FORME_COMPFORMETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPFOCFO_SPE_FORME_COMPFORME"
            tableMapping.ColumnMappings.Add("SPFOCFO_SP_CODE_FK_PK", "SPFOCFO_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCFO_CDF_FO_CODE_FK_PK", "SPFOCFO_CDF_FO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCFO_SPFO_NUMSEQ_FK_PK", "SPFOCFO_SPFO_NUMSEQ_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCFO_CDF_CFO_CODE_FK_PK", "SPFOCFO_CDF_CFO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCFO_NUMORD", "SPFOCFO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPFOCFO_SPE_FORME_COMPFORME] WHERE (([SPFOCFO_SP_CODE_FK"& _ 
                "_PK] = @Original_SPFOCFO_SP_CODE_FK_PK) AND ([SPFOCFO_CDF_FO_CODE_FK_PK] = @Orig"& _ 
                "inal_SPFOCFO_CDF_FO_CODE_FK_PK) AND ([SPFOCFO_SPFO_NUMSEQ_FK_PK] = @Original_SPF"& _ 
                "OCFO_SPFO_NUMSEQ_FK_PK) AND ([SPFOCFO_CDF_CFO_CODE_FK_PK] = @Original_SPFOCFO_CD"& _ 
                "F_CFO_CODE_FK_PK) AND ((@IsNull_SPFOCFO_NUMORD = 1 AND [SPFOCFO_NUMORD] IS NULL)"& _ 
                " OR ([SPFOCFO_NUMORD] = @Original_SPFOCFO_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPFOCFO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPFOCFO_SPE_FORME_COMPFORME] ([SPFOCFO_SP_CODE_FK_PK], ["& _ 
                "SPFOCFO_CDF_FO_CODE_FK_PK], [SPFOCFO_SPFO_NUMSEQ_FK_PK], [SPFOCFO_CDF_CFO_CODE_F"& _ 
                "K_PK], [SPFOCFO_NUMORD]) VALUES (@SPFOCFO_SP_CODE_FK_PK, @SPFOCFO_CDF_FO_CODE_FK"& _ 
                "_PK, @SPFOCFO_SPFO_NUMSEQ_FK_PK, @SPFOCFO_CDF_CFO_CODE_FK_PK, @SPFOCFO_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPFOCFO_SP_CODE_FK_PK, SPFOCFO_CDF_FO_CODE_FK_PK, SPFOCFO_SPFO_NUMSEQ_FK"& _ 
                "_PK, SPFOCFO_CDF_CFO_CODE_FK_PK, SPFOCFO_NUMORD FROM THERIAQUE.SPFOCFO_SPE_FORME"& _ 
                "_COMPFORME WHERE (SPFOCFO_CDF_CFO_CODE_FK_PK = @SPFOCFO_CDF_CFO_CODE_FK_PK) AND "& _ 
                "(SPFOCFO_CDF_FO_CODE_FK_PK = @SPFOCFO_CDF_FO_CODE_FK_PK) AND (SPFOCFO_SPFO_NUMSE"& _ 
                "Q_FK_PK = @SPFOCFO_SPFO_NUMSEQ_FK_PK) AND (SPFOCFO_SP_CODE_FK_PK = @SPFOCFO_SP_C"& _ 
                "ODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPFOCFO_SPE_FORME_COMPFORME] SET [SPFOCFO_SP_CODE_FK_PK] = @S"& _ 
                "PFOCFO_SP_CODE_FK_PK, [SPFOCFO_CDF_FO_CODE_FK_PK] = @SPFOCFO_CDF_FO_CODE_FK_PK, "& _ 
                "[SPFOCFO_SPFO_NUMSEQ_FK_PK] = @SPFOCFO_SPFO_NUMSEQ_FK_PK, [SPFOCFO_CDF_CFO_CODE_"& _ 
                "FK_PK] = @SPFOCFO_CDF_CFO_CODE_FK_PK, [SPFOCFO_NUMORD] = @SPFOCFO_NUMORD WHERE ("& _ 
                "([SPFOCFO_SP_CODE_FK_PK] = @Original_SPFOCFO_SP_CODE_FK_PK) AND ([SPFOCFO_CDF_FO"& _ 
                "_CODE_FK_PK] = @Original_SPFOCFO_CDF_FO_CODE_FK_PK) AND ([SPFOCFO_SPFO_NUMSEQ_FK"& _ 
                "_PK] = @Original_SPFOCFO_SPFO_NUMSEQ_FK_PK) AND ([SPFOCFO_CDF_CFO_CODE_FK_PK] = "& _ 
                "@Original_SPFOCFO_CDF_CFO_CODE_FK_PK) AND ((@IsNull_SPFOCFO_NUMORD = 1 AND [SPFO"& _ 
                "CFO_NUMORD] IS NULL) OR ([SPFOCFO_NUMORD] = @Original_SPFOCFO_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " SPFOCFO_SP_CODE_FK_PK, SPFOCFO_CDF_FO_CODE_FK_PK, SPFOCFO_SPFO_NUMSEQ_FK_PK, SP"& _ 
                "FOCFO_CDF_CFO_CODE_FK_PK, SPFOCFO_NUMORD FROM THERIAQUE.SPFOCFO_SPE_FORME_COMPFO"& _ 
                "RME WHERE (SPFOCFO_CDF_CFO_CODE_FK_PK = @SPFOCFO_CDF_CFO_CODE_FK_PK) AND (SPFOCF"& _ 
                "O_CDF_FO_CODE_FK_PK = @SPFOCFO_CDF_FO_CODE_FK_PK) AND (SPFOCFO_SPFO_NUMSEQ_FK_PK"& _ 
                " = @SPFOCFO_SPFO_NUMSEQ_FK_PK) AND (SPFOCFO_SP_CODE_FK_PK = @SPFOCFO_SP_CODE_FK_"& _ 
                "PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_CDF_CFO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPFOCFO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCFO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPFOCFO_SP_CODE_FK_PK, SPFOCFO_CDF_FO_CODE_FK_PK, SPFOCFO_SPFO_NUMSEQ_FK_P" & _
                "K, SPFOCFO_CDF_CFO_CODE_FK_PK, SPFOCFO_NUMORD FROM THERIAQUE.SPFOCFO_SPE_FORME_C" & _
                "OMPFORME"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPFOCFO_SP_CODE_FK_PK, SPFOCFO_CDF_FO_CODE_FK_PK, SPFOCFO_SPFO_NUMSEQ_FK_P" & _
                "K, SPFOCFO_CDF_CFO_CODE_FK_PK, SPFOCFO_NUMORD FROM THERIAQUE.SPFOCFO_SPE_FORME_C" & _
                "OMPFORME" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where  SPFOCFO_SP_CODE_FK_PK = @SPFOCFO_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCFO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPFOCFO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable = New dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable, ByVal SPFOCFO_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFOCFO_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPFOCFO_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFOCFO_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable = New dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOCFO_SPE_FORME_COMPFORMEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPFOCFO_SPE_FORME_COMPFORME")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPFOCFO_SP_CODE_FK_PK As Integer, ByVal Original_SPFOCFO_CDF_FO_CODE_FK_PK As String, ByVal Original_SPFOCFO_SPFO_NUMSEQ_FK_PK As Integer, ByVal Original_SPFOCFO_CDF_CFO_CODE_FK_PK As String, ByVal Original_SPFOCFO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPFOCFO_SP_CODE_FK_PK, Integer)
            If (Original_SPFOCFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPFOCFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPFOCFO_SPFO_NUMSEQ_FK_PK, Integer)
            If (Original_SPFOCFO_CDF_CFO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCFO_CDF_CFO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPFOCFO_CDF_CFO_CODE_FK_PK, String)
            End If
            If (Original_SPFOCFO_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SPFOCFO_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPFOCFO_SP_CODE_FK_PK As Integer, ByVal SPFOCFO_CDF_FO_CODE_FK_PK As String, ByVal SPFOCFO_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCFO_CDF_CFO_CODE_FK_PK As String, ByVal SPFOCFO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPFOCFO_SP_CODE_FK_PK, Integer)
            If (SPFOCFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPFOCFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPFOCFO_SPFO_NUMSEQ_FK_PK, Integer)
            If (SPFOCFO_CDF_CFO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCFO_CDF_CFO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPFOCFO_CDF_CFO_CODE_FK_PK, String)
            End If
            If (SPFOCFO_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPFOCFO_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPFOCFO_SP_CODE_FK_PK As Integer, ByVal SPFOCFO_CDF_FO_CODE_FK_PK As String, ByVal SPFOCFO_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCFO_CDF_CFO_CODE_FK_PK As String, ByVal SPFOCFO_NUMORD As System.Nullable(Of Short), ByVal Original_SPFOCFO_SP_CODE_FK_PK As Integer, ByVal Original_SPFOCFO_CDF_FO_CODE_FK_PK As String, ByVal Original_SPFOCFO_SPFO_NUMSEQ_FK_PK As Integer, ByVal Original_SPFOCFO_CDF_CFO_CODE_FK_PK As String, ByVal Original_SPFOCFO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPFOCFO_SP_CODE_FK_PK, Integer)
            If (SPFOCFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPFOCFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPFOCFO_SPFO_NUMSEQ_FK_PK, Integer)
            If (SPFOCFO_CDF_CFO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCFO_CDF_CFO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPFOCFO_CDF_CFO_CODE_FK_PK, String)
            End If
            If (SPFOCFO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPFOCFO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPFOCFO_SP_CODE_FK_PK, Integer)
            If (Original_SPFOCFO_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCFO_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPFOCFO_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SPFOCFO_SPFO_NUMSEQ_FK_PK, Integer)
            If (Original_SPFOCFO_CDF_CFO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCFO_CDF_CFO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPFOCFO_CDF_CFO_CODE_FK_PK, String)
            End If
            If (Original_SPFOCFO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SPFOCFO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPFOCPI_SPE_FORME_COMPINFOTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPFOCPI_SPE_FORME_COMPINFO"
            tableMapping.ColumnMappings.Add("SPFOCPI_SP_CODE_FK_PK", "SPFOCPI_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCPI_CDF_FO_CODE_FK_PK", "SPFOCPI_CDF_FO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCPI_SPFO_NUMSEQ_FK_PK", "SPFOCPI_SPFO_NUMSEQ_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCPI_CDF_CPI_CODE_FK_PK", "SPFOCPI_CDF_CPI_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOCPI_NUMORD", "SPFOCPI_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPFOCPI_SPE_FORME_COMPINFO] WHERE (([SPFOCPI_SP_CODE_FK_" & _
                "PK] = @Original_SPFOCPI_SP_CODE_FK_PK) AND ([SPFOCPI_CDF_FO_CODE_FK_PK] = @Origi" & _
                "nal_SPFOCPI_CDF_FO_CODE_FK_PK) AND ([SPFOCPI_SPFO_NUMSEQ_FK_PK] = @Original_SPFO" & _
                "CPI_SPFO_NUMSEQ_FK_PK) AND ([SPFOCPI_CDF_CPI_CODE_FK_PK] = @Original_SPFOCPI_CDF" & _
                "_CPI_CODE_FK_PK) AND ((@IsNull_SPFOCPI_NUMORD = 1 AND [SPFOCPI_NUMORD] IS NULL) " & _
                "OR ([SPFOCPI_NUMORD] = @Original_SPFOCPI_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPFOCPI_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPFOCPI_SPE_FORME_COMPINFO] ([SPFOCPI_SP_CODE_FK_PK], [S" & _
                "PFOCPI_CDF_FO_CODE_FK_PK], [SPFOCPI_SPFO_NUMSEQ_FK_PK], [SPFOCPI_CDF_CPI_CODE_FK" & _
                "_PK], [SPFOCPI_NUMORD]) VALUES (@SPFOCPI_SP_CODE_FK_PK, @SPFOCPI_CDF_FO_CODE_FK_" & _
                "PK, @SPFOCPI_SPFO_NUMSEQ_FK_PK, @SPFOCPI_CDF_CPI_CODE_FK_PK, @SPFOCPI_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT SPFOCPI_SP_CODE_FK_PK, SPFOCPI_CDF_FO_CODE_FK_PK, SPFOCPI_SPFO_NUMSEQ_FK_" & _
                "PK, SPFOCPI_CDF_CPI_CODE_FK_PK, SPFOCPI_NUMORD FROM THERIAQUE.SPFOCPI_SPE_FORME_" & _
                "COMPINFO WHERE (SPFOCPI_CDF_CPI_CODE_FK_PK = @SPFOCPI_CDF_CPI_CODE_FK_PK) AND (S" & _
                "PFOCPI_CDF_FO_CODE_FK_PK = @SPFOCPI_CDF_FO_CODE_FK_PK) AND (SPFOCPI_SPFO_NUMSEQ_" & _
                "FK_PK = @SPFOCPI_SPFO_NUMSEQ_FK_PK) AND (SPFOCPI_SP_CODE_FK_PK = @SPFOCPI_SP_COD" & _
                "E_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPFOCPI_SPE_FORME_COMPINFO] SET [SPFOCPI_SP_CODE_FK_PK] = @SP" & _
                "FOCPI_SP_CODE_FK_PK, [SPFOCPI_CDF_FO_CODE_FK_PK] = @SPFOCPI_CDF_FO_CODE_FK_PK, [" & _
                "SPFOCPI_SPFO_NUMSEQ_FK_PK] = @SPFOCPI_SPFO_NUMSEQ_FK_PK, [SPFOCPI_CDF_CPI_CODE_F" & _
                "K_PK] = @SPFOCPI_CDF_CPI_CODE_FK_PK, [SPFOCPI_NUMORD] = @SPFOCPI_NUMORD WHERE ((" & _
                "[SPFOCPI_SP_CODE_FK_PK] = @Original_SPFOCPI_SP_CODE_FK_PK) AND ([SPFOCPI_CDF_FO_" & _
                "CODE_FK_PK] = @Original_SPFOCPI_CDF_FO_CODE_FK_PK) AND ([SPFOCPI_SPFO_NUMSEQ_FK_" & _
                "PK] = @Original_SPFOCPI_SPFO_NUMSEQ_FK_PK) AND ([SPFOCPI_CDF_CPI_CODE_FK_PK] = @" & _
                "Original_SPFOCPI_CDF_CPI_CODE_FK_PK) AND ((@IsNull_SPFOCPI_NUMORD = 1 AND [SPFOC" & _
                "PI_NUMORD] IS NULL) OR ([SPFOCPI_NUMORD] = @Original_SPFOCPI_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT " & _
                "SPFOCPI_SP_CODE_FK_PK, SPFOCPI_CDF_FO_CODE_FK_PK, SPFOCPI_SPFO_NUMSEQ_FK_PK, SPF" & _
                "OCPI_CDF_CPI_CODE_FK_PK, SPFOCPI_NUMORD FROM THERIAQUE.SPFOCPI_SPE_FORME_COMPINF" & _
                "O WHERE (SPFOCPI_CDF_CPI_CODE_FK_PK = @SPFOCPI_CDF_CPI_CODE_FK_PK) AND (SPFOCPI_" & _
                "CDF_FO_CODE_FK_PK = @SPFOCPI_CDF_FO_CODE_FK_PK) AND (SPFOCPI_SPFO_NUMSEQ_FK_PK =" & _
                " @SPFOCPI_SPFO_NUMSEQ_FK_PK) AND (SPFOCPI_SP_CODE_FK_PK = @SPFOCPI_SP_CODE_FK_PK" & _
                ")"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_FO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SPFO_NUMSEQ_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_CDF_CPI_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPFOCPI_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOCPI_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPFOCPI_SP_CODE_FK_PK, SPFOCPI_CDF_FO_CODE_FK_PK, SPFOCPI_SPFO_NUMSEQ_FK_P" & _
                "K, SPFOCPI_CDF_CPI_CODE_FK_PK, SPFOCPI_NUMORD FROM THERIAQUE.SPFOCPI_SPE_FORME_C" & _
                "OMPINFO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPFOCPI_SP_CODE_FK_PK, SPFOCPI_CDF_FO_CODE_FK_PK, SPFOCPI_SPFO_NUMSEQ_FK_P" & _
                "K, SPFOCPI_CDF_CPI_CODE_FK_PK, SPFOCPI_NUMORD FROM THERIAQUE.SPFOCPI_SPE_FORME_C" & _
                "OMPINFO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where SPFOCPI_SP_CODE_FK_PK = @SPFOCPI_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOCPI_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPFOCPI_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable = New dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable, ByVal SPFOCPI_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFOCPI_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPFOCPI_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFOCPI_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable = New dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOCPI_SPE_FORME_COMPINFODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPFOCPI_SPE_FORME_COMPINFO")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPFOCPI_SP_CODE_FK_PK As Integer, ByVal Original_SPFOCPI_CDF_FO_CODE_FK_PK As String, ByVal Original_SPFOCPI_SPFO_NUMSEQ_FK_PK As Integer, ByVal Original_SPFOCPI_CDF_CPI_CODE_FK_PK As String, ByVal Original_SPFOCPI_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPFOCPI_SP_CODE_FK_PK, Integer)
            If (Original_SPFOCPI_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCPI_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPFOCPI_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPFOCPI_SPFO_NUMSEQ_FK_PK, Integer)
            If (Original_SPFOCPI_CDF_CPI_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCPI_CDF_CPI_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPFOCPI_CDF_CPI_CODE_FK_PK, String)
            End If
            If (Original_SPFOCPI_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SPFOCPI_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPFOCPI_SP_CODE_FK_PK As Integer, ByVal SPFOCPI_CDF_FO_CODE_FK_PK As String, ByVal SPFOCPI_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCPI_CDF_CPI_CODE_FK_PK As String, ByVal SPFOCPI_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPFOCPI_SP_CODE_FK_PK, Integer)
            If (SPFOCPI_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCPI_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPFOCPI_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPFOCPI_SPFO_NUMSEQ_FK_PK, Integer)
            If (SPFOCPI_CDF_CPI_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCPI_CDF_CPI_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPFOCPI_CDF_CPI_CODE_FK_PK, String)
            End If
            If (SPFOCPI_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPFOCPI_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPFOCPI_SP_CODE_FK_PK As Integer, ByVal SPFOCPI_CDF_FO_CODE_FK_PK As String, ByVal SPFOCPI_SPFO_NUMSEQ_FK_PK As Integer, ByVal SPFOCPI_CDF_CPI_CODE_FK_PK As String, ByVal SPFOCPI_NUMORD As System.Nullable(Of Short), ByVal Original_SPFOCPI_SP_CODE_FK_PK As Integer, ByVal Original_SPFOCPI_CDF_FO_CODE_FK_PK As String, ByVal Original_SPFOCPI_SPFO_NUMSEQ_FK_PK As Integer, ByVal Original_SPFOCPI_CDF_CPI_CODE_FK_PK As String, ByVal Original_SPFOCPI_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPFOCPI_SP_CODE_FK_PK, Integer)
            If (SPFOCPI_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCPI_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPFOCPI_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPFOCPI_SPFO_NUMSEQ_FK_PK, Integer)
            If (SPFOCPI_CDF_CPI_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOCPI_CDF_CPI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPFOCPI_CDF_CPI_CODE_FK_PK, String)
            End If
            If (SPFOCPI_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPFOCPI_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPFOCPI_SP_CODE_FK_PK, Integer)
            If (Original_SPFOCPI_CDF_FO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCPI_CDF_FO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPFOCPI_CDF_FO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SPFOCPI_SPFO_NUMSEQ_FK_PK, Integer)
            If (Original_SPFOCPI_CDF_CPI_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOCPI_CDF_CPI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPFOCPI_CDF_CPI_CODE_FK_PK, String)
            End If
            If (Original_SPFOCPI_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SPFOCPI_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COMPO_COMPOSITIONTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COMPO_COMPOSITION"
            tableMapping.ColumnMappings.Add("COMPO_SP_CODE_FK_PK", "COMPO_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COMPO_NUM_PK", "COMPO_NUM_PK")
            tableMapping.ColumnMappings.Add("COMPO_CDF_GAL_CODE_FK", "COMPO_CDF_GAL_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[COMPO_COMPOSITION] WHERE (([COMPO_SP_CODE_FK_PK] = @Orig"& _ 
                "inal_COMPO_SP_CODE_FK_PK) AND ([COMPO_NUM_PK] = @Original_COMPO_NUM_PK) AND ((@I"& _ 
                "sNull_COMPO_CDF_GAL_CODE_FK = 1 AND [COMPO_CDF_GAL_CODE_FK] IS NULL) OR ([COMPO_"& _ 
                "CDF_GAL_CODE_FK] = @Original_COMPO_CDF_GAL_CODE_FK)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COMPO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_NUM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COMPO_CDF_GAL_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_CDF_GAL_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COMPO_CDF_GAL_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_CDF_GAL_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[COMPO_COMPOSITION] ([COMPO_SP_CODE_FK_PK], [COMPO_NUM_PK"& _ 
                "], [COMPO_CDF_GAL_CODE_FK]) VALUES (@COMPO_SP_CODE_FK_PK, @COMPO_NUM_PK, @COMPO_"& _ 
                "CDF_GAL_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COMPO_SP_CODE_FK_PK, COMPO_NUM_PK, COMPO_CDF_GAL_CODE_"& _ 
                "FK FROM THERIAQUE.COMPO_COMPOSITION WHERE (COMPO_NUM_PK = @COMPO_NUM_PK) AND (CO"& _ 
                "MPO_SP_CODE_FK_PK = @COMPO_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_NUM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_CDF_GAL_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_CDF_GAL_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[COMPO_COMPOSITION] SET [COMPO_SP_CODE_FK_PK] = @COMPO_SP_CODE"& _ 
                "_FK_PK, [COMPO_NUM_PK] = @COMPO_NUM_PK, [COMPO_CDF_GAL_CODE_FK] = @COMPO_CDF_GAL"& _ 
                "_CODE_FK WHERE (([COMPO_SP_CODE_FK_PK] = @Original_COMPO_SP_CODE_FK_PK) AND ([CO"& _ 
                "MPO_NUM_PK] = @Original_COMPO_NUM_PK) AND ((@IsNull_COMPO_CDF_GAL_CODE_FK = 1 AN"& _ 
                "D [COMPO_CDF_GAL_CODE_FK] IS NULL) OR ([COMPO_CDF_GAL_CODE_FK] = @Original_COMPO"& _ 
                "_CDF_GAL_CODE_FK)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COMPO_SP_CODE_FK_PK, COMPO_NUM_PK, COMPO_CDF_GAL_CO"& _ 
                "DE_FK FROM THERIAQUE.COMPO_COMPOSITION WHERE (COMPO_NUM_PK = @COMPO_NUM_PK) AND "& _ 
                "(COMPO_SP_CODE_FK_PK = @COMPO_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_NUM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_CDF_GAL_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_CDF_GAL_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COMPO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_NUM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COMPO_CDF_GAL_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_CDF_GAL_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COMPO_CDF_GAL_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COMPO_CDF_GAL_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COMPO_SP_CODE_FK_PK, COMPO_NUM_PK, COMPO_CDF_GAL_CODE_FK FROM THERIAQUE.CO" & _
                "MPO_COMPOSITION"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COMPO_SP_CODE_FK_PK, COMPO_NUM_PK, COMPO_CDF_GAL_CODE_FK FROM THERIAQUE.CO" & _
                "MPO_COMPOSITION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where COMPO_SP_CODE_FK_PK = @COMPO_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COMPO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "COMPO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable = New dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable, ByVal COMPO_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COMPO_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal COMPO_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COMPO_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable = New dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.COMPO_COMPOSITIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "COMPO_COMPOSITION")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_COMPO_SP_CODE_FK_PK As Integer, ByVal Original_COMPO_NUM_PK As Byte, ByVal Original_COMPO_CDF_GAL_CODE_FK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COMPO_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COMPO_NUM_PK, Byte)
            If (Original_COMPO_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COMPO_CDF_GAL_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal COMPO_SP_CODE_FK_PK As Integer, ByVal COMPO_NUM_PK As Byte, ByVal COMPO_CDF_GAL_CODE_FK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COMPO_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COMPO_NUM_PK, Byte)
            If (COMPO_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COMPO_CDF_GAL_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal COMPO_SP_CODE_FK_PK As Integer, ByVal COMPO_NUM_PK As Byte, ByVal COMPO_CDF_GAL_CODE_FK As String, ByVal Original_COMPO_SP_CODE_FK_PK As Integer, ByVal Original_COMPO_NUM_PK As Byte, ByVal Original_COMPO_CDF_GAL_CODE_FK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COMPO_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COMPO_NUM_PK, Byte)
            If (COMPO_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COMPO_CDF_GAL_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_COMPO_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_COMPO_NUM_PK, Byte)
            If (Original_COMPO_CDF_GAL_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_COMPO_CDF_GAL_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class COSAC_COMPO_SUBACTTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COSAC_COMPO_SUBACT"
            tableMapping.ColumnMappings.Add("COSAC_SAC_CODE_FK_PK", "COSAC_SAC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAC_SP_CODE_FK_PK", "COSAC_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAC_DOSAGE", "COSAC_DOSAGE")
            tableMapping.ColumnMappings.Add("COSAC_UNITEDOSAGE", "COSAC_UNITEDOSAGE")
            tableMapping.ColumnMappings.Add("COSAC_COMPO_NUM_PK", "COSAC_COMPO_NUM_PK")
            tableMapping.ColumnMappings.Add("COSAC_SAC_BASE_CODE_FK", "COSAC_SAC_BASE_CODE_FK")
            tableMapping.ColumnMappings.Add("COSAC_DOSAGE_BASE", "COSAC_DOSAGE_BASE")
            tableMapping.ColumnMappings.Add("COSAC_NUMORD", "COSAC_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[COSAC_COMPO_SUBACT] WHERE (([COSAC_SAC_CODE_FK_PK] = @Or" & _
                "iginal_COSAC_SAC_CODE_FK_PK) AND ([COSAC_SP_CODE_FK_PK] = @Original_COSAC_SP_COD" & _
                "E_FK_PK) AND ((@IsNull_COSAC_DOSAGE = 1 AND [COSAC_DOSAGE] IS NULL) OR ([COSAC_D" & _
                "OSAGE] = @Original_COSAC_DOSAGE)) AND ((@IsNull_COSAC_UNITEDOSAGE = 1 AND [COSAC" & _
                "_UNITEDOSAGE] IS NULL) OR ([COSAC_UNITEDOSAGE] = @Original_COSAC_UNITEDOSAGE)) A" & _
                "ND ([COSAC_COMPO_NUM_PK] = @Original_COSAC_COMPO_NUM_PK) AND ((@IsNull_COSAC_SAC" & _
                "_BASE_CODE_FK = 1 AND [COSAC_SAC_BASE_CODE_FK] IS NULL) OR ([COSAC_SAC_BASE_CODE" & _
                "_FK] = @Original_COSAC_SAC_BASE_CODE_FK)) AND ((@IsNull_COSAC_DOSAGE_BASE = 1 AN" & _
                "D [COSAC_DOSAGE_BASE] IS NULL) OR ([COSAC_DOSAGE_BASE] = @Original_COSAC_DOSAGE_" & _
                "BASE)) AND ((@IsNull_COSAC_NUMORD = 1 AND [COSAC_NUMORD] IS NULL) OR ([COSAC_NUM" & _
                "ORD] = @Original_COSAC_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_DOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_UNITEDOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_UNITEDOSAGE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_UNITEDOSAGE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_COMPO_NUM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_SAC_BASE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_BASE_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_SAC_BASE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_BASE_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_DOSAGE_BASE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE_BASE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_DOSAGE_BASE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 14, 7, "COSAC_DOSAGE_BASE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[COSAC_COMPO_SUBACT] ([COSAC_SAC_CODE_FK_PK], [COSAC_SP_C" & _
                "ODE_FK_PK], [COSAC_DOSAGE], [COSAC_UNITEDOSAGE], [COSAC_COMPO_NUM_PK], [COSAC_SA" & _
                "C_BASE_CODE_FK], [COSAC_DOSAGE_BASE], [COSAC_NUMORD]) VALUES (@COSAC_SAC_CODE_FK" & _
                "_PK, @COSAC_SP_CODE_FK_PK, @COSAC_DOSAGE, @COSAC_UNITEDOSAGE, @COSAC_COMPO_NUM_P" & _
                "K, @COSAC_SAC_BASE_CODE_FK, @COSAC_DOSAGE_BASE, @COSAC_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COSAC_SA" & _
                "C_CODE_FK_PK, COSAC_SP_CODE_FK_PK, COSAC_DOSAGE, COSAC_UNITEDOSAGE, COSAC_COMPO_" & _
                "NUM_PK, COSAC_SAC_BASE_CODE_FK, COSAC_DOSAGE_BASE, COSAC_NUMORD FROM THERIAQUE.C" & _
                "OSAC_COMPO_SUBACT WHERE (COSAC_COMPO_NUM_PK = @COSAC_COMPO_NUM_PK) AND (COSAC_SA" & _
                "C_CODE_FK_PK = @COSAC_SAC_CODE_FK_PK) AND (COSAC_SP_CODE_FK_PK = @COSAC_SP_CODE_" & _
                "FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_UNITEDOSAGE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_COMPO_NUM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SAC_BASE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_BASE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_DOSAGE_BASE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 14, 7, "COSAC_DOSAGE_BASE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[COSAC_COMPO_SUBACT] SET [COSAC_SAC_CODE_FK_PK] = @COSAC_SAC_C" & _
                "ODE_FK_PK, [COSAC_SP_CODE_FK_PK] = @COSAC_SP_CODE_FK_PK, [COSAC_DOSAGE] = @COSAC" & _
                "_DOSAGE, [COSAC_UNITEDOSAGE] = @COSAC_UNITEDOSAGE, [COSAC_COMPO_NUM_PK] = @COSAC" & _
                "_COMPO_NUM_PK, [COSAC_SAC_BASE_CODE_FK] = @COSAC_SAC_BASE_CODE_FK, [COSAC_DOSAGE" & _
                "_BASE] = @COSAC_DOSAGE_BASE, [COSAC_NUMORD] = @COSAC_NUMORD WHERE (([COSAC_SAC_C" & _
                "ODE_FK_PK] = @Original_COSAC_SAC_CODE_FK_PK) AND ([COSAC_SP_CODE_FK_PK] = @Origi" & _
                "nal_COSAC_SP_CODE_FK_PK) AND ((@IsNull_COSAC_DOSAGE = 1 AND [COSAC_DOSAGE] IS NU" & _
                "LL) OR ([COSAC_DOSAGE] = @Original_COSAC_DOSAGE)) AND ((@IsNull_COSAC_UNITEDOSAG" & _
                "E = 1 AND [COSAC_UNITEDOSAGE] IS NULL) OR ([COSAC_UNITEDOSAGE] = @Original_COSAC" & _
                "_UNITEDOSAGE)) AND ([COSAC_COMPO_NUM_PK] = @Original_COSAC_COMPO_NUM_PK) AND ((@" & _
                "IsNull_COSAC_SAC_BASE_CODE_FK = 1 AND [COSAC_SAC_BASE_CODE_FK] IS NULL) OR ([COS" & _
                "AC_SAC_BASE_CODE_FK] = @Original_COSAC_SAC_BASE_CODE_FK)) AND ((@IsNull_COSAC_DO" & _
                "SAGE_BASE = 1 AND [COSAC_DOSAGE_BASE] IS NULL) OR ([COSAC_DOSAGE_BASE] = @Origin" & _
                "al_COSAC_DOSAGE_BASE)) AND ((@IsNull_COSAC_NUMORD = 1 AND [COSAC_NUMORD] IS NULL" & _
                ") OR ([COSAC_NUMORD] = @Original_COSAC_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COSAC_SAC_CODE_FK_PK, " & _
                "COSAC_SP_CODE_FK_PK, COSAC_DOSAGE, COSAC_UNITEDOSAGE, COSAC_COMPO_NUM_PK, COSAC_" & _
                "SAC_BASE_CODE_FK, COSAC_DOSAGE_BASE, COSAC_NUMORD FROM THERIAQUE.COSAC_COMPO_SUB" & _
                "ACT WHERE (COSAC_COMPO_NUM_PK = @COSAC_COMPO_NUM_PK) AND (COSAC_SAC_CODE_FK_PK =" & _
                " @COSAC_SAC_CODE_FK_PK) AND (COSAC_SP_CODE_FK_PK = @COSAC_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_UNITEDOSAGE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_COMPO_NUM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SAC_BASE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_BASE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_DOSAGE_BASE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 14, 7, "COSAC_DOSAGE_BASE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_DOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_UNITEDOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_UNITEDOSAGE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_UNITEDOSAGE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_COMPO_NUM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_SAC_BASE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_BASE_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_SAC_BASE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SAC_BASE_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_DOSAGE_BASE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_DOSAGE_BASE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_DOSAGE_BASE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 14, 7, "COSAC_DOSAGE_BASE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAC_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAC_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAC_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COSAC_SAC_CODE_FK_PK, COSAC_SP_CODE_FK_PK, COSAC_DOSAGE, COSAC_UNITEDOSAGE" & _
                ", COSAC_COMPO_NUM_PK, COSAC_SAC_BASE_CODE_FK, COSAC_DOSAGE_BASE, COSAC_NUMORD FR" & _
                "OM THERIAQUE.COSAC_COMPO_SUBACT"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COSAC_SAC_CODE_FK_PK, COSAC_SP_CODE_FK_PK, COSAC_DOSAGE, COSAC_UNITEDOSAGE" & _
                ", COSAC_COMPO_NUM_PK, COSAC_SAC_BASE_CODE_FK, COSAC_DOSAGE_BASE, COSAC_NUMORD FR" & _
                "OM THERIAQUE.COSAC_COMPO_SUBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where COSAC_SP_CODE_FK_PK = @COSAC_SP_CODE_FK_P" & _
                "K"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAC_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "COSAC_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable = New dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable, ByVal COSAC_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAC_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal COSAC_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAC_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable = New dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.COSAC_COMPO_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "COSAC_COMPO_SUBACT")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_COSAC_SAC_CODE_FK_PK As Integer, ByVal Original_COSAC_SP_CODE_FK_PK As Integer, ByVal Original_COSAC_DOSAGE As String, ByVal Original_COSAC_UNITEDOSAGE As String, ByVal Original_COSAC_COMPO_NUM_PK As Byte, ByVal Original_COSAC_SAC_BASE_CODE_FK As System.Nullable(Of Integer), ByVal Original_COSAC_DOSAGE_BASE As System.Nullable(Of Decimal), ByVal Original_COSAC_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COSAC_SP_CODE_FK_PK, Integer)
            If (Original_COSAC_DOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COSAC_DOSAGE, String)
            End If
            If (Original_COSAC_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COSAC_UNITEDOSAGE, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_COSAC_COMPO_NUM_PK, Byte)
            If (Original_COSAC_SAC_BASE_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_COSAC_SAC_BASE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_COSAC_DOSAGE_BASE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COSAC_DOSAGE_BASE.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_COSAC_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_COSAC_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal COSAC_SAC_CODE_FK_PK As Integer, ByVal COSAC_SP_CODE_FK_PK As Integer, ByVal COSAC_DOSAGE As String, ByVal COSAC_UNITEDOSAGE As String, ByVal COSAC_COMPO_NUM_PK As Byte, ByVal COSAC_SAC_BASE_CODE_FK As System.Nullable(Of Integer), ByVal COSAC_DOSAGE_BASE As System.Nullable(Of Decimal), ByVal COSAC_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COSAC_SP_CODE_FK_PK, Integer)
            If (COSAC_DOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COSAC_DOSAGE, String)
            End If
            If (COSAC_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COSAC_UNITEDOSAGE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(COSAC_COMPO_NUM_PK, Byte)
            If (COSAC_SAC_BASE_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(COSAC_SAC_BASE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (COSAC_DOSAGE_BASE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(COSAC_DOSAGE_BASE.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (COSAC_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COSAC_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal COSAC_SAC_CODE_FK_PK As Integer, _
                    ByVal COSAC_SP_CODE_FK_PK As Integer, _
                    ByVal COSAC_DOSAGE As String, _
                    ByVal COSAC_UNITEDOSAGE As String, _
                    ByVal COSAC_COMPO_NUM_PK As Byte, _
                    ByVal COSAC_SAC_BASE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal COSAC_DOSAGE_BASE As System.Nullable(Of Decimal), _
                    ByVal COSAC_NUMORD As System.Nullable(Of Short), _
                    ByVal Original_COSAC_SAC_CODE_FK_PK As Integer, _
                    ByVal Original_COSAC_SP_CODE_FK_PK As Integer, _
                    ByVal Original_COSAC_DOSAGE As String, _
                    ByVal Original_COSAC_UNITEDOSAGE As String, _
                    ByVal Original_COSAC_COMPO_NUM_PK As Byte, _
                    ByVal Original_COSAC_SAC_BASE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_COSAC_DOSAGE_BASE As System.Nullable(Of Decimal), _
                    ByVal Original_COSAC_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COSAC_SP_CODE_FK_PK, Integer)
            If (COSAC_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COSAC_DOSAGE, String)
            End If
            If (COSAC_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COSAC_UNITEDOSAGE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COSAC_COMPO_NUM_PK, Byte)
            If (COSAC_SAC_BASE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COSAC_SAC_BASE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (COSAC_DOSAGE_BASE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(COSAC_DOSAGE_BASE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (COSAC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COSAC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COSAC_SP_CODE_FK_PK, Integer)
            If (Original_COSAC_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_COSAC_DOSAGE, String)
            End If
            If (Original_COSAC_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_COSAC_UNITEDOSAGE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_COSAC_COMPO_NUM_PK, Byte)
            If (Original_COSAC_SAC_BASE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_COSAC_SAC_BASE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_COSAC_DOSAGE_BASE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_COSAC_DOSAGE_BASE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_COSAC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_COSAC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COSAU_COMPO_SUBAUXTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COSAU_COMPO_SUBAUX"
            tableMapping.ColumnMappings.Add("COSAU_SAU_CODE_FK_PK", "COSAU_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAU_SP_CODE_FK_PK", "COSAU_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COSAU_DOSAGE", "COSAU_DOSAGE")
            tableMapping.ColumnMappings.Add("COSAU_UNITEDOSAGE", "COSAU_UNITEDOSAGE")
            tableMapping.ColumnMappings.Add("COSAU_COMPO_NUM_PK", "COSAU_COMPO_NUM_PK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_CODE_FK", "COSAU_GREF_CODE_FK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_DATECR_FK", "COSAU_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("COSAU_GREF_NUMORD", "COSAU_GREF_NUMORD")
            tableMapping.ColumnMappings.Add("COSAU_NUMORD", "COSAU_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[COSAU_COMPO_SUBAUX] WHERE (([COSAU_SAU_CODE_FK_PK] = @Or"& _ 
                "iginal_COSAU_SAU_CODE_FK_PK) AND ([COSAU_SP_CODE_FK_PK] = @Original_COSAU_SP_COD"& _ 
                "E_FK_PK) AND ((@IsNull_COSAU_DOSAGE = 1 AND [COSAU_DOSAGE] IS NULL) OR ([COSAU_D"& _ 
                "OSAGE] = @Original_COSAU_DOSAGE)) AND ((@IsNull_COSAU_UNITEDOSAGE = 1 AND [COSAU"& _ 
                "_UNITEDOSAGE] IS NULL) OR ([COSAU_UNITEDOSAGE] = @Original_COSAU_UNITEDOSAGE)) A"& _ 
                "ND ([COSAU_COMPO_NUM_PK] = @Original_COSAU_COMPO_NUM_PK) AND ((@IsNull_COSAU_GRE"& _ 
                "F_CODE_FK = 1 AND [COSAU_GREF_CODE_FK] IS NULL) OR ([COSAU_GREF_CODE_FK] = @Orig"& _ 
                "inal_COSAU_GREF_CODE_FK)) AND ((@IsNull_COSAU_GREF_DATECR_FK = 1 AND [COSAU_GREF"& _ 
                "_DATECR_FK] IS NULL) OR ([COSAU_GREF_DATECR_FK] = @Original_COSAU_GREF_DATECR_FK"& _ 
                ")) AND ((@IsNull_COSAU_GREF_NUMORD = 1 AND [COSAU_GREF_NUMORD] IS NULL) OR ([COS"& _ 
                "AU_GREF_NUMORD] = @Original_COSAU_GREF_NUMORD)) AND ((@IsNull_COSAU_NUMORD = 1 A"& _ 
                "ND [COSAU_NUMORD] IS NULL) OR ([COSAU_NUMORD] = @Original_COSAU_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_DOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_UNITEDOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_DATECR_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[COSAU_COMPO_SUBAUX] ([COSAU_SAU_CODE_FK_PK], [COSAU_SP_C"& _ 
                "ODE_FK_PK], [COSAU_DOSAGE], [COSAU_UNITEDOSAGE], [COSAU_COMPO_NUM_PK], [COSAU_GR"& _ 
                "EF_CODE_FK], [COSAU_GREF_DATECR_FK], [COSAU_GREF_NUMORD], [COSAU_NUMORD]) VALUES"& _ 
                " (@COSAU_SAU_CODE_FK_PK, @COSAU_SP_CODE_FK_PK, @COSAU_DOSAGE, @COSAU_UNITEDOSAGE"& _ 
                ", @COSAU_COMPO_NUM_PK, @COSAU_GREF_CODE_FK, @COSAU_GREF_DATECR_FK, @COSAU_GREF_N"& _ 
                "UMORD, @COSAU_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_"& _ 
                "DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DA"& _ 
                "TECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD FROM THERIAQUE.COSAU_COMPO_SUBAUX WHERE"& _ 
                " (COSAU_COMPO_NUM_PK = @COSAU_COMPO_NUM_PK) AND (COSAU_SAU_CODE_FK_PK = @COSAU_S"& _ 
                "AU_CODE_FK_PK) AND (COSAU_SP_CODE_FK_PK = @COSAU_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_GREF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[COSAU_COMPO_SUBAUX] SET [COSAU_SAU_CODE_FK_PK] = @COSAU_SAU_C"& _ 
                "ODE_FK_PK, [COSAU_SP_CODE_FK_PK] = @COSAU_SP_CODE_FK_PK, [COSAU_DOSAGE] = @COSAU"& _ 
                "_DOSAGE, [COSAU_UNITEDOSAGE] = @COSAU_UNITEDOSAGE, [COSAU_COMPO_NUM_PK] = @COSAU"& _ 
                "_COMPO_NUM_PK, [COSAU_GREF_CODE_FK] = @COSAU_GREF_CODE_FK, [COSAU_GREF_DATECR_FK"& _ 
                "] = @COSAU_GREF_DATECR_FK, [COSAU_GREF_NUMORD] = @COSAU_GREF_NUMORD, [COSAU_NUMO"& _ 
                "RD] = @COSAU_NUMORD WHERE (([COSAU_SAU_CODE_FK_PK] = @Original_COSAU_SAU_CODE_FK"& _ 
                "_PK) AND ([COSAU_SP_CODE_FK_PK] = @Original_COSAU_SP_CODE_FK_PK) AND ((@IsNull_C"& _ 
                "OSAU_DOSAGE = 1 AND [COSAU_DOSAGE] IS NULL) OR ([COSAU_DOSAGE] = @Original_COSAU"& _ 
                "_DOSAGE)) AND ((@IsNull_COSAU_UNITEDOSAGE = 1 AND [COSAU_UNITEDOSAGE] IS NULL) O"& _ 
                "R ([COSAU_UNITEDOSAGE] = @Original_COSAU_UNITEDOSAGE)) AND ([COSAU_COMPO_NUM_PK]"& _ 
                " = @Original_COSAU_COMPO_NUM_PK) AND ((@IsNull_COSAU_GREF_CODE_FK = 1 AND [COSAU"& _ 
                "_GREF_CODE_FK] IS NULL) OR ([COSAU_GREF_CODE_FK] = @Original_COSAU_GREF_CODE_FK)"& _ 
                ") AND ((@IsNull_COSAU_GREF_DATECR_FK = 1 AND [COSAU_GREF_DATECR_FK] IS NULL) OR "& _ 
                "([COSAU_GREF_DATECR_FK] = @Original_COSAU_GREF_DATECR_FK)) AND ((@IsNull_COSAU_G"& _ 
                "REF_NUMORD = 1 AND [COSAU_GREF_NUMORD] IS NULL) OR ([COSAU_GREF_NUMORD] = @Origi"& _ 
                "nal_COSAU_GREF_NUMORD)) AND ((@IsNull_COSAU_NUMORD = 1 AND [COSAU_NUMORD] IS NUL"& _ 
                "L) OR ([COSAU_NUMORD] = @Original_COSAU_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COSAU_SAU_CODE_FK_PK,"& _ 
                " COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE, COSAU_COMPO_NUM_PK, COSAU"& _ 
                "_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMORD, COSAU_NUMORD FROM THERIA"& _ 
                "QUE.COSAU_COMPO_SUBAUX WHERE (COSAU_COMPO_NUM_PK = @COSAU_COMPO_NUM_PK) AND (COS"& _ 
                "AU_SAU_CODE_FK_PK = @COSAU_SAU_CODE_FK_PK) AND (COSAU_SP_CODE_FK_PK = @COSAU_SP_"& _ 
                "CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_GREF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_GREF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_DOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_DOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_DOSAGE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_UNITEDOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_UNITEDOSAGE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_UNITEDOSAGE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_COMPO_NUM_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_COMPO_NUM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_DATECR_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_DATECR_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_GREF_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_GREF_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_GREF_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COSAU_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COSAU_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COSAU_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE" & _
                ", COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMOR" & _
                "D, COSAU_NUMORD FROM THERIAQUE.COSAU_COMPO_SUBAUX"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COSAU_SAU_CODE_FK_PK, COSAU_SP_CODE_FK_PK, COSAU_DOSAGE, COSAU_UNITEDOSAGE" & _
                ", COSAU_COMPO_NUM_PK, COSAU_GREF_CODE_FK, COSAU_GREF_DATECR_FK, COSAU_GREF_NUMOR" & _
                "D, COSAU_NUMORD FROM THERIAQUE.COSAU_COMPO_SUBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where COSAU_SP_CODE_FK_PK = @" & _
                "COSAU_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COSAU_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "COSAU_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable = New dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable, ByVal COSAU_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal COSAU_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COSAU_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable = New dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.COSAU_COMPO_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "COSAU_COMPO_SUBAUX")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, ByVal Original_COSAU_SP_CODE_FK_PK As Integer, ByVal Original_COSAU_DOSAGE As String, ByVal Original_COSAU_UNITEDOSAGE As String, ByVal Original_COSAU_COMPO_NUM_PK As Byte, ByVal Original_COSAU_GREF_CODE_FK As System.Nullable(Of Integer), ByVal Original_COSAU_GREF_DATECR_FK As System.Nullable(Of Date), ByVal Original_COSAU_GREF_NUMORD As System.Nullable(Of Short), ByVal Original_COSAU_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COSAU_SP_CODE_FK_PK, Integer)
            If (Original_COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COSAU_DOSAGE, String)
            End If
            If (Original_COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_COSAU_COMPO_NUM_PK, Byte)
            If (Original_COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal COSAU_SAU_CODE_FK_PK As Integer, ByVal COSAU_SP_CODE_FK_PK As Integer, ByVal COSAU_DOSAGE As String, ByVal COSAU_UNITEDOSAGE As String, ByVal COSAU_COMPO_NUM_PK As Byte, ByVal COSAU_GREF_CODE_FK As System.Nullable(Of Integer), ByVal COSAU_GREF_DATECR_FK As System.Nullable(Of Date), ByVal COSAU_GREF_NUMORD As System.Nullable(Of Short), ByVal COSAU_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK, Integer)
            If (COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COSAU_DOSAGE, String)
            End If
            If (COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(COSAU_COMPO_NUM_PK, Byte)
            If (COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal COSAU_SAU_CODE_FK_PK As Integer, _
                    ByVal COSAU_SP_CODE_FK_PK As Integer, _
                    ByVal COSAU_DOSAGE As String, _
                    ByVal COSAU_UNITEDOSAGE As String, _
                    ByVal COSAU_COMPO_NUM_PK As Byte, _
                    ByVal COSAU_GREF_CODE_FK As System.Nullable(Of Integer), _
                    ByVal COSAU_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal COSAU_GREF_NUMORD As System.Nullable(Of Short), _
                    ByVal COSAU_NUMORD As System.Nullable(Of Short), _
                    ByVal Original_COSAU_SAU_CODE_FK_PK As Integer, _
                    ByVal Original_COSAU_SP_CODE_FK_PK As Integer, _
                    ByVal Original_COSAU_DOSAGE As String, _
                    ByVal Original_COSAU_UNITEDOSAGE As String, _
                    ByVal Original_COSAU_COMPO_NUM_PK As Byte, _
                    ByVal Original_COSAU_GREF_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_COSAU_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal Original_COSAU_GREF_NUMORD As System.Nullable(Of Short), _
                    ByVal Original_COSAU_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COSAU_SP_CODE_FK_PK, Integer)
            If (COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COSAU_DOSAGE, String)
            End If
            If (COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COSAU_COMPO_NUM_PK, Byte)
            If (COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_COSAU_SP_CODE_FK_PK, Integer)
            If (Original_COSAU_DOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_COSAU_DOSAGE, String)
            End If
            If (Original_COSAU_UNITEDOSAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_COSAU_UNITEDOSAGE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_COSAU_COMPO_NUM_PK, Byte)
            If (Original_COSAU_GREF_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_COSAU_GREF_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_COSAU_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_COSAU_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (Original_COSAU_GREF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_COSAU_GREF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (Original_COSAU_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_COSAU_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class COTEN_COMPO_TENEURTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COTEN_COMPO_TENEUR"
            tableMapping.ColumnMappings.Add("COTEN_SP_CODE_FK_PK", "COTEN_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COTEN_CDF_TEN_CODE_FK_PK", "COTEN_CDF_TEN_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("COTEN_QUALIFICATIF", "COTEN_QUALIFICATIF")
            tableMapping.ColumnMappings.Add("COTEN_DOSAGE", "COTEN_DOSAGE")
            tableMapping.ColumnMappings.Add("COTEN_CDF_UD_CODE_FK", "COTEN_CDF_UD_CODE_FK")
            tableMapping.ColumnMappings.Add("COTEN_DOSAGE_EQUIV", "COTEN_DOSAGE_EQUIV")
            tableMapping.ColumnMappings.Add("COTEN_CDF_UD_EQUIV_CODE_FK", "COTEN_CDF_UD_EQUIV_CODE_FK")
            tableMapping.ColumnMappings.Add("COTEN_NUMORD", "COTEN_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[COTEN_COMPO_TENEUR] WHERE (([COTEN_SP_CODE_FK_PK] = @Ori" & _
                "ginal_COTEN_SP_CODE_FK_PK) AND ([COTEN_CDF_TEN_CODE_FK_PK] = @Original_COTEN_CDF" & _
                "_TEN_CODE_FK_PK) AND ((@IsNull_COTEN_QUALIFICATIF = 1 AND [COTEN_QUALIFICATIF] I" & _
                "S NULL) OR ([COTEN_QUALIFICATIF] = @Original_COTEN_QUALIFICATIF)) AND ((@IsNull_" & _
                "COTEN_DOSAGE = 1 AND [COTEN_DOSAGE] IS NULL) OR ([COTEN_DOSAGE] = @Original_COTE" & _
                "N_DOSAGE)) AND ((@IsNull_COTEN_CDF_UD_CODE_FK = 1 AND [COTEN_CDF_UD_CODE_FK] IS " & _
                "NULL) OR ([COTEN_CDF_UD_CODE_FK] = @Original_COTEN_CDF_UD_CODE_FK)) AND ((@IsNul" & _
                "l_COTEN_DOSAGE_EQUIV = 1 AND [COTEN_DOSAGE_EQUIV] IS NULL) OR ([COTEN_DOSAGE_EQU" & _
                "IV] = @Original_COTEN_DOSAGE_EQUIV)) AND ((@IsNull_COTEN_CDF_UD_EQUIV_CODE_FK = " & _
                "1 AND [COTEN_CDF_UD_EQUIV_CODE_FK] IS NULL) OR ([COTEN_CDF_UD_EQUIV_CODE_FK] = @" & _
                "Original_COTEN_CDF_UD_EQUIV_CODE_FK)) AND ((@IsNull_COTEN_NUMORD = 1 AND [COTEN_" & _
                "NUMORD] IS NULL) OR ([COTEN_NUMORD] = @Original_COTEN_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_CDF_TEN_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_TEN_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_QUALIFICATIF", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_QUALIFICATIF", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_QUALIFICATIF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_QUALIFICATIF", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_DOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_DOSAGE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_DOSAGE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_CDF_UD_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_CDF_UD_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_DOSAGE_EQUIV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_DOSAGE_EQUIV", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_DOSAGE_EQUIV", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE_EQUIV", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[COTEN_COMPO_TENEUR] ([COTEN_SP_CODE_FK_PK], [COTEN_CDF_T" & _
                "EN_CODE_FK_PK], [COTEN_QUALIFICATIF], [COTEN_DOSAGE], [COTEN_CDF_UD_CODE_FK], [C" & _
                "OTEN_DOSAGE_EQUIV], [COTEN_CDF_UD_EQUIV_CODE_FK], [COTEN_NUMORD]) VALUES (@COTEN" & _
                "_SP_CODE_FK_PK, @COTEN_CDF_TEN_CODE_FK_PK, @COTEN_QUALIFICATIF, @COTEN_DOSAGE, @" & _
                "COTEN_CDF_UD_CODE_FK, @COTEN_DOSAGE_EQUIV, @COTEN_CDF_UD_EQUIV_CODE_FK, @COTEN_N" & _
                "UMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COTEN_SP_CODE_FK_PK, COTEN_CDF_TEN_CODE_FK_PK, COTEN_QUALIFICATI" & _
                "F, COTEN_DOSAGE, COTEN_CDF_UD_CODE_FK, COTEN_DOSAGE_EQUIV, COTEN_CDF_UD_EQUIV_CO" & _
                "DE_FK, COTEN_NUMORD FROM THERIAQUE.COTEN_COMPO_TENEUR WHERE (COTEN_CDF_TEN_CODE_" & _
                "FK_PK = @COTEN_CDF_TEN_CODE_FK_PK) AND (COTEN_SP_CODE_FK_PK = @COTEN_SP_CODE_FK_" & _
                "PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_CDF_TEN_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_TEN_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_QUALIFICATIF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_QUALIFICATIF", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_DOSAGE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_CDF_UD_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_DOSAGE_EQUIV", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE_EQUIV", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[COTEN_COMPO_TENEUR] SET [COTEN_SP_CODE_FK_PK] = @COTEN_SP_COD" & _
                "E_FK_PK, [COTEN_CDF_TEN_CODE_FK_PK] = @COTEN_CDF_TEN_CODE_FK_PK, [COTEN_QUALIFIC" & _
                "ATIF] = @COTEN_QUALIFICATIF, [COTEN_DOSAGE] = @COTEN_DOSAGE, [COTEN_CDF_UD_CODE_" & _
                "FK] = @COTEN_CDF_UD_CODE_FK, [COTEN_DOSAGE_EQUIV] = @COTEN_DOSAGE_EQUIV, [COTEN_" & _
                "CDF_UD_EQUIV_CODE_FK] = @COTEN_CDF_UD_EQUIV_CODE_FK, [COTEN_NUMORD] = @COTEN_NUM" & _
                "ORD WHERE (([COTEN_SP_CODE_FK_PK] = @Original_COTEN_SP_CODE_FK_PK) AND ([COTEN_C" & _
                "DF_TEN_CODE_FK_PK] = @Original_COTEN_CDF_TEN_CODE_FK_PK) AND ((@IsNull_COTEN_QUA" & _
                "LIFICATIF = 1 AND [COTEN_QUALIFICATIF] IS NULL) OR ([COTEN_QUALIFICATIF] = @Orig" & _
                "inal_COTEN_QUALIFICATIF)) AND ((@IsNull_COTEN_DOSAGE = 1 AND [COTEN_DOSAGE] IS N" & _
                "ULL) OR ([COTEN_DOSAGE] = @Original_COTEN_DOSAGE)) AND ((@IsNull_COTEN_CDF_UD_CO" & _
                "DE_FK = 1 AND [COTEN_CDF_UD_CODE_FK] IS NULL) OR ([COTEN_CDF_UD_CODE_FK] = @Orig" & _
                "inal_COTEN_CDF_UD_CODE_FK)) AND ((@IsNull_COTEN_DOSAGE_EQUIV = 1 AND [COTEN_DOSA" & _
                "GE_EQUIV] IS NULL) OR ([COTEN_DOSAGE_EQUIV] = @Original_COTEN_DOSAGE_EQUIV)) AND" & _
                " ((@IsNull_COTEN_CDF_UD_EQUIV_CODE_FK = 1 AND [COTEN_CDF_UD_EQUIV_CODE_FK] IS NU" & _
                "LL) OR ([COTEN_CDF_UD_EQUIV_CODE_FK] = @Original_COTEN_CDF_UD_EQUIV_CODE_FK)) AN" & _
                "D ((@IsNull_COTEN_NUMORD = 1 AND [COTEN_NUMORD] IS NULL) OR ([COTEN_NUMORD] = @O" & _
                "riginal_COTEN_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT COTEN_SP_CODE_FK_PK, COTEN_CDF_TEN_CODE_FK_PK, " & _
                "COTEN_QUALIFICATIF, COTEN_DOSAGE, COTEN_CDF_UD_CODE_FK, COTEN_DOSAGE_EQUIV, COTE" & _
                "N_CDF_UD_EQUIV_CODE_FK, COTEN_NUMORD FROM THERIAQUE.COTEN_COMPO_TENEUR WHERE (CO" & _
                "TEN_CDF_TEN_CODE_FK_PK = @COTEN_CDF_TEN_CODE_FK_PK) AND (COTEN_SP_CODE_FK_PK = @" & _
                "COTEN_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_CDF_TEN_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_TEN_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_QUALIFICATIF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_QUALIFICATIF", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_DOSAGE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_CDF_UD_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_DOSAGE_EQUIV", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE_EQUIV", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_CDF_TEN_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_TEN_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_QUALIFICATIF", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_QUALIFICATIF", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_QUALIFICATIF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_QUALIFICATIF", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_DOSAGE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_DOSAGE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_DOSAGE", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_CDF_UD_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_CDF_UD_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_DOSAGE_EQUIV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_DOSAGE_EQUIV", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_DOSAGE_EQUIV", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 9, 4, "COTEN_DOSAGE_EQUIV", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_CDF_UD_EQUIV_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_COTEN_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_COTEN_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "COTEN_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COTEN_SP_CODE_FK_PK, COTEN_CDF_TEN_CODE_FK_PK, COTEN_QUALIFICATIF, COTEN_D" & _
                "OSAGE, COTEN_CDF_UD_CODE_FK, COTEN_DOSAGE_EQUIV, COTEN_CDF_UD_EQUIV_CODE_FK, COT" & _
                "EN_NUMORD FROM THERIAQUE.COTEN_COMPO_TENEUR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COTEN_SP_CODE_FK_PK, COTEN_CDF_TEN_CODE_FK_PK, COTEN_QUALIFICATIF, COTEN_D" & _
                "OSAGE, COTEN_CDF_UD_CODE_FK, COTEN_DOSAGE_EQUIV, COTEN_CDF_UD_EQUIV_CODE_FK, COT" & _
                "EN_NUMORD FROM THERIAQUE.COTEN_COMPO_TENEUR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where COTEN_SP_CODE_FK_PK = @COTEN_" & _
                "SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@COTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "COTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable = New dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable, ByVal COTEN_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COTEN_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal COTEN_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(COTEN_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable = New dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.COTEN_COMPO_TENEURDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "COTEN_COMPO_TENEUR")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_COTEN_SP_CODE_FK_PK As Integer, ByVal Original_COTEN_CDF_TEN_CODE_FK_PK As String, ByVal Original_COTEN_QUALIFICATIF As String, ByVal Original_COTEN_DOSAGE As System.Nullable(Of Decimal), ByVal Original_COTEN_CDF_UD_CODE_FK As String, ByVal Original_COTEN_DOSAGE_EQUIV As System.Nullable(Of Decimal), ByVal Original_COTEN_CDF_UD_EQUIV_CODE_FK As String, ByVal Original_COTEN_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COTEN_SP_CODE_FK_PK, Integer)
            If (Original_COTEN_CDF_TEN_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_COTEN_CDF_TEN_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COTEN_CDF_TEN_CODE_FK_PK, String)
            End If
            If (Original_COTEN_QUALIFICATIF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COTEN_QUALIFICATIF, String)
            End If
            If (Original_COTEN_DOSAGE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_COTEN_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_COTEN_CDF_UD_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_COTEN_CDF_UD_CODE_FK, String)
            End If
            If (Original_COTEN_DOSAGE_EQUIV.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_COTEN_DOSAGE_EQUIV.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_COTEN_CDF_UD_EQUIV_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_COTEN_CDF_UD_EQUIV_CODE_FK, String)
            End If
            If (Original_COTEN_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_COTEN_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal COTEN_SP_CODE_FK_PK As Integer, ByVal COTEN_CDF_TEN_CODE_FK_PK As String, ByVal COTEN_QUALIFICATIF As String, ByVal COTEN_DOSAGE As System.Nullable(Of Decimal), ByVal COTEN_CDF_UD_CODE_FK As String, ByVal COTEN_DOSAGE_EQUIV As System.Nullable(Of Decimal), ByVal COTEN_CDF_UD_EQUIV_CODE_FK As String, ByVal COTEN_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(COTEN_SP_CODE_FK_PK, Integer)
            If (COTEN_CDF_TEN_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("COTEN_CDF_TEN_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(COTEN_CDF_TEN_CODE_FK_PK, String)
            End If
            If (COTEN_QUALIFICATIF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COTEN_QUALIFICATIF, String)
            End If
            If (COTEN_DOSAGE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COTEN_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (COTEN_CDF_UD_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COTEN_CDF_UD_CODE_FK, String)
            End If
            If (COTEN_DOSAGE_EQUIV.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(COTEN_DOSAGE_EQUIV.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (COTEN_CDF_UD_EQUIV_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(COTEN_CDF_UD_EQUIV_CODE_FK, String)
            End If
            If (COTEN_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(COTEN_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal COTEN_SP_CODE_FK_PK As Integer, _
                    ByVal COTEN_CDF_TEN_CODE_FK_PK As String, _
                    ByVal COTEN_QUALIFICATIF As String, _
                    ByVal COTEN_DOSAGE As System.Nullable(Of Decimal), _
                    ByVal COTEN_CDF_UD_CODE_FK As String, _
                    ByVal COTEN_DOSAGE_EQUIV As System.Nullable(Of Decimal), _
                    ByVal COTEN_CDF_UD_EQUIV_CODE_FK As String, _
                    ByVal COTEN_NUMORD As System.Nullable(Of Short), _
                    ByVal Original_COTEN_SP_CODE_FK_PK As Integer, _
                    ByVal Original_COTEN_CDF_TEN_CODE_FK_PK As String, _
                    ByVal Original_COTEN_QUALIFICATIF As String, _
                    ByVal Original_COTEN_DOSAGE As System.Nullable(Of Decimal), _
                    ByVal Original_COTEN_CDF_UD_CODE_FK As String, _
                    ByVal Original_COTEN_DOSAGE_EQUIV As System.Nullable(Of Decimal), _
                    ByVal Original_COTEN_CDF_UD_EQUIV_CODE_FK As String, _
                    ByVal Original_COTEN_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(COTEN_SP_CODE_FK_PK, Integer)
            If (COTEN_CDF_TEN_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("COTEN_CDF_TEN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COTEN_CDF_TEN_CODE_FK_PK, String)
            End If
            If (COTEN_QUALIFICATIF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COTEN_QUALIFICATIF, String)
            End If
            If (COTEN_DOSAGE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COTEN_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (COTEN_CDF_UD_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COTEN_CDF_UD_CODE_FK, String)
            End If
            If (COTEN_DOSAGE_EQUIV.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COTEN_DOSAGE_EQUIV.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (COTEN_CDF_UD_EQUIV_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(COTEN_CDF_UD_EQUIV_CODE_FK, String)
            End If
            If (COTEN_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(COTEN_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_COTEN_SP_CODE_FK_PK, Integer)
            If (Original_COTEN_CDF_TEN_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_COTEN_CDF_TEN_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_COTEN_CDF_TEN_CODE_FK_PK, String)
            End If
            If (Original_COTEN_QUALIFICATIF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_COTEN_QUALIFICATIF, String)
            End If
            If (Original_COTEN_DOSAGE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_COTEN_DOSAGE.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Original_COTEN_CDF_UD_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_COTEN_CDF_UD_CODE_FK, String)
            End If
            If (Original_COTEN_DOSAGE_EQUIV.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_COTEN_DOSAGE_EQUIV.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_COTEN_CDF_UD_EQUIV_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_COTEN_CDF_UD_EQUIV_CODE_FK, String)
            End If
            If (Original_COTEN_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_COTEN_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPADM_SPECIALITE_MODEADMTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPADM_SPECIALITE_MODEADM"
            tableMapping.ColumnMappings.Add("SPADM_SP_CODE_FK_PK", "SPADM_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPADM_LIBELLE", "SPADM_LIBELLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPADM_SPECIALITE_MODEADM] WHERE (([SPADM_SP_CODE_FK_PK] "& _ 
                "= @Original_SPADM_SP_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPADM_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPADM_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPADM_SPECIALITE_MODEADM] ([SPADM_SP_CODE_FK_PK], [SPADM"& _ 
                "_LIBELLE]) VALUES (@SPADM_SP_CODE_FK_PK, @SPADM_LIBELLE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPADM_SP_CODE_"& _ 
                "FK_PK, SPADM_LIBELLE FROM THERIAQUE.SPADM_SPECIALITE_MODEADM WHERE (SPADM_SP_COD"& _ 
                "E_FK_PK = @SPADM_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPADM_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPADM_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPADM_LIBELLE", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "SPADM_LIBELLE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPADM_SPECIALITE_MODEADM] SET [SPADM_SP_CODE_FK_PK] = @SPADM_"& _ 
                "SP_CODE_FK_PK, [SPADM_LIBELLE] = @SPADM_LIBELLE WHERE (([SPADM_SP_CODE_FK_PK] = "& _ 
                "@Original_SPADM_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPADM_SP_CODE_FK_PK, SPADM_LIBELLE FROM"& _ 
                " THERIAQUE.SPADM_SPECIALITE_MODEADM WHERE (SPADM_SP_CODE_FK_PK = @SPADM_SP_CODE_"& _ 
                "FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPADM_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPADM_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPADM_LIBELLE", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "SPADM_LIBELLE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPADM_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPADM_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPADM_SP_CODE_FK_PK, SPADM_LIBELLE FROM THERIAQUE.SPADM_SPECIALITE_MODEADM" & _
                ""
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPADM_SP_CODE_FK_PK, SPADM_LIBELLE FROM THERIAQUE.SPADM_SPECIALITE_MODEADM" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPADM_SP_CODE_FK_PK = @SPADM_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPADM_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPADM_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable = New dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable, ByVal SPADM_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPADM_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPADM_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPADM_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable = New dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPADM_SPECIALITE_MODEADMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPADM_SPECIALITE_MODEADM")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPADM_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPADM_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPADM_SP_CODE_FK_PK As Integer, ByVal SPADM_LIBELLE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPADM_SP_CODE_FK_PK, Integer)
            If (SPADM_LIBELLE Is Nothing) Then
                Throw New System.ArgumentNullException("SPADM_LIBELLE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPADM_LIBELLE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPADM_SP_CODE_FK_PK As Integer, ByVal SPADM_LIBELLE As String, ByVal Original_SPADM_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPADM_SP_CODE_FK_PK, Integer)
            If (SPADM_LIBELLE Is Nothing) Then
                Throw New System.ArgumentNullException("SPADM_LIBELLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPADM_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPADM_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPTEN_SPECIALITE_TENEURTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPTEN_SPECIALITE_TENEUR"
            tableMapping.ColumnMappings.Add("SPTEN_SP_CODE_FK_PK", "SPTEN_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPTEN_LIBELLE", "SPTEN_LIBELLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPTEN_SPECIALITE_TENEUR] WHERE (([SPTEN_SP_CODE_FK_PK] =" & _
                " @Original_SPTEN_SP_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPTEN_SPECIALITE_TENEUR] ([SPTEN_SP_CODE_FK_PK], [SPTEN_" & _
                "LIBELLE]) VALUES (@SPTEN_SP_CODE_FK_PK, @SPTEN_LIBELLE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPTEN_SP_CODE_F" & _
                "K_PK, SPTEN_LIBELLE FROM THERIAQUE.SPTEN_SPECIALITE_TENEUR WHERE (SPTEN_SP_CODE_" & _
                "FK_PK = @SPTEN_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPTEN_LIBELLE", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_LIBELLE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPTEN_SPECIALITE_TENEUR] SET [SPTEN_SP_CODE_FK_PK] = @SPTEN_S" & _
                "P_CODE_FK_PK, [SPTEN_LIBELLE] = @SPTEN_LIBELLE WHERE (([SPTEN_SP_CODE_FK_PK] = @" & _
                "Original_SPTEN_SP_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPTEN_SP_CODE_FK_PK, SPTEN_LIBELLE FROM " & _
                "THERIAQUE.SPTEN_SPECIALITE_TENEUR WHERE (SPTEN_SP_CODE_FK_PK = @SPTEN_SP_CODE_FK" & _
                "_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPTEN_LIBELLE", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_LIBELLE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPTEN_SP_CODE_FK_PK, SPTEN_LIBELLE FROM THERIAQUE.SPTEN_SPECIALITE_TENEUR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPTEN_SP_CODE_FK_PK, SPTEN_LIBELLE FROM THERIAQUE.SPTEN_SPECIALITE_TENEUR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPTEN_SP_CODE_FK_PK = @SPTEN_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPTEN_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPTEN_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable = New dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable, ByVal SPTEN_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPTEN_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPTEN_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPTEN_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable = New dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPTEN_SPECIALITE_TENEURDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPTEN_SPECIALITE_TENEUR")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPTEN_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPTEN_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPTEN_SP_CODE_FK_PK As Integer, ByVal SPTEN_LIBELLE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPTEN_SP_CODE_FK_PK, Integer)
            If (SPTEN_LIBELLE Is Nothing) Then
                Throw New System.ArgumentNullException("SPTEN_LIBELLE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPTEN_LIBELLE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPTEN_SP_CODE_FK_PK As Integer, ByVal SPTEN_LIBELLE As String, ByVal Original_SPTEN_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPTEN_SP_CODE_FK_PK, Integer)
            If (SPTEN_LIBELLE Is Nothing) Then
                Throw New System.ArgumentNullException("SPTEN_LIBELLE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPTEN_LIBELLE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPTEN_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPCPH_SPECIALITE_CLASSEPHTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPCPH_SPECIALITE_CLASSEPH"
            tableMapping.ColumnMappings.Add("SPCPH_SP_CODE_FK_PK", "SPCPH_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCPH_CPH_CODE_FK_PK", "SPCPH_CPH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCPH_NUMORD", "SPCPH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPCPH_SPECIALITE_CLASSEPH] WHERE (([SPCPH_SP_CODE_FK_PK]"& _ 
                " = @Original_SPCPH_SP_CODE_FK_PK) AND ([SPCPH_CPH_CODE_FK_PK] = @Original_SPCPH_"& _ 
                "CPH_CODE_FK_PK) AND ((@IsNull_SPCPH_NUMORD = 1 AND [SPCPH_NUMORD] IS NULL) OR (["& _ 
                "SPCPH_NUMORD] = @Original_SPCPH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPCPH_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPCPH_SPECIALITE_CLASSEPH] ([SPCPH_SP_CODE_FK_PK], [SPCP"& _ 
                "H_CPH_CODE_FK_PK], [SPCPH_NUMORD]) VALUES (@SPCPH_SP_CODE_FK_PK, @SPCPH_CPH_CODE"& _ 
                "_FK_PK, @SPCPH_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPCPH_SP_CODE_FK_PK, SPCPH_CPH_CODE_FK_PK, SPCPH"& _ 
                "_NUMORD FROM THERIAQUE.SPCPH_SPECIALITE_CLASSEPH WHERE (SPCPH_CPH_CODE_FK_PK = @"& _ 
                "SPCPH_CPH_CODE_FK_PK) AND (SPCPH_SP_CODE_FK_PK = @SPCPH_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPCPH_SPECIALITE_CLASSEPH] SET [SPCPH_SP_CODE_FK_PK] = @SPCPH"& _ 
                "_SP_CODE_FK_PK, [SPCPH_CPH_CODE_FK_PK] = @SPCPH_CPH_CODE_FK_PK, [SPCPH_NUMORD] ="& _ 
                " @SPCPH_NUMORD WHERE (([SPCPH_SP_CODE_FK_PK] = @Original_SPCPH_SP_CODE_FK_PK) AN"& _ 
                "D ([SPCPH_CPH_CODE_FK_PK] = @Original_SPCPH_CPH_CODE_FK_PK) AND ((@IsNull_SPCPH_"& _ 
                "NUMORD = 1 AND [SPCPH_NUMORD] IS NULL) OR ([SPCPH_NUMORD] = @Original_SPCPH_NUMO"& _ 
                "RD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPCPH_SP_CODE_FK_PK, SPCPH_CPH_CODE_FK_PK, SPCPH_NUMORD FROM THER"& _ 
                "IAQUE.SPCPH_SPECIALITE_CLASSEPH WHERE (SPCPH_CPH_CODE_FK_PK = @SPCPH_CPH_CODE_FK"& _ 
                "_PK) AND (SPCPH_SP_CODE_FK_PK = @SPCPH_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPCPH_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCPH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPCPH_SP_CODE_FK_PK, SPCPH_CPH_CODE_FK_PK, SPCPH_NUMORD FROM THERIAQUE.SPC" & _
                "PH_SPECIALITE_CLASSEPH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPCPH_SP_CODE_FK_PK, SPCPH_CPH_CODE_FK_PK, SPCPH_NUMORD FROM THERIAQUE.SPC" & _
                "PH_SPECIALITE_CLASSEPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPCPH_SP_CODE_FK_PK = @SPCPH_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPCPH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable = New dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable, ByVal SPCPH_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCPH_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPCPH_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCPH_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable = New dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPCPH_SPECIALITE_CLASSEPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPCPH_SPECIALITE_CLASSEPH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPCPH_SP_CODE_FK_PK As Integer, ByVal Original_SPCPH_CPH_CODE_FK_PK As String, ByVal Original_SPCPH_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPCPH_SP_CODE_FK_PK, Integer)
            If (Original_SPCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPCPH_CPH_CODE_FK_PK, String)
            End If
            If (Original_SPCPH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPCPH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPCPH_SP_CODE_FK_PK As Integer, ByVal SPCPH_CPH_CODE_FK_PK As String, ByVal SPCPH_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPCPH_SP_CODE_FK_PK, Integer)
            If (SPCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPCPH_CPH_CODE_FK_PK, String)
            End If
            If (SPCPH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPCPH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPCPH_SP_CODE_FK_PK As Integer, ByVal SPCPH_CPH_CODE_FK_PK As String, ByVal SPCPH_NUMORD As System.Nullable(Of Short), ByVal Original_SPCPH_SP_CODE_FK_PK As Integer, ByVal Original_SPCPH_CPH_CODE_FK_PK As String, ByVal Original_SPCPH_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPCPH_SP_CODE_FK_PK, Integer)
            If (SPCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPCPH_CPH_CODE_FK_PK, String)
            End If
            If (SPCPH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPCPH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPCPH_SP_CODE_FK_PK, Integer)
            If (Original_SPCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPCPH_CPH_CODE_FK_PK, String)
            End If
            If (Original_SPCPH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPCPH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPDDD_DOSE_USUELLE_JOURTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPDDD_DOSE_USUELLE_JOUR"
            tableMapping.ColumnMappings.Add("SPDDD_SP_CODE_FK_PK", "SPDDD_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPDDD_ATCDDD_CATC_CODE_FK_PK", "SPDDD_ATCDDD_CATC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", "SPDDD_ATCDDD_CDF_VO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPDDD_ATCDDD_DOSAGE_PK", "SPDDD_ATCDDD_DOSAGE_PK")
            tableMapping.ColumnMappings.Add("SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", "SPDDD_ATCDDD_CDF_UD_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPDDD_NUMORD", "SPDDD_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPDDD_DOSE_USUELLE_JOUR] WHERE (([SPDDD_SP_CODE_FK_PK] =" & _
                " @Original_SPDDD_SP_CODE_FK_PK) AND ([SPDDD_ATCDDD_CATC_CODE_FK_PK] = @Original_" & _
                "SPDDD_ATCDDD_CATC_CODE_FK_PK) AND ([SPDDD_ATCDDD_CDF_VO_CODE_FK_PK] = @Original_" & _
                "SPDDD_ATCDDD_CDF_VO_CODE_FK_PK) AND ([SPDDD_ATCDDD_DOSAGE_PK] = @Original_SPDDD_" & _
                "ATCDDD_DOSAGE_PK) AND ([SPDDD_ATCDDD_CDF_UD_CODE_FK_PK] = @Original_SPDDD_ATCDDD" & _
                "_CDF_UD_CODE_FK_PK) AND ((@IsNull_SPDDD_NUMORD = 1 AND [SPDDD_NUMORD] IS NULL) O" & _
                "R ([SPDDD_NUMORD] = @Original_SPDDD_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "SPDDD_ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPDDD_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPDDD_DOSE_USUELLE_JOUR] ([SPDDD_SP_CODE_FK_PK], [SPDDD_" & _
                "ATCDDD_CATC_CODE_FK_PK], [SPDDD_ATCDDD_CDF_VO_CODE_FK_PK], [SPDDD_ATCDDD_DOSAGE_" & _
                "PK], [SPDDD_ATCDDD_CDF_UD_CODE_FK_PK], [SPDDD_NUMORD]) VALUES (@SPDDD_SP_CODE_FK" & _
                "_PK, @SPDDD_ATCDDD_CATC_CODE_FK_PK, @SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, @SPDDD_ATCD" & _
                "DD_DOSAGE_PK, @SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, @SPDDD_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPDDD_SP_" & _
                "CODE_FK_PK, SPDDD_ATCDDD_CATC_CODE_FK_PK, SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, SPDDD_" & _
                "ATCDDD_DOSAGE_PK, SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, SPDDD_NUMORD FROM THERIAQUE.SP" & _
                "DDD_DOSE_USUELLE_JOUR WHERE (SPDDD_ATCDDD_CATC_CODE_FK_PK = @SPDDD_ATCDDD_CATC_C" & _
                "ODE_FK_PK) AND (SPDDD_ATCDDD_CDF_UD_CODE_FK_PK = @SPDDD_ATCDDD_CDF_UD_CODE_FK_PK" & _
                ") AND (SPDDD_ATCDDD_CDF_VO_CODE_FK_PK = @SPDDD_ATCDDD_CDF_VO_CODE_FK_PK) AND (SP" & _
                "DDD_ATCDDD_DOSAGE_PK = @SPDDD_ATCDDD_DOSAGE_PK) AND (SPDDD_SP_CODE_FK_PK = @SPDD" & _
                "D_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "SPDDD_ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPDDD_DOSE_USUELLE_JOUR] SET [SPDDD_SP_CODE_FK_PK] = @SPDDD_S" & _
                "P_CODE_FK_PK, [SPDDD_ATCDDD_CATC_CODE_FK_PK] = @SPDDD_ATCDDD_CATC_CODE_FK_PK, [S" & _
                "PDDD_ATCDDD_CDF_VO_CODE_FK_PK] = @SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, [SPDDD_ATCDDD_" & _
                "DOSAGE_PK] = @SPDDD_ATCDDD_DOSAGE_PK, [SPDDD_ATCDDD_CDF_UD_CODE_FK_PK] = @SPDDD_" & _
                "ATCDDD_CDF_UD_CODE_FK_PK, [SPDDD_NUMORD] = @SPDDD_NUMORD WHERE (([SPDDD_SP_CODE_" & _
                "FK_PK] = @Original_SPDDD_SP_CODE_FK_PK) AND ([SPDDD_ATCDDD_CATC_CODE_FK_PK] = @O" & _
                "riginal_SPDDD_ATCDDD_CATC_CODE_FK_PK) AND ([SPDDD_ATCDDD_CDF_VO_CODE_FK_PK] = @O" & _
                "riginal_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK) AND ([SPDDD_ATCDDD_DOSAGE_PK] = @Origina" & _
                "l_SPDDD_ATCDDD_DOSAGE_PK) AND ([SPDDD_ATCDDD_CDF_UD_CODE_FK_PK] = @Original_SPDD" & _
                "D_ATCDDD_CDF_UD_CODE_FK_PK) AND ((@IsNull_SPDDD_NUMORD = 1 AND [SPDDD_NUMORD] IS" & _
                " NULL) OR ([SPDDD_NUMORD] = @Original_SPDDD_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPDDD_SP_CODE_FK_" & _
                "PK, SPDDD_ATCDDD_CATC_CODE_FK_PK, SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, SPDDD_ATCDDD_D" & _
                "OSAGE_PK, SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, SPDDD_NUMORD FROM THERIAQUE.SPDDD_DOSE" & _
                "_USUELLE_JOUR WHERE (SPDDD_ATCDDD_CATC_CODE_FK_PK = @SPDDD_ATCDDD_CATC_CODE_FK_P" & _
                "K) AND (SPDDD_ATCDDD_CDF_UD_CODE_FK_PK = @SPDDD_ATCDDD_CDF_UD_CODE_FK_PK) AND (S" & _
                "PDDD_ATCDDD_CDF_VO_CODE_FK_PK = @SPDDD_ATCDDD_CDF_VO_CODE_FK_PK) AND (SPDDD_ATCD" & _
                "DD_DOSAGE_PK = @SPDDD_ATCDDD_DOSAGE_PK) AND (SPDDD_SP_CODE_FK_PK = @SPDDD_SP_COD" & _
                "E_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "SPDDD_ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CATC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_DOSAGE_PK", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 10, 4, "SPDDD_ATCDDD_DOSAGE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_ATCDDD_CDF_UD_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPDDD_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPDDD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPDDD_SP_CODE_FK_PK, SPDDD_ATCDDD_CATC_CODE_FK_PK, SPDDD_ATCDDD_CDF_VO_COD" & _
                "E_FK_PK, SPDDD_ATCDDD_DOSAGE_PK, SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, SPDDD_NUMORD FR" & _
                "OM THERIAQUE.SPDDD_DOSE_USUELLE_JOUR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPDDD_SP_CODE_FK_PK, SPDDD_ATCDDD_CATC_CODE_FK_PK, SPDDD_ATCDDD_CDF_VO_COD" & _
                "E_FK_PK, SPDDD_ATCDDD_DOSAGE_PK, SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, SPDDD_NUMORD FR" & _
                "OM THERIAQUE.SPDDD_DOSE_USUELLE_JOUR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SPDDD_SP_CODE_FK_PK = @SPDDD_SP_CO" & _
                "DE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPDDD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPDDD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable = New dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable, ByVal SPDDD_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPDDD_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPDDD_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPDDD_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable = New dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPDDD_DOSE_USUELLE_JOURDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPDDD_DOSE_USUELLE_JOUR")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPDDD_SP_CODE_FK_PK As Integer, ByVal Original_SPDDD_ATCDDD_CATC_CODE_FK_PK As String, ByVal Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal Original_SPDDD_ATCDDD_DOSAGE_PK As Decimal, ByVal Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK As String, ByVal Original_SPDDD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPDDD_SP_CODE_FK_PK, Integer)
            If (Original_SPDDD_ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPDDD_ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPDDD_ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SPDDD_ATCDDD_DOSAGE_PK, Decimal)
            If (Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            If (Original_SPDDD_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SPDDD_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPDDD_SP_CODE_FK_PK As Integer, ByVal SPDDD_ATCDDD_CATC_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_DOSAGE_PK As Decimal, ByVal SPDDD_ATCDDD_CDF_UD_CODE_FK_PK As String, ByVal SPDDD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPDDD_SP_CODE_FK_PK, Integer)
            If (SPDDD_ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPDDD_ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPDDD_ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (SPDDD_ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPDDD_ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPDDD_ATCDDD_DOSAGE_PK, Decimal)
            If (SPDDD_ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPDDD_ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            If (SPDDD_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SPDDD_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPDDD_SP_CODE_FK_PK As Integer, ByVal SPDDD_ATCDDD_CATC_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal SPDDD_ATCDDD_DOSAGE_PK As Decimal, ByVal SPDDD_ATCDDD_CDF_UD_CODE_FK_PK As String, ByVal SPDDD_NUMORD As System.Nullable(Of Short), ByVal Original_SPDDD_SP_CODE_FK_PK As Integer, ByVal Original_SPDDD_ATCDDD_CATC_CODE_FK_PK As String, ByVal Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK As String, ByVal Original_SPDDD_ATCDDD_DOSAGE_PK As Decimal, ByVal Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK As String, ByVal Original_SPDDD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPDDD_SP_CODE_FK_PK, Integer)
            If (SPDDD_ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPDDD_ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPDDD_ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (SPDDD_ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPDDD_ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPDDD_ATCDDD_DOSAGE_PK, Decimal)
            If (SPDDD_ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPDDD_ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            If (SPDDD_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SPDDD_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPDDD_SP_CODE_FK_PK, Integer)
            If (Original_SPDDD_ATCDDD_CATC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPDDD_ATCDDD_CATC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SPDDD_ATCDDD_CATC_CODE_FK_PK, String)
            End If
            If (Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPDDD_ATCDDD_CDF_VO_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SPDDD_ATCDDD_DOSAGE_PK, Decimal)
            If (Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SPDDD_ATCDDD_CDF_UD_CODE_FK_PK, String)
            End If
            If (Original_SPDDD_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SPDDD_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPCH_SPECIALITE_CHOIXTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPCH_SPECIALITE_CHOIX"
            tableMapping.ColumnMappings.Add("SPCH_SP_CODE_FK_PK", "SPCH_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCH_CH_CODE_FK_PK", "SPCH_CH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPCH_SPECIALITE_CHOIX] WHERE (([SPCH_SP_CODE_FK_PK] = @O"& _ 
                "riginal_SPCH_SP_CODE_FK_PK) AND ([SPCH_CH_CODE_FK_PK] = @Original_SPCH_CH_CODE_F"& _ 
                "K_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPCH_SPECIALITE_CHOIX] ([SPCH_SP_CODE_FK_PK], [SPCH_CH_C"& _ 
                "ODE_FK_PK]) VALUES (@SPCH_SP_CODE_FK_PK, @SPCH_CH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPCH_SP_C"& _ 
                "ODE_FK_PK, SPCH_CH_CODE_FK_PK FROM THERIAQUE.SPCH_SPECIALITE_CHOIX WHERE (SPCH_C"& _ 
                "H_CODE_FK_PK = @SPCH_CH_CODE_FK_PK) AND (SPCH_SP_CODE_FK_PK = @SPCH_SP_CODE_FK_P"& _ 
                "K)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPCH_SPECIALITE_CHOIX] SET [SPCH_SP_CODE_FK_PK] = @SPCH_SP_CO"& _ 
                "DE_FK_PK, [SPCH_CH_CODE_FK_PK] = @SPCH_CH_CODE_FK_PK WHERE (([SPCH_SP_CODE_FK_PK"& _ 
                "] = @Original_SPCH_SP_CODE_FK_PK) AND ([SPCH_CH_CODE_FK_PK] = @Original_SPCH_CH_"& _ 
                "CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPCH_SP_CODE_FK_PK, SPCH_CH_CODE_FK_PK FROM THERIAQUE.SPCH"& _ 
                "_SPECIALITE_CHOIX WHERE (SPCH_CH_CODE_FK_PK = @SPCH_CH_CODE_FK_PK) AND (SPCH_SP_"& _ 
                "CODE_FK_PK = @SPCH_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPCH_SP_CODE_FK_PK, SPCH_CH_CODE_FK_PK FROM THERIAQUE.SPCH_SPECIALITE_CHOI" & _
                "X"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPCH_SP_CODE_FK_PK, SPCH_CH_CODE_FK_PK FROM THERIAQUE.SPCH_SPECIALITE_CHOI" & _
                "X" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPCH_SP_CODE_FK_PK = @SPCH_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPCH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable = New dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable, ByVal SPCH_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCH_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPCH_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCH_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable = New dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPCH_SPECIALITE_CHOIXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPCH_SPECIALITE_CHOIX")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPCH_SP_CODE_FK_PK As Integer, ByVal Original_SPCH_CH_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPCH_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPCH_CH_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPCH_SP_CODE_FK_PK As Integer, ByVal SPCH_CH_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPCH_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPCH_CH_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPCH_SP_CODE_FK_PK As Integer, ByVal SPCH_CH_CODE_FK_PK As Integer, ByVal Original_SPCH_SP_CODE_FK_PK As Integer, ByVal Original_SPCH_CH_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPCH_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPCH_CH_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPCH_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPCH_CH_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPRMO_SPECIALITE_RMOTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPRMO_SPECIALITE_RMO"
            tableMapping.ColumnMappings.Add("SPRMO_SP_CODE_FK_PK", "SPRMO_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPRMO_RMO_CODE_FK_PK", "SPRMO_RMO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPRMO_CLRMO_CODE_FK_PK", "SPRMO_CLRMO_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPRMO_SPECIALITE_RMO] WHERE (([SPRMO_SP_CODE_FK_PK] = @O" & _
                "riginal_SPRMO_SP_CODE_FK_PK) AND ([SPRMO_RMO_CODE_FK_PK] = @Original_SPRMO_RMO_C" & _
                "ODE_FK_PK) AND ([SPRMO_CLRMO_CODE_FK_PK] = @Original_SPRMO_CLRMO_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPRMO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPRMO_RMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_RMO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPRMO_CLRMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_CLRMO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPRMO_SPECIALITE_RMO] ([SPRMO_SP_CODE_FK_PK], [SPRMO_RMO" & _
                "_CODE_FK_PK], [SPRMO_CLRMO_CODE_FK_PK]) VALUES (@SPRMO_SP_CODE_FK_PK, @SPRMO_RMO" & _
                "_CODE_FK_PK, @SPRMO_CLRMO_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPRMO_SP_CODE_FK_PK, SPRMO_RMO_CO" & _
                "DE_FK_PK, SPRMO_CLRMO_CODE_FK_PK FROM THERIAQUE.SPRMO_SPECIALITE_RMO WHERE (SPRM" & _
                "O_CLRMO_CODE_FK_PK = @SPRMO_CLRMO_CODE_FK_PK) AND (SPRMO_RMO_CODE_FK_PK = @SPRMO" & _
                "_RMO_CODE_FK_PK) AND (SPRMO_SP_CODE_FK_PK = @SPRMO_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_RMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_RMO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_CLRMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_CLRMO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPRMO_SPECIALITE_RMO] SET [SPRMO_SP_CODE_FK_PK] = @SPRMO_SP_C" & _
                "ODE_FK_PK, [SPRMO_RMO_CODE_FK_PK] = @SPRMO_RMO_CODE_FK_PK, [SPRMO_CLRMO_CODE_FK_" & _
                "PK] = @SPRMO_CLRMO_CODE_FK_PK WHERE (([SPRMO_SP_CODE_FK_PK] = @Original_SPRMO_SP" & _
                "_CODE_FK_PK) AND ([SPRMO_RMO_CODE_FK_PK] = @Original_SPRMO_RMO_CODE_FK_PK) AND (" & _
                "[SPRMO_CLRMO_CODE_FK_PK] = @Original_SPRMO_CLRMO_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPRMO_SP_" & _
                "CODE_FK_PK, SPRMO_RMO_CODE_FK_PK, SPRMO_CLRMO_CODE_FK_PK FROM THERIAQUE.SPRMO_SP" & _
                "ECIALITE_RMO WHERE (SPRMO_CLRMO_CODE_FK_PK = @SPRMO_CLRMO_CODE_FK_PK) AND (SPRMO" & _
                "_RMO_CODE_FK_PK = @SPRMO_RMO_CODE_FK_PK) AND (SPRMO_SP_CODE_FK_PK = @SPRMO_SP_CO" & _
                "DE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_RMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_RMO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_CLRMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_CLRMO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPRMO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPRMO_RMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_RMO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPRMO_CLRMO_CODE_FK_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_CLRMO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPRMO_SP_CODE_FK_PK, SPRMO_RMO_CODE_FK_PK, SPRMO_CLRMO_CODE_FK_PK FROM THE" & _
                "RIAQUE.SPRMO_SPECIALITE_RMO"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPRMO_SP_CODE_FK_PK, SPRMO_RMO_CODE_FK_PK, SPRMO_CLRMO_CODE_FK_PK FROM THE" & _
                "RIAQUE.SPRMO_SPECIALITE_RMO" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  SPRMO_SP_CODE_FK_PK = @SPRMO_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPRMO_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPRMO_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable = New dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable, ByVal SPRMO_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPRMO_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPRMO_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPRMO_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable = New dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPRMO_SPECIALITE_RMODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPRMO_SPECIALITE_RMO")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPRMO_SP_CODE_FK_PK As Integer, ByVal Original_SPRMO_RMO_CODE_FK_PK As Byte, ByVal Original_SPRMO_CLRMO_CODE_FK_PK As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPRMO_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPRMO_RMO_CODE_FK_PK, Byte)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPRMO_CLRMO_CODE_FK_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPRMO_SP_CODE_FK_PK As Integer, ByVal SPRMO_RMO_CODE_FK_PK As Byte, ByVal SPRMO_CLRMO_CODE_FK_PK As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPRMO_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPRMO_RMO_CODE_FK_PK, Byte)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPRMO_CLRMO_CODE_FK_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPRMO_SP_CODE_FK_PK As Integer, ByVal SPRMO_RMO_CODE_FK_PK As Byte, ByVal SPRMO_CLRMO_CODE_FK_PK As Byte, ByVal Original_SPRMO_SP_CODE_FK_PK As Integer, ByVal Original_SPRMO_RMO_CODE_FK_PK As Byte, ByVal Original_SPRMO_CLRMO_CODE_FK_PK As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPRMO_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPRMO_RMO_CODE_FK_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPRMO_CLRMO_CODE_FK_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPRMO_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPRMO_RMO_CODE_FK_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPRMO_CLRMO_CODE_FK_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPFTR_SPECIALITE_TRANSPARENCETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPFTR_SPECIALITE_TRANSPARENCE"
            tableMapping.ColumnMappings.Add("SPFTR_SP_CODE_FK_PK", "SPFTR_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFTR_FTR_CODE_FK_PK", "SPFTR_FTR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPFTR_SPECIALITE_TRANSPARENCE] WHERE (([SPFTR_SP_CODE_FK"& _ 
                "_PK] = @Original_SPFTR_SP_CODE_FK_PK) AND ([SPFTR_FTR_CODE_FK_PK] = @Original_SP"& _ 
                "FTR_FTR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTR_FTR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_FTR_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPFTR_SPECIALITE_TRANSPARENCE] ([SPFTR_SP_CODE_FK_PK], ["& _ 
                "SPFTR_FTR_CODE_FK_PK]) VALUES (@SPFTR_SP_CODE_FK_PK, @SPFTR_FTR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT SPFTR_SP_CODE_FK_PK, SPFTR_FTR_CODE_FK_PK FROM THERIAQUE.SPFTR_SPECIALITE_T"& _ 
                "RANSPARENCE WHERE (SPFTR_FTR_CODE_FK_PK = @SPFTR_FTR_CODE_FK_PK) AND (SPFTR_SP_C"& _ 
                "ODE_FK_PK = @SPFTR_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTR_FTR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_FTR_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPFTR_SPECIALITE_TRANSPARENCE] SET [SPFTR_SP_CODE_FK_PK] = @S"& _ 
                "PFTR_SP_CODE_FK_PK, [SPFTR_FTR_CODE_FK_PK] = @SPFTR_FTR_CODE_FK_PK WHERE (([SPFT"& _ 
                "R_SP_CODE_FK_PK] = @Original_SPFTR_SP_CODE_FK_PK) AND ([SPFTR_FTR_CODE_FK_PK] = "& _ 
                "@Original_SPFTR_FTR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPFTR_SP_CODE_FK_PK, SPFTR_FTR_CODE_FK"& _ 
                "_PK FROM THERIAQUE.SPFTR_SPECIALITE_TRANSPARENCE WHERE (SPFTR_FTR_CODE_FK_PK = @"& _ 
                "SPFTR_FTR_CODE_FK_PK) AND (SPFTR_SP_CODE_FK_PK = @SPFTR_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTR_FTR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_FTR_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTR_FTR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_FTR_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPFTR_SP_CODE_FK_PK, SPFTR_FTR_CODE_FK_PK FROM THERIAQUE.SPFTR_SPECIALITE_" & _
                "TRANSPARENCE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPFTR_SP_CODE_FK_PK, SPFTR_FTR_CODE_FK_PK FROM THERIAQUE.SPFTR_SPECIALITE_" & _
                "TRANSPARENCE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  SPFTR_SP_CODE_FK_PK =  @SPFTR_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPFTR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable = New dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable, ByVal SPFTR_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFTR_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPFTR_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFTR_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable = New dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPFTR_SPECIALITE_TRANSPARENCEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPFTR_SPECIALITE_TRANSPARENCE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPFTR_SP_CODE_FK_PK As Integer, ByVal Original_SPFTR_FTR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPFTR_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPFTR_FTR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPFTR_SP_CODE_FK_PK As Integer, ByVal SPFTR_FTR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPFTR_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPFTR_FTR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPFTR_SP_CODE_FK_PK As Integer, ByVal SPFTR_FTR_CODE_FK_PK As Integer, ByVal Original_SPFTR_SP_CODE_FK_PK As Integer, ByVal Original_SPFTR_FTR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPFTR_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPFTR_FTR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPFTR_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPFTR_FTR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPFTH_SPEC_INFOTHERAPEUTIQUETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPFTH_SPEC_INFOTHERAPEUTIQUE"
            tableMapping.ColumnMappings.Add("SPFTH_SP_CODE_FK_PK", "SPFTH_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFTH_FTH_CODE_FK_PK", "SPFTH_FTH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPFTH_SPEC_INFOTHERAPEUTIQUE] WHERE (([SPFTH_SP_CODE_FK_" & _
                "PK] = @Original_SPFTH_SP_CODE_FK_PK) AND ([SPFTH_FTH_CODE_FK_PK] = @Original_SPF" & _
                "TH_FTH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTH_FTH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_FTH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPFTH_SPEC_INFOTHERAPEUTIQUE] ([SPFTH_SP_CODE_FK_PK], [S" & _
                "PFTH_FTH_CODE_FK_PK]) VALUES (@SPFTH_SP_CODE_FK_PK, @SPFTH_FTH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SEL" & _
                "ECT SPFTH_SP_CODE_FK_PK, SPFTH_FTH_CODE_FK_PK FROM THERIAQUE.SPFTH_SPEC_INFOTHER" & _
                "APEUTIQUE WHERE (SPFTH_FTH_CODE_FK_PK = @SPFTH_FTH_CODE_FK_PK) AND (SPFTH_SP_COD" & _
                "E_FK_PK = @SPFTH_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTH_FTH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_FTH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPFTH_SPEC_INFOTHERAPEUTIQUE] SET [SPFTH_SP_CODE_FK_PK] = @SP" & _
                "FTH_SP_CODE_FK_PK, [SPFTH_FTH_CODE_FK_PK] = @SPFTH_FTH_CODE_FK_PK WHERE (([SPFTH" & _
                "_SP_CODE_FK_PK] = @Original_SPFTH_SP_CODE_FK_PK) AND ([SPFTH_FTH_CODE_FK_PK] = @" & _
                "Original_SPFTH_FTH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPFTH_SP_CODE_FK_PK, SPFTH_FTH_CODE_FK_" & _
                "PK FROM THERIAQUE.SPFTH_SPEC_INFOTHERAPEUTIQUE WHERE (SPFTH_FTH_CODE_FK_PK = @SP" & _
                "FTH_FTH_CODE_FK_PK) AND (SPFTH_SP_CODE_FK_PK = @SPFTH_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTH_FTH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_FTH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFTH_FTH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_FTH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPFTH_SP_CODE_FK_PK, SPFTH_FTH_CODE_FK_PK FROM THERIAQUE.SPFTH_SPEC_INFOTH" & _
                "ERAPEUTIQUE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPFTH_SP_CODE_FK_PK, SPFTH_FTH_CODE_FK_PK FROM THERIAQUE.SPFTH_SPEC_INFOTH" & _
                "ERAPEUTIQUE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPFTH_SP_CODE_FK_PK = @SPFTH_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFTH_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPFTH_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable = New dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable, ByVal SPFTH_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFTH_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPFTH_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFTH_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable = New dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPFTH_SPEC_INFOTHERAPEUTIQUEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPFTH_SPEC_INFOTHERAPEUTIQUE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPFTH_SP_CODE_FK_PK As Integer, ByVal Original_SPFTH_FTH_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPFTH_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPFTH_FTH_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPFTH_SP_CODE_FK_PK As Integer, ByVal SPFTH_FTH_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPFTH_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPFTH_FTH_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPFTH_SP_CODE_FK_PK As Integer, ByVal SPFTH_FTH_CODE_FK_PK As Integer, ByVal Original_SPFTH_SP_CODE_FK_PK As Integer, ByVal Original_SPFTH_FTH_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPFTH_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPFTH_FTH_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPFTH_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPFTH_FTH_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPATR_SPEC_AVISTRANSPARENCETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPATR_SPEC_AVISTRANSPARENCE"
            tableMapping.ColumnMappings.Add("SPATR_SP_CODE_FK_PK", "SPATR_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPATR_ATR_CODE_FK_PK", "SPATR_ATR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPATR_SPEC_AVISTRANSPARENCE] WHERE (([SPATR_SP_CODE_FK_P"& _ 
                "K] = @Original_SPATR_SP_CODE_FK_PK) AND ([SPATR_ATR_CODE_FK_PK] = @Original_SPAT"& _ 
                "R_ATR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPATR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPATR_ATR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_ATR_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPATR_SPEC_AVISTRANSPARENCE] ([SPATR_SP_CODE_FK_PK], [SP"& _ 
                "ATR_ATR_CODE_FK_PK]) VALUES (@SPATR_SP_CODE_FK_PK, @SPATR_ATR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT SPATR_SP_CODE_FK_PK, SPATR_ATR_CODE_FK_PK FROM THERIAQUE.SPATR_SPEC_AVISTRANS"& _ 
                "PARENCE WHERE (SPATR_ATR_CODE_FK_PK = @SPATR_ATR_CODE_FK_PK) AND (SPATR_SP_CODE_"& _ 
                "FK_PK = @SPATR_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPATR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPATR_ATR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_ATR_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPATR_SPEC_AVISTRANSPARENCE] SET [SPATR_SP_CODE_FK_PK] = @SPA"& _ 
                "TR_SP_CODE_FK_PK, [SPATR_ATR_CODE_FK_PK] = @SPATR_ATR_CODE_FK_PK WHERE (([SPATR_"& _ 
                "SP_CODE_FK_PK] = @Original_SPATR_SP_CODE_FK_PK) AND ([SPATR_ATR_CODE_FK_PK] = @O"& _ 
                "riginal_SPATR_ATR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SPATR_SP_CODE_FK_PK, SPATR_ATR_CODE_FK_P"& _ 
                "K FROM THERIAQUE.SPATR_SPEC_AVISTRANSPARENCE WHERE (SPATR_ATR_CODE_FK_PK = @SPAT"& _ 
                "R_ATR_CODE_FK_PK) AND (SPATR_SP_CODE_FK_PK = @SPATR_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPATR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPATR_ATR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_ATR_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPATR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPATR_ATR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPATR_ATR_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPATR_SP_CODE_FK_PK, SPATR_ATR_CODE_FK_PK FROM THERIAQUE.SPATR_SPEC_AVISTR" & _
                "ANSPARENCE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPATR_SP_CODE_FK_PK, SPATR_ATR_CODE_FK_PK FROM THERIAQUE.SPATR_SPEC_AVISTR" & _
                "ANSPARENCE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPATR_SP_CODE_FK_PK = @SPATR_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPATR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPATR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable = New dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable, ByVal SPATR_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPATR_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPATR_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPATR_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable = New dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPATR_SPEC_AVISTRANSPARENCEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPATR_SPEC_AVISTRANSPARENCE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPATR_SP_CODE_FK_PK As Integer, ByVal Original_SPATR_ATR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPATR_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPATR_ATR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPATR_SP_CODE_FK_PK As Integer, ByVal SPATR_ATR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPATR_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPATR_ATR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPATR_SP_CODE_FK_PK As Integer, ByVal SPATR_ATR_CODE_FK_PK As Integer, ByVal Original_SPATR_SP_CODE_FK_PK As Integer, ByVal Original_SPATR_ATR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPATR_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPATR_ATR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPATR_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPATR_ATR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPSMR_SERVICE_MEDICAL_RENDUTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPSMR_SERVICE_MEDICAL_RENDU"
            tableMapping.ColumnMappings.Add("SPSMR_SP_CODE_FK_PK", "SPSMR_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPSMR_CDF_SMR_CODE_FK_PK", "SPSMR_CDF_SMR_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPSMR_NUM_ORD_PK", "SPSMR_NUM_ORD_PK")
            tableMapping.ColumnMappings.Add("SPSMR_DATE", "SPSMR_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPSMR_SERVICE_MEDICAL_RENDU] WHERE (([SPSMR_SP_CODE_FK_P" & _
                "K] = @Original_SPSMR_SP_CODE_FK_PK) AND ([SPSMR_CDF_SMR_CODE_FK_PK] = @Original_" & _
                "SPSMR_CDF_SMR_CODE_FK_PK) AND ([SPSMR_NUM_ORD_PK] = @Original_SPSMR_NUM_ORD_PK) " & _
                "AND ((@IsNull_SPSMR_DATE = 1 AND [SPSMR_DATE] IS NULL) OR ([SPSMR_DATE] = @Origi" & _
                "nal_SPSMR_DATE)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_CDF_SMR_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_CDF_SMR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_NUM_ORD_PK", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_NUM_ORD_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPSMR_DATE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_DATE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_DATE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPSMR_SERVICE_MEDICAL_RENDU] ([SPSMR_SP_CODE_FK_PK], [SP" & _
                "SMR_CDF_SMR_CODE_FK_PK], [SPSMR_NUM_ORD_PK], [SPSMR_DATE]) VALUES (@SPSMR_SP_COD" & _
                "E_FK_PK, @SPSMR_CDF_SMR_CODE_FK_PK, @SPSMR_NUM_ORD_PK, @SPSMR_DATE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPS" & _
                "MR_SP_CODE_FK_PK, SPSMR_CDF_SMR_CODE_FK_PK, SPSMR_NUM_ORD_PK, SPSMR_DATE FROM TH" & _
                "ERIAQUE.SPSMR_SERVICE_MEDICAL_RENDU WHERE (SPSMR_CDF_SMR_CODE_FK_PK = @SPSMR_CDF" & _
                "_SMR_CODE_FK_PK) AND (SPSMR_NUM_ORD_PK = @SPSMR_NUM_ORD_PK) AND (SPSMR_SP_CODE_F" & _
                "K_PK = @SPSMR_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_CDF_SMR_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_CDF_SMR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_NUM_ORD_PK", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_NUM_ORD_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_DATE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPSMR_SERVICE_MEDICAL_RENDU] SET [SPSMR_SP_CODE_FK_PK] = @SPS" & _
                "MR_SP_CODE_FK_PK, [SPSMR_CDF_SMR_CODE_FK_PK] = @SPSMR_CDF_SMR_CODE_FK_PK, [SPSMR" & _
                "_NUM_ORD_PK] = @SPSMR_NUM_ORD_PK, [SPSMR_DATE] = @SPSMR_DATE WHERE (([SPSMR_SP_C" & _
                "ODE_FK_PK] = @Original_SPSMR_SP_CODE_FK_PK) AND ([SPSMR_CDF_SMR_CODE_FK_PK] = @O" & _
                "riginal_SPSMR_CDF_SMR_CODE_FK_PK) AND ([SPSMR_NUM_ORD_PK] = @Original_SPSMR_NUM_" & _
                "ORD_PK) AND ((@IsNull_SPSMR_DATE = 1 AND [SPSMR_DATE] IS NULL) OR ([SPSMR_DATE] " & _
                "= @Original_SPSMR_DATE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPSMR_SP_CODE_FK_PK, SPSMR_CDF_SMR_CODE_FK_PK" & _
                ", SPSMR_NUM_ORD_PK, SPSMR_DATE FROM THERIAQUE.SPSMR_SERVICE_MEDICAL_RENDU WHERE " & _
                "(SPSMR_CDF_SMR_CODE_FK_PK = @SPSMR_CDF_SMR_CODE_FK_PK) AND (SPSMR_NUM_ORD_PK = @" & _
                "SPSMR_NUM_ORD_PK) AND (SPSMR_SP_CODE_FK_PK = @SPSMR_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_CDF_SMR_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_CDF_SMR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_NUM_ORD_PK", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_NUM_ORD_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_DATE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_CDF_SMR_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_CDF_SMR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_NUM_ORD_PK", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_NUM_ORD_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SPSMR_DATE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_DATE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPSMR_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_DATE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPSMR_SP_CODE_FK_PK, SPSMR_CDF_SMR_CODE_FK_PK, SPSMR_NUM_ORD_PK, SPSMR_DAT" & _
                "E FROM THERIAQUE.SPSMR_SERVICE_MEDICAL_RENDU"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPSMR_SP_CODE_FK_PK, SPSMR_CDF_SMR_CODE_FK_PK, SPSMR_NUM_ORD_PK, SPSMR_DAT" & _
                "E FROM THERIAQUE.SPSMR_SERVICE_MEDICAL_RENDU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SPSMR_SP_CODE_FK_PK = @SPSMR" & _
                "_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPSMR_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPSMR_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable = New dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable, ByVal SPSMR_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPSMR_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPSMR_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPSMR_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable = New dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPSMR_SERVICE_MEDICAL_RENDUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPSMR_SERVICE_MEDICAL_RENDU")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPSMR_SP_CODE_FK_PK As Integer, ByVal Original_SPSMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_SPSMR_NUM_ORD_PK As Short, ByVal Original_SPSMR_DATE As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPSMR_SP_CODE_FK_PK, Integer)
            If (Original_SPSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPSMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SPSMR_NUM_ORD_PK, Short)
            If (Original_SPSMR_DATE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SPSMR_DATE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPSMR_SP_CODE_FK_PK As Integer, ByVal SPSMR_CDF_SMR_CODE_FK_PK As String, ByVal SPSMR_NUM_ORD_PK As Short, ByVal SPSMR_DATE As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPSMR_SP_CODE_FK_PK, Integer)
            If (SPSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPSMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPSMR_NUM_ORD_PK, Short)
            If (SPSMR_DATE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SPSMR_DATE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPSMR_SP_CODE_FK_PK As Integer, ByVal SPSMR_CDF_SMR_CODE_FK_PK As String, ByVal SPSMR_NUM_ORD_PK As Short, ByVal SPSMR_DATE As System.Nullable(Of Date), ByVal Original_SPSMR_SP_CODE_FK_PK As Integer, ByVal Original_SPSMR_CDF_SMR_CODE_FK_PK As String, ByVal Original_SPSMR_NUM_ORD_PK As Short, ByVal Original_SPSMR_DATE As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPSMR_SP_CODE_FK_PK, Integer)
            If (SPSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPSMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SPSMR_NUM_ORD_PK, Short)
            If (SPSMR_DATE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SPSMR_DATE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SPSMR_SP_CODE_FK_PK, Integer)
            If (Original_SPSMR_CDF_SMR_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPSMR_CDF_SMR_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SPSMR_CDF_SMR_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SPSMR_NUM_ORD_PK, Short)
            If (Original_SPSMR_DATE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SPSMR_DATE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SPCPD_SPE_CDT_PRESCRTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPCPD_SPE_CDT_PRESCR"
            tableMapping.ColumnMappings.Add("SPCPD_SP_CODE_FK_PK", "SPCPD_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCPD_CDF_STP_CODE_FK_PK", "SPCPD_CDF_STP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPCPD_NUMORD", "SPCPD_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPCPD_SPE_CDT_PRESCR] ([SPCPD_SP_CODE_FK_PK], [SPCPD_CDF"& _ 
                "_STP_CODE_FK_PK], [SPCPD_NUMORD]) VALUES (@SPCPD_SP_CODE_FK_PK, @SPCPD_CDF_STP_C"& _ 
                "ODE_FK_PK, @SPCPD_NUMORD)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_CDF_STP_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_CDF_STP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_NUMORD FROM THERIAQUE" & _
                ".SPCPD_SPE_CDT_PRESCR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPCPD_SP_CODE_FK_PK, SPCPD_CDF_STP_CODE_FK_PK, SPCPD_NUMORD FROM THERIAQUE" & _
                ".SPCPD_SPE_CDT_PRESCR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where  SPCPD_SP_CODE_FK_PK = @SPCPD_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPCPD_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPCPD_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable = New dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable, ByVal SPCPD_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPCPD_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable = New dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPCPD_SPE_CDT_PRESCRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPCPD_SPE_CDT_PRESCR")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPCPD_SP_CODE_FK_PK As Integer, ByVal SPCPD_CDF_STP_CODE_FK_PK As String, ByVal SPCPD_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPCPD_SP_CODE_FK_PK, Integer)
            If (SPCPD_CDF_STP_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SPCPD_CDF_STP_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPCPD_CDF_STP_CODE_FK_PK, String)
            End If
            If (SPCPD_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SPCPD_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class PRIUCD_PRIX_UCDTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRIUCD_PRIX_UCD"
            tableMapping.ColumnMappings.Add("PRIUCD_UCD_CODE_PK", "PRIUCD_UCD_CODE_PK")
            tableMapping.ColumnMappings.Add("PRIUCD_CODE_LISTE_PK", "PRIUCD_CODE_LISTE_PK")
            tableMapping.ColumnMappings.Add("PRIUCD_DATE_APPLI_PK", "PRIUCD_DATE_APPLI_PK")
            tableMapping.ColumnMappings.Add("PRIUCD_PFHT", "PRIUCD_PFHT")
            tableMapping.ColumnMappings.Add("PRIUCD_PTTC", "PRIUCD_PTTC")
            tableMapping.ColumnMappings.Add("PRIUCD_Valide", "PRIUCD_Valide")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRIUCD_PRIX_UCD] WHERE (([PRIUCD_UCD_CODE_PK] = @Origina" & _
                "l_PRIUCD_UCD_CODE_PK) AND ([PRIUCD_CODE_LISTE_PK] = @Original_PRIUCD_CODE_LISTE_" & _
                "PK) AND ([PRIUCD_DATE_APPLI_PK] = @Original_PRIUCD_DATE_APPLI_PK) AND ((@IsNull_" & _
                "PRIUCD_PFHT = 1 AND [PRIUCD_PFHT] IS NULL) OR ([PRIUCD_PFHT] = @Original_PRIUCD_" & _
                "PFHT)) AND ((@IsNull_PRIUCD_PTTC = 1 AND [PRIUCD_PTTC] IS NULL) OR ([PRIUCD_PTTC" & _
                "] = @Original_PRIUCD_PTTC)) AND ((@IsNull_PRIUCD_Valide = 1 AND [PRIUCD_Valide] IS NULL) OR ([" & _
                "PRIUCD_Valide] = @Original_PRIUCD_Valide)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_UCD_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_UCD_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_CODE_LISTE_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_CODE_LISTE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_DATE_APPLI_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_DATE_APPLI_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRIUCD_PFHT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_PFHT", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_PFHT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 3, "PRIUCD_PFHT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRIUCD_PTTC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_PTTC", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_PTTC", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 7, 2, "PRIUCD_PTTC", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRIUCD_Valide", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_Valide", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_Valide", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_Valide", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRIUCD_PRIX_UCD] ([PRIUCD_UCD_CODE_PK], [PRIUCD_CODE_LIS" & _
                "TE_PK], [PRIUCD_DATE_APPLI_PK], [PRIUCD_PFHT], [PRIUCD_PTTC], [PRIUCD_Valide]) VALUES (@PRIUCD_UC" & _
                "D_CODE_PK, @PRIUCD_CODE_LISTE_PK, @PRIUCD_DATE_APPLI_PK, @PRIUCD_PFHT, @PRIUCD_P" & _
                "TTC, @PRIUCD_Valide);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRIUCD_UCD_CODE_PK, PRIUCD_CODE_LISTE_PK, PRIUCD_DATE_APPLI_PK, PR" & _
                "IUCD_PFHT, PRIUCD_PTTC, PRIUCD_Valide FROM THERIAQUE.PRIUCD_PRIX_UCD WHERE (PRIUCD_CODE_LISTE_P" & _
                "K = @PRIUCD_CODE_LISTE_PK) AND (PRIUCD_DATE_APPLI_PK = @PRIUCD_DATE_APPLI_PK) AN" & _
                "D (PRIUCD_UCD_CODE_PK = @PRIUCD_UCD_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_UCD_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_UCD_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_CODE_LISTE_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_CODE_LISTE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_DATE_APPLI_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_DATE_APPLI_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_PFHT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 3, "PRIUCD_PFHT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_PTTC", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 7, 2, "PRIUCD_PTTC", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_Valide", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_Valide", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRIUCD_PRIX_UCD] SET [PRIUCD_UCD_CODE_PK] = @PRIUCD_UCD_CODE_" & _
                "PK, [PRIUCD_CODE_LISTE_PK] = @PRIUCD_CODE_LISTE_PK, [PRIUCD_DATE_APPLI_PK] = @PR" & _
                "IUCD_DATE_APPLI_PK, [PRIUCD_PFHT] = @PRIUCD_PFHT, [PRIUCD_PTTC] = @PRIUCD_PTTC, [PRIUCD_Valide] = @PRIUCD_Valide W" & _
                "HERE (([PRIUCD_UCD_CODE_PK] = @Original_PRIUCD_UCD_CODE_PK) AND ([PRIUCD_CODE_LI" & _
                "STE_PK] = @Original_PRIUCD_CODE_LISTE_PK) AND ([PRIUCD_DATE_APPLI_PK] = @Origina" & _
                "l_PRIUCD_DATE_APPLI_PK) AND ((@IsNull_PRIUCD_PFHT = 1 AND [PRIUCD_PFHT] IS NULL)" & _
                " OR ([PRIUCD_PFHT] = @Original_PRIUCD_PFHT)) AND ((@IsNull_PRIUCD_PTTC = 1 AND [" & _
                "PRIUCD_PTTC] IS NULL) OR ([PRIUCD_PTTC] = @Original_PRIUCD_PTTC)) AND ((@IsNull_PRIUCD_Valide = 1 AND [" & _
                "PRIUCD_Valide] IS NULL) OR ([PRIUCD_Valide] = @Original_PRIUCD_Valide)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PRIU" & _
                "CD_UCD_CODE_PK, PRIUCD_CODE_LISTE_PK, PRIUCD_DATE_APPLI_PK, PRIUCD_PFHT, PRIUCD_" & _
                "PTTC, PRIUCD_Valide FROM THERIAQUE.PRIUCD_PRIX_UCD WHERE (PRIUCD_CODE_LISTE_PK = @PRIUCD_CODE_L" & _
                "ISTE_PK) AND (PRIUCD_DATE_APPLI_PK = @PRIUCD_DATE_APPLI_PK) AND (PRIUCD_UCD_CODE" & _
                "_PK = @PRIUCD_UCD_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_UCD_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_UCD_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_CODE_LISTE_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_CODE_LISTE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_DATE_APPLI_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_DATE_APPLI_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_PFHT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 3, "PRIUCD_PFHT", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_PTTC", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 7, 2, "PRIUCD_PTTC", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_Valide", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_Valide", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_UCD_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_UCD_CODE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_CODE_LISTE_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_CODE_LISTE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_DATE_APPLI_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_DATE_APPLI_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRIUCD_PFHT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_PFHT", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_PFHT", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 8, 3, "PRIUCD_PFHT", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRIUCD_PTTC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_PTTC", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_PTTC", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 7, 2, "PRIUCD_PTTC", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRIUCD_Valide", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_Valide", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRIUCD_Valide", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_Valide", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRIUCD_UCD_CODE_PK, PRIUCD_CODE_LISTE_PK, PRIUCD_DATE_APPLI_PK, PRIUCD_PFH" & _
                "T, PRIUCD_PTTC, PRIUCD_Valide FROM THERIAQUE.PRIUCD_PRIX_UCD"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT PRIUCD_UCD_CODE_PK, PRIUCD_CODE_LISTE_PK, PRIUCD_DATE_APPLI_PK, PRIUCD_PFH" & _
                "T, PRIUCD_PTTC, PRIUCD_Valide FROM THERIAQUE.PRIUCD_PRIX_UCD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where PRIUCD_UCD_CODE_PK = @PRIUC" & _
                "D_UCD_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRIUCD_UCD_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "PRIUCD_UCD_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable = New dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable, ByVal PRIUCD_UCD_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRIUCD_UCD_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("PRIUCD_UCD_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRIUCD_UCD_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal PRIUCD_UCD_CODE_PK As String) As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PRIUCD_UCD_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("PRIUCD_UCD_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PRIUCD_UCD_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable = New dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.PRIUCD_PRIX_UCDDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "PRIUCD_PRIX_UCD")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_PRIUCD_UCD_CODE_PK As String, ByVal Original_PRIUCD_CODE_LISTE_PK As Byte, ByVal Original_PRIUCD_DATE_APPLI_PK As Date, ByVal Original_PRIUCD_PFHT As System.Nullable(Of Decimal), ByVal Original_PRIUCD_PTTC As System.Nullable(Of Decimal), ByVal Original_PRIUCD_Valide As Global.System.Nullable(Of Boolean)) As Integer
            If (Original_PRIUCD_UCD_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_PRIUCD_UCD_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRIUCD_UCD_CODE_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRIUCD_CODE_LISTE_PK, Byte)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRIUCD_DATE_APPLI_PK, Date)
            If (Original_PRIUCD_PFHT.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRIUCD_PFHT.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_PRIUCD_PTTC.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRIUCD_PTTC.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_PRIUCD_Valide.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PRIUCD_Valide.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal PRIUCD_UCD_CODE_PK As String, ByVal PRIUCD_CODE_LISTE_PK As Byte, ByVal PRIUCD_DATE_APPLI_PK As Date, ByVal PRIUCD_PFHT As System.Nullable(Of Decimal), ByVal PRIUCD_PTTC As System.Nullable(Of Decimal), ByVal PRIUCD_Valide As Global.System.Nullable(Of Boolean)) As Integer
            If (PRIUCD_UCD_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("PRIUCD_UCD_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRIUCD_UCD_CODE_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRIUCD_CODE_LISTE_PK, Byte)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRIUCD_DATE_APPLI_PK, Date)
            If (PRIUCD_PFHT.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRIUCD_PFHT.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (PRIUCD_PTTC.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRIUCD_PTTC.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (PRIUCD_Valide.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRIUCD_Valide.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal PRIUCD_UCD_CODE_PK As String, ByVal PRIUCD_CODE_LISTE_PK As Byte, ByVal PRIUCD_DATE_APPLI_PK As Date, ByVal PRIUCD_PFHT As System.Nullable(Of Decimal), ByVal PRIUCD_PTTC As System.Nullable(Of Decimal), ByVal PRIUCD_Valide As Global.System.Nullable(Of Boolean), ByVal Original_PRIUCD_UCD_CODE_PK As String, ByVal Original_PRIUCD_CODE_LISTE_PK As Byte, ByVal Original_PRIUCD_DATE_APPLI_PK As Date, ByVal Original_PRIUCD_PFHT As System.Nullable(Of Decimal), ByVal Original_PRIUCD_PTTC As System.Nullable(Of Decimal), ByVal Original_PRIUCD_Valide As Global.System.Nullable(Of Boolean)) As Integer
            If (PRIUCD_UCD_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("PRIUCD_UCD_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRIUCD_UCD_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRIUCD_CODE_LISTE_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRIUCD_DATE_APPLI_PK, Date)
            If (PRIUCD_PFHT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRIUCD_PFHT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (PRIUCD_PTTC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRIUCD_PTTC.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (PRIUCD_Valide.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRIUCD_Valide.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PRIUCD_UCD_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_PRIUCD_UCD_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PRIUCD_UCD_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PRIUCD_CODE_LISTE_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRIUCD_DATE_APPLI_PK, Date)
            If (Original_PRIUCD_PFHT.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PRIUCD_PFHT.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_PRIUCD_PTTC.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PRIUCD_PTTC.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Original_PRIUCD_Valide.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PRIUCD_Valide.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRE_PRESENTATIONTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRE_PRESENTATION"
            tableMapping.ColumnMappings.Add("PRE_CODE_PK", "PRE_CODE_PK")
            tableMapping.ColumnMappings.Add("PRE_SP_CODE_FK", "PRE_SP_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_EAN_REF", "PRE_EAN_REF")
            tableMapping.ColumnMappings.Add("PRE_NBUNITE", "PRE_NBUNITE")
            tableMapping.ColumnMappings.Add("PRE_CDF_UP_CODE_FK", "PRE_CDF_UP_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CACDT_TEXTE", "PRE_CACDT_TEXTE")
            tableMapping.ColumnMappings.Add("PRE_CDF_RH_CODE_FK", "PRE_CDF_RH_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CDF_LI_CODE_FK", "PRE_CDF_LI_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_ETAT_COMMER", "PRE_ETAT_COMMER")
            tableMapping.ColumnMappings.Add("PRE_DATECOMMER", "PRE_DATECOMMER")
            tableMapping.ColumnMappings.Add("PRE_DATESUP", "PRE_DATESUP")
            tableMapping.ColumnMappings.Add("PRE_CDF_PU_CODE_FK", "PRE_CDF_PU_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CEPH_CODE_FK", "PRE_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_CATC_CODE_FK", "PRE_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_NATUCD_CDF_CODE_FK", "PRE_NATUCD_CDF_CODE_FK")
            tableMapping.ColumnMappings.Add("PRE_NATUCD_CDF_NUM_FK", "PRE_NATUCD_CDF_NUM_FK")
            tableMapping.ColumnMappings.Add("PRE_DATEJOCIP", "PRE_DATEJOCIP")
            tableMapping.ColumnMappings.Add("PRE_AGRCOLL", "PRE_AGRCOLL")
            tableMapping.ColumnMappings.Add("PRE_DATEJOCOLL", "PRE_DATEJOCOLL")
            tableMapping.ColumnMappings.Add("PRE_DATEFINCOLL", "PRE_DATEFINCOLL")
            tableMapping.ColumnMappings.Add("PRE_DATE_APPLIFINCOLL", "PRE_DATE_APPLIFINCOLL")
            tableMapping.ColumnMappings.Add("PRE_PARTSTATUT", "PRE_PARTSTATUT")
            tableMapping.ColumnMappings.Add("PRE_TSS_TEXTE", "PRE_TSS_TEXTE")
            tableMapping.ColumnMappings.Add("PRE_CONSAPOUV", "PRE_CONSAPOUV")
            tableMapping.ColumnMappings.Add("PRE_LIB_CEPS", "PRE_LIB_CEPS")
            tableMapping.ColumnMappings.Add("PRE_ADMIN", "PRE_ADMIN")
            tableMapping.ColumnMappings.Add("PRE_DATECR", "PRE_DATECR")
            tableMapping.ColumnMappings.Add("PRE_DATEMJ", "PRE_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[PRE_PRESENTATION] WHERE (([PRE_CODE_PK] = @Original_PRE_"& _ 
                "CODE_PK) AND ([PRE_SP_CODE_FK] = @Original_PRE_SP_CODE_FK) AND ((@IsNull_PRE_EAN"& _ 
                "_REF = 1 AND [PRE_EAN_REF] IS NULL) OR ([PRE_EAN_REF] = @Original_PRE_EAN_REF)) "& _ 
                "AND ((@IsNull_PRE_NBUNITE = 1 AND [PRE_NBUNITE] IS NULL) OR ([PRE_NBUNITE] = @Or"& _ 
                "iginal_PRE_NBUNITE)) AND ((@IsNull_PRE_CDF_UP_CODE_FK = 1 AND [PRE_CDF_UP_CODE_F"& _ 
                "K] IS NULL) OR ([PRE_CDF_UP_CODE_FK] = @Original_PRE_CDF_UP_CODE_FK)) AND ((@IsN"& _ 
                "ull_PRE_CACDT_TEXTE = 1 AND [PRE_CACDT_TEXTE] IS NULL) OR ([PRE_CACDT_TEXTE] = @"& _ 
                "Original_PRE_CACDT_TEXTE)) AND ([PRE_CDF_RH_CODE_FK] = @Original_PRE_CDF_RH_CODE"& _ 
                "_FK) AND ((@IsNull_PRE_CDF_LI_CODE_FK = 1 AND [PRE_CDF_LI_CODE_FK] IS NULL) OR ("& _ 
                "[PRE_CDF_LI_CODE_FK] = @Original_PRE_CDF_LI_CODE_FK)) AND ((@IsNull_PRE_ETAT_COM"& _ 
                "MER = 1 AND [PRE_ETAT_COMMER] IS NULL) OR ([PRE_ETAT_COMMER] = @Original_PRE_ETA"& _ 
                "T_COMMER)) AND ((@IsNull_PRE_DATECOMMER = 1 AND [PRE_DATECOMMER] IS NULL) OR ([P"& _ 
                "RE_DATECOMMER] = @Original_PRE_DATECOMMER)) AND ((@IsNull_PRE_DATESUP = 1 AND [P"& _ 
                "RE_DATESUP] IS NULL) OR ([PRE_DATESUP] = @Original_PRE_DATESUP)) AND ((@IsNull_P"& _ 
                "RE_CDF_PU_CODE_FK = 1 AND [PRE_CDF_PU_CODE_FK] IS NULL) OR ([PRE_CDF_PU_CODE_FK]"& _ 
                " = @Original_PRE_CDF_PU_CODE_FK)) AND ((@IsNull_PRE_CEPH_CODE_FK = 1 AND [PRE_CE"& _ 
                "PH_CODE_FK] IS NULL) OR ([PRE_CEPH_CODE_FK] = @Original_PRE_CEPH_CODE_FK)) AND ("& _ 
                "(@IsNull_PRE_CATC_CODE_FK = 1 AND [PRE_CATC_CODE_FK] IS NULL) OR ([PRE_CATC_CODE"& _ 
                "_FK] = @Original_PRE_CATC_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_CODE_FK = 1 AND"& _ 
                " [PRE_NATUCD_CDF_CODE_FK] IS NULL) OR ([PRE_NATUCD_CDF_CODE_FK] = @Original_PRE_"& _ 
                "NATUCD_CDF_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_NUM_FK = 1 AND [PRE_NATUCD_CDF"& _ 
                "_NUM_FK] IS NULL) OR ([PRE_NATUCD_CDF_NUM_FK] = @Original_PRE_NATUCD_CDF_NUM_FK)"& _ 
                ") AND ((@IsNull_PRE_DATEJOCIP = 1 AND [PRE_DATEJOCIP] IS NULL) OR ([PRE_DATEJOCI"& _ 
                "P] = @Original_PRE_DATEJOCIP)) AND ((@IsNull_PRE_AGRCOLL = 1 AND [PRE_AGRCOLL] I"& _ 
                "S NULL) OR ([PRE_AGRCOLL] = @Original_PRE_AGRCOLL)) AND ((@IsNull_PRE_DATEJOCOLL"& _ 
                " = 1 AND [PRE_DATEJOCOLL] IS NULL) OR ([PRE_DATEJOCOLL] = @Original_PRE_DATEJOCO"& _ 
                "LL)) AND ((@IsNull_PRE_DATEFINCOLL = 1 AND [PRE_DATEFINCOLL] IS NULL) OR ([PRE_D"& _ 
                "ATEFINCOLL] = @Original_PRE_DATEFINCOLL)) AND ((@IsNull_PRE_DATE_APPLIFINCOLL = "& _ 
                "1 AND [PRE_DATE_APPLIFINCOLL] IS NULL) OR ([PRE_DATE_APPLIFINCOLL] = @Original_P"& _ 
                "RE_DATE_APPLIFINCOLL)) AND ((@IsNull_PRE_PARTSTATUT = 1 AND [PRE_PARTSTATUT] IS "& _ 
                "NULL) OR ([PRE_PARTSTATUT] = @Original_PRE_PARTSTATUT)) AND ((@IsNull_PRE_TSS_TE"& _ 
                "XTE = 1 AND [PRE_TSS_TEXTE] IS NULL) OR ([PRE_TSS_TEXTE] = @Original_PRE_TSS_TEX"& _ 
                "TE)) AND ((@IsNull_PRE_LIB_CEPS = 1 AND [PRE_LIB_CEPS] IS NULL) OR ([PRE_LIB_CEP"& _ 
                "S] = @Original_PRE_LIB_CEPS)) AND ((@IsNull_PRE_ADMIN = 1 AND [PRE_ADMIN] IS NUL"& _ 
                "L) OR ([PRE_ADMIN] = @Original_PRE_ADMIN)) AND ([PRE_DATECR] = @Original_PRE_DAT"& _ 
                "ECR) AND ((@IsNull_PRE_DATEMJ = 1 AND [PRE_DATEMJ] IS NULL) OR ([PRE_DATEMJ] = @"& _ 
                "Original_PRE_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_EAN_REF", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_EAN_REF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_NBUNITE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_NBUNITE", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_UP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_UP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CACDT_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CACDT_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_RH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_LI_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_ETAT_COMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATECOMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATESUP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATESUP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_PU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_PU_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_NUM_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCIP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCIP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_AGRCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_AGRCOLL", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEFINCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATE_APPLIFINCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATE_APPLIFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_PARTSTATUT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_PARTSTATUT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_TSS_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_TSS_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_LIB_CEPS", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_LIB_CEPS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_ADMIN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_ADMIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[PRE_PRESENTATION] ([PRE_CODE_PK], [PRE_SP_CODE_FK], [PRE"& _ 
                "_EAN_REF], [PRE_NBUNITE], [PRE_CDF_UP_CODE_FK], [PRE_CACDT_TEXTE], [PRE_CDF_RH_C"& _ 
                "ODE_FK], [PRE_CDF_LI_CODE_FK], [PRE_ETAT_COMMER], [PRE_DATECOMMER], [PRE_DATESUP"& _ 
                "], [PRE_CDF_PU_CODE_FK], [PRE_CEPH_CODE_FK], [PRE_CATC_CODE_FK], [PRE_NATUCD_CDF"& _ 
                "_CODE_FK], [PRE_NATUCD_CDF_NUM_FK], [PRE_DATEJOCIP], [PRE_AGRCOLL], [PRE_DATEJOC"& _ 
                "OLL], [PRE_DATEFINCOLL], [PRE_DATE_APPLIFINCOLL], [PRE_PARTSTATUT], [PRE_TSS_TEX"& _ 
                "TE], [PRE_CONSAPOUV], [PRE_LIB_CEPS], [PRE_ADMIN], [PRE_DATECR], [PRE_DATEMJ]) V"& _ 
                "ALUES (@PRE_CODE_PK, @PRE_SP_CODE_FK, @PRE_EAN_REF, @PRE_NBUNITE, @PRE_CDF_UP_CO"& _ 
                "DE_FK, @PRE_CACDT_TEXTE, @PRE_CDF_RH_CODE_FK, @PRE_CDF_LI_CODE_FK, @PRE_ETAT_COM"& _ 
                "MER, @PRE_DATECOMMER, @PRE_DATESUP, @PRE_CDF_PU_CODE_FK, @PRE_CEPH_CODE_FK, @PRE"& _ 
                "_CATC_CODE_FK, @PRE_NATUCD_CDF_CODE_FK, @PRE_NATUCD_CDF_NUM_FK, @PRE_DATEJOCIP, "& _ 
                "@PRE_AGRCOLL, @PRE_DATEJOCOLL, @PRE_DATEFINCOLL, @PRE_DATE_APPLIFINCOLL, @PRE_PA"& _ 
                "RTSTATUT, @PRE_TSS_TEXTE, @PRE_CONSAPOUV, @PRE_LIB_CEPS, @PRE_ADMIN, @PRE_DATECR"& _ 
                ", @PRE_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, P"& _ 
                "RE_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_"& _ 
                "ETAT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, "& _ 
                "PRE_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, "& _ 
                "PRE_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTA"& _ 
                "TUT, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATE"& _ 
                "MJ FROM THERIAQUE.PRE_PRESENTATION WHERE (PRE_CODE_PK = @PRE_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_EAN_REF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_NBUNITE", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_UP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CACDT_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_RH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATESUP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_PU_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEJOCIP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_AGRCOLL", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEJOCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATE_APPLIFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_PARTSTATUT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_TSS_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CONSAPOUV", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CONSAPOUV", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_LIB_CEPS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_ADMIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[PRE_PRESENTATION] SET [PRE_CODE_PK] = @PRE_CODE_PK, [PRE_SP_C"& _ 
                "ODE_FK] = @PRE_SP_CODE_FK, [PRE_EAN_REF] = @PRE_EAN_REF, [PRE_NBUNITE] = @PRE_NB"& _ 
                "UNITE, [PRE_CDF_UP_CODE_FK] = @PRE_CDF_UP_CODE_FK, [PRE_CACDT_TEXTE] = @PRE_CACD"& _ 
                "T_TEXTE, [PRE_CDF_RH_CODE_FK] = @PRE_CDF_RH_CODE_FK, [PRE_CDF_LI_CODE_FK] = @PRE"& _ 
                "_CDF_LI_CODE_FK, [PRE_ETAT_COMMER] = @PRE_ETAT_COMMER, [PRE_DATECOMMER] = @PRE_D"& _ 
                "ATECOMMER, [PRE_DATESUP] = @PRE_DATESUP, [PRE_CDF_PU_CODE_FK] = @PRE_CDF_PU_CODE"& _ 
                "_FK, [PRE_CEPH_CODE_FK] = @PRE_CEPH_CODE_FK, [PRE_CATC_CODE_FK] = @PRE_CATC_CODE"& _ 
                "_FK, [PRE_NATUCD_CDF_CODE_FK] = @PRE_NATUCD_CDF_CODE_FK, [PRE_NATUCD_CDF_NUM_FK]"& _ 
                " = @PRE_NATUCD_CDF_NUM_FK, [PRE_DATEJOCIP] = @PRE_DATEJOCIP, [PRE_AGRCOLL] = @PR"& _ 
                "E_AGRCOLL, [PRE_DATEJOCOLL] = @PRE_DATEJOCOLL, [PRE_DATEFINCOLL] = @PRE_DATEFINC"& _ 
                "OLL, [PRE_DATE_APPLIFINCOLL] = @PRE_DATE_APPLIFINCOLL, [PRE_PARTSTATUT] = @PRE_P"& _ 
                "ARTSTATUT, [PRE_TSS_TEXTE] = @PRE_TSS_TEXTE, [PRE_CONSAPOUV] = @PRE_CONSAPOUV, ["& _ 
                "PRE_LIB_CEPS] = @PRE_LIB_CEPS, [PRE_ADMIN] = @PRE_ADMIN, [PRE_DATECR] = @PRE_DAT"& _ 
                "ECR, [PRE_DATEMJ] = @PRE_DATEMJ WHERE (([PRE_CODE_PK] = @Original_PRE_CODE_PK) A"& _ 
                "ND ([PRE_SP_CODE_FK] = @Original_PRE_SP_CODE_FK) AND ((@IsNull_PRE_EAN_REF = 1 A"& _ 
                "ND [PRE_EAN_REF] IS NULL) OR ([PRE_EAN_REF] = @Original_PRE_EAN_REF)) AND ((@IsN"& _ 
                "ull_PRE_NBUNITE = 1 AND [PRE_NBUNITE] IS NULL) OR ([PRE_NBUNITE] = @Original_PRE"& _ 
                "_NBUNITE)) AND ((@IsNull_PRE_CDF_UP_CODE_FK = 1 AND [PRE_CDF_UP_CODE_FK] IS NULL"& _ 
                ") OR ([PRE_CDF_UP_CODE_FK] = @Original_PRE_CDF_UP_CODE_FK)) AND ((@IsNull_PRE_CA"& _ 
                "CDT_TEXTE = 1 AND [PRE_CACDT_TEXTE] IS NULL) OR ([PRE_CACDT_TEXTE] = @Original_P"& _ 
                "RE_CACDT_TEXTE)) AND ([PRE_CDF_RH_CODE_FK] = @Original_PRE_CDF_RH_CODE_FK) AND ("& _ 
                "(@IsNull_PRE_CDF_LI_CODE_FK = 1 AND [PRE_CDF_LI_CODE_FK] IS NULL) OR ([PRE_CDF_L"& _ 
                "I_CODE_FK] = @Original_PRE_CDF_LI_CODE_FK)) AND ((@IsNull_PRE_ETAT_COMMER = 1 AN"& _ 
                "D [PRE_ETAT_COMMER] IS NULL) OR ([PRE_ETAT_COMMER] = @Original_PRE_ETAT_COMMER))"& _ 
                " AND ((@IsNull_PRE_DATECOMMER = 1 AND [PRE_DATECOMMER] IS NULL) OR ([PRE_DATECOM"& _ 
                "MER] = @Original_PRE_DATECOMMER)) AND ((@IsNull_PRE_DATESUP = 1 AND [PRE_DATESUP"& _ 
                "] IS NULL) OR ([PRE_DATESUP] = @Original_PRE_DATESUP)) AND ((@IsNull_PRE_CDF_PU_"& _ 
                "CODE_FK = 1 AND [PRE_CDF_PU_CODE_FK] IS NULL) OR ([PRE_CDF_PU_CODE_FK] = @Origin"& _ 
                "al_PRE_CDF_PU_CODE_FK)) AND ((@IsNull_PRE_CEPH_CODE_FK = 1 AND [PRE_CEPH_CODE_FK"& _ 
                "] IS NULL) OR ([PRE_CEPH_CODE_FK] = @Original_PRE_CEPH_CODE_FK)) AND ((@IsNull_P"& _ 
                "RE_CATC_CODE_FK = 1 AND [PRE_CATC_CODE_FK] IS NULL) OR ([PRE_CATC_CODE_FK] = @Or"& _ 
                "iginal_PRE_CATC_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_CODE_FK = 1 AND [PRE_NATU"& _ 
                "CD_CDF_CODE_FK] IS NULL) OR ([PRE_NATUCD_CDF_CODE_FK] = @Original_PRE_NATUCD_CDF"& _ 
                "_CODE_FK)) AND ((@IsNull_PRE_NATUCD_CDF_NUM_FK = 1 AND [PRE_NATUCD_CDF_NUM_FK] I"& _ 
                "S NULL) OR ([PRE_NATUCD_CDF_NUM_FK] = @Original_PRE_NATUCD_CDF_NUM_FK)) AND ((@I"& _ 
                "sNull_PRE_DATEJOCIP = 1 AND [PRE_DATEJOCIP] IS NULL) OR ([PRE_DATEJOCIP] = @Orig"& _ 
                "inal_PRE_DATEJOCIP)) AND ((@IsNull_PRE_AGRCOLL = 1 AND [PRE_AGRCOLL] IS NULL) OR"& _ 
                " ([PRE_AGRCOLL] = @Original_PRE_AGRCOLL)) AND ((@IsNull_PRE_DATEJOCOLL = 1 AND ["& _ 
                "PRE_DATEJOCOLL] IS NULL) OR ([PRE_DATEJOCOLL] = @Original_PRE_DATEJOCOLL)) AND ("& _ 
                "(@IsNull_PRE_DATEFINCOLL = 1 AND [PRE_DATEFINCOLL] IS NULL) OR ([PRE_DATEFINCOLL"& _ 
                "] = @Original_PRE_DATEFINCOLL)) AND ((@IsNull_PRE_DATE_APPLIFINCOLL = 1 AND [PRE"& _ 
                "_DATE_APPLIFINCOLL] IS NULL) OR ([PRE_DATE_APPLIFINCOLL] = @Original_PRE_DATE_AP"& _ 
                "PLIFINCOLL)) AND ((@IsNull_PRE_PARTSTATUT = 1 AND [PRE_PARTSTATUT] IS NULL) OR ("& _ 
                "[PRE_PARTSTATUT] = @Original_PRE_PARTSTATUT)) AND ((@IsNull_PRE_TSS_TEXTE = 1 AN"& _ 
                "D [PRE_TSS_TEXTE] IS NULL) OR ([PRE_TSS_TEXTE] = @Original_PRE_TSS_TEXTE)) AND ("& _ 
                "(@IsNull_PRE_LIB_CEPS = 1 AND [PRE_LIB_CEPS] IS NULL) OR ([PRE_LIB_CEPS] = @Orig"& _ 
                "inal_PRE_LIB_CEPS)) AND ((@IsNull_PRE_ADMIN = 1 AND [PRE_ADMIN] IS NULL) OR ([PR"& _ 
                "E_ADMIN] = @Original_PRE_ADMIN)) AND ([PRE_DATECR] = @Original_PRE_DATECR) AND ("& _ 
                "(@IsNull_PRE_DATEMJ = 1 AND [PRE_DATEMJ] IS NULL) OR ([PRE_DATEMJ] = @Original_P"& _ 
                "RE_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE"& _ 
                "_CDF_UP_CODE_FK, PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ET"& _ 
                "AT_COMMER, PRE_DATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PR"& _ 
                "E_CATC_CODE_FK, PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PR"& _ 
                "E_AGRCOLL, PRE_DATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATU"& _ 
                "T, PRE_TSS_TEXTE, PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ"& _ 
                " FROM THERIAQUE.PRE_PRESENTATION WHERE (PRE_CODE_PK = @PRE_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_EAN_REF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_NBUNITE", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_UP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CACDT_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_RH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATESUP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CDF_PU_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_NATUCD_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEJOCIP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_AGRCOLL", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEJOCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATE_APPLIFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_PARTSTATUT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_TSS_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_CONSAPOUV", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CONSAPOUV", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_LIB_CEPS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_ADMIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PRE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_SP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_SP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_EAN_REF", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_EAN_REF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_EAN_REF", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_NBUNITE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_NBUNITE", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NBUNITE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_UP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_UP_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_UP_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CACDT_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CACDT_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CACDT_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_RH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_RH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_LI_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_ETAT_COMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ETAT_COMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATECOMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECOMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATESUP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATESUP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATESUP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CDF_PU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CDF_PU_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CDF_PU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_CATC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_NATUCD_CDF_NUM_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_NATUCD_CDF_NUM_FK", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_NATUCD_CDF_NUM_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCIP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCIP", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCIP", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_AGRCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_AGRCOLL", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_AGRCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEJOCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEJOCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEJOCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEFINCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEFINCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATE_APPLIFINCOLL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATE_APPLIFINCOLL", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATE_APPLIFINCOLL", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_PARTSTATUT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_PARTSTATUT", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_PARTSTATUT", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_TSS_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_TSS_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_TSS_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_LIB_CEPS", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_LIB_CEPS", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_LIB_CEPS", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_ADMIN", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_ADMIN", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_ADMIN", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_PRE_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_PRE_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "PRE_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRE_CODE_PK, PRE_SP_CODE_FK, PRE_EAN_REF, PRE_NBUNITE, PRE_CDF_UP_CODE_FK," & _
                " PRE_CACDT_TEXTE, PRE_CDF_RH_CODE_FK, PRE_CDF_LI_CODE_FK, PRE_ETAT_COMMER, PRE_D" & _
                "ATECOMMER, PRE_DATESUP, PRE_CDF_PU_CODE_FK, PRE_CEPH_CODE_FK, PRE_CATC_CODE_FK, " & _
                "PRE_NATUCD_CDF_CODE_FK, PRE_NATUCD_CDF_NUM_FK, PRE_DATEJOCIP, PRE_AGRCOLL, PRE_D" & _
                "ATEJOCOLL, PRE_DATEFINCOLL, PRE_DATE_APPLIFINCOLL, PRE_PARTSTATUT, PRE_TSS_TEXTE" & _
                ", PRE_CONSAPOUV, PRE_LIB_CEPS, PRE_ADMIN, PRE_DATECR, PRE_DATEMJ FROM THERIAQUE." & _
                "PRE_PRESENTATION"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.PRE_PRESENTATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.PRE_PRESENTATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.PRE_PRESENTATIONDataTable = New dsTheriaque_Nomenclature1.PRE_PRESENTATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.PRE_PRESENTATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "PRE_PRESENTATION")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_PRE_CODE_PK As String, _
                    ByVal Original_PRE_SP_CODE_FK As Integer, _
                    ByVal Original_PRE_EAN_REF As String, _
                    ByVal Original_PRE_NBUNITE As System.Nullable(Of Short), _
                    ByVal Original_PRE_CDF_UP_CODE_FK As String, _
                    ByVal Original_PRE_CACDT_TEXTE As String, _
                    ByVal Original_PRE_CDF_RH_CODE_FK As String, _
                    ByVal Original_PRE_CDF_LI_CODE_FK As String, _
                    ByVal Original_PRE_ETAT_COMMER As String, _
                    ByVal Original_PRE_DATECOMMER As System.Nullable(Of Date), _
                    ByVal Original_PRE_DATESUP As System.Nullable(Of Date), _
                    ByVal Original_PRE_CDF_PU_CODE_FK As String, _
                    ByVal Original_PRE_CEPH_CODE_FK As String, _
                    ByVal Original_PRE_CATC_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_PRE_DATEJOCIP As System.Nullable(Of Date), _
                    ByVal Original_PRE_AGRCOLL As String, _
                    ByVal Original_PRE_DATEJOCOLL As System.Nullable(Of Date), _
                    ByVal Original_PRE_DATEFINCOLL As System.Nullable(Of Date), _
                    ByVal Original_PRE_DATE_APPLIFINCOLL As System.Nullable(Of Date), _
                    ByVal Original_PRE_PARTSTATUT As String, _
                    ByVal Original_PRE_TSS_TEXTE As String, _
                    ByVal Original_PRE_LIB_CEPS As String, _
                    ByVal Original_PRE_ADMIN As String, _
                    ByVal Original_PRE_DATECR As Date, _
                    ByVal Original_PRE_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_PRE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_PRE_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRE_CODE_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRE_SP_CODE_FK, Integer)
            If (Original_PRE_EAN_REF Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRE_EAN_REF, String)
            End If
            If (Original_PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PRE_CDF_UP_CODE_FK, String)
            End If
            If (Original_PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PRE_CACDT_TEXTE, String)
            End If
            If (Original_PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PRE_CDF_RH_CODE_FK, String)
            End If
            If (Original_PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PRE_CDF_LI_CODE_FK, String)
            End If
            If (Original_PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PRE_ETAT_COMMER, String)
            End If
            If (Original_PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_PRE_DATESUP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PRE_CDF_PU_CODE_FK, String)
            End If
            If (Original_PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PRE_CEPH_CODE_FK, String)
            End If
            If (Original_PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_PRE_CATC_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_PRE_AGRCOLL, String)
            End If
            If (Original_PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = System.DBNull.Value
            End If
            If (Original_PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = System.DBNull.Value
            End If
            If (Original_PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = System.DBNull.Value
            End If
            If (Original_PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_PRE_PARTSTATUT, String)
            End If
            If (Original_PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PRE_TSS_TEXTE, String)
            End If
            If (Original_PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_PRE_LIB_CEPS, String)
            End If
            If (Original_PRE_ADMIN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_PRE_ADMIN, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_PRE_DATECR, Date)
            If (Original_PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal PRE_CODE_PK As String, _
                    ByVal PRE_SP_CODE_FK As Integer, _
                    ByVal PRE_EAN_REF As String, _
                    ByVal PRE_NBUNITE As System.Nullable(Of Short), _
                    ByVal PRE_CDF_UP_CODE_FK As String, _
                    ByVal PRE_CACDT_TEXTE As String, _
                    ByVal PRE_CDF_RH_CODE_FK As String, _
                    ByVal PRE_CDF_LI_CODE_FK As String, _
                    ByVal PRE_ETAT_COMMER As String, _
                    ByVal PRE_DATECOMMER As System.Nullable(Of Date), _
                    ByVal PRE_DATESUP As System.Nullable(Of Date), _
                    ByVal PRE_CDF_PU_CODE_FK As String, _
                    ByVal PRE_CEPH_CODE_FK As String, _
                    ByVal PRE_CATC_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal PRE_DATEJOCIP As System.Nullable(Of Date), _
                    ByVal PRE_AGRCOLL As String, _
                    ByVal PRE_DATEJOCOLL As System.Nullable(Of Date), _
                    ByVal PRE_DATEFINCOLL As System.Nullable(Of Date), _
                    ByVal PRE_DATE_APPLIFINCOLL As System.Nullable(Of Date), _
                    ByVal PRE_PARTSTATUT As String, _
                    ByVal PRE_TSS_TEXTE As String, _
                    ByVal PRE_CONSAPOUV As String, _
                    ByVal PRE_LIB_CEPS As String, _
                    ByVal PRE_ADMIN As String, _
                    ByVal PRE_DATECR As Date, _
                    ByVal PRE_DATEMJ As System.Nullable(Of Date)) As Integer
            If (PRE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("PRE_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRE_CODE_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRE_SP_CODE_FK, Integer)
            If (PRE_EAN_REF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRE_EAN_REF, String)
            End If
            If (PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRE_CDF_UP_CODE_FK, String)
            End If
            If (PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRE_CACDT_TEXTE, String)
            End If
            If (PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRE_CDF_RH_CODE_FK, String)
            End If
            If (PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PRE_CDF_LI_CODE_FK, String)
            End If
            If (PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PRE_ETAT_COMMER, String)
            End If
            If (PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (PRE_DATESUP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PRE_CDF_PU_CODE_FK, String)
            End If
            If (PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PRE_CEPH_CODE_FK, String)
            End If
            If (PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PRE_CATC_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PRE_AGRCOLL, String)
            End If
            If (PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PRE_PARTSTATUT, String)
            End If
            If (PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PRE_TSS_TEXTE, String)
            End If
            If (PRE_CONSAPOUV Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PRE_CONSAPOUV, String)
            End If
            If (PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(PRE_LIB_CEPS, String)
            End If
            If (PRE_ADMIN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(PRE_ADMIN, String)
            End If
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(PRE_DATECR, Date)
            If (PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal PRE_CODE_PK As String, _
                    ByVal PRE_SP_CODE_FK As Integer, _
                    ByVal PRE_EAN_REF As String, _
                    ByVal PRE_NBUNITE As System.Nullable(Of Short), _
                    ByVal PRE_CDF_UP_CODE_FK As String, _
                    ByVal PRE_CACDT_TEXTE As String, _
                    ByVal PRE_CDF_RH_CODE_FK As String, _
                    ByVal PRE_CDF_LI_CODE_FK As String, _
                    ByVal PRE_ETAT_COMMER As String, _
                    ByVal PRE_DATECOMMER As System.Nullable(Of Date), _
                    ByVal PRE_DATESUP As System.Nullable(Of Date), _
                    ByVal PRE_CDF_PU_CODE_FK As String, _
                    ByVal PRE_CEPH_CODE_FK As String, _
                    ByVal PRE_CATC_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal PRE_DATEJOCIP As System.Nullable(Of Date), _
                    ByVal PRE_AGRCOLL As String, _
                    ByVal PRE_DATEJOCOLL As System.Nullable(Of Date), _
                    ByVal PRE_DATEFINCOLL As System.Nullable(Of Date), _
                    ByVal PRE_DATE_APPLIFINCOLL As System.Nullable(Of Date), _
                    ByVal PRE_PARTSTATUT As String, _
                    ByVal PRE_TSS_TEXTE As String, _
                    ByVal PRE_CONSAPOUV As String, _
                    ByVal PRE_LIB_CEPS As String, _
                    ByVal PRE_ADMIN As String, _
                    ByVal PRE_DATECR As Date, _
                    ByVal PRE_DATEMJ As System.Nullable(Of Date), _
                    ByVal Original_PRE_CODE_PK As String, _
                    ByVal Original_PRE_SP_CODE_FK As Integer, _
                    ByVal Original_PRE_EAN_REF As String, _
                    ByVal Original_PRE_NBUNITE As System.Nullable(Of Short), _
                    ByVal Original_PRE_CDF_UP_CODE_FK As String, _
                    ByVal Original_PRE_CACDT_TEXTE As String, _
                    ByVal Original_PRE_CDF_RH_CODE_FK As String, _
                    ByVal Original_PRE_CDF_LI_CODE_FK As String, _
                    ByVal Original_PRE_ETAT_COMMER As String, _
                    ByVal Original_PRE_DATECOMMER As System.Nullable(Of Date), _
                    ByVal Original_PRE_DATESUP As System.Nullable(Of Date), _
                    ByVal Original_PRE_CDF_PU_CODE_FK As String, _
                    ByVal Original_PRE_CEPH_CODE_FK As String, _
                    ByVal Original_PRE_CATC_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_CODE_FK As String, _
                    ByVal Original_PRE_NATUCD_CDF_NUM_FK As String, _
                    ByVal Original_PRE_DATEJOCIP As System.Nullable(Of Date), _
                    ByVal Original_PRE_AGRCOLL As String, _
                    ByVal Original_PRE_DATEJOCOLL As System.Nullable(Of Date), _
                    ByVal Original_PRE_DATEFINCOLL As System.Nullable(Of Date), _
                    ByVal Original_PRE_DATE_APPLIFINCOLL As System.Nullable(Of Date), _
                    ByVal Original_PRE_PARTSTATUT As String, _
                    ByVal Original_PRE_TSS_TEXTE As String, _
                    ByVal Original_PRE_LIB_CEPS As String, _
                    ByVal Original_PRE_ADMIN As String, _
                    ByVal Original_PRE_DATECR As Date, _
                    ByVal Original_PRE_DATEMJ As System.Nullable(Of Date)) As Integer
            If (PRE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("PRE_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRE_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRE_SP_CODE_FK, Integer)
            If (PRE_EAN_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRE_EAN_REF, String)
            End If
            If (PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRE_CDF_UP_CODE_FK, String)
            End If
            If (PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRE_CACDT_TEXTE, String)
            End If
            If (PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRE_CDF_RH_CODE_FK, String)
            End If
            If (PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PRE_CDF_LI_CODE_FK, String)
            End If
            If (PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PRE_ETAT_COMMER, String)
            End If
            If (PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (PRE_DATESUP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PRE_CDF_PU_CODE_FK, String)
            End If
            If (PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PRE_CEPH_CODE_FK, String)
            End If
            If (PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PRE_CATC_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PRE_AGRCOLL, String)
            End If
            If (PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(PRE_PARTSTATUT, String)
            End If
            If (PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PRE_TSS_TEXTE, String)
            End If
            If (PRE_CONSAPOUV Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(PRE_CONSAPOUV, String)
            End If
            If (PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(PRE_LIB_CEPS, String)
            End If
            If (PRE_ADMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(PRE_ADMIN, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(PRE_DATECR, Date)
            If (PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (Original_PRE_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_PRE_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PRE_CODE_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_PRE_SP_CODE_FK, Integer)
            If (Original_PRE_EAN_REF Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PRE_EAN_REF, String)
            End If
            If (Original_PRE_NBUNITE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_PRE_NBUNITE.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
            End If
            If (Original_PRE_CDF_UP_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_PRE_CDF_UP_CODE_FK, String)
            End If
            If (Original_PRE_CACDT_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_PRE_CACDT_TEXTE, String)
            End If
            If (Original_PRE_CDF_RH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_PRE_CDF_RH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PRE_CDF_RH_CODE_FK, String)
            End If
            If (Original_PRE_CDF_LI_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_PRE_CDF_LI_CODE_FK, String)
            End If
            If (Original_PRE_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_PRE_ETAT_COMMER, String)
            End If
            If (Original_PRE_DATECOMMER.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PRE_DATECOMMER.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            End If
            If (Original_PRE_DATESUP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_PRE_DATESUP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            End If
            If (Original_PRE_CDF_PU_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_PRE_CDF_PU_CODE_FK, String)
            End If
            If (Original_PRE_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_PRE_CEPH_CODE_FK, String)
            End If
            If (Original_PRE_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_PRE_CATC_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_PRE_NATUCD_CDF_CODE_FK, String)
            End If
            If (Original_PRE_NATUCD_CDF_NUM_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_PRE_NATUCD_CDF_NUM_FK, String)
            End If
            If (Original_PRE_DATEJOCIP.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_PRE_DATEJOCIP.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = System.DBNull.Value
            End If
            If (Original_PRE_AGRCOLL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_PRE_AGRCOLL, String)
            End If
            If (Original_PRE_DATEJOCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_PRE_DATEJOCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = System.DBNull.Value
            End If
            If (Original_PRE_DATEFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_PRE_DATEFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = System.DBNull.Value
            End If
            If (Original_PRE_DATE_APPLIFINCOLL.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_PRE_DATE_APPLIFINCOLL.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = System.DBNull.Value
            End If
            If (Original_PRE_PARTSTATUT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_PRE_PARTSTATUT, String)
            End If
            If (Original_PRE_TSS_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_PRE_TSS_TEXTE, String)
            End If
            If (Original_PRE_LIB_CEPS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_PRE_LIB_CEPS, String)
            End If
            If (Original_PRE_ADMIN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_PRE_ADMIN, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_PRE_DATECR, Date)
            If (Original_PRE_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_PRE_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SPFOTX_SPE_FORME_TEXTETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SPFOTX_SPE_FORME_TEXTE"
            tableMapping.ColumnMappings.Add("SPFOTX_SP_CODE_FK_PK", "SPFOTX_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SPFOTX_TEXTE", "SPFOTX_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SPFOTX_SPE_FORME_TEXTE] WHERE (([SPFOTX_SP_CODE_FK_PK] =" & _
                " @Original_SPFOTX_SP_CODE_FK_PK) AND ([SPFOTX_TEXTE] = @Original_SPFOTX_TEXTE))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOTX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOTX_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SPFOTX_SPE_FORME_TEXTE] ([SPFOTX_SP_CODE_FK_PK], [SPFOTX" & _
                "_TEXTE]) VALUES (@SPFOTX_SP_CODE_FK_PK, @SPFOTX_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SPFOTX_SP_CODE_F" & _
                "K_PK, SPFOTX_TEXTE FROM THERIAQUE.SPFOTX_SPE_FORME_TEXTE WHERE (SPFOTX_SP_CODE_F" & _
                "K_PK = @SPFOTX_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOTX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOTX_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SPFOTX_SPE_FORME_TEXTE] SET [SPFOTX_SP_CODE_FK_PK] = @SPFOTX_" & _
                "SP_CODE_FK_PK, [SPFOTX_TEXTE] = @SPFOTX_TEXTE WHERE (([SPFOTX_SP_CODE_FK_PK] = @" & _
                "Original_SPFOTX_SP_CODE_FK_PK) AND ([SPFOTX_TEXTE] = @Original_SPFOTX_TEXTE));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT SPFOTX_SP_CODE_FK_PK, SPFOTX_TEXTE FROM THERIAQUE.SPFOTX_SPE_FORME_TEXTE " & _
                "WHERE (SPFOTX_SP_CODE_FK_PK = @SPFOTX_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOTX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOTX_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOTX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SPFOTX_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SPFOTX_SP_CODE_FK_PK, SPFOTX_TEXTE FROM THERIAQUE.SPFOTX_SPE_FORME_TEXTE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SPFOTX_SP_CODE_FK_PK, SPFOTX_TEXTE FROM THERIAQUE.SPFOTX_SPE_FORME_TEXTE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "where SPFOTX_SP_CODE_FK_PK = @SPFOTX_SP_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SPFOTX_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SPFOTX_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable = New dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable, ByVal SPFOTX_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFOTX_SP_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SPFOTX_SP_CODE_FK_PK As Integer) As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SPFOTX_SP_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable = New dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Nomenclature1.SPFOTX_SPE_FORME_TEXTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Nomenclature1) As Integer
            Return Me.Adapter.Update(dataSet, "SPFOTX_SPE_FORME_TEXTE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SPFOTX_SP_CODE_FK_PK As Integer, ByVal Original_SPFOTX_TEXTE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SPFOTX_SP_CODE_FK_PK, Integer)
            If (Original_SPFOTX_TEXTE Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOTX_TEXTE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SPFOTX_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SPFOTX_SP_CODE_FK_PK As Integer, ByVal SPFOTX_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SPFOTX_SP_CODE_FK_PK, Integer)
            If (SPFOTX_TEXTE Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOTX_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SPFOTX_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SPFOTX_SP_CODE_FK_PK As Integer, ByVal SPFOTX_TEXTE As String, ByVal Original_SPFOTX_SP_CODE_FK_PK As Integer, ByVal Original_SPFOTX_TEXTE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SPFOTX_SP_CODE_FK_PK, Integer)
            If (SPFOTX_TEXTE Is Nothing) Then
                Throw New System.ArgumentNullException("SPFOTX_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SPFOTX_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SPFOTX_SP_CODE_FK_PK, Integer)
            If (Original_SPFOTX_TEXTE Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SPFOTX_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SPFOTX_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
