'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.312
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Conducteur"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Conducteur
    Inherits System.Data.DataSet
    
    Private tableFCO_CONDUCTEUR As FCO_CONDUCTEURDataTable
    
    Private tableFCOCPH_FCO_CLPH As FCOCPH_FCO_CLPHDataTable
    
    Private tableFCOCCH_FCO_CLCH As FCOCCH_FCO_CLCHDataTable
    
    Private tableFCOSAC_FCO_SUBACT As FCOSAC_FCO_SUBACTDataTable
    
    Private tableFCOSAU_FCO_SUBAUX As FCOSAU_FCO_SUBAUXDataTable
    
    Private tableFCOPR_FCO_PROD As FCOPR_FCO_PRODDataTable
    
    Private tableFCOSP_CONDUCTEUR_SPEC As FCOSP_CONDUCTEUR_SPECDataTable
    
    Private tableFCOREC_FCO_REC As FCOREC_FCO_RECDataTable
    
    Private tableFCOCOM_FCO_COM As FCOCOM_FCO_COMDataTable
    
    Private tableFCOAFS_FCO_AFSSAPS As FCOAFS_FCO_AFSSAPSDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FCO_CONDUCTEUR")) Is Nothing) Then
                MyBase.Tables.Add(New FCO_CONDUCTEURDataTable(ds.Tables("FCO_CONDUCTEUR")))
            End If
            If (Not (ds.Tables("FCOCPH_FCO_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FCOCPH_FCO_CLPHDataTable(ds.Tables("FCOCPH_FCO_CLPH")))
            End If
            If (Not (ds.Tables("FCOCCH_FCO_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FCOCCH_FCO_CLCHDataTable(ds.Tables("FCOCCH_FCO_CLCH")))
            End If
            If (Not (ds.Tables("FCOSAC_FCO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FCOSAC_FCO_SUBACTDataTable(ds.Tables("FCOSAC_FCO_SUBACT")))
            End If
            If (Not (ds.Tables("FCOSAU_FCO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New FCOSAU_FCO_SUBAUXDataTable(ds.Tables("FCOSAU_FCO_SUBAUX")))
            End If
            If (Not (ds.Tables("FCOPR_FCO_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FCOPR_FCO_PRODDataTable(ds.Tables("FCOPR_FCO_PROD")))
            End If
            If (Not (ds.Tables("FCOSP_CONDUCTEUR_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FCOSP_CONDUCTEUR_SPECDataTable(ds.Tables("FCOSP_CONDUCTEUR_SPEC")))
            End If
            If (Not (ds.Tables("FCOREC_FCO_REC")) Is Nothing) Then
                MyBase.Tables.Add(New FCOREC_FCO_RECDataTable(ds.Tables("FCOREC_FCO_REC")))
            End If
            If (Not (ds.Tables("FCOCOM_FCO_COM")) Is Nothing) Then
                MyBase.Tables.Add(New FCOCOM_FCO_COMDataTable(ds.Tables("FCOCOM_FCO_COM")))
            End If
            If (Not (ds.Tables("FCOAFS_FCO_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FCOAFS_FCO_AFSSAPSDataTable(ds.Tables("FCOAFS_FCO_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCO_CONDUCTEUR() As FCO_CONDUCTEURDataTable
        Get
            Return Me.tableFCO_CONDUCTEUR
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOCPH_FCO_CLPH() As FCOCPH_FCO_CLPHDataTable
        Get
            Return Me.tableFCOCPH_FCO_CLPH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOCCH_FCO_CLCH() As FCOCCH_FCO_CLCHDataTable
        Get
            Return Me.tableFCOCCH_FCO_CLCH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOSAC_FCO_SUBACT() As FCOSAC_FCO_SUBACTDataTable
        Get
            Return Me.tableFCOSAC_FCO_SUBACT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOSAU_FCO_SUBAUX() As FCOSAU_FCO_SUBAUXDataTable
        Get
            Return Me.tableFCOSAU_FCO_SUBAUX
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOPR_FCO_PROD() As FCOPR_FCO_PRODDataTable
        Get
            Return Me.tableFCOPR_FCO_PROD
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOSP_CONDUCTEUR_SPEC() As FCOSP_CONDUCTEUR_SPECDataTable
        Get
            Return Me.tableFCOSP_CONDUCTEUR_SPEC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOREC_FCO_REC() As FCOREC_FCO_RECDataTable
        Get
            Return Me.tableFCOREC_FCO_REC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOCOM_FCO_COM() As FCOCOM_FCO_COMDataTable
        Get
            Return Me.tableFCOCOM_FCO_COM
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCOAFS_FCO_AFSSAPS() As FCOAFS_FCO_AFSSAPSDataTable
        Get
            Return Me.tableFCOAFS_FCO_AFSSAPS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Conducteur = CType(MyBase.Clone,dsTheriaque_Conducteur)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FCO_CONDUCTEUR")) Is Nothing) Then
                MyBase.Tables.Add(New FCO_CONDUCTEURDataTable(ds.Tables("FCO_CONDUCTEUR")))
            End If
            If (Not (ds.Tables("FCOCPH_FCO_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FCOCPH_FCO_CLPHDataTable(ds.Tables("FCOCPH_FCO_CLPH")))
            End If
            If (Not (ds.Tables("FCOCCH_FCO_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FCOCCH_FCO_CLCHDataTable(ds.Tables("FCOCCH_FCO_CLCH")))
            End If
            If (Not (ds.Tables("FCOSAC_FCO_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FCOSAC_FCO_SUBACTDataTable(ds.Tables("FCOSAC_FCO_SUBACT")))
            End If
            If (Not (ds.Tables("FCOSAU_FCO_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New FCOSAU_FCO_SUBAUXDataTable(ds.Tables("FCOSAU_FCO_SUBAUX")))
            End If
            If (Not (ds.Tables("FCOPR_FCO_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FCOPR_FCO_PRODDataTable(ds.Tables("FCOPR_FCO_PROD")))
            End If
            If (Not (ds.Tables("FCOSP_CONDUCTEUR_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FCOSP_CONDUCTEUR_SPECDataTable(ds.Tables("FCOSP_CONDUCTEUR_SPEC")))
            End If
            If (Not (ds.Tables("FCOREC_FCO_REC")) Is Nothing) Then
                MyBase.Tables.Add(New FCOREC_FCO_RECDataTable(ds.Tables("FCOREC_FCO_REC")))
            End If
            If (Not (ds.Tables("FCOCOM_FCO_COM")) Is Nothing) Then
                MyBase.Tables.Add(New FCOCOM_FCO_COMDataTable(ds.Tables("FCOCOM_FCO_COM")))
            End If
            If (Not (ds.Tables("FCOAFS_FCO_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FCOAFS_FCO_AFSSAPSDataTable(ds.Tables("FCOAFS_FCO_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFCO_CONDUCTEUR = CType(MyBase.Tables("FCO_CONDUCTEUR"),FCO_CONDUCTEURDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCO_CONDUCTEUR) Is Nothing) Then
                Me.tableFCO_CONDUCTEUR.InitVars
            End If
        End If
        Me.tableFCOCPH_FCO_CLPH = CType(MyBase.Tables("FCOCPH_FCO_CLPH"),FCOCPH_FCO_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOCPH_FCO_CLPH) Is Nothing) Then
                Me.tableFCOCPH_FCO_CLPH.InitVars
            End If
        End If
        Me.tableFCOCCH_FCO_CLCH = CType(MyBase.Tables("FCOCCH_FCO_CLCH"),FCOCCH_FCO_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOCCH_FCO_CLCH) Is Nothing) Then
                Me.tableFCOCCH_FCO_CLCH.InitVars
            End If
        End If
        Me.tableFCOSAC_FCO_SUBACT = CType(MyBase.Tables("FCOSAC_FCO_SUBACT"),FCOSAC_FCO_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOSAC_FCO_SUBACT) Is Nothing) Then
                Me.tableFCOSAC_FCO_SUBACT.InitVars
            End If
        End If
        Me.tableFCOSAU_FCO_SUBAUX = CType(MyBase.Tables("FCOSAU_FCO_SUBAUX"),FCOSAU_FCO_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOSAU_FCO_SUBAUX) Is Nothing) Then
                Me.tableFCOSAU_FCO_SUBAUX.InitVars
            End If
        End If
        Me.tableFCOPR_FCO_PROD = CType(MyBase.Tables("FCOPR_FCO_PROD"),FCOPR_FCO_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOPR_FCO_PROD) Is Nothing) Then
                Me.tableFCOPR_FCO_PROD.InitVars
            End If
        End If
        Me.tableFCOSP_CONDUCTEUR_SPEC = CType(MyBase.Tables("FCOSP_CONDUCTEUR_SPEC"),FCOSP_CONDUCTEUR_SPECDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOSP_CONDUCTEUR_SPEC) Is Nothing) Then
                Me.tableFCOSP_CONDUCTEUR_SPEC.InitVars
            End If
        End If
        Me.tableFCOREC_FCO_REC = CType(MyBase.Tables("FCOREC_FCO_REC"),FCOREC_FCO_RECDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOREC_FCO_REC) Is Nothing) Then
                Me.tableFCOREC_FCO_REC.InitVars
            End If
        End If
        Me.tableFCOCOM_FCO_COM = CType(MyBase.Tables("FCOCOM_FCO_COM"),FCOCOM_FCO_COMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOCOM_FCO_COM) Is Nothing) Then
                Me.tableFCOCOM_FCO_COM.InitVars
            End If
        End If
        Me.tableFCOAFS_FCO_AFSSAPS = CType(MyBase.Tables("FCOAFS_FCO_AFSSAPS"),FCOAFS_FCO_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCOAFS_FCO_AFSSAPS) Is Nothing) Then
                Me.tableFCOAFS_FCO_AFSSAPS.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Conducteur"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Conducteur.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFCO_CONDUCTEUR = New FCO_CONDUCTEURDataTable
        MyBase.Tables.Add(Me.tableFCO_CONDUCTEUR)
        Me.tableFCOCPH_FCO_CLPH = New FCOCPH_FCO_CLPHDataTable
        MyBase.Tables.Add(Me.tableFCOCPH_FCO_CLPH)
        Me.tableFCOCCH_FCO_CLCH = New FCOCCH_FCO_CLCHDataTable
        MyBase.Tables.Add(Me.tableFCOCCH_FCO_CLCH)
        Me.tableFCOSAC_FCO_SUBACT = New FCOSAC_FCO_SUBACTDataTable
        MyBase.Tables.Add(Me.tableFCOSAC_FCO_SUBACT)
        Me.tableFCOSAU_FCO_SUBAUX = New FCOSAU_FCO_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableFCOSAU_FCO_SUBAUX)
        Me.tableFCOPR_FCO_PROD = New FCOPR_FCO_PRODDataTable
        MyBase.Tables.Add(Me.tableFCOPR_FCO_PROD)
        Me.tableFCOSP_CONDUCTEUR_SPEC = New FCOSP_CONDUCTEUR_SPECDataTable
        MyBase.Tables.Add(Me.tableFCOSP_CONDUCTEUR_SPEC)
        Me.tableFCOREC_FCO_REC = New FCOREC_FCO_RECDataTable
        MyBase.Tables.Add(Me.tableFCOREC_FCO_REC)
        Me.tableFCOCOM_FCO_COM = New FCOCOM_FCO_COMDataTable
        MyBase.Tables.Add(Me.tableFCOCOM_FCO_COM)
        Me.tableFCOAFS_FCO_AFSSAPS = New FCOAFS_FCO_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFCOAFS_FCO_AFSSAPS)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCO_CONDUCTEUR() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOCPH_FCO_CLPH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOCCH_FCO_CLCH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOSAC_FCO_SUBACT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOSAU_FCO_SUBAUX() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOPR_FCO_PROD() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOSP_CONDUCTEUR_SPEC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOREC_FCO_REC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOCOM_FCO_COM() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCOAFS_FCO_AFSSAPS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub FCO_CONDUCTEURRowChangeEventHandler(ByVal sender As Object, ByVal e As FCO_CONDUCTEURRowChangeEvent)
    
    Public Delegate Sub FCOCPH_FCO_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOCPH_FCO_CLPHRowChangeEvent)
    
    Public Delegate Sub FCOCCH_FCO_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOCCH_FCO_CLCHRowChangeEvent)
    
    Public Delegate Sub FCOSAC_FCO_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOSAC_FCO_SUBACTRowChangeEvent)
    
    Public Delegate Sub FCOSAU_FCO_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOSAU_FCO_SUBAUXRowChangeEvent)
    
    Public Delegate Sub FCOPR_FCO_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOPR_FCO_PRODRowChangeEvent)
    
    Public Delegate Sub FCOSP_CONDUCTEUR_SPECRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOSP_CONDUCTEUR_SPECRowChangeEvent)
    
    Public Delegate Sub FCOREC_FCO_RECRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOREC_FCO_RECRowChangeEvent)
    
    Public Delegate Sub FCOCOM_FCO_COMRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOCOM_FCO_COMRowChangeEvent)
    
    Public Delegate Sub FCOAFS_FCO_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FCOAFS_FCO_AFSSAPSRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCO_CONDUCTEURDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCO_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnFCO_TXT As System.Data.DataColumn
        
        Private columnFCO_DATECR As System.Data.DataColumn
        
        Private columnFCO_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCO_CONDUCTEUR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCO_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCO_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCO_TXTColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCO_TXT
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCO_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCO_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCO_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCO_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCO_CONDUCTEURRow
            Get
                Return CType(Me.Rows(index),FCO_CONDUCTEURRow)
            End Get
        End Property
        
        Public Event FCO_CONDUCTEURRowChanging As FCO_CONDUCTEURRowChangeEventHandler
        
        Public Event FCO_CONDUCTEURRowChanged As FCO_CONDUCTEURRowChangeEventHandler
        
        Public Event FCO_CONDUCTEURRowDeleting As FCO_CONDUCTEURRowChangeEventHandler
        
        Public Event FCO_CONDUCTEURRowDeleted As FCO_CONDUCTEURRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCO_CONDUCTEURRow(ByVal row As FCO_CONDUCTEURRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCO_CONDUCTEURRow(ByVal FCO_CODE_SQ_PK As Integer, ByVal FCO_TXT As String, ByVal FCO_DATECR As Date, ByVal FCO_DATEMJ As Date) As FCO_CONDUCTEURRow
            Dim rowFCO_CONDUCTEURRow As FCO_CONDUCTEURRow = CType(Me.NewRow,FCO_CONDUCTEURRow)
            rowFCO_CONDUCTEURRow.ItemArray = New Object() {FCO_CODE_SQ_PK, FCO_TXT, FCO_DATECR, FCO_DATEMJ}
            Me.Rows.Add(rowFCO_CONDUCTEURRow)
            Return rowFCO_CONDUCTEURRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCO_CODE_SQ_PK(ByVal FCO_CODE_SQ_PK As Integer) As FCO_CONDUCTEURRow
            Return CType(Me.Rows.Find(New Object() {FCO_CODE_SQ_PK}),FCO_CONDUCTEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCO_CONDUCTEURDataTable = CType(MyBase.Clone,FCO_CONDUCTEURDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCO_CONDUCTEURDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCO_CODE_SQ_PK = MyBase.Columns("FCO_CODE_SQ_PK")
            Me.columnFCO_TXT = MyBase.Columns("FCO_TXT")
            Me.columnFCO_DATECR = MyBase.Columns("FCO_DATECR")
            Me.columnFCO_DATEMJ = MyBase.Columns("FCO_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCO_CODE_SQ_PK = New System.Data.DataColumn("FCO_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCO_CODE_SQ_PK)
            Me.columnFCO_TXT = New System.Data.DataColumn("FCO_TXT", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCO_TXT)
            Me.columnFCO_DATECR = New System.Data.DataColumn("FCO_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCO_DATECR)
            Me.columnFCO_DATEMJ = New System.Data.DataColumn("FCO_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCO_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCO_CODE_SQ_PK}, true))
            Me.columnFCO_CODE_SQ_PK.AllowDBNull = false
            Me.columnFCO_CODE_SQ_PK.Unique = true
            Me.columnFCO_TXT.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCO_CONDUCTEURRow() As FCO_CONDUCTEURRow
            Return CType(Me.NewRow,FCO_CONDUCTEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCO_CONDUCTEURRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCO_CONDUCTEURRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCO_CONDUCTEURRowChangedEvent) Is Nothing) Then
                RaiseEvent FCO_CONDUCTEURRowChanged(Me, New FCO_CONDUCTEURRowChangeEvent(CType(e.Row,FCO_CONDUCTEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCO_CONDUCTEURRowChangingEvent) Is Nothing) Then
                RaiseEvent FCO_CONDUCTEURRowChanging(Me, New FCO_CONDUCTEURRowChangeEvent(CType(e.Row,FCO_CONDUCTEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCO_CONDUCTEURRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCO_CONDUCTEURRowDeleted(Me, New FCO_CONDUCTEURRowChangeEvent(CType(e.Row,FCO_CONDUCTEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCO_CONDUCTEURRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCO_CONDUCTEURRowDeleting(Me, New FCO_CONDUCTEURRowChangeEvent(CType(e.Row,FCO_CONDUCTEURRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCO_CONDUCTEURRow(ByVal row As FCO_CONDUCTEURRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCO_CONDUCTEURDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOCPH_FCO_CLPHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOCPH_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOCPH_CPH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOCPH_FCO_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCPH_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCPH_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCPH_CPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOCPH_FCO_CLPHRow
            Get
                Return CType(Me.Rows(index),FCOCPH_FCO_CLPHRow)
            End Get
        End Property
        
        Public Event FCOCPH_FCO_CLPHRowChanging As FCOCPH_FCO_CLPHRowChangeEventHandler
        
        Public Event FCOCPH_FCO_CLPHRowChanged As FCOCPH_FCO_CLPHRowChangeEventHandler
        
        Public Event FCOCPH_FCO_CLPHRowDeleting As FCOCPH_FCO_CLPHRowChangeEventHandler
        
        Public Event FCOCPH_FCO_CLPHRowDeleted As FCOCPH_FCO_CLPHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOCPH_FCO_CLPHRow(ByVal row As FCOCPH_FCO_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOCPH_FCO_CLPHRow(ByVal FCOCPH_FCO_CODE_FK_PK As Integer, ByVal FCOCPH_CPH_CODE_FK_PK As String) As FCOCPH_FCO_CLPHRow
            Dim rowFCOCPH_FCO_CLPHRow As FCOCPH_FCO_CLPHRow = CType(Me.NewRow,FCOCPH_FCO_CLPHRow)
            rowFCOCPH_FCO_CLPHRow.ItemArray = New Object() {FCOCPH_FCO_CODE_FK_PK, FCOCPH_CPH_CODE_FK_PK}
            Me.Rows.Add(rowFCOCPH_FCO_CLPHRow)
            Return rowFCOCPH_FCO_CLPHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOCPH_FCO_CODE_FK_PKFCOCPH_CPH_CODE_FK_PK(ByVal FCOCPH_FCO_CODE_FK_PK As Integer, ByVal FCOCPH_CPH_CODE_FK_PK As String) As FCOCPH_FCO_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FCOCPH_FCO_CODE_FK_PK, FCOCPH_CPH_CODE_FK_PK}),FCOCPH_FCO_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOCPH_FCO_CLPHDataTable = CType(MyBase.Clone,FCOCPH_FCO_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOCPH_FCO_CLPHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOCPH_FCO_CODE_FK_PK = MyBase.Columns("FCOCPH_FCO_CODE_FK_PK")
            Me.columnFCOCPH_CPH_CODE_FK_PK = MyBase.Columns("FCOCPH_CPH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOCPH_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOCPH_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCPH_FCO_CODE_FK_PK)
            Me.columnFCOCPH_CPH_CODE_FK_PK = New System.Data.DataColumn("FCOCPH_CPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOCPH_FCO_CODE_FK_PK, Me.columnFCOCPH_CPH_CODE_FK_PK}, true))
            Me.columnFCOCPH_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOCPH_FCO_CLPHRow() As FCOCPH_FCO_CLPHRow
            Return CType(Me.NewRow,FCOCPH_FCO_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOCPH_FCO_CLPHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOCPH_FCO_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOCPH_FCO_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOCPH_FCO_CLPHRowChanged(Me, New FCOCPH_FCO_CLPHRowChangeEvent(CType(e.Row,FCOCPH_FCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOCPH_FCO_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOCPH_FCO_CLPHRowChanging(Me, New FCOCPH_FCO_CLPHRowChangeEvent(CType(e.Row,FCOCPH_FCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOCPH_FCO_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOCPH_FCO_CLPHRowDeleted(Me, New FCOCPH_FCO_CLPHRowChangeEvent(CType(e.Row,FCOCPH_FCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOCPH_FCO_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOCPH_FCO_CLPHRowDeleting(Me, New FCOCPH_FCO_CLPHRowChangeEvent(CType(e.Row,FCOCPH_FCO_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOCPH_FCO_CLPHRow(ByVal row As FCOCPH_FCO_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOCPH_FCO_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOCCH_FCO_CLCHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOCCH_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOCCH_CCH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOCCH_FCO_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCCH_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCCH_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCCH_CCH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOCCH_FCO_CLCHRow
            Get
                Return CType(Me.Rows(index),FCOCCH_FCO_CLCHRow)
            End Get
        End Property
        
        Public Event FCOCCH_FCO_CLCHRowChanging As FCOCCH_FCO_CLCHRowChangeEventHandler
        
        Public Event FCOCCH_FCO_CLCHRowChanged As FCOCCH_FCO_CLCHRowChangeEventHandler
        
        Public Event FCOCCH_FCO_CLCHRowDeleting As FCOCCH_FCO_CLCHRowChangeEventHandler
        
        Public Event FCOCCH_FCO_CLCHRowDeleted As FCOCCH_FCO_CLCHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOCCH_FCO_CLCHRow(ByVal row As FCOCCH_FCO_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOCCH_FCO_CLCHRow(ByVal FCOCCH_FCO_CODE_FK_PK As Integer, ByVal FCOCCH_CCH_CODE_FK_PK As String) As FCOCCH_FCO_CLCHRow
            Dim rowFCOCCH_FCO_CLCHRow As FCOCCH_FCO_CLCHRow = CType(Me.NewRow,FCOCCH_FCO_CLCHRow)
            rowFCOCCH_FCO_CLCHRow.ItemArray = New Object() {FCOCCH_FCO_CODE_FK_PK, FCOCCH_CCH_CODE_FK_PK}
            Me.Rows.Add(rowFCOCCH_FCO_CLCHRow)
            Return rowFCOCCH_FCO_CLCHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOCCH_FCO_CODE_FK_PKFCOCCH_CCH_CODE_FK_PK(ByVal FCOCCH_FCO_CODE_FK_PK As Integer, ByVal FCOCCH_CCH_CODE_FK_PK As String) As FCOCCH_FCO_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FCOCCH_FCO_CODE_FK_PK, FCOCCH_CCH_CODE_FK_PK}),FCOCCH_FCO_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOCCH_FCO_CLCHDataTable = CType(MyBase.Clone,FCOCCH_FCO_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOCCH_FCO_CLCHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOCCH_FCO_CODE_FK_PK = MyBase.Columns("FCOCCH_FCO_CODE_FK_PK")
            Me.columnFCOCCH_CCH_CODE_FK_PK = MyBase.Columns("FCOCCH_CCH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOCCH_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOCCH_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCCH_FCO_CODE_FK_PK)
            Me.columnFCOCCH_CCH_CODE_FK_PK = New System.Data.DataColumn("FCOCCH_CCH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOCCH_FCO_CODE_FK_PK, Me.columnFCOCCH_CCH_CODE_FK_PK}, true))
            Me.columnFCOCCH_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOCCH_FCO_CLCHRow() As FCOCCH_FCO_CLCHRow
            Return CType(Me.NewRow,FCOCCH_FCO_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOCCH_FCO_CLCHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOCCH_FCO_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOCCH_FCO_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOCCH_FCO_CLCHRowChanged(Me, New FCOCCH_FCO_CLCHRowChangeEvent(CType(e.Row,FCOCCH_FCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOCCH_FCO_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOCCH_FCO_CLCHRowChanging(Me, New FCOCCH_FCO_CLCHRowChangeEvent(CType(e.Row,FCOCCH_FCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOCCH_FCO_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOCCH_FCO_CLCHRowDeleted(Me, New FCOCCH_FCO_CLCHRowChangeEvent(CType(e.Row,FCOCCH_FCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOCCH_FCO_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOCCH_FCO_CLCHRowDeleting(Me, New FCOCCH_FCO_CLCHRowChangeEvent(CType(e.Row,FCOCCH_FCO_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOCCH_FCO_CLCHRow(ByVal row As FCOCCH_FCO_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOCCH_FCO_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOSAC_FCO_SUBACTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOSAC_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOSAC_SAC_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOSAC_FCO_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOSAC_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOSAC_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOSAC_SAC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOSAC_FCO_SUBACTRow
            Get
                Return CType(Me.Rows(index),FCOSAC_FCO_SUBACTRow)
            End Get
        End Property
        
        Public Event FCOSAC_FCO_SUBACTRowChanging As FCOSAC_FCO_SUBACTRowChangeEventHandler
        
        Public Event FCOSAC_FCO_SUBACTRowChanged As FCOSAC_FCO_SUBACTRowChangeEventHandler
        
        Public Event FCOSAC_FCO_SUBACTRowDeleting As FCOSAC_FCO_SUBACTRowChangeEventHandler
        
        Public Event FCOSAC_FCO_SUBACTRowDeleted As FCOSAC_FCO_SUBACTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOSAC_FCO_SUBACTRow(ByVal row As FCOSAC_FCO_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOSAC_FCO_SUBACTRow(ByVal FCOSAC_FCO_CODE_FK_PK As Integer, ByVal FCOSAC_SAC_CODE_FK_PK As Integer) As FCOSAC_FCO_SUBACTRow
            Dim rowFCOSAC_FCO_SUBACTRow As FCOSAC_FCO_SUBACTRow = CType(Me.NewRow,FCOSAC_FCO_SUBACTRow)
            rowFCOSAC_FCO_SUBACTRow.ItemArray = New Object() {FCOSAC_FCO_CODE_FK_PK, FCOSAC_SAC_CODE_FK_PK}
            Me.Rows.Add(rowFCOSAC_FCO_SUBACTRow)
            Return rowFCOSAC_FCO_SUBACTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOSAC_FCO_CODE_FK_PKFCOSAC_SAC_CODE_FK_PK(ByVal FCOSAC_FCO_CODE_FK_PK As Integer, ByVal FCOSAC_SAC_CODE_FK_PK As Integer) As FCOSAC_FCO_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {FCOSAC_FCO_CODE_FK_PK, FCOSAC_SAC_CODE_FK_PK}),FCOSAC_FCO_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOSAC_FCO_SUBACTDataTable = CType(MyBase.Clone,FCOSAC_FCO_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOSAC_FCO_SUBACTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOSAC_FCO_CODE_FK_PK = MyBase.Columns("FCOSAC_FCO_CODE_FK_PK")
            Me.columnFCOSAC_SAC_CODE_FK_PK = MyBase.Columns("FCOSAC_SAC_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOSAC_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOSAC_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOSAC_FCO_CODE_FK_PK)
            Me.columnFCOSAC_SAC_CODE_FK_PK = New System.Data.DataColumn("FCOSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOSAC_FCO_CODE_FK_PK, Me.columnFCOSAC_SAC_CODE_FK_PK}, true))
            Me.columnFCOSAC_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOSAC_FCO_SUBACTRow() As FCOSAC_FCO_SUBACTRow
            Return CType(Me.NewRow,FCOSAC_FCO_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOSAC_FCO_SUBACTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOSAC_FCO_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOSAC_FCO_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOSAC_FCO_SUBACTRowChanged(Me, New FCOSAC_FCO_SUBACTRowChangeEvent(CType(e.Row,FCOSAC_FCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOSAC_FCO_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOSAC_FCO_SUBACTRowChanging(Me, New FCOSAC_FCO_SUBACTRowChangeEvent(CType(e.Row,FCOSAC_FCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOSAC_FCO_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOSAC_FCO_SUBACTRowDeleted(Me, New FCOSAC_FCO_SUBACTRowChangeEvent(CType(e.Row,FCOSAC_FCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOSAC_FCO_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOSAC_FCO_SUBACTRowDeleting(Me, New FCOSAC_FCO_SUBACTRowChangeEvent(CType(e.Row,FCOSAC_FCO_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOSAC_FCO_SUBACTRow(ByVal row As FCOSAC_FCO_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOSAC_FCO_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOSAU_FCO_SUBAUXDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOSAU_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOSAU_SAU_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOSAU_FCO_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOSAU_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOSAU_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOSAU_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOSAU_FCO_SUBAUXRow
            Get
                Return CType(Me.Rows(index),FCOSAU_FCO_SUBAUXRow)
            End Get
        End Property
        
        Public Event FCOSAU_FCO_SUBAUXRowChanging As FCOSAU_FCO_SUBAUXRowChangeEventHandler
        
        Public Event FCOSAU_FCO_SUBAUXRowChanged As FCOSAU_FCO_SUBAUXRowChangeEventHandler
        
        Public Event FCOSAU_FCO_SUBAUXRowDeleting As FCOSAU_FCO_SUBAUXRowChangeEventHandler
        
        Public Event FCOSAU_FCO_SUBAUXRowDeleted As FCOSAU_FCO_SUBAUXRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOSAU_FCO_SUBAUXRow(ByVal row As FCOSAU_FCO_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOSAU_FCO_SUBAUXRow(ByVal FCOSAU_FCO_CODE_FK_PK As Integer, ByVal FCOSAU_SAU_CODE_FK_PK As Integer) As FCOSAU_FCO_SUBAUXRow
            Dim rowFCOSAU_FCO_SUBAUXRow As FCOSAU_FCO_SUBAUXRow = CType(Me.NewRow,FCOSAU_FCO_SUBAUXRow)
            rowFCOSAU_FCO_SUBAUXRow.ItemArray = New Object() {FCOSAU_FCO_CODE_FK_PK, FCOSAU_SAU_CODE_FK_PK}
            Me.Rows.Add(rowFCOSAU_FCO_SUBAUXRow)
            Return rowFCOSAU_FCO_SUBAUXRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOSAU_FCO_CODE_FK_PKFCOSAU_SAU_CODE_FK_PK(ByVal FCOSAU_FCO_CODE_FK_PK As Integer, ByVal FCOSAU_SAU_CODE_FK_PK As Integer) As FCOSAU_FCO_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {FCOSAU_FCO_CODE_FK_PK, FCOSAU_SAU_CODE_FK_PK}),FCOSAU_FCO_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOSAU_FCO_SUBAUXDataTable = CType(MyBase.Clone,FCOSAU_FCO_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOSAU_FCO_SUBAUXDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOSAU_FCO_CODE_FK_PK = MyBase.Columns("FCOSAU_FCO_CODE_FK_PK")
            Me.columnFCOSAU_SAU_CODE_FK_PK = MyBase.Columns("FCOSAU_SAU_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOSAU_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOSAU_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOSAU_FCO_CODE_FK_PK)
            Me.columnFCOSAU_SAU_CODE_FK_PK = New System.Data.DataColumn("FCOSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOSAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOSAU_FCO_CODE_FK_PK, Me.columnFCOSAU_SAU_CODE_FK_PK}, true))
            Me.columnFCOSAU_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOSAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOSAU_FCO_SUBAUXRow() As FCOSAU_FCO_SUBAUXRow
            Return CType(Me.NewRow,FCOSAU_FCO_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOSAU_FCO_SUBAUXRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOSAU_FCO_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOSAU_FCO_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOSAU_FCO_SUBAUXRowChanged(Me, New FCOSAU_FCO_SUBAUXRowChangeEvent(CType(e.Row,FCOSAU_FCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOSAU_FCO_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOSAU_FCO_SUBAUXRowChanging(Me, New FCOSAU_FCO_SUBAUXRowChangeEvent(CType(e.Row,FCOSAU_FCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOSAU_FCO_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOSAU_FCO_SUBAUXRowDeleted(Me, New FCOSAU_FCO_SUBAUXRowChangeEvent(CType(e.Row,FCOSAU_FCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOSAU_FCO_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOSAU_FCO_SUBAUXRowDeleting(Me, New FCOSAU_FCO_SUBAUXRowChangeEvent(CType(e.Row,FCOSAU_FCO_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOSAU_FCO_SUBAUXRow(ByVal row As FCOSAU_FCO_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOSAU_FCO_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOPR_FCO_PRODDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOPR_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOPR_PR_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOPR_FCO_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOPR_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOPR_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOPR_PR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOPR_FCO_PRODRow
            Get
                Return CType(Me.Rows(index),FCOPR_FCO_PRODRow)
            End Get
        End Property
        
        Public Event FCOPR_FCO_PRODRowChanging As FCOPR_FCO_PRODRowChangeEventHandler
        
        Public Event FCOPR_FCO_PRODRowChanged As FCOPR_FCO_PRODRowChangeEventHandler
        
        Public Event FCOPR_FCO_PRODRowDeleting As FCOPR_FCO_PRODRowChangeEventHandler
        
        Public Event FCOPR_FCO_PRODRowDeleted As FCOPR_FCO_PRODRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOPR_FCO_PRODRow(ByVal row As FCOPR_FCO_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOPR_FCO_PRODRow(ByVal FCOPR_FCO_CODE_FK_PK As Integer, ByVal FCOPR_PR_CODE_FK_PK As Integer) As FCOPR_FCO_PRODRow
            Dim rowFCOPR_FCO_PRODRow As FCOPR_FCO_PRODRow = CType(Me.NewRow,FCOPR_FCO_PRODRow)
            rowFCOPR_FCO_PRODRow.ItemArray = New Object() {FCOPR_FCO_CODE_FK_PK, FCOPR_PR_CODE_FK_PK}
            Me.Rows.Add(rowFCOPR_FCO_PRODRow)
            Return rowFCOPR_FCO_PRODRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOPR_FCO_CODE_FK_PKFCOPR_PR_CODE_FK_PK(ByVal FCOPR_FCO_CODE_FK_PK As Integer, ByVal FCOPR_PR_CODE_FK_PK As Integer) As FCOPR_FCO_PRODRow
            Return CType(Me.Rows.Find(New Object() {FCOPR_FCO_CODE_FK_PK, FCOPR_PR_CODE_FK_PK}),FCOPR_FCO_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOPR_FCO_PRODDataTable = CType(MyBase.Clone,FCOPR_FCO_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOPR_FCO_PRODDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOPR_FCO_CODE_FK_PK = MyBase.Columns("FCOPR_FCO_CODE_FK_PK")
            Me.columnFCOPR_PR_CODE_FK_PK = MyBase.Columns("FCOPR_PR_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOPR_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOPR_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOPR_FCO_CODE_FK_PK)
            Me.columnFCOPR_PR_CODE_FK_PK = New System.Data.DataColumn("FCOPR_PR_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOPR_FCO_CODE_FK_PK, Me.columnFCOPR_PR_CODE_FK_PK}, true))
            Me.columnFCOPR_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOPR_FCO_PRODRow() As FCOPR_FCO_PRODRow
            Return CType(Me.NewRow,FCOPR_FCO_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOPR_FCO_PRODRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOPR_FCO_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOPR_FCO_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOPR_FCO_PRODRowChanged(Me, New FCOPR_FCO_PRODRowChangeEvent(CType(e.Row,FCOPR_FCO_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOPR_FCO_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOPR_FCO_PRODRowChanging(Me, New FCOPR_FCO_PRODRowChangeEvent(CType(e.Row,FCOPR_FCO_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOPR_FCO_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOPR_FCO_PRODRowDeleted(Me, New FCOPR_FCO_PRODRowChangeEvent(CType(e.Row,FCOPR_FCO_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOPR_FCO_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOPR_FCO_PRODRowDeleting(Me, New FCOPR_FCO_PRODRowChangeEvent(CType(e.Row,FCOPR_FCO_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOPR_FCO_PRODRow(ByVal row As FCOPR_FCO_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOPR_FCO_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOSP_CONDUCTEUR_SPECDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOSP_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOSP_SP_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOSP_CONDUCTEUR_SPEC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOSP_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOSP_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOSP_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOSP_CONDUCTEUR_SPECRow
            Get
                Return CType(Me.Rows(index),FCOSP_CONDUCTEUR_SPECRow)
            End Get
        End Property
        
        Public Event FCOSP_CONDUCTEUR_SPECRowChanging As FCOSP_CONDUCTEUR_SPECRowChangeEventHandler
        
        Public Event FCOSP_CONDUCTEUR_SPECRowChanged As FCOSP_CONDUCTEUR_SPECRowChangeEventHandler
        
        Public Event FCOSP_CONDUCTEUR_SPECRowDeleting As FCOSP_CONDUCTEUR_SPECRowChangeEventHandler
        
        Public Event FCOSP_CONDUCTEUR_SPECRowDeleted As FCOSP_CONDUCTEUR_SPECRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOSP_CONDUCTEUR_SPECRow(ByVal row As FCOSP_CONDUCTEUR_SPECRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOSP_CONDUCTEUR_SPECRow(ByVal FCOSP_FCO_CODE_FK_PK As Integer, ByVal FCOSP_SP_CODE_FK_PK As Integer) As FCOSP_CONDUCTEUR_SPECRow
            Dim rowFCOSP_CONDUCTEUR_SPECRow As FCOSP_CONDUCTEUR_SPECRow = CType(Me.NewRow,FCOSP_CONDUCTEUR_SPECRow)
            rowFCOSP_CONDUCTEUR_SPECRow.ItemArray = New Object() {FCOSP_FCO_CODE_FK_PK, FCOSP_SP_CODE_FK_PK}
            Me.Rows.Add(rowFCOSP_CONDUCTEUR_SPECRow)
            Return rowFCOSP_CONDUCTEUR_SPECRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOSP_FCO_CODE_FK_PKFCOSP_SP_CODE_FK_PK(ByVal FCOSP_FCO_CODE_FK_PK As Integer, ByVal FCOSP_SP_CODE_FK_PK As Integer) As FCOSP_CONDUCTEUR_SPECRow
            Return CType(Me.Rows.Find(New Object() {FCOSP_FCO_CODE_FK_PK, FCOSP_SP_CODE_FK_PK}),FCOSP_CONDUCTEUR_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOSP_CONDUCTEUR_SPECDataTable = CType(MyBase.Clone,FCOSP_CONDUCTEUR_SPECDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOSP_CONDUCTEUR_SPECDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOSP_FCO_CODE_FK_PK = MyBase.Columns("FCOSP_FCO_CODE_FK_PK")
            Me.columnFCOSP_SP_CODE_FK_PK = MyBase.Columns("FCOSP_SP_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOSP_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOSP_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOSP_FCO_CODE_FK_PK)
            Me.columnFCOSP_SP_CODE_FK_PK = New System.Data.DataColumn("FCOSP_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOSP_FCO_CODE_FK_PK, Me.columnFCOSP_SP_CODE_FK_PK}, true))
            Me.columnFCOSP_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOSP_CONDUCTEUR_SPECRow() As FCOSP_CONDUCTEUR_SPECRow
            Return CType(Me.NewRow,FCOSP_CONDUCTEUR_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOSP_CONDUCTEUR_SPECRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOSP_CONDUCTEUR_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOSP_CONDUCTEUR_SPECRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOSP_CONDUCTEUR_SPECRowChanged(Me, New FCOSP_CONDUCTEUR_SPECRowChangeEvent(CType(e.Row,FCOSP_CONDUCTEUR_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOSP_CONDUCTEUR_SPECRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOSP_CONDUCTEUR_SPECRowChanging(Me, New FCOSP_CONDUCTEUR_SPECRowChangeEvent(CType(e.Row,FCOSP_CONDUCTEUR_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOSP_CONDUCTEUR_SPECRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOSP_CONDUCTEUR_SPECRowDeleted(Me, New FCOSP_CONDUCTEUR_SPECRowChangeEvent(CType(e.Row,FCOSP_CONDUCTEUR_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOSP_CONDUCTEUR_SPECRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOSP_CONDUCTEUR_SPECRowDeleting(Me, New FCOSP_CONDUCTEUR_SPECRowChangeEvent(CType(e.Row,FCOSP_CONDUCTEUR_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOSP_CONDUCTEUR_SPECRow(ByVal row As FCOSP_CONDUCTEUR_SPECRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOSP_CONDUCTEUR_SPECDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOREC_FCO_RECDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOREC_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOREC_CDF_REC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOREC_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOREC_FCO_REC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOREC_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOREC_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOREC_CDF_REC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOREC_CDF_REC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOREC_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOREC_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOREC_FCO_RECRow
            Get
                Return CType(Me.Rows(index),FCOREC_FCO_RECRow)
            End Get
        End Property
        
        Public Event FCOREC_FCO_RECRowChanging As FCOREC_FCO_RECRowChangeEventHandler
        
        Public Event FCOREC_FCO_RECRowChanged As FCOREC_FCO_RECRowChangeEventHandler
        
        Public Event FCOREC_FCO_RECRowDeleting As FCOREC_FCO_RECRowChangeEventHandler
        
        Public Event FCOREC_FCO_RECRowDeleted As FCOREC_FCO_RECRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOREC_FCO_RECRow(ByVal row As FCOREC_FCO_RECRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOREC_FCO_RECRow(ByVal FCOREC_FCO_CODE_FK_PK As Integer, ByVal FCOREC_CDF_REC_CODE_FK_PK As String, ByVal FCOREC_NUMORD As Byte) As FCOREC_FCO_RECRow
            Dim rowFCOREC_FCO_RECRow As FCOREC_FCO_RECRow = CType(Me.NewRow,FCOREC_FCO_RECRow)
            rowFCOREC_FCO_RECRow.ItemArray = New Object() {FCOREC_FCO_CODE_FK_PK, FCOREC_CDF_REC_CODE_FK_PK, FCOREC_NUMORD}
            Me.Rows.Add(rowFCOREC_FCO_RECRow)
            Return rowFCOREC_FCO_RECRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOREC_FCO_CODE_FK_PKFCOREC_CDF_REC_CODE_FK_PK(ByVal FCOREC_FCO_CODE_FK_PK As Integer, ByVal FCOREC_CDF_REC_CODE_FK_PK As String) As FCOREC_FCO_RECRow
            Return CType(Me.Rows.Find(New Object() {FCOREC_FCO_CODE_FK_PK, FCOREC_CDF_REC_CODE_FK_PK}),FCOREC_FCO_RECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOREC_FCO_RECDataTable = CType(MyBase.Clone,FCOREC_FCO_RECDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOREC_FCO_RECDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOREC_FCO_CODE_FK_PK = MyBase.Columns("FCOREC_FCO_CODE_FK_PK")
            Me.columnFCOREC_CDF_REC_CODE_FK_PK = MyBase.Columns("FCOREC_CDF_REC_CODE_FK_PK")
            Me.columnFCOREC_NUMORD = MyBase.Columns("FCOREC_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOREC_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOREC_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOREC_FCO_CODE_FK_PK)
            Me.columnFCOREC_CDF_REC_CODE_FK_PK = New System.Data.DataColumn("FCOREC_CDF_REC_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOREC_CDF_REC_CODE_FK_PK)
            Me.columnFCOREC_NUMORD = New System.Data.DataColumn("FCOREC_NUMORD", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOREC_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOREC_FCO_CODE_FK_PK, Me.columnFCOREC_CDF_REC_CODE_FK_PK}, true))
            Me.columnFCOREC_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOREC_CDF_REC_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOREC_CDF_REC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOREC_FCO_RECRow() As FCOREC_FCO_RECRow
            Return CType(Me.NewRow,FCOREC_FCO_RECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOREC_FCO_RECRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOREC_FCO_RECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOREC_FCO_RECRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOREC_FCO_RECRowChanged(Me, New FCOREC_FCO_RECRowChangeEvent(CType(e.Row,FCOREC_FCO_RECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOREC_FCO_RECRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOREC_FCO_RECRowChanging(Me, New FCOREC_FCO_RECRowChangeEvent(CType(e.Row,FCOREC_FCO_RECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOREC_FCO_RECRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOREC_FCO_RECRowDeleted(Me, New FCOREC_FCO_RECRowChangeEvent(CType(e.Row,FCOREC_FCO_RECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOREC_FCO_RECRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOREC_FCO_RECRowDeleting(Me, New FCOREC_FCO_RECRowChangeEvent(CType(e.Row,FCOREC_FCO_RECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOREC_FCO_RECRow(ByVal row As FCOREC_FCO_RECRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOREC_FCO_RECDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOCOM_FCO_COMDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOCOM_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOCOM_CDF_COM_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOCOM_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOCOM_FCO_COM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCOM_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCOM_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCOM_CDF_COM_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCOM_CDF_COM_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOCOM_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOCOM_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOCOM_FCO_COMRow
            Get
                Return CType(Me.Rows(index),FCOCOM_FCO_COMRow)
            End Get
        End Property
        
        Public Event FCOCOM_FCO_COMRowChanging As FCOCOM_FCO_COMRowChangeEventHandler
        
        Public Event FCOCOM_FCO_COMRowChanged As FCOCOM_FCO_COMRowChangeEventHandler
        
        Public Event FCOCOM_FCO_COMRowDeleting As FCOCOM_FCO_COMRowChangeEventHandler
        
        Public Event FCOCOM_FCO_COMRowDeleted As FCOCOM_FCO_COMRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOCOM_FCO_COMRow(ByVal row As FCOCOM_FCO_COMRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOCOM_FCO_COMRow(ByVal FCOCOM_FCO_CODE_FK_PK As Integer, ByVal FCOCOM_CDF_COM_CODE_FK_PK As String, ByVal FCOCOM_NUMORD As Byte) As FCOCOM_FCO_COMRow
            Dim rowFCOCOM_FCO_COMRow As FCOCOM_FCO_COMRow = CType(Me.NewRow,FCOCOM_FCO_COMRow)
            rowFCOCOM_FCO_COMRow.ItemArray = New Object() {FCOCOM_FCO_CODE_FK_PK, FCOCOM_CDF_COM_CODE_FK_PK, FCOCOM_NUMORD}
            Me.Rows.Add(rowFCOCOM_FCO_COMRow)
            Return rowFCOCOM_FCO_COMRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOCOM_FCO_CODE_FK_PKFCOCOM_CDF_COM_CODE_FK_PK(ByVal FCOCOM_FCO_CODE_FK_PK As Integer, ByVal FCOCOM_CDF_COM_CODE_FK_PK As String) As FCOCOM_FCO_COMRow
            Return CType(Me.Rows.Find(New Object() {FCOCOM_FCO_CODE_FK_PK, FCOCOM_CDF_COM_CODE_FK_PK}),FCOCOM_FCO_COMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOCOM_FCO_COMDataTable = CType(MyBase.Clone,FCOCOM_FCO_COMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOCOM_FCO_COMDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOCOM_FCO_CODE_FK_PK = MyBase.Columns("FCOCOM_FCO_CODE_FK_PK")
            Me.columnFCOCOM_CDF_COM_CODE_FK_PK = MyBase.Columns("FCOCOM_CDF_COM_CODE_FK_PK")
            Me.columnFCOCOM_NUMORD = MyBase.Columns("FCOCOM_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOCOM_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOCOM_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCOM_FCO_CODE_FK_PK)
            Me.columnFCOCOM_CDF_COM_CODE_FK_PK = New System.Data.DataColumn("FCOCOM_CDF_COM_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCOM_CDF_COM_CODE_FK_PK)
            Me.columnFCOCOM_NUMORD = New System.Data.DataColumn("FCOCOM_NUMORD", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOCOM_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOCOM_FCO_CODE_FK_PK, Me.columnFCOCOM_CDF_COM_CODE_FK_PK}, true))
            Me.columnFCOCOM_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOCOM_CDF_COM_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOCOM_CDF_COM_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOCOM_FCO_COMRow() As FCOCOM_FCO_COMRow
            Return CType(Me.NewRow,FCOCOM_FCO_COMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOCOM_FCO_COMRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOCOM_FCO_COMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOCOM_FCO_COMRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOCOM_FCO_COMRowChanged(Me, New FCOCOM_FCO_COMRowChangeEvent(CType(e.Row,FCOCOM_FCO_COMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOCOM_FCO_COMRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOCOM_FCO_COMRowChanging(Me, New FCOCOM_FCO_COMRowChangeEvent(CType(e.Row,FCOCOM_FCO_COMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOCOM_FCO_COMRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOCOM_FCO_COMRowDeleted(Me, New FCOCOM_FCO_COMRowChangeEvent(CType(e.Row,FCOCOM_FCO_COMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOCOM_FCO_COMRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOCOM_FCO_COMRowDeleting(Me, New FCOCOM_FCO_COMRowChangeEvent(CType(e.Row,FCOCOM_FCO_COMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOCOM_FCO_COMRow(ByVal row As FCOCOM_FCO_COMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOCOM_FCO_COMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCOAFS_FCO_AFSSAPSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCOAFS_FCO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOAFS_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCOAFS_DATE_PK As System.Data.DataColumn
        
        Private columnFCOAFS_CDF_DOCUMENT_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCOAFS_FCO_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOAFS_FCO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOAFS_FCO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOAFS_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOAFS_DATE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOAFS_DATE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCOAFS_CDF_DOCUMENT_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCOAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCOAFS_FCO_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FCOAFS_FCO_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FCOAFS_FCO_AFSSAPSRowChanging As FCOAFS_FCO_AFSSAPSRowChangeEventHandler
        
        Public Event FCOAFS_FCO_AFSSAPSRowChanged As FCOAFS_FCO_AFSSAPSRowChangeEventHandler
        
        Public Event FCOAFS_FCO_AFSSAPSRowDeleting As FCOAFS_FCO_AFSSAPSRowChangeEventHandler
        
        Public Event FCOAFS_FCO_AFSSAPSRowDeleted As FCOAFS_FCO_AFSSAPSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCOAFS_FCO_AFSSAPSRow(ByVal row As FCOAFS_FCO_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCOAFS_FCO_AFSSAPSRow(ByVal FCOAFS_FCO_CODE_FK_PK As Integer, ByVal FCOAFS_SP_CODE_FK_PK As Integer, ByVal FCOAFS_DATE_PK As Date, ByVal FCOAFS_CDF_DOCUMENT_FK_PK As String) As FCOAFS_FCO_AFSSAPSRow
            Dim rowFCOAFS_FCO_AFSSAPSRow As FCOAFS_FCO_AFSSAPSRow = CType(Me.NewRow,FCOAFS_FCO_AFSSAPSRow)
            rowFCOAFS_FCO_AFSSAPSRow.ItemArray = New Object() {FCOAFS_FCO_CODE_FK_PK, FCOAFS_SP_CODE_FK_PK, FCOAFS_DATE_PK, FCOAFS_CDF_DOCUMENT_FK_PK}
            Me.Rows.Add(rowFCOAFS_FCO_AFSSAPSRow)
            Return rowFCOAFS_FCO_AFSSAPSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCOAFS_FCO_CODE_FK_PKFCOAFS_SP_CODE_FK_PKFCOAFS_DATE_PKFCOAFS_CDF_DOCUMENT_FK_PK(ByVal FCOAFS_FCO_CODE_FK_PK As Integer, ByVal FCOAFS_SP_CODE_FK_PK As Integer, ByVal FCOAFS_DATE_PK As Date, ByVal FCOAFS_CDF_DOCUMENT_FK_PK As String) As FCOAFS_FCO_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FCOAFS_FCO_CODE_FK_PK, FCOAFS_SP_CODE_FK_PK, FCOAFS_DATE_PK, FCOAFS_CDF_DOCUMENT_FK_PK}),FCOAFS_FCO_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCOAFS_FCO_AFSSAPSDataTable = CType(MyBase.Clone,FCOAFS_FCO_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCOAFS_FCO_AFSSAPSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCOAFS_FCO_CODE_FK_PK = MyBase.Columns("FCOAFS_FCO_CODE_FK_PK")
            Me.columnFCOAFS_SP_CODE_FK_PK = MyBase.Columns("FCOAFS_SP_CODE_FK_PK")
            Me.columnFCOAFS_DATE_PK = MyBase.Columns("FCOAFS_DATE_PK")
            Me.columnFCOAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FCOAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCOAFS_FCO_CODE_FK_PK = New System.Data.DataColumn("FCOAFS_FCO_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOAFS_FCO_CODE_FK_PK)
            Me.columnFCOAFS_SP_CODE_FK_PK = New System.Data.DataColumn("FCOAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOAFS_SP_CODE_FK_PK)
            Me.columnFCOAFS_DATE_PK = New System.Data.DataColumn("FCOAFS_DATE_PK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOAFS_DATE_PK)
            Me.columnFCOAFS_CDF_DOCUMENT_FK_PK = New System.Data.DataColumn("FCOAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCOAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCOAFS_FCO_CODE_FK_PK, Me.columnFCOAFS_SP_CODE_FK_PK, Me.columnFCOAFS_DATE_PK, Me.columnFCOAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFCOAFS_FCO_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFCOAFS_DATE_PK.AllowDBNull = false
            Me.columnFCOAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFCOAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCOAFS_FCO_AFSSAPSRow() As FCOAFS_FCO_AFSSAPSRow
            Return CType(Me.NewRow,FCOAFS_FCO_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCOAFS_FCO_AFSSAPSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCOAFS_FCO_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCOAFS_FCO_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FCOAFS_FCO_AFSSAPSRowChanged(Me, New FCOAFS_FCO_AFSSAPSRowChangeEvent(CType(e.Row,FCOAFS_FCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCOAFS_FCO_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FCOAFS_FCO_AFSSAPSRowChanging(Me, New FCOAFS_FCO_AFSSAPSRowChangeEvent(CType(e.Row,FCOAFS_FCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCOAFS_FCO_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCOAFS_FCO_AFSSAPSRowDeleted(Me, New FCOAFS_FCO_AFSSAPSRowChangeEvent(CType(e.Row,FCOAFS_FCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCOAFS_FCO_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCOAFS_FCO_AFSSAPSRowDeleting(Me, New FCOAFS_FCO_AFSSAPSRowChangeEvent(CType(e.Row,FCOAFS_FCO_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCOAFS_FCO_AFSSAPSRow(ByVal row As FCOAFS_FCO_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Conducteur = New dsTheriaque_Conducteur
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCOAFS_FCO_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCO_CONDUCTEURRow
        Inherits System.Data.DataRow
        
        Private tableFCO_CONDUCTEUR As FCO_CONDUCTEURDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCO_CONDUCTEUR = CType(Me.Table,FCO_CONDUCTEURDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCO_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFCO_CONDUCTEUR.FCO_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCO_CONDUCTEUR.FCO_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCO_TXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableFCO_CONDUCTEUR.FCO_TXTColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCO_TXT' dans la table 'FCO_CONDUCTEUR' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFCO_CONDUCTEUR.FCO_TXTColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCO_DATECR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFCO_CONDUCTEUR.FCO_DATECRColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCO_DATECR' dans la table 'FCO_CONDUCTEUR' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFCO_CONDUCTEUR.FCO_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCO_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFCO_CONDUCTEUR.FCO_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCO_DATEMJ' dans la table 'FCO_CONDUCTEUR' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFCO_CONDUCTEUR.FCO_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCO_TXTNull() As Boolean
            Return Me.IsNull(Me.tableFCO_CONDUCTEUR.FCO_TXTColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCO_TXTNull()
            Me(Me.tableFCO_CONDUCTEUR.FCO_TXTColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCO_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableFCO_CONDUCTEUR.FCO_DATECRColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCO_DATECRNull()
            Me(Me.tableFCO_CONDUCTEUR.FCO_DATECRColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCO_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFCO_CONDUCTEUR.FCO_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCO_DATEMJNull()
            Me(Me.tableFCO_CONDUCTEUR.FCO_DATEMJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOCPH_FCO_CLPHRow
        Inherits System.Data.DataRow
        
        Private tableFCOCPH_FCO_CLPH As FCOCPH_FCO_CLPHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOCPH_FCO_CLPH = CType(Me.Table,FCOCPH_FCO_CLPHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCPH_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOCPH_FCO_CLPH.FCOCPH_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOCPH_FCO_CLPH.FCOCPH_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCOCPH_FCO_CLPH.FCOCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCOCPH_FCO_CLPH.FCOCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOCCH_FCO_CLCHRow
        Inherits System.Data.DataRow
        
        Private tableFCOCCH_FCO_CLCH As FCOCCH_FCO_CLCHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOCCH_FCO_CLCH = CType(Me.Table,FCOCCH_FCO_CLCHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCCH_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOCCH_FCO_CLCH.FCOCCH_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOCCH_FCO_CLCH.FCOCCH_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCOCCH_FCO_CLCH.FCOCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCOCCH_FCO_CLCH.FCOCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOSAC_FCO_SUBACTRow
        Inherits System.Data.DataRow
        
        Private tableFCOSAC_FCO_SUBACT As FCOSAC_FCO_SUBACTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOSAC_FCO_SUBACT = CType(Me.Table,FCOSAC_FCO_SUBACTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOSAC_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOSAC_FCO_SUBACT.FCOSAC_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOSAC_FCO_SUBACT.FCOSAC_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOSAC_FCO_SUBACT.FCOSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOSAC_FCO_SUBACT.FCOSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOSAU_FCO_SUBAUXRow
        Inherits System.Data.DataRow
        
        Private tableFCOSAU_FCO_SUBAUX As FCOSAU_FCO_SUBAUXDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOSAU_FCO_SUBAUX = CType(Me.Table,FCOSAU_FCO_SUBAUXDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOSAU_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOSAU_FCO_SUBAUX.FCOSAU_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOSAU_FCO_SUBAUX.FCOSAU_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOSAU_FCO_SUBAUX.FCOSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOSAU_FCO_SUBAUX.FCOSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOPR_FCO_PRODRow
        Inherits System.Data.DataRow
        
        Private tableFCOPR_FCO_PROD As FCOPR_FCO_PRODDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOPR_FCO_PROD = CType(Me.Table,FCOPR_FCO_PRODDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOPR_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOPR_FCO_PROD.FCOPR_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOPR_FCO_PROD.FCOPR_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOPR_FCO_PROD.FCOPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOPR_FCO_PROD.FCOPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOSP_CONDUCTEUR_SPECRow
        Inherits System.Data.DataRow
        
        Private tableFCOSP_CONDUCTEUR_SPEC As FCOSP_CONDUCTEUR_SPECDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOSP_CONDUCTEUR_SPEC = CType(Me.Table,FCOSP_CONDUCTEUR_SPECDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOSP_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOSP_CONDUCTEUR_SPEC.FCOSP_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOSP_CONDUCTEUR_SPEC.FCOSP_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOSP_CONDUCTEUR_SPEC.FCOSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOSP_CONDUCTEUR_SPEC.FCOSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOREC_FCO_RECRow
        Inherits System.Data.DataRow
        
        Private tableFCOREC_FCO_REC As FCOREC_FCO_RECDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOREC_FCO_REC = CType(Me.Table,FCOREC_FCO_RECDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOREC_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOREC_FCO_REC.FCOREC_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOREC_FCO_REC.FCOREC_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOREC_CDF_REC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCOREC_FCO_REC.FCOREC_CDF_REC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCOREC_FCO_REC.FCOREC_CDF_REC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOREC_NUMORD() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableFCOREC_FCO_REC.FCOREC_NUMORDColumn),Byte)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCOREC_NUMORD' dans la table 'FCOREC_FCO_REC' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFCOREC_FCO_REC.FCOREC_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCOREC_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFCOREC_FCO_REC.FCOREC_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCOREC_NUMORDNull()
            Me(Me.tableFCOREC_FCO_REC.FCOREC_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOCOM_FCO_COMRow
        Inherits System.Data.DataRow
        
        Private tableFCOCOM_FCO_COM As FCOCOM_FCO_COMDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOCOM_FCO_COM = CType(Me.Table,FCOCOM_FCO_COMDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCOM_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOCOM_FCO_COM.FCOCOM_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOCOM_FCO_COM.FCOCOM_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCOM_CDF_COM_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCOCOM_FCO_COM.FCOCOM_CDF_COM_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCOCOM_FCO_COM.FCOCOM_CDF_COM_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOCOM_NUMORD() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableFCOCOM_FCO_COM.FCOCOM_NUMORDColumn),Byte)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCOCOM_NUMORD' dans la table 'FCOCOM_FCO_COM' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFCOCOM_FCO_COM.FCOCOM_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCOCOM_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFCOCOM_FCO_COM.FCOCOM_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCOCOM_NUMORDNull()
            Me(Me.tableFCOCOM_FCO_COM.FCOCOM_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCOAFS_FCO_AFSSAPSRow
        Inherits System.Data.DataRow
        
        Private tableFCOAFS_FCO_AFSSAPS As FCOAFS_FCO_AFSSAPSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCOAFS_FCO_AFSSAPS = CType(Me.Table,FCOAFS_FCO_AFSSAPSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOAFS_FCO_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_FCO_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_FCO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCOAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCOAFS_FCO_AFSSAPS.FCOAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCO_CONDUCTEURRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCO_CONDUCTEURRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCO_CONDUCTEURRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCO_CONDUCTEURRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOCPH_FCO_CLPHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOCPH_FCO_CLPHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOCPH_FCO_CLPHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOCPH_FCO_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOCCH_FCO_CLCHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOCCH_FCO_CLCHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOCCH_FCO_CLCHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOCCH_FCO_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOSAC_FCO_SUBACTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOSAC_FCO_SUBACTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOSAC_FCO_SUBACTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOSAC_FCO_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOSAU_FCO_SUBAUXRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOSAU_FCO_SUBAUXRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOSAU_FCO_SUBAUXRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOSAU_FCO_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOPR_FCO_PRODRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOPR_FCO_PRODRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOPR_FCO_PRODRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOPR_FCO_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOSP_CONDUCTEUR_SPECRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOSP_CONDUCTEUR_SPECRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOSP_CONDUCTEUR_SPECRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOSP_CONDUCTEUR_SPECRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOREC_FCO_RECRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOREC_FCO_RECRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOREC_FCO_RECRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOREC_FCO_RECRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOCOM_FCO_COMRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOCOM_FCO_COMRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOCOM_FCO_COMRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOCOM_FCO_COMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCOAFS_FCO_AFSSAPSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCOAFS_FCO_AFSSAPSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCOAFS_FCO_AFSSAPSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCOAFS_FCO_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_ConducteurTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCO_CONDUCTEURTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCO_CONDUCTEUR"
            tableMapping.ColumnMappings.Add("FCO_CODE_SQ_PK", "FCO_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FCO_TXT", "FCO_TXT")
            tableMapping.ColumnMappings.Add("FCO_DATECR", "FCO_DATECR")
            tableMapping.ColumnMappings.Add("FCO_DATEMJ", "FCO_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCO_CONDUCTEUR] WHERE (([FCO_CODE_SQ_PK] = @Original_FCO"& _ 
                "_CODE_SQ_PK) AND ((@IsNull_FCO_DATECR = 1 AND [FCO_DATECR] IS NULL) OR ([FCO_DAT"& _ 
                "ECR] = @Original_FCO_DATECR)) AND ((@IsNull_FCO_DATEMJ = 1 AND [FCO_DATEMJ] IS N"& _ 
                "ULL) OR ([FCO_DATEMJ] = @Original_FCO_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCO_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCO_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCO_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCO_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCO_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCO_CONDUCTEUR] ([FCO_CODE_SQ_PK], [FCO_TXT], [FCO_DATEC"& _ 
                "R], [FCO_DATEMJ]) VALUES (@FCO_CODE_SQ_PK, @FCO_TXT, @FCO_DATECR, @FCO_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCO_CODE_SQ_PK, FCO_TXT, FCO_DATECR, FCO_DATEMJ FROM THERIAQUE.FCO_CONDU"& _ 
                "CTEUR WHERE (FCO_CODE_SQ_PK = @FCO_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_TXT", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_TXT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCO_CONDUCTEUR] SET [FCO_CODE_SQ_PK] = @FCO_CODE_SQ_PK, [FCO_"& _ 
                "TXT] = @FCO_TXT, [FCO_DATECR] = @FCO_DATECR, [FCO_DATEMJ] = @FCO_DATEMJ WHERE (("& _ 
                "[FCO_CODE_SQ_PK] = @Original_FCO_CODE_SQ_PK) AND ((@IsNull_FCO_DATECR = 1 AND [F"& _ 
                "CO_DATECR] IS NULL) OR ([FCO_DATECR] = @Original_FCO_DATECR)) AND ((@IsNull_FCO_"& _ 
                "DATEMJ = 1 AND [FCO_DATEMJ] IS NULL) OR ([FCO_DATEMJ] = @Original_FCO_DATEMJ)));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCO_CODE_SQ_PK, FCO_TXT, FCO_DATECR, FCO_DATEMJ FROM THERIAQUE.FCO_COND"& _ 
                "UCTEUR WHERE (FCO_CODE_SQ_PK = @FCO_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_TXT", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_TXT", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCO_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCO_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCO_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCO_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCO_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCO_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCO_CODE_SQ_PK, FCO_TXT, FCO_DATECR, FCO_DATEMJ FROM THERIAQUE.FCO_CONDUCT" & _
                "EUR"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCO_CODE_SQ_PK, FCO_TXT, FCO_DATECR, FCO_DATEMJ FROM THERIAQUE.FCO_CONDUCT" & _
                "EUR" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCO_CODE_SQ_PK = @FCO_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCO_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCO_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable = New dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable, ByVal FCO_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCO_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCO_CODE_SQ_PK As Integer) As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCO_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable = New dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCO_CONDUCTEURDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCO_CONDUCTEUR")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCO_CODE_SQ_PK As Integer, ByVal Original_FCO_DATECR As System.Nullable(Of Date), ByVal Original_FCO_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCO_CODE_SQ_PK, Integer)
            If (Original_FCO_DATECR.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FCO_DATECR.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_FCO_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FCO_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCO_CODE_SQ_PK As Integer, ByVal FCO_TXT As String, ByVal FCO_DATECR As System.Nullable(Of Date), ByVal FCO_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCO_CODE_SQ_PK, Integer)
            If (FCO_TXT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCO_TXT, String)
            End If
            If (FCO_DATECR.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FCO_DATECR.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (FCO_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FCO_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCO_CODE_SQ_PK As Integer, ByVal FCO_TXT As String, ByVal FCO_DATECR As System.Nullable(Of Date), ByVal FCO_DATEMJ As System.Nullable(Of Date), ByVal Original_FCO_CODE_SQ_PK As Integer, ByVal Original_FCO_DATECR As System.Nullable(Of Date), ByVal Original_FCO_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCO_CODE_SQ_PK, Integer)
            If (FCO_TXT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCO_TXT, String)
            End If
            If (FCO_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FCO_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (FCO_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FCO_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FCO_CODE_SQ_PK, Integer)
            If (Original_FCO_DATECR.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FCO_DATECR.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_FCO_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FCO_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCOCPH_FCO_CLPHTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOCPH_FCO_CLPH"
            tableMapping.ColumnMappings.Add("FCOCPH_FCO_CODE_FK_PK", "FCOCPH_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOCPH_CPH_CODE_FK_PK", "FCOCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOCPH_FCO_CLPH] WHERE (([FCOCPH_FCO_CODE_FK_PK] = @Orig" & _
                "inal_FCOCPH_FCO_CODE_FK_PK) AND ([FCOCPH_CPH_CODE_FK_PK] = @Original_FCOCPH_CPH_" & _
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCPH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOCPH_FCO_CLPH] ([FCOCPH_FCO_CODE_FK_PK], [FCOCPH_CPH_C" & _
                "ODE_FK_PK]) VALUES (@FCOCPH_FCO_CODE_FK_PK, @FCOCPH_CPH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCO" & _
                "CPH_FCO_CODE_FK_PK, FCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCOCPH_FCO_CLPH WHERE (" & _
                "FCOCPH_CPH_CODE_FK_PK = @FCOCPH_CPH_CODE_FK_PK) AND (FCOCPH_FCO_CODE_FK_PK = @FC" & _
                "OCPH_FCO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCPH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOCPH_FCO_CLPH] SET [FCOCPH_FCO_CODE_FK_PK] = @FCOCPH_FCO_CO" & _
                "DE_FK_PK, [FCOCPH_CPH_CODE_FK_PK] = @FCOCPH_CPH_CODE_FK_PK WHERE (([FCOCPH_FCO_C" & _
                "ODE_FK_PK] = @Original_FCOCPH_FCO_CODE_FK_PK) AND ([FCOCPH_CPH_CODE_FK_PK] = @Or" & _
                "iginal_FCOCPH_CPH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOCPH_FCO_CODE_FK_PK, FCOCPH_CPH_CODE_F" & _
                "K_PK FROM THERIAQUE.FCOCPH_FCO_CLPH WHERE (FCOCPH_CPH_CODE_FK_PK = @FCOCPH_CPH_C" & _
                "ODE_FK_PK) AND (FCOCPH_FCO_CODE_FK_PK = @FCOCPH_FCO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCPH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCPH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOCPH_FCO_CODE_FK_PK, FCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCOCPH_FCO_CLP" & _
                "H"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOCPH_FCO_CODE_FK_PK, FCOCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCOCPH_FCO_CLP" & _
                "H" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOCPH_FCO_CODE_FK_PK = @FCOCPH_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCPH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOCPH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable = New dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable, ByVal FCOCPH_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOCPH_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOCPH_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOCPH_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable = New dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOCPH_FCO_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOCPH_FCO_CLPH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOCPH_FCO_CODE_FK_PK As Integer, ByVal Original_FCOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOCPH_FCO_CODE_FK_PK, Integer)
            If (Original_FCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOCPH_FCO_CODE_FK_PK As Integer, ByVal FCOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOCPH_FCO_CODE_FK_PK, Integer)
            If (FCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOCPH_FCO_CODE_FK_PK As Integer, ByVal FCOCPH_CPH_CODE_FK_PK As String, ByVal Original_FCOCPH_FCO_CODE_FK_PK As Integer, ByVal Original_FCOCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOCPH_FCO_CODE_FK_PK, Integer)
            If (FCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCOCPH_FCO_CODE_FK_PK, Integer)
            If (Original_FCOCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCOCCH_FCO_CLCHTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOCCH_FCO_CLCH"
            tableMapping.ColumnMappings.Add("FCOCCH_FCO_CODE_FK_PK", "FCOCCH_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOCCH_CCH_CODE_FK_PK", "FCOCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOCCH_FCO_CLCH] WHERE (([FCOCCH_FCO_CODE_FK_PK] = @Orig"& _ 
                "inal_FCOCCH_FCO_CODE_FK_PK) AND ([FCOCCH_CCH_CODE_FK_PK] = @Original_FCOCCH_CCH_"& _ 
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCCH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOCCH_FCO_CLCH] ([FCOCCH_FCO_CODE_FK_PK], [FCOCCH_CCH_C"& _ 
                "ODE_FK_PK]) VALUES (@FCOCCH_FCO_CODE_FK_PK, @FCOCCH_CCH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCO"& _ 
                "CCH_FCO_CODE_FK_PK, FCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCOCCH_FCO_CLCH WHERE ("& _ 
                "FCOCCH_CCH_CODE_FK_PK = @FCOCCH_CCH_CODE_FK_PK) AND (FCOCCH_FCO_CODE_FK_PK = @FC"& _ 
                "OCCH_FCO_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCCH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOCCH_FCO_CLCH] SET [FCOCCH_FCO_CODE_FK_PK] = @FCOCCH_FCO_CO"& _ 
                "DE_FK_PK, [FCOCCH_CCH_CODE_FK_PK] = @FCOCCH_CCH_CODE_FK_PK WHERE (([FCOCCH_FCO_C"& _ 
                "ODE_FK_PK] = @Original_FCOCCH_FCO_CODE_FK_PK) AND ([FCOCCH_CCH_CODE_FK_PK] = @Or"& _ 
                "iginal_FCOCCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCOCCH_FCO_CODE_FK_PK, FCOCCH_CCH_CODE_F"& _ 
                "K_PK FROM THERIAQUE.FCOCCH_FCO_CLCH WHERE (FCOCCH_CCH_CODE_FK_PK = @FCOCCH_CCH_C"& _ 
                "ODE_FK_PK) AND (FCOCCH_FCO_CODE_FK_PK = @FCOCCH_FCO_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCCH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCCH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOCCH_FCO_CODE_FK_PK, FCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCOCCH_FCO_CLC" & _
                "H"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOCCH_FCO_CODE_FK_PK, FCOCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCOCCH_FCO_CLC" & _
                "H" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOCCH_FCO_CODE_FK_PK = @FCOCCH_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCCH_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOCCH_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable = New dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable, ByVal FCOCCH_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOCCH_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOCCH_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOCCH_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable = New dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOCCH_FCO_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOCCH_FCO_CLCH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOCCH_FCO_CODE_FK_PK As Integer, ByVal Original_FCOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOCCH_FCO_CODE_FK_PK, Integer)
            If (Original_FCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOCCH_FCO_CODE_FK_PK As Integer, ByVal FCOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOCCH_FCO_CODE_FK_PK, Integer)
            If (FCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOCCH_FCO_CODE_FK_PK As Integer, ByVal FCOCCH_CCH_CODE_FK_PK As String, ByVal Original_FCOCCH_FCO_CODE_FK_PK As Integer, ByVal Original_FCOCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOCCH_FCO_CODE_FK_PK, Integer)
            If (FCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCOCCH_FCO_CODE_FK_PK, Integer)
            If (Original_FCOCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCOSAC_FCO_SUBACTTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOSAC_FCO_SUBACT"
            tableMapping.ColumnMappings.Add("FCOSAC_FCO_CODE_FK_PK", "FCOSAC_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOSAC_SAC_CODE_FK_PK", "FCOSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOSAC_FCO_SUBACT] WHERE (([FCOSAC_FCO_CODE_FK_PK] = @Or" & _
                "iginal_FCOSAC_FCO_CODE_FK_PK) AND ([FCOSAC_SAC_CODE_FK_PK] = @Original_FCOSAC_SA" & _
                "C_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOSAC_FCO_SUBACT] ([FCOSAC_FCO_CODE_FK_PK], [FCOSAC_SAC" & _
                "_CODE_FK_PK]) VALUES (@FCOSAC_FCO_CODE_FK_PK, @FCOSAC_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT F" & _
                "COSAC_FCO_CODE_FK_PK, FCOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCOSAC_FCO_SUBACT WHE" & _
                "RE (FCOSAC_FCO_CODE_FK_PK = @FCOSAC_FCO_CODE_FK_PK) AND (FCOSAC_SAC_CODE_FK_PK =" & _
                " @FCOSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOSAC_FCO_SUBACT] SET [FCOSAC_FCO_CODE_FK_PK] = @FCOSAC_FCO_" & _
                "CODE_FK_PK, [FCOSAC_SAC_CODE_FK_PK] = @FCOSAC_SAC_CODE_FK_PK WHERE (([FCOSAC_FCO" & _
                "_CODE_FK_PK] = @Original_FCOSAC_FCO_CODE_FK_PK) AND ([FCOSAC_SAC_CODE_FK_PK] = @" & _
                "Original_FCOSAC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOSAC_FCO_CODE_FK_PK, FCOSAC_SAC_CODE" & _
                "_FK_PK FROM THERIAQUE.FCOSAC_FCO_SUBACT WHERE (FCOSAC_FCO_CODE_FK_PK = @FCOSAC_F" & _
                "CO_CODE_FK_PK) AND (FCOSAC_SAC_CODE_FK_PK = @FCOSAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOSAC_FCO_CODE_FK_PK, FCOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCOSAC_FCO_SUB" & _
                "ACT"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOSAC_FCO_CODE_FK_PK, FCOSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCOSAC_FCO_SUB" & _
                "ACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOSAC_FCO_CODE_FK_PK = @FCOSAC_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOSAC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable = New dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable, ByVal FCOSAC_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOSAC_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOSAC_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOSAC_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable = New dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOSAC_FCO_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOSAC_FCO_SUBACT")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOSAC_FCO_CODE_FK_PK As Integer, ByVal Original_FCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOSAC_FCO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOSAC_FCO_CODE_FK_PK As Integer, ByVal FCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOSAC_FCO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOSAC_FCO_CODE_FK_PK As Integer, ByVal FCOSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FCOSAC_FCO_CODE_FK_PK As Integer, ByVal Original_FCOSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOSAC_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCOSAC_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCOSAU_FCO_SUBAUXTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOSAU_FCO_SUBAUX"
            tableMapping.ColumnMappings.Add("FCOSAU_FCO_CODE_FK_PK", "FCOSAU_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOSAU_SAU_CODE_FK_PK", "FCOSAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOSAU_FCO_SUBAUX] WHERE (([FCOSAU_FCO_CODE_FK_PK] = @Or"& _ 
                "iginal_FCOSAU_FCO_CODE_FK_PK) AND ([FCOSAU_SAU_CODE_FK_PK] = @Original_FCOSAU_SA"& _ 
                "U_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAU_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOSAU_FCO_SUBAUX] ([FCOSAU_FCO_CODE_FK_PK], [FCOSAU_SAU"& _ 
                "_CODE_FK_PK]) VALUES (@FCOSAU_FCO_CODE_FK_PK, @FCOSAU_SAU_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT F"& _ 
                "COSAU_FCO_CODE_FK_PK, FCOSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCOSAU_FCO_SUBAUX WHE"& _ 
                "RE (FCOSAU_FCO_CODE_FK_PK = @FCOSAU_FCO_CODE_FK_PK) AND (FCOSAU_SAU_CODE_FK_PK ="& _ 
                " @FCOSAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAU_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOSAU_FCO_SUBAUX] SET [FCOSAU_FCO_CODE_FK_PK] = @FCOSAU_FCO_"& _ 
                "CODE_FK_PK, [FCOSAU_SAU_CODE_FK_PK] = @FCOSAU_SAU_CODE_FK_PK WHERE (([FCOSAU_FCO"& _ 
                "_CODE_FK_PK] = @Original_FCOSAU_FCO_CODE_FK_PK) AND ([FCOSAU_SAU_CODE_FK_PK] = @"& _ 
                "Original_FCOSAU_SAU_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCOSAU_FCO_CODE_FK_PK, FCOSAU_SAU_CODE"& _ 
                "_FK_PK FROM THERIAQUE.FCOSAU_FCO_SUBAUX WHERE (FCOSAU_FCO_CODE_FK_PK = @FCOSAU_F"& _ 
                "CO_CODE_FK_PK) AND (FCOSAU_SAU_CODE_FK_PK = @FCOSAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAU_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAU_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOSAU_FCO_CODE_FK_PK, FCOSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCOSAU_FCO_SUB" & _
                "AUX"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOSAU_FCO_CODE_FK_PK, FCOSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCOSAU_FCO_SUB" & _
                "AUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOSAU_FCO_CODE_FK_PK = @FCOSAU_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSAU_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOSAU_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable = New dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable, ByVal FCOSAU_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOSAU_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOSAU_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOSAU_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable = New dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOSAU_FCO_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOSAU_FCO_SUBAUX")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOSAU_FCO_CODE_FK_PK As Integer, ByVal Original_FCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOSAU_FCO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOSAU_FCO_CODE_FK_PK As Integer, ByVal FCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOSAU_FCO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOSAU_FCO_CODE_FK_PK As Integer, ByVal FCOSAU_SAU_CODE_FK_PK As Integer, ByVal Original_FCOSAU_FCO_CODE_FK_PK As Integer, ByVal Original_FCOSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOSAU_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCOSAU_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCOPR_FCO_PRODTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOPR_FCO_PROD"
            tableMapping.ColumnMappings.Add("FCOPR_FCO_CODE_FK_PK", "FCOPR_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOPR_PR_CODE_FK_PK", "FCOPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOPR_FCO_PROD] WHERE (([FCOPR_FCO_CODE_FK_PK] = @Origin" & _
                "al_FCOPR_FCO_CODE_FK_PK) AND ([FCOPR_PR_CODE_FK_PK] = @Original_FCOPR_PR_CODE_FK" & _
                "_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOPR_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOPR_FCO_PROD] ([FCOPR_FCO_CODE_FK_PK], [FCOPR_PR_CODE_" & _
                "FK_PK]) VALUES (@FCOPR_FCO_CODE_FK_PK, @FCOPR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOPR_FCO_" & _
                "CODE_FK_PK, FCOPR_PR_CODE_FK_PK FROM THERIAQUE.FCOPR_FCO_PROD WHERE (FCOPR_FCO_C" & _
                "ODE_FK_PK = @FCOPR_FCO_CODE_FK_PK) AND (FCOPR_PR_CODE_FK_PK = @FCOPR_PR_CODE_FK_" & _
                "PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOPR_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOPR_FCO_PROD] SET [FCOPR_FCO_CODE_FK_PK] = @FCOPR_FCO_CODE_" & _
                "FK_PK, [FCOPR_PR_CODE_FK_PK] = @FCOPR_PR_CODE_FK_PK WHERE (([FCOPR_FCO_CODE_FK_P" & _
                "K] = @Original_FCOPR_FCO_CODE_FK_PK) AND ([FCOPR_PR_CODE_FK_PK] = @Original_FCOP" & _
                "R_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOPR_FCO_CODE_FK_PK, FCOPR_PR_CODE_FK_PK FROM THERIA" & _
                "QUE.FCOPR_FCO_PROD WHERE (FCOPR_FCO_CODE_FK_PK = @FCOPR_FCO_CODE_FK_PK) AND (FCO" & _
                "PR_PR_CODE_FK_PK = @FCOPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOPR_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOPR_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOPR_FCO_CODE_FK_PK, FCOPR_PR_CODE_FK_PK FROM THERIAQUE.FCOPR_FCO_PROD"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOPR_FCO_CODE_FK_PK, FCOPR_PR_CODE_FK_PK FROM THERIAQUE.FCOPR_FCO_PROD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "W" & _
                "HERE FCOPR_FCO_CODE_FK_PK = @FCOPR_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOPR_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOPR_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable = New dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable, ByVal FCOPR_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOPR_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOPR_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOPR_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable = New dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOPR_FCO_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOPR_FCO_PROD")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOPR_FCO_CODE_FK_PK As Integer, ByVal Original_FCOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOPR_FCO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOPR_FCO_CODE_FK_PK As Integer, ByVal FCOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOPR_FCO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOPR_FCO_CODE_FK_PK As Integer, ByVal FCOPR_PR_CODE_FK_PK As Integer, ByVal Original_FCOPR_FCO_CODE_FK_PK As Integer, ByVal Original_FCOPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOPR_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOPR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCOPR_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCOSP_CONDUCTEUR_SPECTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOSP_CONDUCTEUR_SPEC"
            tableMapping.ColumnMappings.Add("FCOSP_FCO_CODE_FK_PK", "FCOSP_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOSP_SP_CODE_FK_PK", "FCOSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOSP_CONDUCTEUR_SPEC] WHERE (([FCOSP_FCO_CODE_FK_PK] = "& _ 
                "@Original_FCOSP_FCO_CODE_FK_PK) AND ([FCOSP_SP_CODE_FK_PK] = @Original_FCOSP_SP_"& _ 
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSP_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOSP_CONDUCTEUR_SPEC] ([FCOSP_FCO_CODE_FK_PK], [FCOSP_S"& _ 
                "P_CODE_FK_PK]) VALUES (@FCOSP_FCO_CODE_FK_PK, @FCOSP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCO"& _ 
                "SP_FCO_CODE_FK_PK, FCOSP_SP_CODE_FK_PK FROM THERIAQUE.FCOSP_CONDUCTEUR_SPEC WHER"& _ 
                "E (FCOSP_FCO_CODE_FK_PK = @FCOSP_FCO_CODE_FK_PK) AND (FCOSP_SP_CODE_FK_PK = @FCO"& _ 
                "SP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSP_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOSP_CONDUCTEUR_SPEC] SET [FCOSP_FCO_CODE_FK_PK] = @FCOSP_FC"& _ 
                "O_CODE_FK_PK, [FCOSP_SP_CODE_FK_PK] = @FCOSP_SP_CODE_FK_PK WHERE (([FCOSP_FCO_CO"& _ 
                "DE_FK_PK] = @Original_FCOSP_FCO_CODE_FK_PK) AND ([FCOSP_SP_CODE_FK_PK] = @Origin"& _ 
                "al_FCOSP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCOSP_FCO_CODE_FK_PK, FCOSP_SP_CODE_FK_PK FROM"& _ 
                " THERIAQUE.FCOSP_CONDUCTEUR_SPEC WHERE (FCOSP_FCO_CODE_FK_PK = @FCOSP_FCO_CODE_F"& _ 
                "K_PK) AND (FCOSP_SP_CODE_FK_PK = @FCOSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSP_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSP_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOSP_FCO_CODE_FK_PK, FCOSP_SP_CODE_FK_PK FROM THERIAQUE.FCOSP_CONDUCTEUR_" & _
                "SPEC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOSP_FCO_CODE_FK_PK, FCOSP_SP_CODE_FK_PK FROM THERIAQUE.FCOSP_CONDUCTEUR_" & _
                "SPEC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOSP_FCO_CODE_FK_PK = @FCOSP_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOSP_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOSP_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable = New dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable, ByVal FCOSP_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOSP_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOSP_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOSP_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable = New dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOSP_CONDUCTEUR_SPECDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOSP_CONDUCTEUR_SPEC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOSP_FCO_CODE_FK_PK As Integer, ByVal Original_FCOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOSP_FCO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOSP_FCO_CODE_FK_PK As Integer, ByVal FCOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOSP_FCO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOSP_FCO_CODE_FK_PK As Integer, ByVal FCOSP_SP_CODE_FK_PK As Integer, ByVal Original_FCOSP_FCO_CODE_FK_PK As Integer, ByVal Original_FCOSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOSP_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOSP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCOSP_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCOREC_FCO_RECTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOREC_FCO_REC"
            tableMapping.ColumnMappings.Add("FCOREC_FCO_CODE_FK_PK", "FCOREC_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOREC_CDF_REC_CODE_FK_PK", "FCOREC_CDF_REC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOREC_NUMORD", "FCOREC_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOREC_FCO_REC] WHERE (([FCOREC_FCO_CODE_FK_PK] = @Origi" & _
                "nal_FCOREC_FCO_CODE_FK_PK) AND ([FCOREC_CDF_REC_CODE_FK_PK] = @Original_FCOREC_C" & _
                "DF_REC_CODE_FK_PK) AND ((@IsNull_FCOREC_NUMORD = 1 AND [FCOREC_NUMORD] IS NULL) " & _
                "OR ([FCOREC_NUMORD] = @Original_FCOREC_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOREC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOREC_CDF_REC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_CDF_REC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCOREC_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOREC_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOREC_FCO_REC] ([FCOREC_FCO_CODE_FK_PK], [FCOREC_CDF_RE" & _
                "C_CODE_FK_PK], [FCOREC_NUMORD]) VALUES (@FCOREC_FCO_CODE_FK_PK, @FCOREC_CDF_REC_" & _
                "CODE_FK_PK, @FCOREC_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOREC_FCO_CODE_FK_PK, FCOREC_CDF_REC_CODE_" & _
                "FK_PK, FCOREC_NUMORD FROM THERIAQUE.FCOREC_FCO_REC WHERE (FCOREC_CDF_REC_CODE_FK" & _
                "_PK = @FCOREC_CDF_REC_CODE_FK_PK) AND (FCOREC_FCO_CODE_FK_PK = @FCOREC_FCO_CODE_" & _
                "FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_CDF_REC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_CDF_REC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOREC_FCO_REC] SET [FCOREC_FCO_CODE_FK_PK] = @FCOREC_FCO_COD" & _
                "E_FK_PK, [FCOREC_CDF_REC_CODE_FK_PK] = @FCOREC_CDF_REC_CODE_FK_PK, [FCOREC_NUMOR" & _
                "D] = @FCOREC_NUMORD WHERE (([FCOREC_FCO_CODE_FK_PK] = @Original_FCOREC_FCO_CODE_" & _
                "FK_PK) AND ([FCOREC_CDF_REC_CODE_FK_PK] = @Original_FCOREC_CDF_REC_CODE_FK_PK) A" & _
                "ND ((@IsNull_FCOREC_NUMORD = 1 AND [FCOREC_NUMORD] IS NULL) OR ([FCOREC_NUMORD] " & _
                "= @Original_FCOREC_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOREC_FCO_CODE_FK_PK, FCOREC_CDF_REC_CODE" & _
                "_FK_PK, FCOREC_NUMORD FROM THERIAQUE.FCOREC_FCO_REC WHERE (FCOREC_CDF_REC_CODE_F" & _
                "K_PK = @FCOREC_CDF_REC_CODE_FK_PK) AND (FCOREC_FCO_CODE_FK_PK = @FCOREC_FCO_CODE" & _
                "_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_CDF_REC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_CDF_REC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOREC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOREC_CDF_REC_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_CDF_REC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCOREC_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOREC_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOREC_FCO_CODE_FK_PK, FCOREC_CDF_REC_CODE_FK_PK, FCOREC_NUMORD FROM THERI" & _
                "AQUE.FCOREC_FCO_REC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOREC_FCO_CODE_FK_PK, FCOREC_CDF_REC_CODE_FK_PK, FCOREC_NUMORD FROM THERI" & _
                "AQUE.FCOREC_FCO_REC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOREC_FCO_CODE_FK_PK = @FCOREC_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOREC_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOREC_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable = New dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable, ByVal FCOREC_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOREC_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOREC_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOREC_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable = New dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOREC_FCO_RECDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOREC_FCO_REC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOREC_FCO_CODE_FK_PK As Integer, ByVal Original_FCOREC_CDF_REC_CODE_FK_PK As String, ByVal Original_FCOREC_NUMORD As System.Nullable(Of Byte)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOREC_FCO_CODE_FK_PK, Integer)
            If (Original_FCOREC_CDF_REC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOREC_CDF_REC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOREC_CDF_REC_CODE_FK_PK, String)
            End If
            If (Original_FCOREC_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FCOREC_NUMORD.Value, Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOREC_FCO_CODE_FK_PK As Integer, ByVal FCOREC_CDF_REC_CODE_FK_PK As String, ByVal FCOREC_NUMORD As System.Nullable(Of Byte)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOREC_FCO_CODE_FK_PK, Integer)
            If (FCOREC_CDF_REC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOREC_CDF_REC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOREC_CDF_REC_CODE_FK_PK, String)
            End If
            If (FCOREC_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FCOREC_NUMORD.Value, Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOREC_FCO_CODE_FK_PK As Integer, ByVal FCOREC_CDF_REC_CODE_FK_PK As String, ByVal FCOREC_NUMORD As System.Nullable(Of Byte), ByVal Original_FCOREC_FCO_CODE_FK_PK As Integer, ByVal Original_FCOREC_CDF_REC_CODE_FK_PK As String, ByVal Original_FCOREC_NUMORD As System.Nullable(Of Byte)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOREC_FCO_CODE_FK_PK, Integer)
            If (FCOREC_CDF_REC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOREC_CDF_REC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOREC_CDF_REC_CODE_FK_PK, String)
            End If
            If (FCOREC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FCOREC_NUMORD.Value, Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOREC_FCO_CODE_FK_PK, Integer)
            If (Original_FCOREC_CDF_REC_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOREC_CDF_REC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FCOREC_CDF_REC_CODE_FK_PK, String)
            End If
            If (Original_FCOREC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FCOREC_NUMORD.Value, Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCOCOM_FCO_COMTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOCOM_FCO_COM"
            tableMapping.ColumnMappings.Add("FCOCOM_FCO_CODE_FK_PK", "FCOCOM_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOCOM_CDF_COM_CODE_FK_PK", "FCOCOM_CDF_COM_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOCOM_NUMORD", "FCOCOM_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOCOM_FCO_COM] WHERE (([FCOCOM_FCO_CODE_FK_PK] = @Origi"& _ 
                "nal_FCOCOM_FCO_CODE_FK_PK) AND ([FCOCOM_CDF_COM_CODE_FK_PK] = @Original_FCOCOM_C"& _ 
                "DF_COM_CODE_FK_PK) AND ((@IsNull_FCOCOM_NUMORD = 1 AND [FCOCOM_NUMORD] IS NULL) "& _ 
                "OR ([FCOCOM_NUMORD] = @Original_FCOCOM_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCOM_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCOM_CDF_COM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_CDF_COM_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCOCOM_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCOM_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOCOM_FCO_COM] ([FCOCOM_FCO_CODE_FK_PK], [FCOCOM_CDF_CO"& _ 
                "M_CODE_FK_PK], [FCOCOM_NUMORD]) VALUES (@FCOCOM_FCO_CODE_FK_PK, @FCOCOM_CDF_COM_"& _ 
                "CODE_FK_PK, @FCOCOM_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCOCOM_FCO_CODE_FK_PK, FCOCOM_CDF_COM_CODE_"& _ 
                "FK_PK, FCOCOM_NUMORD FROM THERIAQUE.FCOCOM_FCO_COM WHERE (FCOCOM_CDF_COM_CODE_FK"& _ 
                "_PK = @FCOCOM_CDF_COM_CODE_FK_PK) AND (FCOCOM_FCO_CODE_FK_PK = @FCOCOM_FCO_CODE_"& _ 
                "FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_CDF_COM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_CDF_COM_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOCOM_FCO_COM] SET [FCOCOM_FCO_CODE_FK_PK] = @FCOCOM_FCO_COD"& _ 
                "E_FK_PK, [FCOCOM_CDF_COM_CODE_FK_PK] = @FCOCOM_CDF_COM_CODE_FK_PK, [FCOCOM_NUMOR"& _ 
                "D] = @FCOCOM_NUMORD WHERE (([FCOCOM_FCO_CODE_FK_PK] = @Original_FCOCOM_FCO_CODE_"& _ 
                "FK_PK) AND ([FCOCOM_CDF_COM_CODE_FK_PK] = @Original_FCOCOM_CDF_COM_CODE_FK_PK) A"& _ 
                "ND ((@IsNull_FCOCOM_NUMORD = 1 AND [FCOCOM_NUMORD] IS NULL) OR ([FCOCOM_NUMORD] "& _ 
                "= @Original_FCOCOM_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCOCOM_FCO_CODE_FK_PK, FCOCOM_CDF_COM_CODE"& _ 
                "_FK_PK, FCOCOM_NUMORD FROM THERIAQUE.FCOCOM_FCO_COM WHERE (FCOCOM_CDF_COM_CODE_F"& _ 
                "K_PK = @FCOCOM_CDF_COM_CODE_FK_PK) AND (FCOCOM_FCO_CODE_FK_PK = @FCOCOM_FCO_CODE"& _ 
                "_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_CDF_COM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_CDF_COM_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCOM_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCOM_CDF_COM_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_CDF_COM_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCOCOM_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOCOM_NUMORD", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOCOM_FCO_CODE_FK_PK, FCOCOM_CDF_COM_CODE_FK_PK, FCOCOM_NUMORD FROM THERI" & _
                "AQUE.FCOCOM_FCO_COM"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOCOM_FCO_CODE_FK_PK, FCOCOM_CDF_COM_CODE_FK_PK, FCOCOM_NUMORD FROM THERI" & _
                "AQUE.FCOCOM_FCO_COM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOCOM_FCO_CODE_FK_PK = @FCOCOM_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOCOM_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOCOM_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable = New dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable, ByVal FCOCOM_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOCOM_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOCOM_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOCOM_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable = New dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOCOM_FCO_COMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOCOM_FCO_COM")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOCOM_FCO_CODE_FK_PK As Integer, ByVal Original_FCOCOM_CDF_COM_CODE_FK_PK As String, ByVal Original_FCOCOM_NUMORD As System.Nullable(Of Byte)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOCOM_FCO_CODE_FK_PK, Integer)
            If (Original_FCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOCOM_CDF_COM_CODE_FK_PK, String)
            End If
            If (Original_FCOCOM_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FCOCOM_NUMORD.Value, Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOCOM_FCO_CODE_FK_PK As Integer, ByVal FCOCOM_CDF_COM_CODE_FK_PK As String, ByVal FCOCOM_NUMORD As System.Nullable(Of Byte)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOCOM_FCO_CODE_FK_PK, Integer)
            If (FCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOCOM_CDF_COM_CODE_FK_PK, String)
            End If
            If (FCOCOM_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FCOCOM_NUMORD.Value, Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOCOM_FCO_CODE_FK_PK As Integer, ByVal FCOCOM_CDF_COM_CODE_FK_PK As String, ByVal FCOCOM_NUMORD As System.Nullable(Of Byte), ByVal Original_FCOCOM_FCO_CODE_FK_PK As Integer, ByVal Original_FCOCOM_CDF_COM_CODE_FK_PK As String, ByVal Original_FCOCOM_NUMORD As System.Nullable(Of Byte)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOCOM_FCO_CODE_FK_PK, Integer)
            If (FCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOCOM_CDF_COM_CODE_FK_PK, String)
            End If
            If (FCOCOM_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FCOCOM_NUMORD.Value, Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCOCOM_FCO_CODE_FK_PK, Integer)
            If (Original_FCOCOM_CDF_COM_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOCOM_CDF_COM_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FCOCOM_CDF_COM_CODE_FK_PK, String)
            End If
            If (Original_FCOCOM_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FCOCOM_NUMORD.Value, Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCOAFS_FCO_AFSSAPSTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCOAFS_FCO_AFSSAPS"
            tableMapping.ColumnMappings.Add("FCOAFS_FCO_CODE_FK_PK", "FCOAFS_FCO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOAFS_SP_CODE_FK_PK", "FCOAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCOAFS_DATE_PK", "FCOAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FCOAFS_CDF_DOCUMENT_FK_PK", "FCOAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCOAFS_FCO_AFSSAPS] WHERE (([FCOAFS_FCO_CODE_FK_PK] = @O" & _
                "riginal_FCOAFS_FCO_CODE_FK_PK) AND ([FCOAFS_SP_CODE_FK_PK] = @Original_FCOAFS_SP" & _
                "_CODE_FK_PK) AND ([FCOAFS_DATE_PK] = @Original_FCOAFS_DATE_PK) AND ([FCOAFS_CDF_" & _
                "DOCUMENT_FK_PK] = @Original_FCOAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_DATE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCOAFS_FCO_AFSSAPS] ([FCOAFS_FCO_CODE_FK_PK], [FCOAFS_SP" & _
                "_CODE_FK_PK], [FCOAFS_DATE_PK], [FCOAFS_CDF_DOCUMENT_FK_PK]) VALUES (@FCOAFS_FCO" & _
                "_CODE_FK_PK, @FCOAFS_SP_CODE_FK_PK, @FCOAFS_DATE_PK, @FCOAFS_CDF_DOCUMENT_FK_PK)" & _
                ";" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOAFS_FCO_CODE_FK_PK, FCOAFS_SP_CODE_FK_PK, FCOAFS_DATE_PK, FCOAFS_CD" & _
                "F_DOCUMENT_FK_PK FROM THERIAQUE.FCOAFS_FCO_AFSSAPS WHERE (FCOAFS_CDF_DOCUMENT_FK" & _
                "_PK = @FCOAFS_CDF_DOCUMENT_FK_PK) AND (FCOAFS_DATE_PK = @FCOAFS_DATE_PK) AND (FC" & _
                "OAFS_FCO_CODE_FK_PK = @FCOAFS_FCO_CODE_FK_PK) AND (FCOAFS_SP_CODE_FK_PK = @FCOAF" & _
                "S_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_DATE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCOAFS_FCO_AFSSAPS] SET [FCOAFS_FCO_CODE_FK_PK] = @FCOAFS_FCO" & _
                "_CODE_FK_PK, [FCOAFS_SP_CODE_FK_PK] = @FCOAFS_SP_CODE_FK_PK, [FCOAFS_DATE_PK] = " & _
                "@FCOAFS_DATE_PK, [FCOAFS_CDF_DOCUMENT_FK_PK] = @FCOAFS_CDF_DOCUMENT_FK_PK WHERE " & _
                "(([FCOAFS_FCO_CODE_FK_PK] = @Original_FCOAFS_FCO_CODE_FK_PK) AND ([FCOAFS_SP_COD" & _
                "E_FK_PK] = @Original_FCOAFS_SP_CODE_FK_PK) AND ([FCOAFS_DATE_PK] = @Original_FCO" & _
                "AFS_DATE_PK) AND ([FCOAFS_CDF_DOCUMENT_FK_PK] = @Original_FCOAFS_CDF_DOCUMENT_FK" & _
                "_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCOAFS_FCO_CODE_FK_PK, FCOAFS_SP_CODE_FK_PK, FCOAFS_DATE_PK, FCOA" & _
                "FS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FCOAFS_FCO_AFSSAPS WHERE (FCOAFS_CDF_DOCUME" & _
                "NT_FK_PK = @FCOAFS_CDF_DOCUMENT_FK_PK) AND (FCOAFS_DATE_PK = @FCOAFS_DATE_PK) AN" & _
                "D (FCOAFS_FCO_CODE_FK_PK = @FCOAFS_FCO_CODE_FK_PK) AND (FCOAFS_SP_CODE_FK_PK = @" & _
                "FCOAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_DATE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_FCO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_DATE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCOAFS_FCO_CODE_FK_PK, FCOAFS_SP_CODE_FK_PK, FCOAFS_DATE_PK, FCOAFS_CDF_DO" & _
                "CUMENT_FK_PK FROM THERIAQUE.FCOAFS_FCO_AFSSAPS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCOAFS_FCO_CODE_FK_PK, FCOAFS_SP_CODE_FK_PK, FCOAFS_DATE_PK, FCOAFS_CDF_DO" & _
                "CUMENT_FK_PK FROM THERIAQUE.FCOAFS_FCO_AFSSAPS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCOAFS_FCO_CODE_FK_PK = @F" & _
                "COAFS_FCO_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCOAFS_FCO_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCOAFS_FCO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable = New dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable, ByVal FCOAFS_FCO_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOAFS_FCO_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCOAFS_FCO_CODE_FK_PK As Integer) As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCOAFS_FCO_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable = New dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Conducteur.FCOAFS_FCO_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Conducteur) As Integer
            Return Me.Adapter.Update(dataSet, "FCOAFS_FCO_AFSSAPS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCOAFS_FCO_CODE_FK_PK As Integer, ByVal Original_FCOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FCOAFS_DATE_PK As Date, ByVal Original_FCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCOAFS_FCO_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FCOAFS_DATE_PK, Date)
            If (Original_FCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FCOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCOAFS_FCO_CODE_FK_PK As Integer, ByVal FCOAFS_SP_CODE_FK_PK As Integer, ByVal FCOAFS_DATE_PK As Date, ByVal FCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCOAFS_FCO_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FCOAFS_DATE_PK, Date)
            If (FCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FCOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCOAFS_FCO_CODE_FK_PK As Integer, ByVal FCOAFS_SP_CODE_FK_PK As Integer, ByVal FCOAFS_DATE_PK As Date, ByVal FCOAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FCOAFS_FCO_CODE_FK_PK As Integer, ByVal Original_FCOAFS_SP_CODE_FK_PK As Integer, ByVal Original_FCOAFS_DATE_PK As Date, ByVal Original_FCOAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCOAFS_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FCOAFS_DATE_PK, Date)
            If (FCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FCOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FCOAFS_FCO_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FCOAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FCOAFS_DATE_PK, Date)
            If (Original_FCOAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCOAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FCOAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
