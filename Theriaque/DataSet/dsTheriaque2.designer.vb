'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.42
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque2"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque2
    Inherits System.Data.DataSet
    
    Private tableCEPH_CLASSEEPHMRA As CEPH_CLASSEEPHMRADataTable
    
    Private tableSYFEPH_SYNONYMEFR_EPHMRA As SYFEPH_SYNONYMEFR_EPHMRADataTable
    
    Private tableSYAEPH_SYNONYMEANGLAIS_EPHMRA As SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
    
    Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
    
    Private relationFK1_SYAEPH_SYNONYMEANGLAIS_EPH As System.Data.DataRelation
    
    Private relationFK4_SP_SPECIALITE As System.Data.DataRelation
    
    Private relationFK1_SYFEPH_SYNONYMEFR_EPHMRA As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CEPH_CLASSEEPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New CEPH_CLASSEEPHMRADataTable(ds.Tables("CEPH_CLASSEEPHMRA")))
            End If
            If (Not (ds.Tables("SYFEPH_SYNONYMEFR_EPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New SYFEPH_SYNONYMEFR_EPHMRADataTable(ds.Tables("SYFEPH_SYNONYMEFR_EPHMRA")))
            End If
            If (Not (ds.Tables("SYAEPH_SYNONYMEANGLAIS_EPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable(ds.Tables("SYAEPH_SYNONYMEANGLAIS_EPHMRA")))
            End If
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEPH_CLASSEEPHMRA() As CEPH_CLASSEEPHMRADataTable
        Get
            Return Me.tableCEPH_CLASSEEPHMRA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYFEPH_SYNONYMEFR_EPHMRA() As SYFEPH_SYNONYMEFR_EPHMRADataTable
        Get
            Return Me.tableSYFEPH_SYNONYMEFR_EPHMRA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYAEPH_SYNONYMEANGLAIS_EPHMRA() As SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
        Get
            Return Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SP_SPECIALITE() As SP_SPECIALITEDataTable
        Get
            Return Me.tableSP_SPECIALITE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque2 = CType(MyBase.Clone,dsTheriaque2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CEPH_CLASSEEPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New CEPH_CLASSEEPHMRADataTable(ds.Tables("CEPH_CLASSEEPHMRA")))
            End If
            If (Not (ds.Tables("SYFEPH_SYNONYMEFR_EPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New SYFEPH_SYNONYMEFR_EPHMRADataTable(ds.Tables("SYFEPH_SYNONYMEFR_EPHMRA")))
            End If
            If (Not (ds.Tables("SYAEPH_SYNONYMEANGLAIS_EPHMRA")) Is Nothing) Then
                MyBase.Tables.Add(New SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable(ds.Tables("SYAEPH_SYNONYMEANGLAIS_EPHMRA")))
            End If
            If (Not (ds.Tables("SP_SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New SP_SPECIALITEDataTable(ds.Tables("SP_SPECIALITE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCEPH_CLASSEEPHMRA = CType(MyBase.Tables("CEPH_CLASSEEPHMRA"),CEPH_CLASSEEPHMRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCEPH_CLASSEEPHMRA) Is Nothing) Then
                Me.tableCEPH_CLASSEEPHMRA.InitVars
            End If
        End If
        Me.tableSYFEPH_SYNONYMEFR_EPHMRA = CType(MyBase.Tables("SYFEPH_SYNONYMEFR_EPHMRA"),SYFEPH_SYNONYMEFR_EPHMRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYFEPH_SYNONYMEFR_EPHMRA) Is Nothing) Then
                Me.tableSYFEPH_SYNONYMEFR_EPHMRA.InitVars
            End If
        End If
        Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA = CType(MyBase.Tables("SYAEPH_SYNONYMEANGLAIS_EPHMRA"),SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA) Is Nothing) Then
                Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA.InitVars
            End If
        End If
        Me.tableSP_SPECIALITE = CType(MyBase.Tables("SP_SPECIALITE"),SP_SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSP_SPECIALITE) Is Nothing) Then
                Me.tableSP_SPECIALITE.InitVars
            End If
        End If
        Me.relationFK1_SYAEPH_SYNONYMEANGLAIS_EPH = Me.Relations("FK1_SYAEPH_SYNONYMEANGLAIS_EPH")
        Me.relationFK4_SP_SPECIALITE = Me.Relations("FK4_SP_SPECIALITE")
        Me.relationFK1_SYFEPH_SYNONYMEFR_EPHMRA = Me.Relations("FK1_SYFEPH_SYNONYMEFR_EPHMRA")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque2.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCEPH_CLASSEEPHMRA = New CEPH_CLASSEEPHMRADataTable
        MyBase.Tables.Add(Me.tableCEPH_CLASSEEPHMRA)
        Me.tableSYFEPH_SYNONYMEFR_EPHMRA = New SYFEPH_SYNONYMEFR_EPHMRADataTable
        MyBase.Tables.Add(Me.tableSYFEPH_SYNONYMEFR_EPHMRA)
        Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA = New SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
        MyBase.Tables.Add(Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA)
        Me.tableSP_SPECIALITE = New SP_SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableSP_SPECIALITE)
        Me.relationFK1_SYAEPH_SYNONYMEANGLAIS_EPH = New System.Data.DataRelation("FK1_SYAEPH_SYNONYMEANGLAIS_EPH", New System.Data.DataColumn() {Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA.SYAEPH_CEPH_CODE_FK_PKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYAEPH_SYNONYMEANGLAIS_EPH)
        Me.relationFK4_SP_SPECIALITE = New System.Data.DataRelation("FK4_SP_SPECIALITE", New System.Data.DataColumn() {Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK4_SP_SPECIALITE)
        Me.relationFK1_SYFEPH_SYNONYMEFR_EPHMRA = New System.Data.DataRelation("FK1_SYFEPH_SYNONYMEFR_EPHMRA", New System.Data.DataColumn() {Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn}, New System.Data.DataColumn() {Me.tableSYFEPH_SYNONYMEFR_EPHMRA.SYFEPH_CEPH_CODE_FKColumn}, false)
        Me.Relations.Add(Me.relationFK1_SYFEPH_SYNONYMEFR_EPHMRA)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCEPH_CLASSEEPHMRA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYFEPH_SYNONYMEFR_EPHMRA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYAEPH_SYNONYMEANGLAIS_EPHMRA() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSP_SPECIALITE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque2 = New dsTheriaque2
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub CEPH_CLASSEEPHMRARowChangeEventHandler(ByVal sender As Object, ByVal e As CEPH_CLASSEEPHMRARowChangeEvent)
    
    Public Delegate Sub SYFEPH_SYNONYMEFR_EPHMRARowChangeEventHandler(ByVal sender As Object, ByVal e As SYFEPH_SYNONYMEFR_EPHMRARowChangeEvent)
    
    Public Delegate Sub SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEventHandler(ByVal sender As Object, ByVal e As SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEvent)
    
    Public Delegate Sub SP_SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As SP_SPECIALITERowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CEPH_CLASSEEPHMRADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCEPH_CODE_PK As System.Data.DataColumn
        
        Private columnCEPH_CEPH_CODE_FK As System.Data.DataColumn
        
        Private columnCEPH_NOMF As System.Data.DataColumn
        
        Private columnCEPH_NOMA As System.Data.DataColumn
        
        Private columnCEPH_DATECR As System.Data.DataColumn
        
        Private columnCEPH_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CEPH_CLASSEEPHMRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_CEPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_CEPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_NOMFColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_NOMF
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_NOMAColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_NOMA
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEPH_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnCEPH_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEPH_CLASSEEPHMRARow
            Get
                Return CType(Me.Rows(index),CEPH_CLASSEEPHMRARow)
            End Get
        End Property
        
        Public Event CEPH_CLASSEEPHMRARowChanging As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        Public Event CEPH_CLASSEEPHMRARowChanged As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        Public Event CEPH_CLASSEEPHMRARowDeleting As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        Public Event CEPH_CLASSEEPHMRARowDeleted As CEPH_CLASSEEPHMRARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCEPH_CLASSEEPHMRARow(ByVal row As CEPH_CLASSEEPHMRARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCEPH_CLASSEEPHMRARow(ByVal CEPH_CODE_PK As String, ByVal CEPH_CEPH_CODE_FK As String, ByVal CEPH_NOMF As String, ByVal CEPH_NOMA As String, ByVal CEPH_DATECR As Date, ByVal CEPH_DATEMJ As Date) As CEPH_CLASSEEPHMRARow
            Dim rowCEPH_CLASSEEPHMRARow As CEPH_CLASSEEPHMRARow = CType(Me.NewRow,CEPH_CLASSEEPHMRARow)
            rowCEPH_CLASSEEPHMRARow.ItemArray = New Object() {CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_DATEMJ}
            Me.Rows.Add(rowCEPH_CLASSEEPHMRARow)
            Return rowCEPH_CLASSEEPHMRARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCEPH_CODE_PK(ByVal CEPH_CODE_PK As String) As CEPH_CLASSEEPHMRARow
            Return CType(Me.Rows.Find(New Object() {CEPH_CODE_PK}),CEPH_CLASSEEPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CEPH_CLASSEEPHMRADataTable = CType(MyBase.Clone,CEPH_CLASSEEPHMRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CEPH_CLASSEEPHMRADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCEPH_CODE_PK = MyBase.Columns("CEPH_CODE_PK")
            Me.columnCEPH_CEPH_CODE_FK = MyBase.Columns("CEPH_CEPH_CODE_FK")
            Me.columnCEPH_NOMF = MyBase.Columns("CEPH_NOMF")
            Me.columnCEPH_NOMA = MyBase.Columns("CEPH_NOMA")
            Me.columnCEPH_DATECR = MyBase.Columns("CEPH_DATECR")
            Me.columnCEPH_DATEMJ = MyBase.Columns("CEPH_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCEPH_CODE_PK = New System.Data.DataColumn("CEPH_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_CODE_PK)
            Me.columnCEPH_CEPH_CODE_FK = New System.Data.DataColumn("CEPH_CEPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_CEPH_CODE_FK)
            Me.columnCEPH_NOMF = New System.Data.DataColumn("CEPH_NOMF", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_NOMF)
            Me.columnCEPH_NOMA = New System.Data.DataColumn("CEPH_NOMA", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_NOMA)
            Me.columnCEPH_DATECR = New System.Data.DataColumn("CEPH_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_DATECR)
            Me.columnCEPH_DATEMJ = New System.Data.DataColumn("CEPH_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEPH_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCEPH_CODE_PK}, true))
            Me.columnCEPH_CODE_PK.AllowDBNull = false
            Me.columnCEPH_CODE_PK.Unique = true
            Me.columnCEPH_CODE_PK.MaxLength = 10
            Me.columnCEPH_CEPH_CODE_FK.MaxLength = 10
            Me.columnCEPH_NOMF.AllowDBNull = false
            Me.columnCEPH_NOMF.MaxLength = 77
            Me.columnCEPH_NOMA.AllowDBNull = false
            Me.columnCEPH_NOMA.MaxLength = 77
            Me.columnCEPH_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCEPH_CLASSEEPHMRARow() As CEPH_CLASSEEPHMRARow
            Return CType(Me.NewRow,CEPH_CLASSEEPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CEPH_CLASSEEPHMRARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CEPH_CLASSEEPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowChangedEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowChanged(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowChangingEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowChanging(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowDeletedEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowDeleted(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEPH_CLASSEEPHMRARowDeletingEvent) Is Nothing) Then
                RaiseEvent CEPH_CLASSEEPHMRARowDeleting(Me, New CEPH_CLASSEEPHMRARowChangeEvent(CType(e.Row,CEPH_CLASSEEPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCEPH_CLASSEEPHMRARow(ByVal row As CEPH_CLASSEEPHMRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque2 = New dsTheriaque2
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CEPH_CLASSEEPHMRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYFEPH_SYNONYMEFR_EPHMRADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYFEPH_NOM_PK As System.Data.DataColumn
        
        Private columnSYFEPH_CEPH_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYFEPH_SYNONYMEFR_EPHMRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFEPH_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYFEPH_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYFEPH_CEPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYFEPH_CEPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYFEPH_SYNONYMEFR_EPHMRARow
            Get
                Return CType(Me.Rows(index),SYFEPH_SYNONYMEFR_EPHMRARow)
            End Get
        End Property
        
        Public Event SYFEPH_SYNONYMEFR_EPHMRARowChanging As SYFEPH_SYNONYMEFR_EPHMRARowChangeEventHandler
        
        Public Event SYFEPH_SYNONYMEFR_EPHMRARowChanged As SYFEPH_SYNONYMEFR_EPHMRARowChangeEventHandler
        
        Public Event SYFEPH_SYNONYMEFR_EPHMRARowDeleting As SYFEPH_SYNONYMEFR_EPHMRARowChangeEventHandler
        
        Public Event SYFEPH_SYNONYMEFR_EPHMRARowDeleted As SYFEPH_SYNONYMEFR_EPHMRARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYFEPH_SYNONYMEFR_EPHMRARow(ByVal row As SYFEPH_SYNONYMEFR_EPHMRARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYFEPH_SYNONYMEFR_EPHMRARow(ByVal SYFEPH_NOM_PK As String, ByVal parentCEPH_CLASSEEPHMRARowByFK1_SYFEPH_SYNONYMEFR_EPHMRA As CEPH_CLASSEEPHMRARow) As SYFEPH_SYNONYMEFR_EPHMRARow
            Dim rowSYFEPH_SYNONYMEFR_EPHMRARow As SYFEPH_SYNONYMEFR_EPHMRARow = CType(Me.NewRow,SYFEPH_SYNONYMEFR_EPHMRARow)
            rowSYFEPH_SYNONYMEFR_EPHMRARow.ItemArray = New Object() {SYFEPH_NOM_PK, parentCEPH_CLASSEEPHMRARowByFK1_SYFEPH_SYNONYMEFR_EPHMRA(0)}
            Me.Rows.Add(rowSYFEPH_SYNONYMEFR_EPHMRARow)
            Return rowSYFEPH_SYNONYMEFR_EPHMRARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYFEPH_NOM_PK(ByVal SYFEPH_NOM_PK As String) As SYFEPH_SYNONYMEFR_EPHMRARow
            Return CType(Me.Rows.Find(New Object() {SYFEPH_NOM_PK}),SYFEPH_SYNONYMEFR_EPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYFEPH_SYNONYMEFR_EPHMRADataTable = CType(MyBase.Clone,SYFEPH_SYNONYMEFR_EPHMRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYFEPH_SYNONYMEFR_EPHMRADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYFEPH_NOM_PK = MyBase.Columns("SYFEPH_NOM_PK")
            Me.columnSYFEPH_CEPH_CODE_FK = MyBase.Columns("SYFEPH_CEPH_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYFEPH_NOM_PK = New System.Data.DataColumn("SYFEPH_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFEPH_NOM_PK)
            Me.columnSYFEPH_CEPH_CODE_FK = New System.Data.DataColumn("SYFEPH_CEPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYFEPH_CEPH_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYFEPH_NOM_PK}, true))
            Me.columnSYFEPH_NOM_PK.AllowDBNull = false
            Me.columnSYFEPH_NOM_PK.Unique = true
            Me.columnSYFEPH_NOM_PK.MaxLength = 36
            Me.columnSYFEPH_CEPH_CODE_FK.AllowDBNull = false
            Me.columnSYFEPH_CEPH_CODE_FK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYFEPH_SYNONYMEFR_EPHMRARow() As SYFEPH_SYNONYMEFR_EPHMRARow
            Return CType(Me.NewRow,SYFEPH_SYNONYMEFR_EPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYFEPH_SYNONYMEFR_EPHMRARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYFEPH_SYNONYMEFR_EPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYFEPH_SYNONYMEFR_EPHMRARowChangedEvent) Is Nothing) Then
                RaiseEvent SYFEPH_SYNONYMEFR_EPHMRARowChanged(Me, New SYFEPH_SYNONYMEFR_EPHMRARowChangeEvent(CType(e.Row,SYFEPH_SYNONYMEFR_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYFEPH_SYNONYMEFR_EPHMRARowChangingEvent) Is Nothing) Then
                RaiseEvent SYFEPH_SYNONYMEFR_EPHMRARowChanging(Me, New SYFEPH_SYNONYMEFR_EPHMRARowChangeEvent(CType(e.Row,SYFEPH_SYNONYMEFR_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYFEPH_SYNONYMEFR_EPHMRARowDeletedEvent) Is Nothing) Then
                RaiseEvent SYFEPH_SYNONYMEFR_EPHMRARowDeleted(Me, New SYFEPH_SYNONYMEFR_EPHMRARowChangeEvent(CType(e.Row,SYFEPH_SYNONYMEFR_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYFEPH_SYNONYMEFR_EPHMRARowDeletingEvent) Is Nothing) Then
                RaiseEvent SYFEPH_SYNONYMEFR_EPHMRARowDeleting(Me, New SYFEPH_SYNONYMEFR_EPHMRARowChangeEvent(CType(e.Row,SYFEPH_SYNONYMEFR_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYFEPH_SYNONYMEFR_EPHMRARow(ByVal row As SYFEPH_SYNONYMEFR_EPHMRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque2 = New dsTheriaque2
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYFEPH_SYNONYMEFR_EPHMRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYAEPH_NOM_PK As System.Data.DataColumn
        
        Private columnSYAEPH_CEPH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYAEPH_SYNONYMEANGLAIS_EPHMRA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYAEPH_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYAEPH_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYAEPH_CEPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYAEPH_CEPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYAEPH_SYNONYMEANGLAIS_EPHMRARow
            Get
                Return CType(Me.Rows(index),SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
            End Get
        End Property
        
        Public Event SYAEPH_SYNONYMEANGLAIS_EPHMRARowChanging As SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEventHandler
        
        Public Event SYAEPH_SYNONYMEANGLAIS_EPHMRARowChanged As SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEventHandler
        
        Public Event SYAEPH_SYNONYMEANGLAIS_EPHMRARowDeleting As SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEventHandler
        
        Public Event SYAEPH_SYNONYMEANGLAIS_EPHMRARowDeleted As SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYAEPH_SYNONYMEANGLAIS_EPHMRARow(ByVal row As SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYAEPH_SYNONYMEANGLAIS_EPHMRARow(ByVal SYAEPH_NOM_PK As String, ByVal parentCEPH_CLASSEEPHMRARowByFK1_SYAEPH_SYNONYMEANGLAIS_EPH As CEPH_CLASSEEPHMRARow) As SYAEPH_SYNONYMEANGLAIS_EPHMRARow
            Dim rowSYAEPH_SYNONYMEANGLAIS_EPHMRARow As SYAEPH_SYNONYMEANGLAIS_EPHMRARow = CType(Me.NewRow,SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
            rowSYAEPH_SYNONYMEANGLAIS_EPHMRARow.ItemArray = New Object() {SYAEPH_NOM_PK, parentCEPH_CLASSEEPHMRARowByFK1_SYAEPH_SYNONYMEANGLAIS_EPH(0)}
            Me.Rows.Add(rowSYAEPH_SYNONYMEANGLAIS_EPHMRARow)
            Return rowSYAEPH_SYNONYMEANGLAIS_EPHMRARow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYAEPH_NOM_PKSYAEPH_CEPH_CODE_FK_PK(ByVal SYAEPH_NOM_PK As String, ByVal SYAEPH_CEPH_CODE_FK_PK As String) As SYAEPH_SYNONYMEANGLAIS_EPHMRARow
            Return CType(Me.Rows.Find(New Object() {SYAEPH_NOM_PK, SYAEPH_CEPH_CODE_FK_PK}),SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable = CType(MyBase.Clone,SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYAEPH_NOM_PK = MyBase.Columns("SYAEPH_NOM_PK")
            Me.columnSYAEPH_CEPH_CODE_FK_PK = MyBase.Columns("SYAEPH_CEPH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYAEPH_NOM_PK = New System.Data.DataColumn("SYAEPH_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYAEPH_NOM_PK)
            Me.columnSYAEPH_CEPH_CODE_FK_PK = New System.Data.DataColumn("SYAEPH_CEPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYAEPH_CEPH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYAEPH_NOM_PK, Me.columnSYAEPH_CEPH_CODE_FK_PK}, true))
            Me.columnSYAEPH_NOM_PK.AllowDBNull = false
            Me.columnSYAEPH_NOM_PK.MaxLength = 36
            Me.columnSYAEPH_CEPH_CODE_FK_PK.AllowDBNull = false
            Me.columnSYAEPH_CEPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYAEPH_SYNONYMEANGLAIS_EPHMRARow() As SYAEPH_SYNONYMEANGLAIS_EPHMRARow
            Return CType(Me.NewRow,SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYAEPH_SYNONYMEANGLAIS_EPHMRARow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangedEvent) Is Nothing) Then
                RaiseEvent SYAEPH_SYNONYMEANGLAIS_EPHMRARowChanged(Me, New SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEvent(CType(e.Row,SYAEPH_SYNONYMEANGLAIS_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangingEvent) Is Nothing) Then
                RaiseEvent SYAEPH_SYNONYMEANGLAIS_EPHMRARowChanging(Me, New SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEvent(CType(e.Row,SYAEPH_SYNONYMEANGLAIS_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYAEPH_SYNONYMEANGLAIS_EPHMRARowDeletedEvent) Is Nothing) Then
                RaiseEvent SYAEPH_SYNONYMEANGLAIS_EPHMRARowDeleted(Me, New SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEvent(CType(e.Row,SYAEPH_SYNONYMEANGLAIS_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYAEPH_SYNONYMEANGLAIS_EPHMRARowDeletingEvent) Is Nothing) Then
                RaiseEvent SYAEPH_SYNONYMEANGLAIS_EPHMRARowDeleting(Me, New SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEvent(CType(e.Row,SYAEPH_SYNONYMEANGLAIS_EPHMRARow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYAEPH_SYNONYMEANGLAIS_EPHMRARow(ByVal row As SYAEPH_SYNONYMEANGLAIS_EPHMRARow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque2 = New dsTheriaque2
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SP_SPECIALITEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSP_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnSP_GSP_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CDF_SLAB_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CDF_LI_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CATC_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CEPH_CODE_FK As System.Data.DataColumn
        
        Private columnSP_CGE_CODE_FK As System.Data.DataColumn
        
        Private columnSP_PR_CODE_FK As System.Data.DataColumn
        
        Private columnSP_TYPE_SPE As System.Data.DataColumn
        
        Private columnSP_GREF_FK As System.Data.DataColumn
        
        Private columnSP_GREF_DATECR_FK As System.Data.DataColumn
        
        Private columnSP_NOM As System.Data.DataColumn
        
        Private columnSP_NOMCOMP As System.Data.DataColumn
        
        Private columnSP_PH As System.Data.DataColumn
        
        Private columnSP_CIPUCD As System.Data.DataColumn
        
        Private columnSP_DATECR As System.Data.DataColumn
        
        Private columnSP_DATEMJ As System.Data.DataColumn
        
        Private columnSP_NL As System.Data.DataColumn
        
        Private columnSP_APHP As System.Data.DataColumn
        
        Private columnSP_DATEJOGENE As System.Data.DataColumn
        
        Private columnSP_ORIGINE_GENE As System.Data.DataColumn
        
        Private columnSP_NOMLONG As System.Data.DataColumn
        
        Private columnSP_CDT_PRESCR_TEXTE As System.Data.DataColumn
        
        Private columnSP_ATC_DDD_TEXTE As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SP_SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GSP_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_GSP_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_SLAB_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_SLAB_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDF_LI_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CDF_LI_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CATC_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CATC_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CEPH_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CEPH_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CGE_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CGE_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PR_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_PR_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_TYPE_SPEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_TYPE_SPE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_GREF_DATECR_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_GREF_DATECR_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMCOMPColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NOMCOMP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_PHColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_PH
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CIPUCDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CIPUCD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NLColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_APHPColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_APHP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_DATEJOGENEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_DATEJOGENE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ORIGINE_GENEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_ORIGINE_GENE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_NOMLONGColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_NOMLONG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_CDT_PRESCR_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_CDT_PRESCR_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SP_ATC_DDD_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSP_ATC_DDD_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SP_SPECIALITERow
            Get
                Return CType(Me.Rows(index),SP_SPECIALITERow)
            End Get
        End Property
        
        Public Event SP_SPECIALITERowChanging As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowChanged As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleting As SP_SPECIALITERowChangeEventHandler
        
        Public Event SP_SPECIALITERowDeleted As SP_SPECIALITERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSP_SPECIALITERow( _
                    ByVal SP_CODE_SQ_PK As Integer,  _
                    ByVal SP_GSP_CODE_FK As Integer,  _
                    ByVal SP_CDF_SLAB_CODE_FK As String,  _
                    ByVal SP_CDF_LI_CODE_FK As String,  _
                    ByVal SP_CATC_CODE_FK As String,  _
                    ByVal parentCEPH_CLASSEEPHMRARowByFK4_SP_SPECIALITE As CEPH_CLASSEEPHMRARow,  _
                    ByVal SP_CGE_CODE_FK As Integer,  _
                    ByVal SP_PR_CODE_FK As Integer,  _
                    ByVal SP_TYPE_SPE As String,  _
                    ByVal SP_GREF_FK As Integer,  _
                    ByVal SP_GREF_DATECR_FK As Date,  _
                    ByVal SP_NOM As String,  _
                    ByVal SP_NOMCOMP As String,  _
                    ByVal SP_PH As String,  _
                    ByVal SP_CIPUCD As String,  _
                    ByVal SP_DATECR As Date,  _
                    ByVal SP_DATEMJ As Date,  _
                    ByVal SP_NL As String,  _
                    ByVal SP_APHP As String,  _
                    ByVal SP_DATEJOGENE As Date,  _
                    ByVal SP_ORIGINE_GENE As String,  _
                    ByVal SP_NOMLONG As String,  _
                    ByVal SP_CDT_PRESCR_TEXTE As String,  _
                    ByVal SP_ATC_DDD_TEXTE As String) As SP_SPECIALITERow
            Dim rowSP_SPECIALITERow As SP_SPECIALITERow = CType(Me.NewRow,SP_SPECIALITERow)
            rowSP_SPECIALITERow.ItemArray = New Object() {SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, parentCEPH_CLASSEEPHMRARowByFK4_SP_SPECIALITE(0), SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE}
            Me.Rows.Add(rowSP_SPECIALITERow)
            Return rowSP_SPECIALITERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySP_CODE_SQ_PK(ByVal SP_CODE_SQ_PK As Integer) As SP_SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {SP_CODE_SQ_PK}),SP_SPECIALITERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SP_SPECIALITEDataTable = CType(MyBase.Clone,SP_SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SP_SPECIALITEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSP_CODE_SQ_PK = MyBase.Columns("SP_CODE_SQ_PK")
            Me.columnSP_GSP_CODE_FK = MyBase.Columns("SP_GSP_CODE_FK")
            Me.columnSP_CDF_SLAB_CODE_FK = MyBase.Columns("SP_CDF_SLAB_CODE_FK")
            Me.columnSP_CDF_LI_CODE_FK = MyBase.Columns("SP_CDF_LI_CODE_FK")
            Me.columnSP_CATC_CODE_FK = MyBase.Columns("SP_CATC_CODE_FK")
            Me.columnSP_CEPH_CODE_FK = MyBase.Columns("SP_CEPH_CODE_FK")
            Me.columnSP_CGE_CODE_FK = MyBase.Columns("SP_CGE_CODE_FK")
            Me.columnSP_PR_CODE_FK = MyBase.Columns("SP_PR_CODE_FK")
            Me.columnSP_TYPE_SPE = MyBase.Columns("SP_TYPE_SPE")
            Me.columnSP_GREF_FK = MyBase.Columns("SP_GREF_FK")
            Me.columnSP_GREF_DATECR_FK = MyBase.Columns("SP_GREF_DATECR_FK")
            Me.columnSP_NOM = MyBase.Columns("SP_NOM")
            Me.columnSP_NOMCOMP = MyBase.Columns("SP_NOMCOMP")
            Me.columnSP_PH = MyBase.Columns("SP_PH")
            Me.columnSP_CIPUCD = MyBase.Columns("SP_CIPUCD")
            Me.columnSP_DATECR = MyBase.Columns("SP_DATECR")
            Me.columnSP_DATEMJ = MyBase.Columns("SP_DATEMJ")
            Me.columnSP_NL = MyBase.Columns("SP_NL")
            Me.columnSP_APHP = MyBase.Columns("SP_APHP")
            Me.columnSP_DATEJOGENE = MyBase.Columns("SP_DATEJOGENE")
            Me.columnSP_ORIGINE_GENE = MyBase.Columns("SP_ORIGINE_GENE")
            Me.columnSP_NOMLONG = MyBase.Columns("SP_NOMLONG")
            Me.columnSP_CDT_PRESCR_TEXTE = MyBase.Columns("SP_CDT_PRESCR_TEXTE")
            Me.columnSP_ATC_DDD_TEXTE = MyBase.Columns("SP_ATC_DDD_TEXTE")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSP_CODE_SQ_PK = New System.Data.DataColumn("SP_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CODE_SQ_PK)
            Me.columnSP_GSP_CODE_FK = New System.Data.DataColumn("SP_GSP_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GSP_CODE_FK)
            Me.columnSP_CDF_SLAB_CODE_FK = New System.Data.DataColumn("SP_CDF_SLAB_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_SLAB_CODE_FK)
            Me.columnSP_CDF_LI_CODE_FK = New System.Data.DataColumn("SP_CDF_LI_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDF_LI_CODE_FK)
            Me.columnSP_CATC_CODE_FK = New System.Data.DataColumn("SP_CATC_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CATC_CODE_FK)
            Me.columnSP_CEPH_CODE_FK = New System.Data.DataColumn("SP_CEPH_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CEPH_CODE_FK)
            Me.columnSP_CGE_CODE_FK = New System.Data.DataColumn("SP_CGE_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CGE_CODE_FK)
            Me.columnSP_PR_CODE_FK = New System.Data.DataColumn("SP_PR_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PR_CODE_FK)
            Me.columnSP_TYPE_SPE = New System.Data.DataColumn("SP_TYPE_SPE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_TYPE_SPE)
            Me.columnSP_GREF_FK = New System.Data.DataColumn("SP_GREF_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_FK)
            Me.columnSP_GREF_DATECR_FK = New System.Data.DataColumn("SP_GREF_DATECR_FK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_GREF_DATECR_FK)
            Me.columnSP_NOM = New System.Data.DataColumn("SP_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOM)
            Me.columnSP_NOMCOMP = New System.Data.DataColumn("SP_NOMCOMP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMCOMP)
            Me.columnSP_PH = New System.Data.DataColumn("SP_PH", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_PH)
            Me.columnSP_CIPUCD = New System.Data.DataColumn("SP_CIPUCD", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CIPUCD)
            Me.columnSP_DATECR = New System.Data.DataColumn("SP_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATECR)
            Me.columnSP_DATEMJ = New System.Data.DataColumn("SP_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEMJ)
            Me.columnSP_NL = New System.Data.DataColumn("SP_NL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NL)
            Me.columnSP_APHP = New System.Data.DataColumn("SP_APHP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_APHP)
            Me.columnSP_DATEJOGENE = New System.Data.DataColumn("SP_DATEJOGENE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_DATEJOGENE)
            Me.columnSP_ORIGINE_GENE = New System.Data.DataColumn("SP_ORIGINE_GENE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ORIGINE_GENE)
            Me.columnSP_NOMLONG = New System.Data.DataColumn("SP_NOMLONG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_NOMLONG)
            Me.columnSP_CDT_PRESCR_TEXTE = New System.Data.DataColumn("SP_CDT_PRESCR_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_CDT_PRESCR_TEXTE)
            Me.columnSP_ATC_DDD_TEXTE = New System.Data.DataColumn("SP_ATC_DDD_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSP_ATC_DDD_TEXTE)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSP_CODE_SQ_PK}, true))
            Me.columnSP_CODE_SQ_PK.AllowDBNull = false
            Me.columnSP_CODE_SQ_PK.Unique = true
            Me.columnSP_CDF_SLAB_CODE_FK.AllowDBNull = false
            Me.columnSP_CDF_SLAB_CODE_FK.MaxLength = 10
            Me.columnSP_CDF_LI_CODE_FK.AllowDBNull = false
            Me.columnSP_CDF_LI_CODE_FK.MaxLength = 10
            Me.columnSP_CATC_CODE_FK.MaxLength = 10
            Me.columnSP_CEPH_CODE_FK.MaxLength = 10
            Me.columnSP_PR_CODE_FK.AllowDBNull = false
            Me.columnSP_TYPE_SPE.MaxLength = 1
            Me.columnSP_NOM.AllowDBNull = false
            Me.columnSP_NOM.MaxLength = 36
            Me.columnSP_NOMCOMP.MaxLength = 255
            Me.columnSP_PH.MaxLength = 10
            Me.columnSP_CIPUCD.MaxLength = 7
            Me.columnSP_DATECR.AllowDBNull = false
            Me.columnSP_NL.MaxLength = 13
            Me.columnSP_APHP.MaxLength = 7
            Me.columnSP_ORIGINE_GENE.MaxLength = 1
            Me.columnSP_NOMLONG.MaxLength = 255
            Me.columnSP_CDT_PRESCR_TEXTE.MaxLength = 4000
            Me.columnSP_ATC_DDD_TEXTE.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSP_SPECIALITERow() As SP_SPECIALITERow
            Return CType(Me.NewRow,SP_SPECIALITERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SP_SPECIALITERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SP_SPECIALITERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SP_SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanged(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SP_SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowChanging(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SP_SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleted(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SP_SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent SP_SPECIALITERowDeleting(Me, New SP_SPECIALITERowChangeEvent(CType(e.Row,SP_SPECIALITERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSP_SPECIALITERow(ByVal row As SP_SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque2 = New dsTheriaque2
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SP_SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CEPH_CLASSEEPHMRARow
        Inherits System.Data.DataRow
        
        Private tableCEPH_CLASSEEPHMRA As CEPH_CLASSEEPHMRADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEPH_CLASSEEPHMRA = CType(Me.Table,CEPH_CLASSEEPHMRADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CODE_PK() As String
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CEPH_CEPH_CODE_FK' dans la table 'CEPH_CLASSEEPHMRA' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_NOMF() As String
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMFColumn),String)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_NOMA() As String
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMAColumn),String)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_NOMAColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_DATECR() As Date
            Get
                Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CEPH_DATEMJ' dans la table 'CEPH_CLASSEEPHMRA' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEPH_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEPH_CEPH_CODE_FKNull()
            Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_CEPH_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEPH_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEPH_DATEMJNull()
            Me(Me.tableCEPH_CLASSEEPHMRA.CEPH_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYAEPH_SYNONYMEANGLAIS_EPHMRARows() As SYAEPH_SYNONYMEANGLAIS_EPHMRARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYAEPH_SYNONYMEANGLAIS_EPH")),SYAEPH_SYNONYMEANGLAIS_EPHMRARow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSP_SPECIALITERows() As SP_SPECIALITERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK4_SP_SPECIALITE")),SP_SPECIALITERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYFEPH_SYNONYMEFR_EPHMRARows() As SYFEPH_SYNONYMEFR_EPHMRARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK1_SYFEPH_SYNONYMEFR_EPHMRA")),SYFEPH_SYNONYMEFR_EPHMRARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYFEPH_SYNONYMEFR_EPHMRARow
        Inherits System.Data.DataRow
        
        Private tableSYFEPH_SYNONYMEFR_EPHMRA As SYFEPH_SYNONYMEFR_EPHMRADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYFEPH_SYNONYMEFR_EPHMRA = CType(Me.Table,SYFEPH_SYNONYMEFR_EPHMRADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFEPH_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYFEPH_SYNONYMEFR_EPHMRA.SYFEPH_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYFEPH_SYNONYMEFR_EPHMRA.SYFEPH_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYFEPH_CEPH_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSYFEPH_SYNONYMEFR_EPHMRA.SYFEPH_CEPH_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSYFEPH_SYNONYMEFR_EPHMRA.SYFEPH_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CLASSEEPHMRARow() As CEPH_CLASSEEPHMRARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYFEPH_SYNONYMEFR_EPHMRA")),CEPH_CLASSEEPHMRARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYFEPH_SYNONYMEFR_EPHMRA"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYAEPH_SYNONYMEANGLAIS_EPHMRARow
        Inherits System.Data.DataRow
        
        Private tableSYAEPH_SYNONYMEANGLAIS_EPHMRA As SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA = CType(Me.Table,SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYAEPH_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA.SYAEPH_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA.SYAEPH_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYAEPH_CEPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA.SYAEPH_CEPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYAEPH_SYNONYMEANGLAIS_EPHMRA.SYAEPH_CEPH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CLASSEEPHMRARow() As CEPH_CLASSEEPHMRARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK1_SYAEPH_SYNONYMEANGLAIS_EPH")),CEPH_CLASSEEPHMRARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK1_SYAEPH_SYNONYMEANGLAIS_EPH"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SP_SPECIALITERow
        Inherits System.Data.DataRow
        
        Private tableSP_SPECIALITE As SP_SPECIALITEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSP_SPECIALITE = CType(Me.Table,SP_SPECIALITEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GSP_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_GSP_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_SLAB_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_SLAB_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDF_LI_CODE_FK() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDF_LI_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CATC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CATC_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CEPH_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CEPH_CODE_FK' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CGE_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CGE_CODE_FK' dans la table 'SP_SPECIALITE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PR_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PR_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_TYPE_SPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_TYPE_SPE' dans la table 'SP_SPECIALITE' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_FK' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_GREF_DATECR_FK() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_GREF_DATECR_FK' dans la table 'SP_SPECIALITE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOM() As String
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMCOMP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMCOMP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_PH() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_PHColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_PH' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_PHColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CIPUCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CIPUCD' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATECR() As Date
            Get
                Return CType(Me(Me.tableSP_SPECIALITE.SP_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEMJ' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NLColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_NL' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_APHP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_APHPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_APHP' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_DATEJOGENE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_DATEJOGENE' dans la table 'SP_SPECIALITE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ORIGINE_GENE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_ORIGINE_GENE' dans la table 'SP_SPECIALITE' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_NOMLONG() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_NOMLONG' dans la table 'SP_SPECIALITE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_CDT_PRESCR_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_CDT_PRESCR_TEXTE' dans la table 'SP_SPECIALITE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SP_ATC_DDD_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SP_ATC_DDD_TEXTE' dans la table 'SP_SPECIALITE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEPH_CLASSEEPHMRARow() As CEPH_CLASSEEPHMRARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK4_SP_SPECIALITE")),CEPH_CLASSEEPHMRARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK4_SP_SPECIALITE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GSP_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GSP_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GSP_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CATC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CATC_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CATC_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CEPH_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CEPH_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CEPH_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CGE_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CGE_CODE_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_CGE_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_TYPE_SPENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_TYPE_SPENull()
            Me(Me.tableSP_SPECIALITE.SP_TYPE_SPEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_GREF_DATECR_FKNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_GREF_DATECR_FKNull()
            Me(Me.tableSP_SPECIALITE.SP_GREF_DATECR_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMCOMPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMCOMPNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMCOMPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_PHNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_PHColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_PHNull()
            Me(Me.tableSP_SPECIALITE.SP_PHColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CIPUCDNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CIPUCDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CIPUCDNull()
            Me(Me.tableSP_SPECIALITE.SP_CIPUCDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEMJNull()
            Me(Me.tableSP_SPECIALITE.SP_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NLNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NLColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NLNull()
            Me(Me.tableSP_SPECIALITE.SP_NLColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_APHPNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_APHPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_APHPNull()
            Me(Me.tableSP_SPECIALITE.SP_APHPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_DATEJOGENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_DATEJOGENENull()
            Me(Me.tableSP_SPECIALITE.SP_DATEJOGENEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ORIGINE_GENENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ORIGINE_GENENull()
            Me(Me.tableSP_SPECIALITE.SP_ORIGINE_GENEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_NOMLONGNull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_NOMLONGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_NOMLONGNull()
            Me(Me.tableSP_SPECIALITE.SP_NOMLONGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_CDT_PRESCR_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_CDT_PRESCR_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_CDT_PRESCR_TEXTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSP_ATC_DDD_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSP_ATC_DDD_TEXTENull()
            Me(Me.tableSP_SPECIALITE.SP_ATC_DDD_TEXTEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CEPH_CLASSEEPHMRARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CEPH_CLASSEEPHMRARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CEPH_CLASSEEPHMRARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CEPH_CLASSEEPHMRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYFEPH_SYNONYMEFR_EPHMRARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYFEPH_SYNONYMEFR_EPHMRARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYFEPH_SYNONYMEFR_EPHMRARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYFEPH_SYNONYMEFR_EPHMRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYAEPH_SYNONYMEANGLAIS_EPHMRARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYAEPH_SYNONYMEANGLAIS_EPHMRARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYAEPH_SYNONYMEANGLAIS_EPHMRARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYAEPH_SYNONYMEANGLAIS_EPHMRARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SP_SPECIALITERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SP_SPECIALITERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SP_SPECIALITERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SP_SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque2TableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CEPH_CLASSEEPHMRATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CEPH_CLASSEEPHMRA"
            tableMapping.ColumnMappings.Add("CEPH_CODE_PK", "CEPH_CODE_PK")
            tableMapping.ColumnMappings.Add("CEPH_CEPH_CODE_FK", "CEPH_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("CEPH_NOMF", "CEPH_NOMF")
            tableMapping.ColumnMappings.Add("CEPH_NOMA", "CEPH_NOMA")
            tableMapping.ColumnMappings.Add("CEPH_DATECR", "CEPH_DATECR")
            tableMapping.ColumnMappings.Add("CEPH_DATEMJ", "CEPH_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[CEPH_CLASSEEPHMRA] WHERE (([CEPH_CODE_PK] = @Original_CE"& _ 
                "PH_CODE_PK) AND ((@IsNull_CEPH_CEPH_CODE_FK = 1 AND [CEPH_CEPH_CODE_FK] IS NULL)"& _ 
                " OR ([CEPH_CEPH_CODE_FK] = @Original_CEPH_CEPH_CODE_FK)) AND ([CEPH_NOMF] = @Ori"& _ 
                "ginal_CEPH_NOMF) AND ([CEPH_NOMA] = @Original_CEPH_NOMA) AND ([CEPH_DATECR] = @O"& _ 
                "riginal_CEPH_DATECR) AND ((@IsNull_CEPH_DATEMJ = 1 AND [CEPH_DATEMJ] IS NULL) OR"& _ 
                " ([CEPH_DATEMJ] = @Original_CEPH_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[CEPH_CLASSEEPHMRA] ([CEPH_CODE_PK], [CEPH_CEPH_CODE_FK],"& _ 
                " [CEPH_NOMF], [CEPH_NOMA], [CEPH_DATECR], [CEPH_DATEMJ]) VALUES (@CEPH_CODE_PK, "& _ 
                "@CEPH_CEPH_CODE_FK, @CEPH_NOMF, @CEPH_NOMA, @CEPH_DATECR, @CEPH_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_DATEMJ"& _ 
                " FROM THERIAQUE.CEPH_CLASSEEPHMRA WHERE (CEPH_CODE_PK = @CEPH_CODE_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[CEPH_CLASSEEPHMRA] SET [CEPH_CODE_PK] = @CEPH_CODE_PK, [CEPH_"& _ 
                "CEPH_CODE_FK] = @CEPH_CEPH_CODE_FK, [CEPH_NOMF] = @CEPH_NOMF, [CEPH_NOMA] = @CEP"& _ 
                "H_NOMA, [CEPH_DATECR] = @CEPH_DATECR, [CEPH_DATEMJ] = @CEPH_DATEMJ WHERE (([CEPH"& _ 
                "_CODE_PK] = @Original_CEPH_CODE_PK) AND ((@IsNull_CEPH_CEPH_CODE_FK = 1 AND [CEP"& _ 
                "H_CEPH_CODE_FK] IS NULL) OR ([CEPH_CEPH_CODE_FK] = @Original_CEPH_CEPH_CODE_FK))"& _ 
                " AND ([CEPH_NOMF] = @Original_CEPH_NOMF) AND ([CEPH_NOMA] = @Original_CEPH_NOMA)"& _ 
                " AND ([CEPH_DATECR] = @Original_CEPH_DATECR) AND ((@IsNull_CEPH_DATEMJ = 1 AND ["& _ 
                "CEPH_DATEMJ] IS NULL) OR ([CEPH_DATEMJ] = @Original_CEPH_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CEPH"& _ 
                "_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_DATEMJ FROM"& _ 
                " THERIAQUE.CEPH_CLASSEEPHMRA WHERE (CEPH_CODE_PK = @CEPH_CODE_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMF", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMF", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_NOMA", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_NOMA", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_CEPH_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_CEPH_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CEPH_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_D" & _
                "ATEMJ FROM THERIAQUE.CEPH_CLASSEEPHMRA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_D" & _
                "ATEMJ FROM THERIAQUE.CEPH_CLASSEEPHMRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "Where CEPH_CODE_PK =@CEPH_CODE_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CODE_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CODE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._commandCollection(2) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CEPH_CODE_PK, CEPH_CEPH_CODE_FK, CEPH_NOMF, CEPH_NOMA, CEPH_DATECR, CEPH_D" & _
                "ATEMJ FROM THERIAQUE.CEPH_CLASSEEPHMRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where CEPH_CEPH_CODE_FK = @CEPH_CEPH_COD" & _
                "E_FK"
            Me._commandCollection(2).CommandType = System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New System.Data.SqlClient.SqlParameter("@CEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "CEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque2.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable = New dsTheriaque2.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable, ByVal CEPH_CODE_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEPH_CODE_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal CEPH_CODE_PK As String) As dsTheriaque2.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_CODE_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEPH_CODE_PK, String)
            End If
            Dim dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable = New dsTheriaque2.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByFils(ByVal dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable, ByVal CEPH_CEPH_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEPH_CEPH_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByFils(ByVal CEPH_CEPH_CODE_FK As String) As dsTheriaque2.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CEPH_CEPH_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable = New dsTheriaque2.CEPH_CLASSEEPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque2.CEPH_CLASSEEPHMRADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque2) As Integer
            Return Me.Adapter.Update(dataSet, "CEPH_CLASSEEPHMRA")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_CEPH_CODE_PK As String, ByVal Original_CEPH_CEPH_CODE_FK As String, ByVal Original_CEPH_NOMF As String, ByVal Original_CEPH_NOMA As String, ByVal Original_CEPH_DATECR As Date, ByVal Original_CEPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (Original_CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CEPH_CODE_PK, String)
            End If
            If (Original_CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CEPH_CEPH_CODE_FK, String)
            End If
            If (Original_CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMF")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CEPH_NOMF, String)
            End If
            If (Original_CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMA")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CEPH_NOMA, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CEPH_DATECR, Date)
            If (Original_CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal CEPH_CODE_PK As String, ByVal CEPH_CEPH_CODE_FK As String, ByVal CEPH_NOMF As String, ByVal CEPH_NOMA As String, ByVal CEPH_DATECR As Date, ByVal CEPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CEPH_CODE_PK, String)
            End If
            If (CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CEPH_CEPH_CODE_FK, String)
            End If
            If (CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMF")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CEPH_NOMF, String)
            End If
            If (CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMA")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CEPH_NOMA, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(CEPH_DATECR, Date)
            If (CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal CEPH_CODE_PK As String, ByVal CEPH_CEPH_CODE_FK As String, ByVal CEPH_NOMF As String, ByVal CEPH_NOMA As String, ByVal CEPH_DATECR As Date, ByVal CEPH_DATEMJ As System.Nullable(Of Date), ByVal Original_CEPH_CODE_PK As String, ByVal Original_CEPH_CEPH_CODE_FK As String, ByVal Original_CEPH_NOMF As String, ByVal Original_CEPH_NOMA As String, ByVal Original_CEPH_DATECR As Date, ByVal Original_CEPH_DATEMJ As System.Nullable(Of Date)) As Integer
            If (CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CEPH_CODE_PK, String)
            End If
            If (CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CEPH_CEPH_CODE_FK, String)
            End If
            If (CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CEPH_NOMF, String)
            End If
            If (CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("CEPH_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CEPH_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CEPH_DATECR, Date)
            If (CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_CEPH_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CEPH_CODE_PK, String)
            End If
            If (Original_CEPH_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CEPH_CEPH_CODE_FK, String)
            End If
            If (Original_CEPH_NOMF Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMF")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CEPH_NOMF, String)
            End If
            If (Original_CEPH_NOMA Is Nothing) Then
                Throw New System.ArgumentNullException("Original_CEPH_NOMA")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CEPH_NOMA, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CEPH_DATECR, Date)
            If (Original_CEPH_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CEPH_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SYFEPH_SYNONYMEFR_EPHMRATableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYFEPH_SYNONYMEFR_EPHMRA"
            tableMapping.ColumnMappings.Add("SYFEPH_NOM_PK", "SYFEPH_NOM_PK")
            tableMapping.ColumnMappings.Add("SYFEPH_CEPH_CODE_FK", "SYFEPH_CEPH_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYFEPH_SYNONYMEFR_EPHMRA] WHERE (([SYFEPH_NOM_PK] = @Ori" & _
                "ginal_SYFEPH_NOM_PK) AND ([SYFEPH_CEPH_CODE_FK] = @Original_SYFEPH_CEPH_CODE_FK)" & _
                ")"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYFEPH_SYNONYMEFR_EPHMRA] ([SYFEPH_NOM_PK], [SYFEPH_CEPH" & _
                "_CODE_FK]) VALUES (@SYFEPH_NOM_PK, @SYFEPH_CEPH_CODE_FK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYFEPH_NOM_PK," & _
                " SYFEPH_CEPH_CODE_FK FROM THERIAQUE.SYFEPH_SYNONYMEFR_EPHMRA WHERE (SYFEPH_NOM_P" & _
                "K = @SYFEPH_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYFEPH_SYNONYMEFR_EPHMRA] SET [SYFEPH_NOM_PK] = @SYFEPH_NOM_P" & _
                "K, [SYFEPH_CEPH_CODE_FK] = @SYFEPH_CEPH_CODE_FK WHERE (([SYFEPH_NOM_PK] = @Origi" & _
                "nal_SYFEPH_NOM_PK) AND ([SYFEPH_CEPH_CODE_FK] = @Original_SYFEPH_CEPH_CODE_FK));" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SYFEPH_NOM_PK, SYFEPH_CEPH_CODE_FK FROM THERIAQUE.SYFEPH_SYNONYMEFR_EPH" & _
                "MRA WHERE (SYFEPH_NOM_PK = @SYFEPH_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_NOM_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_NOM_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYFEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYFEPH_NOM_PK, SYFEPH_CEPH_CODE_FK FROM THERIAQUE.SYFEPH_SYNONYMEFR_EPHMRA" & _
                ""
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYFEPH_NOM_PK, SYFEPH_CEPH_CODE_FK FROM THERIAQUE.SYFEPH_SYNONYMEFR_EPHMRA" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYFEPH_CEPH_CODE_FK = @SYFEPH_CEPH_CODE_FK "
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYFEPH_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYFEPH_CEPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable = New dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable, ByVal SYFEPH_CEPH_CODE_FK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYFEPH_CEPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFEPH_CEPH_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFEPH_CEPH_CODE_FK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYFEPH_CEPH_CODE_FK As String) As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYFEPH_CEPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFEPH_CEPH_CODE_FK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYFEPH_CEPH_CODE_FK, String)
            End If
            Dim dataTable As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable = New dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque2.SYFEPH_SYNONYMEFR_EPHMRADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque2) As Integer
            Return Me.Adapter.Update(dataSet, "SYFEPH_SYNONYMEFR_EPHMRA")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYFEPH_NOM_PK As String, ByVal Original_SYFEPH_CEPH_CODE_FK As String) As Integer
            If (Original_SYFEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFEPH_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYFEPH_NOM_PK, String)
            End If
            If (Original_SYFEPH_CEPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFEPH_CEPH_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYFEPH_CEPH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYFEPH_NOM_PK As String, ByVal SYFEPH_CEPH_CODE_FK As String) As Integer
            If (SYFEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFEPH_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYFEPH_NOM_PK, String)
            End If
            If (SYFEPH_CEPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFEPH_CEPH_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYFEPH_CEPH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYFEPH_NOM_PK As String, ByVal SYFEPH_CEPH_CODE_FK As String, ByVal Original_SYFEPH_NOM_PK As String, ByVal Original_SYFEPH_CEPH_CODE_FK As String) As Integer
            If (SYFEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFEPH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYFEPH_NOM_PK, String)
            End If
            If (SYFEPH_CEPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SYFEPH_CEPH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYFEPH_CEPH_CODE_FK, String)
            End If
            If (Original_SYFEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFEPH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYFEPH_NOM_PK, String)
            End If
            If (Original_SYFEPH_CEPH_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYFEPH_CEPH_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYFEPH_CEPH_CODE_FK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYAEPH_SYNONYMEANGLAIS_EPHMRATableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYAEPH_SYNONYMEANGLAIS_EPHMRA"
            tableMapping.ColumnMappings.Add("SYAEPH_NOM_PK", "SYAEPH_NOM_PK")
            tableMapping.ColumnMappings.Add("SYAEPH_CEPH_CODE_FK_PK", "SYAEPH_CEPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYAEPH_SYNONYMEANGLAIS_EPHMRA] WHERE (([SYAEPH_NOM_PK] ="& _ 
                " @Original_SYAEPH_NOM_PK) AND ([SYAEPH_CEPH_CODE_FK_PK] = @Original_SYAEPH_CEPH_"& _ 
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAEPH_CEPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_CEPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYAEPH_SYNONYMEANGLAIS_EPHMRA] ([SYAEPH_NOM_PK], [SYAEPH"& _ 
                "_CEPH_CODE_FK_PK]) VALUES (@SYAEPH_NOM_PK, @SYAEPH_CEPH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYA"& _ 
                "EPH_NOM_PK, SYAEPH_CEPH_CODE_FK_PK FROM THERIAQUE.SYAEPH_SYNONYMEANGLAIS_EPHMRA "& _ 
                "WHERE (SYAEPH_CEPH_CODE_FK_PK = @SYAEPH_CEPH_CODE_FK_PK) AND (SYAEPH_NOM_PK = @S"& _ 
                "YAEPH_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAEPH_CEPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_CEPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYAEPH_SYNONYMEANGLAIS_EPHMRA] SET [SYAEPH_NOM_PK] = @SYAEPH_"& _ 
                "NOM_PK, [SYAEPH_CEPH_CODE_FK_PK] = @SYAEPH_CEPH_CODE_FK_PK WHERE (([SYAEPH_NOM_P"& _ 
                "K] = @Original_SYAEPH_NOM_PK) AND ([SYAEPH_CEPH_CODE_FK_PK] = @Original_SYAEPH_C"& _ 
                "EPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYAEPH_NOM_PK, SYAEPH_CEPH_CODE_FK_PK FROM THERIAQUE.S"& _ 
                "YAEPH_SYNONYMEANGLAIS_EPHMRA WHERE (SYAEPH_CEPH_CODE_FK_PK = @SYAEPH_CEPH_CODE_F"& _ 
                "K_PK) AND (SYAEPH_NOM_PK = @SYAEPH_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAEPH_CEPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_CEPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAEPH_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYAEPH_CEPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_CEPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYAEPH_NOM_PK, SYAEPH_CEPH_CODE_FK_PK FROM THERIAQUE.SYAEPH_SYNONYMEANGLAI" & _
                "S_EPHMRA"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYAEPH_NOM_PK, SYAEPH_CEPH_CODE_FK_PK FROM THERIAQUE.SYAEPH_SYNONYMEANGLAI" & _
                "S_EPHMRA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "where SYAEPH_CEPH_CODE_FK_PK = @SYAEPH_CEPH_CODE_FK_PK "
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYAEPH_CEPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 10, System.Data.ParameterDirection.Input, 0, 0, "SYAEPH_CEPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable = New dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable, ByVal SYAEPH_CEPH_CODE_FK_PK As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYAEPH_CEPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAEPH_CEPH_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYAEPH_CEPH_CODE_FK_PK, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYAEPH_CEPH_CODE_FK_PK As String) As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (SYAEPH_CEPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAEPH_CEPH_CODE_FK_PK")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYAEPH_CEPH_CODE_FK_PK, String)
            End If
            Dim dataTable As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable = New dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque2.SYAEPH_SYNONYMEANGLAIS_EPHMRADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque2) As Integer
            Return Me.Adapter.Update(dataSet, "SYAEPH_SYNONYMEANGLAIS_EPHMRA")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYAEPH_NOM_PK As String, ByVal Original_SYAEPH_CEPH_CODE_FK_PK As String) As Integer
            If (Original_SYAEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAEPH_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYAEPH_NOM_PK, String)
            End If
            If (Original_SYAEPH_CEPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAEPH_CEPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYAEPH_CEPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYAEPH_NOM_PK As String, ByVal SYAEPH_CEPH_CODE_FK_PK As String) As Integer
            If (SYAEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAEPH_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYAEPH_NOM_PK, String)
            End If
            If (SYAEPH_CEPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAEPH_CEPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYAEPH_CEPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYAEPH_NOM_PK As String, ByVal SYAEPH_CEPH_CODE_FK_PK As String, ByVal Original_SYAEPH_NOM_PK As String, ByVal Original_SYAEPH_CEPH_CODE_FK_PK As String) As Integer
            If (SYAEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAEPH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYAEPH_NOM_PK, String)
            End If
            If (SYAEPH_CEPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYAEPH_CEPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYAEPH_CEPH_CODE_FK_PK, String)
            End If
            If (Original_SYAEPH_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAEPH_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYAEPH_NOM_PK, String)
            End If
            If (Original_SYAEPH_CEPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYAEPH_CEPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYAEPH_CEPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SP_SPECIALITETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SP_SPECIALITE"
            tableMapping.ColumnMappings.Add("SP_CODE_SQ_PK", "SP_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SP_GSP_CODE_FK", "SP_GSP_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_SLAB_CODE_FK", "SP_CDF_SLAB_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CDF_LI_CODE_FK", "SP_CDF_LI_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CATC_CODE_FK", "SP_CATC_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CEPH_CODE_FK", "SP_CEPH_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_CGE_CODE_FK", "SP_CGE_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_PR_CODE_FK", "SP_PR_CODE_FK")
            tableMapping.ColumnMappings.Add("SP_TYPE_SPE", "SP_TYPE_SPE")
            tableMapping.ColumnMappings.Add("SP_GREF_FK", "SP_GREF_FK")
            tableMapping.ColumnMappings.Add("SP_GREF_DATECR_FK", "SP_GREF_DATECR_FK")
            tableMapping.ColumnMappings.Add("SP_NOM", "SP_NOM")
            tableMapping.ColumnMappings.Add("SP_NOMCOMP", "SP_NOMCOMP")
            tableMapping.ColumnMappings.Add("SP_PH", "SP_PH")
            tableMapping.ColumnMappings.Add("SP_CIPUCD", "SP_CIPUCD")
            tableMapping.ColumnMappings.Add("SP_DATECR", "SP_DATECR")
            tableMapping.ColumnMappings.Add("SP_DATEMJ", "SP_DATEMJ")
            tableMapping.ColumnMappings.Add("SP_NL", "SP_NL")
            tableMapping.ColumnMappings.Add("SP_APHP", "SP_APHP")
            tableMapping.ColumnMappings.Add("SP_DATEJOGENE", "SP_DATEJOGENE")
            tableMapping.ColumnMappings.Add("SP_ORIGINE_GENE", "SP_ORIGINE_GENE")
            tableMapping.ColumnMappings.Add("SP_NOMLONG", "SP_NOMLONG")
            tableMapping.ColumnMappings.Add("SP_CDT_PRESCR_TEXTE", "SP_CDT_PRESCR_TEXTE")
            tableMapping.ColumnMappings.Add("SP_ATC_DDD_TEXTE", "SP_ATC_DDD_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SP_SPECIALITE] WHERE (([SP_CODE_SQ_PK] = @Original_SP_CO" & _
                "DE_SQ_PK) AND ((@IsNull_SP_GSP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP" & _
                "_GSP_CODE_FK] = @Original_SP_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Origina" & _
                "l_SP_CDF_SLAB_CODE_FK) AND ([SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) A" & _
                "ND ((@IsNull_SP_CATC_CODE_FK = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_COD" & _
                "E_FK] = @Original_SP_CATC_CODE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CE" & _
                "PH_CODE_FK] IS NULL) OR ([SP_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@" & _
                "IsNull_SP_CGE_CODE_FK = 1 AND [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @" & _
                "Original_SP_CGE_CODE_FK)) AND ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((" & _
                "@IsNull_SP_TYPE_SPE = 1 AND [SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original" & _
                "_SP_TYPE_SPE)) AND ((@IsNull_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GR" & _
                "EF_FK] = @Original_SP_GREF_FK)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF" & _
                "_DATECR_FK] IS NULL) OR ([SP_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND" & _
                " ([SP_NOM] = @Original_SP_NOM) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS " & _
                "NULL) OR ([SP_NOMCOMP] = @Original_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_" & _
                "PH] IS NULL) OR ([SP_PH] = @Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP" & _
                "_CIPUCD] IS NULL) OR ([SP_CIPUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Or" & _
                "iginal_SP_DATECR) AND ((@IsNull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_D" & _
                "ATEMJ] = @Original_SP_DATEMJ)) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR (" & _
                "[SP_NL] = @Original_SP_NL)) AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR " & _
                "([SP_APHP] = @Original_SP_APHP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOG" & _
                "ENE] IS NULL) OR ([SP_DATEJOGENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_O" & _
                "RIGINE_GENE = 1 AND [SP_ORIGINE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original" & _
                "_SP_ORIGINE_GENE)) AND ((@IsNull_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([S" & _
                "P_NOMLONG] = @Original_SP_NOMLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [S" & _
                "P_CDT_PRESCR_TEXTE] IS NULL) OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR" & _
                "_TEXTE)) AND ((@IsNull_SP_ATC_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR (" & _
                "[SP_ATC_DDD_TEXTE] = @Original_SP_ATC_DDD_TEXTE)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SP_SPECIALITE] ([SP_CODE_SQ_PK], [SP_GSP_CODE_FK], [SP_C" & _
                "DF_SLAB_CODE_FK], [SP_CDF_LI_CODE_FK], [SP_CATC_CODE_FK], [SP_CEPH_CODE_FK], [SP" & _
                "_CGE_CODE_FK], [SP_PR_CODE_FK], [SP_TYPE_SPE], [SP_GREF_FK], [SP_GREF_DATECR_FK]" & _
                ", [SP_NOM], [SP_NOMCOMP], [SP_PH], [SP_CIPUCD], [SP_DATECR], [SP_DATEMJ], [SP_NL" & _
                "], [SP_APHP], [SP_DATEJOGENE], [SP_ORIGINE_GENE], [SP_NOMLONG], [SP_CDT_PRESCR_T" & _
                "EXTE], [SP_ATC_DDD_TEXTE]) VALUES (@SP_CODE_SQ_PK, @SP_GSP_CODE_FK, @SP_CDF_SLAB" & _
                "_CODE_FK, @SP_CDF_LI_CODE_FK, @SP_CATC_CODE_FK, @SP_CEPH_CODE_FK, @SP_CGE_CODE_F" & _
                "K, @SP_PR_CODE_FK, @SP_TYPE_SPE, @SP_GREF_FK, @SP_GREF_DATECR_FK, @SP_NOM, @SP_N" & _
                "OMCOMP, @SP_PH, @SP_CIPUCD, @SP_DATECR, @SP_DATEMJ, @SP_NL, @SP_APHP, @SP_DATEJO" & _
                "GENE, @SP_ORIGINE_GENE, @SP_NOMLONG, @SP_CDT_PRESCR_TEXTE, @SP_ATC_DDD_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP" & _
                "_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_G" & _
                "REF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_D" & _
                "ATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR" & _
                "_TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE WHERE (SP_CODE_SQ_PK = @SP" & _
                "_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SP_SPECIALITE] SET [SP_CODE_SQ_PK] = @SP_CODE_SQ_PK, [SP_GSP_" & _
                "CODE_FK] = @SP_GSP_CODE_FK, [SP_CDF_SLAB_CODE_FK] = @SP_CDF_SLAB_CODE_FK, [SP_CD" & _
                "F_LI_CODE_FK] = @SP_CDF_LI_CODE_FK, [SP_CATC_CODE_FK] = @SP_CATC_CODE_FK, [SP_CE" & _
                "PH_CODE_FK] = @SP_CEPH_CODE_FK, [SP_CGE_CODE_FK] = @SP_CGE_CODE_FK, [SP_PR_CODE_" & _
                "FK] = @SP_PR_CODE_FK, [SP_TYPE_SPE] = @SP_TYPE_SPE, [SP_GREF_FK] = @SP_GREF_FK, " & _
                "[SP_GREF_DATECR_FK] = @SP_GREF_DATECR_FK, [SP_NOM] = @SP_NOM, [SP_NOMCOMP] = @SP" & _
                "_NOMCOMP, [SP_PH] = @SP_PH, [SP_CIPUCD] = @SP_CIPUCD, [SP_DATECR] = @SP_DATECR, " & _
                "[SP_DATEMJ] = @SP_DATEMJ, [SP_NL] = @SP_NL, [SP_APHP] = @SP_APHP, [SP_DATEJOGENE" & _
                "] = @SP_DATEJOGENE, [SP_ORIGINE_GENE] = @SP_ORIGINE_GENE, [SP_NOMLONG] = @SP_NOM" & _
                "LONG, [SP_CDT_PRESCR_TEXTE] = @SP_CDT_PRESCR_TEXTE, [SP_ATC_DDD_TEXTE] = @SP_ATC" & _
                "_DDD_TEXTE WHERE (([SP_CODE_SQ_PK] = @Original_SP_CODE_SQ_PK) AND ((@IsNull_SP_G" & _
                "SP_CODE_FK = 1 AND [SP_GSP_CODE_FK] IS NULL) OR ([SP_GSP_CODE_FK] = @Original_SP" & _
                "_GSP_CODE_FK)) AND ([SP_CDF_SLAB_CODE_FK] = @Original_SP_CDF_SLAB_CODE_FK) AND (" & _
                "[SP_CDF_LI_CODE_FK] = @Original_SP_CDF_LI_CODE_FK) AND ((@IsNull_SP_CATC_CODE_FK" & _
                " = 1 AND [SP_CATC_CODE_FK] IS NULL) OR ([SP_CATC_CODE_FK] = @Original_SP_CATC_CO" & _
                "DE_FK)) AND ((@IsNull_SP_CEPH_CODE_FK = 1 AND [SP_CEPH_CODE_FK] IS NULL) OR ([SP" & _
                "_CEPH_CODE_FK] = @Original_SP_CEPH_CODE_FK)) AND ((@IsNull_SP_CGE_CODE_FK = 1 AN" & _
                "D [SP_CGE_CODE_FK] IS NULL) OR ([SP_CGE_CODE_FK] = @Original_SP_CGE_CODE_FK)) AN" & _
                "D ([SP_PR_CODE_FK] = @Original_SP_PR_CODE_FK) AND ((@IsNull_SP_TYPE_SPE = 1 AND " & _
                "[SP_TYPE_SPE] IS NULL) OR ([SP_TYPE_SPE] = @Original_SP_TYPE_SPE)) AND ((@IsNull" & _
                "_SP_GREF_FK = 1 AND [SP_GREF_FK] IS NULL) OR ([SP_GREF_FK] = @Original_SP_GREF_F" & _
                "K)) AND ((@IsNull_SP_GREF_DATECR_FK = 1 AND [SP_GREF_DATECR_FK] IS NULL) OR ([SP" & _
                "_GREF_DATECR_FK] = @Original_SP_GREF_DATECR_FK)) AND ([SP_NOM] = @Original_SP_NO" & _
                "M) AND ((@IsNull_SP_NOMCOMP = 1 AND [SP_NOMCOMP] IS NULL) OR ([SP_NOMCOMP] = @Or" & _
                "iginal_SP_NOMCOMP)) AND ((@IsNull_SP_PH = 1 AND [SP_PH] IS NULL) OR ([SP_PH] = @" & _
                "Original_SP_PH)) AND ((@IsNull_SP_CIPUCD = 1 AND [SP_CIPUCD] IS NULL) OR ([SP_CI" & _
                "PUCD] = @Original_SP_CIPUCD)) AND ([SP_DATECR] = @Original_SP_DATECR) AND ((@IsN" & _
                "ull_SP_DATEMJ = 1 AND [SP_DATEMJ] IS NULL) OR ([SP_DATEMJ] = @Original_SP_DATEMJ" & _
                ")) AND ((@IsNull_SP_NL = 1 AND [SP_NL] IS NULL) OR ([SP_NL] = @Original_SP_NL)) " & _
                "AND ((@IsNull_SP_APHP = 1 AND [SP_APHP] IS NULL) OR ([SP_APHP] = @Original_SP_AP" & _
                "HP)) AND ((@IsNull_SP_DATEJOGENE = 1 AND [SP_DATEJOGENE] IS NULL) OR ([SP_DATEJO" & _
                "GENE] = @Original_SP_DATEJOGENE)) AND ((@IsNull_SP_ORIGINE_GENE = 1 AND [SP_ORIG" & _
                "INE_GENE] IS NULL) OR ([SP_ORIGINE_GENE] = @Original_SP_ORIGINE_GENE)) AND ((@Is" & _
                "Null_SP_NOMLONG = 1 AND [SP_NOMLONG] IS NULL) OR ([SP_NOMLONG] = @Original_SP_NO" & _
                "MLONG)) AND ((@IsNull_SP_CDT_PRESCR_TEXTE = 1 AND [SP_CDT_PRESCR_TEXTE] IS NULL)" & _
                " OR ([SP_CDT_PRESCR_TEXTE] = @Original_SP_CDT_PRESCR_TEXTE)) AND ((@IsNull_SP_AT" & _
                "C_DDD_TEXTE = 1 AND [SP_ATC_DDD_TEXTE] IS NULL) OR ([SP_ATC_DDD_TEXTE] = @Origin" & _
                "al_SP_ATC_DDD_TEXTE)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_" & _
                "FK, SP_CDF_LI_CODE_FK, SP_CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_C" & _
                "ODE_FK, SP_TYPE_SPE, SP_GREF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, S" & _
                "P_CIPUCD, SP_DATECR, SP_DATEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, " & _
                "SP_NOMLONG, SP_CDT_PRESCR_TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE W" & _
                "HERE (SP_CODE_SQ_PK = @SP_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CODE_SQ_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GSP_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GSP_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_SLAB_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_SLAB_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDF_LI_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDF_LI_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CATC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CATC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CATC_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CEPH_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CEPH_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CEPH_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CGE_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CGE_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PR_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PR_CODE_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_TYPE_SPE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_TYPE_SPE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_TYPE_SPE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_GREF_DATECR_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_GREF_DATECR_FK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_GREF_DATECR_FK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMCOMP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMCOMP", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMCOMP", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_PH", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_PH", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_PH", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CIPUCD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CIPUCD", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CIPUCD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATECR", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEMJ", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NL", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_APHP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_APHP", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_APHP", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_DATEJOGENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_DATEJOGENE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_DATEJOGENE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ORIGINE_GENE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ORIGINE_GENE", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ORIGINE_GENE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_NOMLONG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_NOMLONG", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_NOMLONG", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_CDT_PRESCR_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_CDT_PRESCR_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SP_ATC_DDD_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SP_ATC_DDD_TEXTE", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SP_CODE_SQ_PK, SP_GSP_CODE_FK, SP_CDF_SLAB_CODE_FK, SP_CDF_LI_CODE_FK, SP_" & _
                "CATC_CODE_FK, SP_CEPH_CODE_FK, SP_CGE_CODE_FK, SP_PR_CODE_FK, SP_TYPE_SPE, SP_GR" & _
                "EF_FK, SP_GREF_DATECR_FK, SP_NOM, SP_NOMCOMP, SP_PH, SP_CIPUCD, SP_DATECR, SP_DA" & _
                "TEMJ, SP_NL, SP_APHP, SP_DATEJOGENE, SP_ORIGINE_GENE, SP_NOMLONG, SP_CDT_PRESCR_" & _
                "TEXTE, SP_ATC_DDD_TEXTE FROM THERIAQUE.SP_SPECIALITE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque2.SP_SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque2.SP_SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque2.SP_SPECIALITEDataTable = New dsTheriaque2.SP_SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque2.SP_SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque2) As Integer
            Return Me.Adapter.Update(dataSet, "SP_SPECIALITE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete( _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SP_CODE_SQ_PK, Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SP_CDF_SLAB_CODE_FK, String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SP_CDF_LI_CODE_FK, String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SP_CATC_CODE_FK, String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SP_CEPH_CODE_FK, String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SP_PR_CODE_FK, Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SP_TYPE_SPE, String)
            End If
            If (Original_SP_GREF_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SP_NOM, String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SP_NOMCOMP, String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SP_PH, String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SP_CIPUCD, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_SP_DATECR, Date)
            If (Original_SP_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SP_NL, String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_SP_APHP, String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_SP_ORIGINE_GENE, String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_SP_NOMLONG, String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_SP_CDT_PRESCR_TEXTE, String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_SP_ATC_DDD_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK, String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK, String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK, String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK, String)
            End If
            If (SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(SP_PR_CODE_FK, Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SP_TYPE_SPE, String)
            End If
            If (SP_GREF_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SP_NOM, String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SP_NOMCOMP, String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SP_PH, String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SP_CIPUCD, String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(SP_DATECR, Date)
            If (SP_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SP_NL, String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(SP_APHP, String)
            End If
            If (SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE, String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SP_NOMLONG, String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE, String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal SP_CODE_SQ_PK As Integer, _
                    ByVal SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_CDF_SLAB_CODE_FK As String, _
                    ByVal SP_CDF_LI_CODE_FK As String, _
                    ByVal SP_CATC_CODE_FK As String, _
                    ByVal SP_CEPH_CODE_FK As String, _
                    ByVal SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SP_PR_CODE_FK As Integer, _
                    ByVal SP_TYPE_SPE As String, _
                    ByVal SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal SP_NOM As String, _
                    ByVal SP_NOMCOMP As String, _
                    ByVal SP_PH As String, _
                    ByVal SP_CIPUCD As String, _
                    ByVal SP_DATECR As Date, _
                    ByVal SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal SP_NL As String, _
                    ByVal SP_APHP As String, _
                    ByVal SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal SP_ORIGINE_GENE As String, _
                    ByVal SP_NOMLONG As String, _
                    ByVal SP_CDT_PRESCR_TEXTE As String, _
                    ByVal SP_ATC_DDD_TEXTE As String, _
                    ByVal Original_SP_CODE_SQ_PK As Integer, _
                    ByVal Original_SP_GSP_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_CDF_SLAB_CODE_FK As String, _
                    ByVal Original_SP_CDF_LI_CODE_FK As String, _
                    ByVal Original_SP_CATC_CODE_FK As String, _
                    ByVal Original_SP_CEPH_CODE_FK As String, _
                    ByVal Original_SP_CGE_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_PR_CODE_FK As Integer, _
                    ByVal Original_SP_TYPE_SPE As String, _
                    ByVal Original_SP_GREF_FK As System.Nullable(Of Integer), _
                    ByVal Original_SP_GREF_DATECR_FK As System.Nullable(Of Date), _
                    ByVal Original_SP_NOM As String, _
                    ByVal Original_SP_NOMCOMP As String, _
                    ByVal Original_SP_PH As String, _
                    ByVal Original_SP_CIPUCD As String, _
                    ByVal Original_SP_DATECR As Date, _
                    ByVal Original_SP_DATEMJ As System.Nullable(Of Date), _
                    ByVal Original_SP_NL As String, _
                    ByVal Original_SP_APHP As String, _
                    ByVal Original_SP_DATEJOGENE As System.Nullable(Of Date), _
                    ByVal Original_SP_ORIGINE_GENE As String, _
                    ByVal Original_SP_NOMLONG As String, _
                    ByVal Original_SP_CDT_PRESCR_TEXTE As String, _
                    ByVal Original_SP_ATC_DDD_TEXTE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SP_CODE_SQ_PK, Integer)
            If (SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SP_CDF_SLAB_CODE_FK, String)
            End If
            If (SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SP_CDF_LI_CODE_FK, String)
            End If
            If (SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SP_CATC_CODE_FK, String)
            End If
            If (SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SP_CEPH_CODE_FK, String)
            End If
            If (SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SP_PR_CODE_FK, Integer)
            If (SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SP_TYPE_SPE, String)
            End If
            If (SP_GREF_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SP_NOM, String)
            End If
            If (SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SP_NOMCOMP, String)
            End If
            If (SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SP_PH, String)
            End If
            If (SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SP_CIPUCD, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(SP_DATECR, Date)
            If (SP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SP_NL, String)
            End If
            If (SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SP_APHP, String)
            End If
            If (SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SP_ORIGINE_GENE, String)
            End If
            If (SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SP_NOMLONG, String)
            End If
            If (SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SP_CDT_PRESCR_TEXTE, String)
            End If
            If (SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SP_ATC_DDD_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_SP_CODE_SQ_PK, Integer)
            If (Original_SP_GSP_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SP_GSP_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_SP_CDF_SLAB_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_SLAB_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_SP_CDF_SLAB_CODE_FK, String)
            End If
            If (Original_SP_CDF_LI_CODE_FK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_CDF_LI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SP_CDF_LI_CODE_FK, String)
            End If
            If (Original_SP_CATC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SP_CATC_CODE_FK, String)
            End If
            If (Original_SP_CEPH_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SP_CEPH_CODE_FK, String)
            End If
            If (Original_SP_CGE_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SP_CGE_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_SP_PR_CODE_FK, Integer)
            If (Original_SP_TYPE_SPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_SP_TYPE_SPE, String)
            End If
            If (Original_SP_GREF_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SP_GREF_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = System.DBNull.Value
            End If
            If (Original_SP_GREF_DATECR_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_SP_GREF_DATECR_FK.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = System.DBNull.Value
            End If
            If (Original_SP_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SP_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_SP_NOM, String)
            End If
            If (Original_SP_NOMCOMP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_SP_NOMCOMP, String)
            End If
            If (Original_SP_PH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_SP_PH, String)
            End If
            If (Original_SP_CIPUCD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_SP_CIPUCD, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_SP_DATECR, Date)
            If (Original_SP_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_SP_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = System.DBNull.Value
            End If
            If (Original_SP_NL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SP_NL, String)
            End If
            If (Original_SP_APHP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_SP_APHP, String)
            End If
            If (Original_SP_DATEJOGENE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_SP_DATEJOGENE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = System.DBNull.Value
            End If
            If (Original_SP_ORIGINE_GENE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_SP_ORIGINE_GENE, String)
            End If
            If (Original_SP_NOMLONG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_SP_NOMLONG, String)
            End If
            If (Original_SP_CDT_PRESCR_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_SP_CDT_PRESCR_TEXTE, String)
            End If
            If (Original_SP_ATC_DDD_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_SP_ATC_DDD_TEXTE, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
