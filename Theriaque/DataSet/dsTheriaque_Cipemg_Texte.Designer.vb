'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.312
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Cipemg_Texte"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Cipemg_Texte
    Inherits System.Data.DataSet
    
    Private tableFCPT_FICHECIPEMG As FCPT_FICHECIPEMGDataTable
    
    Private tableFCPTCPH_CIPEMG_CLPH As FCPTCPH_CIPEMG_CLPHDataTable
    
    Private tableFCPTCCH_CIPEMG_CLCH As FCPTCCH_CIPEMG_CLCHDataTable
    
    Private tableFCPTSAC_CIPEMG_SUBAC As FCPTSAC_CIPEMG_SUBACDataTable
    
    Private tableFCPTSAU_CIPEMG_SUBAU As FCPTSAU_CIPEMG_SUBAUDataTable
    
    Private tableFCPTPR_CIPEMG_PROD As FCPTPR_CIPEMG_PRODDataTable
    
    Private tableFCPTSP_CIPEMG_SPE As FCPTSP_CIPEMG_SPEDataTable
    
    Private tableFCPTTX1_CIPEMG_TXCI As FCPTTX1_CIPEMG_TXCIDataTable
    
    Private tableFCPTTX2_CIPEMG_TXPEMG As FCPTTX2_CIPEMG_TXPEMGDataTable
    
    Private tableFCPTAFS_CIPEMG_AFSSAPS As FCPTAFS_CIPEMG_AFSSAPSDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FCPT_FICHECIPEMG")) Is Nothing) Then
                MyBase.Tables.Add(New FCPT_FICHECIPEMGDataTable(ds.Tables("FCPT_FICHECIPEMG")))
            End If
            If (Not (ds.Tables("FCPTCPH_CIPEMG_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTCPH_CIPEMG_CLPHDataTable(ds.Tables("FCPTCPH_CIPEMG_CLPH")))
            End If
            If (Not (ds.Tables("FCPTCCH_CIPEMG_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTCCH_CIPEMG_CLCHDataTable(ds.Tables("FCPTCCH_CIPEMG_CLCH")))
            End If
            If (Not (ds.Tables("FCPTSAC_CIPEMG_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTSAC_CIPEMG_SUBACDataTable(ds.Tables("FCPTSAC_CIPEMG_SUBAC")))
            End If
            If (Not (ds.Tables("FCPTSAU_CIPEMG_SUBAU")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTSAU_CIPEMG_SUBAUDataTable(ds.Tables("FCPTSAU_CIPEMG_SUBAU")))
            End If
            If (Not (ds.Tables("FCPTPR_CIPEMG_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTPR_CIPEMG_PRODDataTable(ds.Tables("FCPTPR_CIPEMG_PROD")))
            End If
            If (Not (ds.Tables("FCPTSP_CIPEMG_SPE")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTSP_CIPEMG_SPEDataTable(ds.Tables("FCPTSP_CIPEMG_SPE")))
            End If
            If (Not (ds.Tables("FCPTTX1_CIPEMG_TXCI")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTTX1_CIPEMG_TXCIDataTable(ds.Tables("FCPTTX1_CIPEMG_TXCI")))
            End If
            If (Not (ds.Tables("FCPTTX2_CIPEMG_TXPEMG")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTTX2_CIPEMG_TXPEMGDataTable(ds.Tables("FCPTTX2_CIPEMG_TXPEMG")))
            End If
            If (Not (ds.Tables("FCPTAFS_CIPEMG_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTAFS_CIPEMG_AFSSAPSDataTable(ds.Tables("FCPTAFS_CIPEMG_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPT_FICHECIPEMG() As FCPT_FICHECIPEMGDataTable
        Get
            Return Me.tableFCPT_FICHECIPEMG
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTCPH_CIPEMG_CLPH() As FCPTCPH_CIPEMG_CLPHDataTable
        Get
            Return Me.tableFCPTCPH_CIPEMG_CLPH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTCCH_CIPEMG_CLCH() As FCPTCCH_CIPEMG_CLCHDataTable
        Get
            Return Me.tableFCPTCCH_CIPEMG_CLCH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTSAC_CIPEMG_SUBAC() As FCPTSAC_CIPEMG_SUBACDataTable
        Get
            Return Me.tableFCPTSAC_CIPEMG_SUBAC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTSAU_CIPEMG_SUBAU() As FCPTSAU_CIPEMG_SUBAUDataTable
        Get
            Return Me.tableFCPTSAU_CIPEMG_SUBAU
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTPR_CIPEMG_PROD() As FCPTPR_CIPEMG_PRODDataTable
        Get
            Return Me.tableFCPTPR_CIPEMG_PROD
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTSP_CIPEMG_SPE() As FCPTSP_CIPEMG_SPEDataTable
        Get
            Return Me.tableFCPTSP_CIPEMG_SPE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTTX1_CIPEMG_TXCI() As FCPTTX1_CIPEMG_TXCIDataTable
        Get
            Return Me.tableFCPTTX1_CIPEMG_TXCI
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTTX2_CIPEMG_TXPEMG() As FCPTTX2_CIPEMG_TXPEMGDataTable
        Get
            Return Me.tableFCPTTX2_CIPEMG_TXPEMG
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FCPTAFS_CIPEMG_AFSSAPS() As FCPTAFS_CIPEMG_AFSSAPSDataTable
        Get
            Return Me.tableFCPTAFS_CIPEMG_AFSSAPS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Cipemg_Texte = CType(MyBase.Clone,dsTheriaque_Cipemg_Texte)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FCPT_FICHECIPEMG")) Is Nothing) Then
                MyBase.Tables.Add(New FCPT_FICHECIPEMGDataTable(ds.Tables("FCPT_FICHECIPEMG")))
            End If
            If (Not (ds.Tables("FCPTCPH_CIPEMG_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTCPH_CIPEMG_CLPHDataTable(ds.Tables("FCPTCPH_CIPEMG_CLPH")))
            End If
            If (Not (ds.Tables("FCPTCCH_CIPEMG_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTCCH_CIPEMG_CLCHDataTable(ds.Tables("FCPTCCH_CIPEMG_CLCH")))
            End If
            If (Not (ds.Tables("FCPTSAC_CIPEMG_SUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTSAC_CIPEMG_SUBACDataTable(ds.Tables("FCPTSAC_CIPEMG_SUBAC")))
            End If
            If (Not (ds.Tables("FCPTSAU_CIPEMG_SUBAU")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTSAU_CIPEMG_SUBAUDataTable(ds.Tables("FCPTSAU_CIPEMG_SUBAU")))
            End If
            If (Not (ds.Tables("FCPTPR_CIPEMG_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTPR_CIPEMG_PRODDataTable(ds.Tables("FCPTPR_CIPEMG_PROD")))
            End If
            If (Not (ds.Tables("FCPTSP_CIPEMG_SPE")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTSP_CIPEMG_SPEDataTable(ds.Tables("FCPTSP_CIPEMG_SPE")))
            End If
            If (Not (ds.Tables("FCPTTX1_CIPEMG_TXCI")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTTX1_CIPEMG_TXCIDataTable(ds.Tables("FCPTTX1_CIPEMG_TXCI")))
            End If
            If (Not (ds.Tables("FCPTTX2_CIPEMG_TXPEMG")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTTX2_CIPEMG_TXPEMGDataTable(ds.Tables("FCPTTX2_CIPEMG_TXPEMG")))
            End If
            If (Not (ds.Tables("FCPTAFS_CIPEMG_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FCPTAFS_CIPEMG_AFSSAPSDataTable(ds.Tables("FCPTAFS_CIPEMG_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFCPT_FICHECIPEMG = CType(MyBase.Tables("FCPT_FICHECIPEMG"),FCPT_FICHECIPEMGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPT_FICHECIPEMG) Is Nothing) Then
                Me.tableFCPT_FICHECIPEMG.InitVars
            End If
        End If
        Me.tableFCPTCPH_CIPEMG_CLPH = CType(MyBase.Tables("FCPTCPH_CIPEMG_CLPH"),FCPTCPH_CIPEMG_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTCPH_CIPEMG_CLPH) Is Nothing) Then
                Me.tableFCPTCPH_CIPEMG_CLPH.InitVars
            End If
        End If
        Me.tableFCPTCCH_CIPEMG_CLCH = CType(MyBase.Tables("FCPTCCH_CIPEMG_CLCH"),FCPTCCH_CIPEMG_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTCCH_CIPEMG_CLCH) Is Nothing) Then
                Me.tableFCPTCCH_CIPEMG_CLCH.InitVars
            End If
        End If
        Me.tableFCPTSAC_CIPEMG_SUBAC = CType(MyBase.Tables("FCPTSAC_CIPEMG_SUBAC"),FCPTSAC_CIPEMG_SUBACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTSAC_CIPEMG_SUBAC) Is Nothing) Then
                Me.tableFCPTSAC_CIPEMG_SUBAC.InitVars
            End If
        End If
        Me.tableFCPTSAU_CIPEMG_SUBAU = CType(MyBase.Tables("FCPTSAU_CIPEMG_SUBAU"),FCPTSAU_CIPEMG_SUBAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTSAU_CIPEMG_SUBAU) Is Nothing) Then
                Me.tableFCPTSAU_CIPEMG_SUBAU.InitVars
            End If
        End If
        Me.tableFCPTPR_CIPEMG_PROD = CType(MyBase.Tables("FCPTPR_CIPEMG_PROD"),FCPTPR_CIPEMG_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTPR_CIPEMG_PROD) Is Nothing) Then
                Me.tableFCPTPR_CIPEMG_PROD.InitVars
            End If
        End If
        Me.tableFCPTSP_CIPEMG_SPE = CType(MyBase.Tables("FCPTSP_CIPEMG_SPE"),FCPTSP_CIPEMG_SPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTSP_CIPEMG_SPE) Is Nothing) Then
                Me.tableFCPTSP_CIPEMG_SPE.InitVars
            End If
        End If
        Me.tableFCPTTX1_CIPEMG_TXCI = CType(MyBase.Tables("FCPTTX1_CIPEMG_TXCI"),FCPTTX1_CIPEMG_TXCIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTTX1_CIPEMG_TXCI) Is Nothing) Then
                Me.tableFCPTTX1_CIPEMG_TXCI.InitVars
            End If
        End If
        Me.tableFCPTTX2_CIPEMG_TXPEMG = CType(MyBase.Tables("FCPTTX2_CIPEMG_TXPEMG"),FCPTTX2_CIPEMG_TXPEMGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTTX2_CIPEMG_TXPEMG) Is Nothing) Then
                Me.tableFCPTTX2_CIPEMG_TXPEMG.InitVars
            End If
        End If
        Me.tableFCPTAFS_CIPEMG_AFSSAPS = CType(MyBase.Tables("FCPTAFS_CIPEMG_AFSSAPS"),FCPTAFS_CIPEMG_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFCPTAFS_CIPEMG_AFSSAPS) Is Nothing) Then
                Me.tableFCPTAFS_CIPEMG_AFSSAPS.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Cipemg_Texte"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Cipemg_Texte.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFCPT_FICHECIPEMG = New FCPT_FICHECIPEMGDataTable
        MyBase.Tables.Add(Me.tableFCPT_FICHECIPEMG)
        Me.tableFCPTCPH_CIPEMG_CLPH = New FCPTCPH_CIPEMG_CLPHDataTable
        MyBase.Tables.Add(Me.tableFCPTCPH_CIPEMG_CLPH)
        Me.tableFCPTCCH_CIPEMG_CLCH = New FCPTCCH_CIPEMG_CLCHDataTable
        MyBase.Tables.Add(Me.tableFCPTCCH_CIPEMG_CLCH)
        Me.tableFCPTSAC_CIPEMG_SUBAC = New FCPTSAC_CIPEMG_SUBACDataTable
        MyBase.Tables.Add(Me.tableFCPTSAC_CIPEMG_SUBAC)
        Me.tableFCPTSAU_CIPEMG_SUBAU = New FCPTSAU_CIPEMG_SUBAUDataTable
        MyBase.Tables.Add(Me.tableFCPTSAU_CIPEMG_SUBAU)
        Me.tableFCPTPR_CIPEMG_PROD = New FCPTPR_CIPEMG_PRODDataTable
        MyBase.Tables.Add(Me.tableFCPTPR_CIPEMG_PROD)
        Me.tableFCPTSP_CIPEMG_SPE = New FCPTSP_CIPEMG_SPEDataTable
        MyBase.Tables.Add(Me.tableFCPTSP_CIPEMG_SPE)
        Me.tableFCPTTX1_CIPEMG_TXCI = New FCPTTX1_CIPEMG_TXCIDataTable
        MyBase.Tables.Add(Me.tableFCPTTX1_CIPEMG_TXCI)
        Me.tableFCPTTX2_CIPEMG_TXPEMG = New FCPTTX2_CIPEMG_TXPEMGDataTable
        MyBase.Tables.Add(Me.tableFCPTTX2_CIPEMG_TXPEMG)
        Me.tableFCPTAFS_CIPEMG_AFSSAPS = New FCPTAFS_CIPEMG_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFCPTAFS_CIPEMG_AFSSAPS)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPT_FICHECIPEMG() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTCPH_CIPEMG_CLPH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTCCH_CIPEMG_CLCH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTSAC_CIPEMG_SUBAC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTSAU_CIPEMG_SUBAU() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTPR_CIPEMG_PROD() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTSP_CIPEMG_SPE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTTX1_CIPEMG_TXCI() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTTX2_CIPEMG_TXPEMG() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFCPTAFS_CIPEMG_AFSSAPS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub FCPT_FICHECIPEMGRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPT_FICHECIPEMGRowChangeEvent)
    
    Public Delegate Sub FCPTCPH_CIPEMG_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTCPH_CIPEMG_CLPHRowChangeEvent)
    
    Public Delegate Sub FCPTCCH_CIPEMG_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTCCH_CIPEMG_CLCHRowChangeEvent)
    
    Public Delegate Sub FCPTSAC_CIPEMG_SUBACRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTSAC_CIPEMG_SUBACRowChangeEvent)
    
    Public Delegate Sub FCPTSAU_CIPEMG_SUBAURowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTSAU_CIPEMG_SUBAURowChangeEvent)
    
    Public Delegate Sub FCPTPR_CIPEMG_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTPR_CIPEMG_PRODRowChangeEvent)
    
    Public Delegate Sub FCPTSP_CIPEMG_SPERowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTSP_CIPEMG_SPERowChangeEvent)
    
    Public Delegate Sub FCPTTX1_CIPEMG_TXCIRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTTX1_CIPEMG_TXCIRowChangeEvent)
    
    Public Delegate Sub FCPTTX2_CIPEMG_TXPEMGRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTTX2_CIPEMG_TXPEMGRowChangeEvent)
    
    Public Delegate Sub FCPTAFS_CIPEMG_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FCPTAFS_CIPEMG_AFSSAPSRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPT_FICHECIPEMGDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPT_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnFCPT_DATECR As System.Data.DataColumn
        
        Private columnFCPT_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPT_FICHECIPEMG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPT_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPT_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPT_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPT_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPT_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPT_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPT_FICHECIPEMGRow
            Get
                Return CType(Me.Rows(index),FCPT_FICHECIPEMGRow)
            End Get
        End Property
        
        Public Event FCPT_FICHECIPEMGRowChanging As FCPT_FICHECIPEMGRowChangeEventHandler
        
        Public Event FCPT_FICHECIPEMGRowChanged As FCPT_FICHECIPEMGRowChangeEventHandler
        
        Public Event FCPT_FICHECIPEMGRowDeleting As FCPT_FICHECIPEMGRowChangeEventHandler
        
        Public Event FCPT_FICHECIPEMGRowDeleted As FCPT_FICHECIPEMGRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPT_FICHECIPEMGRow(ByVal row As FCPT_FICHECIPEMGRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPT_FICHECIPEMGRow(ByVal FCPT_CODE_SQ_PK As Integer, ByVal FCPT_DATECR As Date, ByVal FCPT_DATEMJ As Date) As FCPT_FICHECIPEMGRow
            Dim rowFCPT_FICHECIPEMGRow As FCPT_FICHECIPEMGRow = CType(Me.NewRow,FCPT_FICHECIPEMGRow)
            rowFCPT_FICHECIPEMGRow.ItemArray = New Object() {FCPT_CODE_SQ_PK, FCPT_DATECR, FCPT_DATEMJ}
            Me.Rows.Add(rowFCPT_FICHECIPEMGRow)
            Return rowFCPT_FICHECIPEMGRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPT_CODE_SQ_PK(ByVal FCPT_CODE_SQ_PK As Integer) As FCPT_FICHECIPEMGRow
            Return CType(Me.Rows.Find(New Object() {FCPT_CODE_SQ_PK}),FCPT_FICHECIPEMGRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPT_FICHECIPEMGDataTable = CType(MyBase.Clone,FCPT_FICHECIPEMGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPT_FICHECIPEMGDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPT_CODE_SQ_PK = MyBase.Columns("FCPT_CODE_SQ_PK")
            Me.columnFCPT_DATECR = MyBase.Columns("FCPT_DATECR")
            Me.columnFCPT_DATEMJ = MyBase.Columns("FCPT_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPT_CODE_SQ_PK = New System.Data.DataColumn("FCPT_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPT_CODE_SQ_PK)
            Me.columnFCPT_DATECR = New System.Data.DataColumn("FCPT_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPT_DATECR)
            Me.columnFCPT_DATEMJ = New System.Data.DataColumn("FCPT_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPT_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPT_CODE_SQ_PK}, true))
            Me.columnFCPT_CODE_SQ_PK.AllowDBNull = false
            Me.columnFCPT_CODE_SQ_PK.Unique = true
            Me.columnFCPT_DATECR.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPT_FICHECIPEMGRow() As FCPT_FICHECIPEMGRow
            Return CType(Me.NewRow,FCPT_FICHECIPEMGRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPT_FICHECIPEMGRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPT_FICHECIPEMGRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPT_FICHECIPEMGRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPT_FICHECIPEMGRowChanged(Me, New FCPT_FICHECIPEMGRowChangeEvent(CType(e.Row,FCPT_FICHECIPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPT_FICHECIPEMGRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPT_FICHECIPEMGRowChanging(Me, New FCPT_FICHECIPEMGRowChangeEvent(CType(e.Row,FCPT_FICHECIPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPT_FICHECIPEMGRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPT_FICHECIPEMGRowDeleted(Me, New FCPT_FICHECIPEMGRowChangeEvent(CType(e.Row,FCPT_FICHECIPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPT_FICHECIPEMGRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPT_FICHECIPEMGRowDeleting(Me, New FCPT_FICHECIPEMGRowChangeEvent(CType(e.Row,FCPT_FICHECIPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPT_FICHECIPEMGRow(ByVal row As FCPT_FICHECIPEMGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPT_FICHECIPEMGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTCPH_CIPEMG_CLPHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTCPH_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTCPH_CPH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTCPH_CIPEMG_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTCPH_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTCPH_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTCPH_CPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTCPH_CIPEMG_CLPHRow
            Get
                Return CType(Me.Rows(index),FCPTCPH_CIPEMG_CLPHRow)
            End Get
        End Property
        
        Public Event FCPTCPH_CIPEMG_CLPHRowChanging As FCPTCPH_CIPEMG_CLPHRowChangeEventHandler
        
        Public Event FCPTCPH_CIPEMG_CLPHRowChanged As FCPTCPH_CIPEMG_CLPHRowChangeEventHandler
        
        Public Event FCPTCPH_CIPEMG_CLPHRowDeleting As FCPTCPH_CIPEMG_CLPHRowChangeEventHandler
        
        Public Event FCPTCPH_CIPEMG_CLPHRowDeleted As FCPTCPH_CIPEMG_CLPHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTCPH_CIPEMG_CLPHRow(ByVal row As FCPTCPH_CIPEMG_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTCPH_CIPEMG_CLPHRow(ByVal FCPTCPH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCPH_CPH_CODE_FK_PK As String) As FCPTCPH_CIPEMG_CLPHRow
            Dim rowFCPTCPH_CIPEMG_CLPHRow As FCPTCPH_CIPEMG_CLPHRow = CType(Me.NewRow,FCPTCPH_CIPEMG_CLPHRow)
            rowFCPTCPH_CIPEMG_CLPHRow.ItemArray = New Object() {FCPTCPH_FCPT_CODE_FK_PK, FCPTCPH_CPH_CODE_FK_PK}
            Me.Rows.Add(rowFCPTCPH_CIPEMG_CLPHRow)
            Return rowFCPTCPH_CIPEMG_CLPHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTCPH_FCPT_CODE_FK_PKFCPTCPH_CPH_CODE_FK_PK(ByVal FCPTCPH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCPH_CPH_CODE_FK_PK As String) As FCPTCPH_CIPEMG_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FCPTCPH_FCPT_CODE_FK_PK, FCPTCPH_CPH_CODE_FK_PK}),FCPTCPH_CIPEMG_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTCPH_CIPEMG_CLPHDataTable = CType(MyBase.Clone,FCPTCPH_CIPEMG_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTCPH_CIPEMG_CLPHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTCPH_FCPT_CODE_FK_PK = MyBase.Columns("FCPTCPH_FCPT_CODE_FK_PK")
            Me.columnFCPTCPH_CPH_CODE_FK_PK = MyBase.Columns("FCPTCPH_CPH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTCPH_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTCPH_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTCPH_FCPT_CODE_FK_PK)
            Me.columnFCPTCPH_CPH_CODE_FK_PK = New System.Data.DataColumn("FCPTCPH_CPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTCPH_FCPT_CODE_FK_PK, Me.columnFCPTCPH_CPH_CODE_FK_PK}, true))
            Me.columnFCPTCPH_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTCPH_CIPEMG_CLPHRow() As FCPTCPH_CIPEMG_CLPHRow
            Return CType(Me.NewRow,FCPTCPH_CIPEMG_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTCPH_CIPEMG_CLPHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTCPH_CIPEMG_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTCPH_CIPEMG_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTCPH_CIPEMG_CLPHRowChanged(Me, New FCPTCPH_CIPEMG_CLPHRowChangeEvent(CType(e.Row,FCPTCPH_CIPEMG_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTCPH_CIPEMG_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTCPH_CIPEMG_CLPHRowChanging(Me, New FCPTCPH_CIPEMG_CLPHRowChangeEvent(CType(e.Row,FCPTCPH_CIPEMG_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTCPH_CIPEMG_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTCPH_CIPEMG_CLPHRowDeleted(Me, New FCPTCPH_CIPEMG_CLPHRowChangeEvent(CType(e.Row,FCPTCPH_CIPEMG_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTCPH_CIPEMG_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTCPH_CIPEMG_CLPHRowDeleting(Me, New FCPTCPH_CIPEMG_CLPHRowChangeEvent(CType(e.Row,FCPTCPH_CIPEMG_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTCPH_CIPEMG_CLPHRow(ByVal row As FCPTCPH_CIPEMG_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTCPH_CIPEMG_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTCCH_CIPEMG_CLCHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTCCH_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTCCH_CCH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTCCH_CIPEMG_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTCCH_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTCCH_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTCCH_CCH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTCCH_CIPEMG_CLCHRow
            Get
                Return CType(Me.Rows(index),FCPTCCH_CIPEMG_CLCHRow)
            End Get
        End Property
        
        Public Event FCPTCCH_CIPEMG_CLCHRowChanging As FCPTCCH_CIPEMG_CLCHRowChangeEventHandler
        
        Public Event FCPTCCH_CIPEMG_CLCHRowChanged As FCPTCCH_CIPEMG_CLCHRowChangeEventHandler
        
        Public Event FCPTCCH_CIPEMG_CLCHRowDeleting As FCPTCCH_CIPEMG_CLCHRowChangeEventHandler
        
        Public Event FCPTCCH_CIPEMG_CLCHRowDeleted As FCPTCCH_CIPEMG_CLCHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTCCH_CIPEMG_CLCHRow(ByVal row As FCPTCCH_CIPEMG_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTCCH_CIPEMG_CLCHRow(ByVal FCPTCCH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCCH_CCH_CODE_FK_PK As String) As FCPTCCH_CIPEMG_CLCHRow
            Dim rowFCPTCCH_CIPEMG_CLCHRow As FCPTCCH_CIPEMG_CLCHRow = CType(Me.NewRow,FCPTCCH_CIPEMG_CLCHRow)
            rowFCPTCCH_CIPEMG_CLCHRow.ItemArray = New Object() {FCPTCCH_FCPT_CODE_FK_PK, FCPTCCH_CCH_CODE_FK_PK}
            Me.Rows.Add(rowFCPTCCH_CIPEMG_CLCHRow)
            Return rowFCPTCCH_CIPEMG_CLCHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTCCH_FCPT_CODE_FK_PKFCPTCCH_CCH_CODE_FK_PK(ByVal FCPTCCH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCCH_CCH_CODE_FK_PK As String) As FCPTCCH_CIPEMG_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FCPTCCH_FCPT_CODE_FK_PK, FCPTCCH_CCH_CODE_FK_PK}),FCPTCCH_CIPEMG_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTCCH_CIPEMG_CLCHDataTable = CType(MyBase.Clone,FCPTCCH_CIPEMG_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTCCH_CIPEMG_CLCHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTCCH_FCPT_CODE_FK_PK = MyBase.Columns("FCPTCCH_FCPT_CODE_FK_PK")
            Me.columnFCPTCCH_CCH_CODE_FK_PK = MyBase.Columns("FCPTCCH_CCH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTCCH_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTCCH_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTCCH_FCPT_CODE_FK_PK)
            Me.columnFCPTCCH_CCH_CODE_FK_PK = New System.Data.DataColumn("FCPTCCH_CCH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTCCH_FCPT_CODE_FK_PK, Me.columnFCPTCCH_CCH_CODE_FK_PK}, true))
            Me.columnFCPTCCH_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTCCH_CIPEMG_CLCHRow() As FCPTCCH_CIPEMG_CLCHRow
            Return CType(Me.NewRow,FCPTCCH_CIPEMG_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTCCH_CIPEMG_CLCHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTCCH_CIPEMG_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTCCH_CIPEMG_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTCCH_CIPEMG_CLCHRowChanged(Me, New FCPTCCH_CIPEMG_CLCHRowChangeEvent(CType(e.Row,FCPTCCH_CIPEMG_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTCCH_CIPEMG_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTCCH_CIPEMG_CLCHRowChanging(Me, New FCPTCCH_CIPEMG_CLCHRowChangeEvent(CType(e.Row,FCPTCCH_CIPEMG_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTCCH_CIPEMG_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTCCH_CIPEMG_CLCHRowDeleted(Me, New FCPTCCH_CIPEMG_CLCHRowChangeEvent(CType(e.Row,FCPTCCH_CIPEMG_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTCCH_CIPEMG_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTCCH_CIPEMG_CLCHRowDeleting(Me, New FCPTCCH_CIPEMG_CLCHRowChangeEvent(CType(e.Row,FCPTCCH_CIPEMG_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTCCH_CIPEMG_CLCHRow(ByVal row As FCPTCCH_CIPEMG_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTCCH_CIPEMG_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTSAC_CIPEMG_SUBACDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTSAC_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTSAC_SAC_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTSAC_CIPEMG_SUBAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTSAC_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTSAC_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTSAC_SAC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTSAC_CIPEMG_SUBACRow
            Get
                Return CType(Me.Rows(index),FCPTSAC_CIPEMG_SUBACRow)
            End Get
        End Property
        
        Public Event FCPTSAC_CIPEMG_SUBACRowChanging As FCPTSAC_CIPEMG_SUBACRowChangeEventHandler
        
        Public Event FCPTSAC_CIPEMG_SUBACRowChanged As FCPTSAC_CIPEMG_SUBACRowChangeEventHandler
        
        Public Event FCPTSAC_CIPEMG_SUBACRowDeleting As FCPTSAC_CIPEMG_SUBACRowChangeEventHandler
        
        Public Event FCPTSAC_CIPEMG_SUBACRowDeleted As FCPTSAC_CIPEMG_SUBACRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTSAC_CIPEMG_SUBACRow(ByVal row As FCPTSAC_CIPEMG_SUBACRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTSAC_CIPEMG_SUBACRow(ByVal FCPTSAC_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAC_SAC_CODE_FK_PK As Integer) As FCPTSAC_CIPEMG_SUBACRow
            Dim rowFCPTSAC_CIPEMG_SUBACRow As FCPTSAC_CIPEMG_SUBACRow = CType(Me.NewRow,FCPTSAC_CIPEMG_SUBACRow)
            rowFCPTSAC_CIPEMG_SUBACRow.ItemArray = New Object() {FCPTSAC_FCPT_CODE_FK_PK, FCPTSAC_SAC_CODE_FK_PK}
            Me.Rows.Add(rowFCPTSAC_CIPEMG_SUBACRow)
            Return rowFCPTSAC_CIPEMG_SUBACRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTSAC_FCPT_CODE_FK_PKFCPTSAC_SAC_CODE_FK_PK(ByVal FCPTSAC_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAC_SAC_CODE_FK_PK As Integer) As FCPTSAC_CIPEMG_SUBACRow
            Return CType(Me.Rows.Find(New Object() {FCPTSAC_FCPT_CODE_FK_PK, FCPTSAC_SAC_CODE_FK_PK}),FCPTSAC_CIPEMG_SUBACRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTSAC_CIPEMG_SUBACDataTable = CType(MyBase.Clone,FCPTSAC_CIPEMG_SUBACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTSAC_CIPEMG_SUBACDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTSAC_FCPT_CODE_FK_PK = MyBase.Columns("FCPTSAC_FCPT_CODE_FK_PK")
            Me.columnFCPTSAC_SAC_CODE_FK_PK = MyBase.Columns("FCPTSAC_SAC_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTSAC_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTSAC_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTSAC_FCPT_CODE_FK_PK)
            Me.columnFCPTSAC_SAC_CODE_FK_PK = New System.Data.DataColumn("FCPTSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTSAC_FCPT_CODE_FK_PK, Me.columnFCPTSAC_SAC_CODE_FK_PK}, true))
            Me.columnFCPTSAC_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTSAC_CIPEMG_SUBACRow() As FCPTSAC_CIPEMG_SUBACRow
            Return CType(Me.NewRow,FCPTSAC_CIPEMG_SUBACRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTSAC_CIPEMG_SUBACRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTSAC_CIPEMG_SUBACRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTSAC_CIPEMG_SUBACRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTSAC_CIPEMG_SUBACRowChanged(Me, New FCPTSAC_CIPEMG_SUBACRowChangeEvent(CType(e.Row,FCPTSAC_CIPEMG_SUBACRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTSAC_CIPEMG_SUBACRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTSAC_CIPEMG_SUBACRowChanging(Me, New FCPTSAC_CIPEMG_SUBACRowChangeEvent(CType(e.Row,FCPTSAC_CIPEMG_SUBACRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTSAC_CIPEMG_SUBACRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTSAC_CIPEMG_SUBACRowDeleted(Me, New FCPTSAC_CIPEMG_SUBACRowChangeEvent(CType(e.Row,FCPTSAC_CIPEMG_SUBACRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTSAC_CIPEMG_SUBACRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTSAC_CIPEMG_SUBACRowDeleting(Me, New FCPTSAC_CIPEMG_SUBACRowChangeEvent(CType(e.Row,FCPTSAC_CIPEMG_SUBACRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTSAC_CIPEMG_SUBACRow(ByVal row As FCPTSAC_CIPEMG_SUBACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTSAC_CIPEMG_SUBACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTSAU_CIPEMG_SUBAUDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTSAU_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTSAU_SAU_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTSAU_CIPEMG_SUBAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTSAU_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTSAU_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTSAU_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTSAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTSAU_CIPEMG_SUBAURow
            Get
                Return CType(Me.Rows(index),FCPTSAU_CIPEMG_SUBAURow)
            End Get
        End Property
        
        Public Event FCPTSAU_CIPEMG_SUBAURowChanging As FCPTSAU_CIPEMG_SUBAURowChangeEventHandler
        
        Public Event FCPTSAU_CIPEMG_SUBAURowChanged As FCPTSAU_CIPEMG_SUBAURowChangeEventHandler
        
        Public Event FCPTSAU_CIPEMG_SUBAURowDeleting As FCPTSAU_CIPEMG_SUBAURowChangeEventHandler
        
        Public Event FCPTSAU_CIPEMG_SUBAURowDeleted As FCPTSAU_CIPEMG_SUBAURowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTSAU_CIPEMG_SUBAURow(ByVal row As FCPTSAU_CIPEMG_SUBAURow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTSAU_CIPEMG_SUBAURow(ByVal FCPTSAU_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAU_SAU_CODE_FK_PK As Integer) As FCPTSAU_CIPEMG_SUBAURow
            Dim rowFCPTSAU_CIPEMG_SUBAURow As FCPTSAU_CIPEMG_SUBAURow = CType(Me.NewRow,FCPTSAU_CIPEMG_SUBAURow)
            rowFCPTSAU_CIPEMG_SUBAURow.ItemArray = New Object() {FCPTSAU_FCPT_CODE_FK_PK, FCPTSAU_SAU_CODE_FK_PK}
            Me.Rows.Add(rowFCPTSAU_CIPEMG_SUBAURow)
            Return rowFCPTSAU_CIPEMG_SUBAURow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTSAU_FCPT_CODE_FK_PKFCPTSAU_SAU_CODE_FK_PK(ByVal FCPTSAU_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAU_SAU_CODE_FK_PK As Integer) As FCPTSAU_CIPEMG_SUBAURow
            Return CType(Me.Rows.Find(New Object() {FCPTSAU_FCPT_CODE_FK_PK, FCPTSAU_SAU_CODE_FK_PK}),FCPTSAU_CIPEMG_SUBAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTSAU_CIPEMG_SUBAUDataTable = CType(MyBase.Clone,FCPTSAU_CIPEMG_SUBAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTSAU_CIPEMG_SUBAUDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTSAU_FCPT_CODE_FK_PK = MyBase.Columns("FCPTSAU_FCPT_CODE_FK_PK")
            Me.columnFCPTSAU_SAU_CODE_FK_PK = MyBase.Columns("FCPTSAU_SAU_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTSAU_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTSAU_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTSAU_FCPT_CODE_FK_PK)
            Me.columnFCPTSAU_SAU_CODE_FK_PK = New System.Data.DataColumn("FCPTSAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTSAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTSAU_FCPT_CODE_FK_PK, Me.columnFCPTSAU_SAU_CODE_FK_PK}, true))
            Me.columnFCPTSAU_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTSAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTSAU_CIPEMG_SUBAURow() As FCPTSAU_CIPEMG_SUBAURow
            Return CType(Me.NewRow,FCPTSAU_CIPEMG_SUBAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTSAU_CIPEMG_SUBAURow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTSAU_CIPEMG_SUBAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTSAU_CIPEMG_SUBAURowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTSAU_CIPEMG_SUBAURowChanged(Me, New FCPTSAU_CIPEMG_SUBAURowChangeEvent(CType(e.Row,FCPTSAU_CIPEMG_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTSAU_CIPEMG_SUBAURowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTSAU_CIPEMG_SUBAURowChanging(Me, New FCPTSAU_CIPEMG_SUBAURowChangeEvent(CType(e.Row,FCPTSAU_CIPEMG_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTSAU_CIPEMG_SUBAURowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTSAU_CIPEMG_SUBAURowDeleted(Me, New FCPTSAU_CIPEMG_SUBAURowChangeEvent(CType(e.Row,FCPTSAU_CIPEMG_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTSAU_CIPEMG_SUBAURowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTSAU_CIPEMG_SUBAURowDeleting(Me, New FCPTSAU_CIPEMG_SUBAURowChangeEvent(CType(e.Row,FCPTSAU_CIPEMG_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTSAU_CIPEMG_SUBAURow(ByVal row As FCPTSAU_CIPEMG_SUBAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTSAU_CIPEMG_SUBAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTPR_CIPEMG_PRODDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTPR_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTPR_PR_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTPR_CIPEMG_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTPR_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTPR_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTPR_PR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTPR_CIPEMG_PRODRow
            Get
                Return CType(Me.Rows(index),FCPTPR_CIPEMG_PRODRow)
            End Get
        End Property
        
        Public Event FCPTPR_CIPEMG_PRODRowChanging As FCPTPR_CIPEMG_PRODRowChangeEventHandler
        
        Public Event FCPTPR_CIPEMG_PRODRowChanged As FCPTPR_CIPEMG_PRODRowChangeEventHandler
        
        Public Event FCPTPR_CIPEMG_PRODRowDeleting As FCPTPR_CIPEMG_PRODRowChangeEventHandler
        
        Public Event FCPTPR_CIPEMG_PRODRowDeleted As FCPTPR_CIPEMG_PRODRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTPR_CIPEMG_PRODRow(ByVal row As FCPTPR_CIPEMG_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTPR_CIPEMG_PRODRow(ByVal FCPTPR_FCPT_CODE_FK_PK As Integer, ByVal FCPTPR_PR_CODE_FK_PK As Integer) As FCPTPR_CIPEMG_PRODRow
            Dim rowFCPTPR_CIPEMG_PRODRow As FCPTPR_CIPEMG_PRODRow = CType(Me.NewRow,FCPTPR_CIPEMG_PRODRow)
            rowFCPTPR_CIPEMG_PRODRow.ItemArray = New Object() {FCPTPR_FCPT_CODE_FK_PK, FCPTPR_PR_CODE_FK_PK}
            Me.Rows.Add(rowFCPTPR_CIPEMG_PRODRow)
            Return rowFCPTPR_CIPEMG_PRODRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTPR_FCPT_CODE_FK_PKFCPTPR_PR_CODE_FK_PK(ByVal FCPTPR_FCPT_CODE_FK_PK As Integer, ByVal FCPTPR_PR_CODE_FK_PK As Integer) As FCPTPR_CIPEMG_PRODRow
            Return CType(Me.Rows.Find(New Object() {FCPTPR_FCPT_CODE_FK_PK, FCPTPR_PR_CODE_FK_PK}),FCPTPR_CIPEMG_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTPR_CIPEMG_PRODDataTable = CType(MyBase.Clone,FCPTPR_CIPEMG_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTPR_CIPEMG_PRODDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTPR_FCPT_CODE_FK_PK = MyBase.Columns("FCPTPR_FCPT_CODE_FK_PK")
            Me.columnFCPTPR_PR_CODE_FK_PK = MyBase.Columns("FCPTPR_PR_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTPR_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTPR_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTPR_FCPT_CODE_FK_PK)
            Me.columnFCPTPR_PR_CODE_FK_PK = New System.Data.DataColumn("FCPTPR_PR_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTPR_FCPT_CODE_FK_PK, Me.columnFCPTPR_PR_CODE_FK_PK}, true))
            Me.columnFCPTPR_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTPR_CIPEMG_PRODRow() As FCPTPR_CIPEMG_PRODRow
            Return CType(Me.NewRow,FCPTPR_CIPEMG_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTPR_CIPEMG_PRODRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTPR_CIPEMG_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTPR_CIPEMG_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTPR_CIPEMG_PRODRowChanged(Me, New FCPTPR_CIPEMG_PRODRowChangeEvent(CType(e.Row,FCPTPR_CIPEMG_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTPR_CIPEMG_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTPR_CIPEMG_PRODRowChanging(Me, New FCPTPR_CIPEMG_PRODRowChangeEvent(CType(e.Row,FCPTPR_CIPEMG_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTPR_CIPEMG_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTPR_CIPEMG_PRODRowDeleted(Me, New FCPTPR_CIPEMG_PRODRowChangeEvent(CType(e.Row,FCPTPR_CIPEMG_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTPR_CIPEMG_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTPR_CIPEMG_PRODRowDeleting(Me, New FCPTPR_CIPEMG_PRODRowChangeEvent(CType(e.Row,FCPTPR_CIPEMG_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTPR_CIPEMG_PRODRow(ByVal row As FCPTPR_CIPEMG_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTPR_CIPEMG_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTSP_CIPEMG_SPEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTSP_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTSP_SP_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTSP_CIPEMG_SPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTSP_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTSP_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTSP_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTSP_CIPEMG_SPERow
            Get
                Return CType(Me.Rows(index),FCPTSP_CIPEMG_SPERow)
            End Get
        End Property
        
        Public Event FCPTSP_CIPEMG_SPERowChanging As FCPTSP_CIPEMG_SPERowChangeEventHandler
        
        Public Event FCPTSP_CIPEMG_SPERowChanged As FCPTSP_CIPEMG_SPERowChangeEventHandler
        
        Public Event FCPTSP_CIPEMG_SPERowDeleting As FCPTSP_CIPEMG_SPERowChangeEventHandler
        
        Public Event FCPTSP_CIPEMG_SPERowDeleted As FCPTSP_CIPEMG_SPERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTSP_CIPEMG_SPERow(ByVal row As FCPTSP_CIPEMG_SPERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTSP_CIPEMG_SPERow(ByVal FCPTSP_FCPT_CODE_FK_PK As Integer, ByVal FCPTSP_SP_CODE_FK_PK As Integer) As FCPTSP_CIPEMG_SPERow
            Dim rowFCPTSP_CIPEMG_SPERow As FCPTSP_CIPEMG_SPERow = CType(Me.NewRow,FCPTSP_CIPEMG_SPERow)
            rowFCPTSP_CIPEMG_SPERow.ItemArray = New Object() {FCPTSP_FCPT_CODE_FK_PK, FCPTSP_SP_CODE_FK_PK}
            Me.Rows.Add(rowFCPTSP_CIPEMG_SPERow)
            Return rowFCPTSP_CIPEMG_SPERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTSP_FCPT_CODE_FK_PKFCPTSP_SP_CODE_FK_PK(ByVal FCPTSP_FCPT_CODE_FK_PK As Integer, ByVal FCPTSP_SP_CODE_FK_PK As Integer) As FCPTSP_CIPEMG_SPERow
            Return CType(Me.Rows.Find(New Object() {FCPTSP_FCPT_CODE_FK_PK, FCPTSP_SP_CODE_FK_PK}),FCPTSP_CIPEMG_SPERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTSP_CIPEMG_SPEDataTable = CType(MyBase.Clone,FCPTSP_CIPEMG_SPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTSP_CIPEMG_SPEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTSP_FCPT_CODE_FK_PK = MyBase.Columns("FCPTSP_FCPT_CODE_FK_PK")
            Me.columnFCPTSP_SP_CODE_FK_PK = MyBase.Columns("FCPTSP_SP_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTSP_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTSP_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTSP_FCPT_CODE_FK_PK)
            Me.columnFCPTSP_SP_CODE_FK_PK = New System.Data.DataColumn("FCPTSP_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTSP_FCPT_CODE_FK_PK, Me.columnFCPTSP_SP_CODE_FK_PK}, true))
            Me.columnFCPTSP_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTSP_CIPEMG_SPERow() As FCPTSP_CIPEMG_SPERow
            Return CType(Me.NewRow,FCPTSP_CIPEMG_SPERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTSP_CIPEMG_SPERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTSP_CIPEMG_SPERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTSP_CIPEMG_SPERowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTSP_CIPEMG_SPERowChanged(Me, New FCPTSP_CIPEMG_SPERowChangeEvent(CType(e.Row,FCPTSP_CIPEMG_SPERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTSP_CIPEMG_SPERowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTSP_CIPEMG_SPERowChanging(Me, New FCPTSP_CIPEMG_SPERowChangeEvent(CType(e.Row,FCPTSP_CIPEMG_SPERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTSP_CIPEMG_SPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTSP_CIPEMG_SPERowDeleted(Me, New FCPTSP_CIPEMG_SPERowChangeEvent(CType(e.Row,FCPTSP_CIPEMG_SPERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTSP_CIPEMG_SPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTSP_CIPEMG_SPERowDeleting(Me, New FCPTSP_CIPEMG_SPERowChangeEvent(CType(e.Row,FCPTSP_CIPEMG_SPERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTSP_CIPEMG_SPERow(ByVal row As FCPTSP_CIPEMG_SPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTSP_CIPEMG_SPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTTX1_CIPEMG_TXCIDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTTX1_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTTX1_TXTCI As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTTX1_CIPEMG_TXCI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTTX1_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTTX1_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTTX1_TXTCIColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTTX1_TXTCI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTTX1_CIPEMG_TXCIRow
            Get
                Return CType(Me.Rows(index),FCPTTX1_CIPEMG_TXCIRow)
            End Get
        End Property
        
        Public Event FCPTTX1_CIPEMG_TXCIRowChanging As FCPTTX1_CIPEMG_TXCIRowChangeEventHandler
        
        Public Event FCPTTX1_CIPEMG_TXCIRowChanged As FCPTTX1_CIPEMG_TXCIRowChangeEventHandler
        
        Public Event FCPTTX1_CIPEMG_TXCIRowDeleting As FCPTTX1_CIPEMG_TXCIRowChangeEventHandler
        
        Public Event FCPTTX1_CIPEMG_TXCIRowDeleted As FCPTTX1_CIPEMG_TXCIRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTTX1_CIPEMG_TXCIRow(ByVal row As FCPTTX1_CIPEMG_TXCIRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTTX1_CIPEMG_TXCIRow(ByVal FCPTTX1_FCPT_CODE_FK_PK As Integer, ByVal FCPTTX1_TXTCI As String) As FCPTTX1_CIPEMG_TXCIRow
            Dim rowFCPTTX1_CIPEMG_TXCIRow As FCPTTX1_CIPEMG_TXCIRow = CType(Me.NewRow,FCPTTX1_CIPEMG_TXCIRow)
            rowFCPTTX1_CIPEMG_TXCIRow.ItemArray = New Object() {FCPTTX1_FCPT_CODE_FK_PK, FCPTTX1_TXTCI}
            Me.Rows.Add(rowFCPTTX1_CIPEMG_TXCIRow)
            Return rowFCPTTX1_CIPEMG_TXCIRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTTX1_FCPT_CODE_FK_PK(ByVal FCPTTX1_FCPT_CODE_FK_PK As Integer) As FCPTTX1_CIPEMG_TXCIRow
            Return CType(Me.Rows.Find(New Object() {FCPTTX1_FCPT_CODE_FK_PK}),FCPTTX1_CIPEMG_TXCIRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTTX1_CIPEMG_TXCIDataTable = CType(MyBase.Clone,FCPTTX1_CIPEMG_TXCIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTTX1_CIPEMG_TXCIDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTTX1_FCPT_CODE_FK_PK = MyBase.Columns("FCPTTX1_FCPT_CODE_FK_PK")
            Me.columnFCPTTX1_TXTCI = MyBase.Columns("FCPTTX1_TXTCI")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTTX1_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTTX1_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTTX1_FCPT_CODE_FK_PK)
            Me.columnFCPTTX1_TXTCI = New System.Data.DataColumn("FCPTTX1_TXTCI", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTTX1_TXTCI)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTTX1_FCPT_CODE_FK_PK}, true))
            Me.columnFCPTTX1_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTTX1_FCPT_CODE_FK_PK.Unique = true
            Me.columnFCPTTX1_TXTCI.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTTX1_CIPEMG_TXCIRow() As FCPTTX1_CIPEMG_TXCIRow
            Return CType(Me.NewRow,FCPTTX1_CIPEMG_TXCIRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTTX1_CIPEMG_TXCIRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTTX1_CIPEMG_TXCIRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTTX1_CIPEMG_TXCIRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTTX1_CIPEMG_TXCIRowChanged(Me, New FCPTTX1_CIPEMG_TXCIRowChangeEvent(CType(e.Row,FCPTTX1_CIPEMG_TXCIRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTTX1_CIPEMG_TXCIRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTTX1_CIPEMG_TXCIRowChanging(Me, New FCPTTX1_CIPEMG_TXCIRowChangeEvent(CType(e.Row,FCPTTX1_CIPEMG_TXCIRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTTX1_CIPEMG_TXCIRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTTX1_CIPEMG_TXCIRowDeleted(Me, New FCPTTX1_CIPEMG_TXCIRowChangeEvent(CType(e.Row,FCPTTX1_CIPEMG_TXCIRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTTX1_CIPEMG_TXCIRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTTX1_CIPEMG_TXCIRowDeleting(Me, New FCPTTX1_CIPEMG_TXCIRowChangeEvent(CType(e.Row,FCPTTX1_CIPEMG_TXCIRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTTX1_CIPEMG_TXCIRow(ByVal row As FCPTTX1_CIPEMG_TXCIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTTX1_CIPEMG_TXCIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTTX2_CIPEMG_TXPEMGDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTTX2_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTTX2_TXTPEMG As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTTX2_CIPEMG_TXPEMG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTTX2_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTTX2_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTTX2_TXTPEMGColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTTX2_TXTPEMG
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTTX2_CIPEMG_TXPEMGRow
            Get
                Return CType(Me.Rows(index),FCPTTX2_CIPEMG_TXPEMGRow)
            End Get
        End Property
        
        Public Event FCPTTX2_CIPEMG_TXPEMGRowChanging As FCPTTX2_CIPEMG_TXPEMGRowChangeEventHandler
        
        Public Event FCPTTX2_CIPEMG_TXPEMGRowChanged As FCPTTX2_CIPEMG_TXPEMGRowChangeEventHandler
        
        Public Event FCPTTX2_CIPEMG_TXPEMGRowDeleting As FCPTTX2_CIPEMG_TXPEMGRowChangeEventHandler
        
        Public Event FCPTTX2_CIPEMG_TXPEMGRowDeleted As FCPTTX2_CIPEMG_TXPEMGRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTTX2_CIPEMG_TXPEMGRow(ByVal row As FCPTTX2_CIPEMG_TXPEMGRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTTX2_CIPEMG_TXPEMGRow(ByVal FCPTTX2_FCPT_CODE_FK_PK As Integer, ByVal FCPTTX2_TXTPEMG As String) As FCPTTX2_CIPEMG_TXPEMGRow
            Dim rowFCPTTX2_CIPEMG_TXPEMGRow As FCPTTX2_CIPEMG_TXPEMGRow = CType(Me.NewRow,FCPTTX2_CIPEMG_TXPEMGRow)
            rowFCPTTX2_CIPEMG_TXPEMGRow.ItemArray = New Object() {FCPTTX2_FCPT_CODE_FK_PK, FCPTTX2_TXTPEMG}
            Me.Rows.Add(rowFCPTTX2_CIPEMG_TXPEMGRow)
            Return rowFCPTTX2_CIPEMG_TXPEMGRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTTX2_FCPT_CODE_FK_PK(ByVal FCPTTX2_FCPT_CODE_FK_PK As Integer) As FCPTTX2_CIPEMG_TXPEMGRow
            Return CType(Me.Rows.Find(New Object() {FCPTTX2_FCPT_CODE_FK_PK}),FCPTTX2_CIPEMG_TXPEMGRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTTX2_CIPEMG_TXPEMGDataTable = CType(MyBase.Clone,FCPTTX2_CIPEMG_TXPEMGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTTX2_CIPEMG_TXPEMGDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTTX2_FCPT_CODE_FK_PK = MyBase.Columns("FCPTTX2_FCPT_CODE_FK_PK")
            Me.columnFCPTTX2_TXTPEMG = MyBase.Columns("FCPTTX2_TXTPEMG")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTTX2_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTTX2_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTTX2_FCPT_CODE_FK_PK)
            Me.columnFCPTTX2_TXTPEMG = New System.Data.DataColumn("FCPTTX2_TXTPEMG", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTTX2_TXTPEMG)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTTX2_FCPT_CODE_FK_PK}, true))
            Me.columnFCPTTX2_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTTX2_FCPT_CODE_FK_PK.Unique = true
            Me.columnFCPTTX2_TXTPEMG.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTTX2_CIPEMG_TXPEMGRow() As FCPTTX2_CIPEMG_TXPEMGRow
            Return CType(Me.NewRow,FCPTTX2_CIPEMG_TXPEMGRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTTX2_CIPEMG_TXPEMGRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTTX2_CIPEMG_TXPEMGRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTTX2_CIPEMG_TXPEMGRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTTX2_CIPEMG_TXPEMGRowChanged(Me, New FCPTTX2_CIPEMG_TXPEMGRowChangeEvent(CType(e.Row,FCPTTX2_CIPEMG_TXPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTTX2_CIPEMG_TXPEMGRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTTX2_CIPEMG_TXPEMGRowChanging(Me, New FCPTTX2_CIPEMG_TXPEMGRowChangeEvent(CType(e.Row,FCPTTX2_CIPEMG_TXPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTTX2_CIPEMG_TXPEMGRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTTX2_CIPEMG_TXPEMGRowDeleted(Me, New FCPTTX2_CIPEMG_TXPEMGRowChangeEvent(CType(e.Row,FCPTTX2_CIPEMG_TXPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTTX2_CIPEMG_TXPEMGRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTTX2_CIPEMG_TXPEMGRowDeleting(Me, New FCPTTX2_CIPEMG_TXPEMGRowChangeEvent(CType(e.Row,FCPTTX2_CIPEMG_TXPEMGRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTTX2_CIPEMG_TXPEMGRow(ByVal row As FCPTTX2_CIPEMG_TXPEMGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTTX2_CIPEMG_TXPEMGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FCPTAFS_CIPEMG_AFSSAPSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFCPTAFS_FCPT_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTAFS_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFCPTAFS_DATE_PK As System.Data.DataColumn
        
        Private columnFCPTAFS_CDF_DOCUMENT_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FCPTAFS_CIPEMG_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTAFS_FCPT_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTAFS_FCPT_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTAFS_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTAFS_DATE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTAFS_DATE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FCPTAFS_CDF_DOCUMENT_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FCPTAFS_CIPEMG_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FCPTAFS_CIPEMG_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FCPTAFS_CIPEMG_AFSSAPSRowChanging As FCPTAFS_CIPEMG_AFSSAPSRowChangeEventHandler
        
        Public Event FCPTAFS_CIPEMG_AFSSAPSRowChanged As FCPTAFS_CIPEMG_AFSSAPSRowChangeEventHandler
        
        Public Event FCPTAFS_CIPEMG_AFSSAPSRowDeleting As FCPTAFS_CIPEMG_AFSSAPSRowChangeEventHandler
        
        Public Event FCPTAFS_CIPEMG_AFSSAPSRowDeleted As FCPTAFS_CIPEMG_AFSSAPSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFCPTAFS_CIPEMG_AFSSAPSRow(ByVal row As FCPTAFS_CIPEMG_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFCPTAFS_CIPEMG_AFSSAPSRow(ByVal FCPTAFS_FCPT_CODE_FK_PK As Integer, ByVal FCPTAFS_SP_CODE_FK_PK As Integer, ByVal FCPTAFS_DATE_PK As Date, ByVal FCPTAFS_CDF_DOCUMENT_FK_PK As String) As FCPTAFS_CIPEMG_AFSSAPSRow
            Dim rowFCPTAFS_CIPEMG_AFSSAPSRow As FCPTAFS_CIPEMG_AFSSAPSRow = CType(Me.NewRow,FCPTAFS_CIPEMG_AFSSAPSRow)
            rowFCPTAFS_CIPEMG_AFSSAPSRow.ItemArray = New Object() {FCPTAFS_FCPT_CODE_FK_PK, FCPTAFS_SP_CODE_FK_PK, FCPTAFS_DATE_PK, FCPTAFS_CDF_DOCUMENT_FK_PK}
            Me.Rows.Add(rowFCPTAFS_CIPEMG_AFSSAPSRow)
            Return rowFCPTAFS_CIPEMG_AFSSAPSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFCPTAFS_FCPT_CODE_FK_PKFCPTAFS_SP_CODE_FK_PKFCPTAFS_DATE_PKFCPTAFS_CDF_DOCUMENT_FK_PK(ByVal FCPTAFS_FCPT_CODE_FK_PK As Integer, ByVal FCPTAFS_SP_CODE_FK_PK As Integer, ByVal FCPTAFS_DATE_PK As Date, ByVal FCPTAFS_CDF_DOCUMENT_FK_PK As String) As FCPTAFS_CIPEMG_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FCPTAFS_FCPT_CODE_FK_PK, FCPTAFS_SP_CODE_FK_PK, FCPTAFS_DATE_PK, FCPTAFS_CDF_DOCUMENT_FK_PK}),FCPTAFS_CIPEMG_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FCPTAFS_CIPEMG_AFSSAPSDataTable = CType(MyBase.Clone,FCPTAFS_CIPEMG_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FCPTAFS_CIPEMG_AFSSAPSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFCPTAFS_FCPT_CODE_FK_PK = MyBase.Columns("FCPTAFS_FCPT_CODE_FK_PK")
            Me.columnFCPTAFS_SP_CODE_FK_PK = MyBase.Columns("FCPTAFS_SP_CODE_FK_PK")
            Me.columnFCPTAFS_DATE_PK = MyBase.Columns("FCPTAFS_DATE_PK")
            Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FCPTAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFCPTAFS_FCPT_CODE_FK_PK = New System.Data.DataColumn("FCPTAFS_FCPT_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTAFS_FCPT_CODE_FK_PK)
            Me.columnFCPTAFS_SP_CODE_FK_PK = New System.Data.DataColumn("FCPTAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTAFS_SP_CODE_FK_PK)
            Me.columnFCPTAFS_DATE_PK = New System.Data.DataColumn("FCPTAFS_DATE_PK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTAFS_DATE_PK)
            Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK = New System.Data.DataColumn("FCPTAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFCPTAFS_FCPT_CODE_FK_PK, Me.columnFCPTAFS_SP_CODE_FK_PK, Me.columnFCPTAFS_DATE_PK, Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFCPTAFS_FCPT_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFCPTAFS_DATE_PK.AllowDBNull = false
            Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFCPTAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFCPTAFS_CIPEMG_AFSSAPSRow() As FCPTAFS_CIPEMG_AFSSAPSRow
            Return CType(Me.NewRow,FCPTAFS_CIPEMG_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FCPTAFS_CIPEMG_AFSSAPSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FCPTAFS_CIPEMG_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FCPTAFS_CIPEMG_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FCPTAFS_CIPEMG_AFSSAPSRowChanged(Me, New FCPTAFS_CIPEMG_AFSSAPSRowChangeEvent(CType(e.Row,FCPTAFS_CIPEMG_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FCPTAFS_CIPEMG_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FCPTAFS_CIPEMG_AFSSAPSRowChanging(Me, New FCPTAFS_CIPEMG_AFSSAPSRowChangeEvent(CType(e.Row,FCPTAFS_CIPEMG_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FCPTAFS_CIPEMG_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FCPTAFS_CIPEMG_AFSSAPSRowDeleted(Me, New FCPTAFS_CIPEMG_AFSSAPSRowChangeEvent(CType(e.Row,FCPTAFS_CIPEMG_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FCPTAFS_CIPEMG_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FCPTAFS_CIPEMG_AFSSAPSRowDeleting(Me, New FCPTAFS_CIPEMG_AFSSAPSRowChangeEvent(CType(e.Row,FCPTAFS_CIPEMG_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFCPTAFS_CIPEMG_AFSSAPSRow(ByVal row As FCPTAFS_CIPEMG_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Cipemg_Texte = New dsTheriaque_Cipemg_Texte
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FCPTAFS_CIPEMG_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPT_FICHECIPEMGRow
        Inherits System.Data.DataRow
        
        Private tableFCPT_FICHECIPEMG As FCPT_FICHECIPEMGDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPT_FICHECIPEMG = CType(Me.Table,FCPT_FICHECIPEMGDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPT_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPT_FICHECIPEMG.FCPT_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPT_FICHECIPEMG.FCPT_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPT_DATECR() As Date
            Get
                Return CType(Me(Me.tableFCPT_FICHECIPEMG.FCPT_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFCPT_FICHECIPEMG.FCPT_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPT_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFCPT_FICHECIPEMG.FCPT_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCPT_DATEMJ' dans la table 'FCPT_FICHECIPEMG' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFCPT_FICHECIPEMG.FCPT_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCPT_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFCPT_FICHECIPEMG.FCPT_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCPT_DATEMJNull()
            Me(Me.tableFCPT_FICHECIPEMG.FCPT_DATEMJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTCPH_CIPEMG_CLPHRow
        Inherits System.Data.DataRow
        
        Private tableFCPTCPH_CIPEMG_CLPH As FCPTCPH_CIPEMG_CLPHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTCPH_CIPEMG_CLPH = CType(Me.Table,FCPTCPH_CIPEMG_CLPHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTCPH_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTCPH_CIPEMG_CLPH.FCPTCPH_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTCPH_CIPEMG_CLPH.FCPTCPH_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCPTCPH_CIPEMG_CLPH.FCPTCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCPTCPH_CIPEMG_CLPH.FCPTCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTCCH_CIPEMG_CLCHRow
        Inherits System.Data.DataRow
        
        Private tableFCPTCCH_CIPEMG_CLCH As FCPTCCH_CIPEMG_CLCHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTCCH_CIPEMG_CLCH = CType(Me.Table,FCPTCCH_CIPEMG_CLCHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTCCH_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTCCH_CIPEMG_CLCH.FCPTCCH_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTCCH_CIPEMG_CLCH.FCPTCCH_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCPTCCH_CIPEMG_CLCH.FCPTCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCPTCCH_CIPEMG_CLCH.FCPTCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTSAC_CIPEMG_SUBACRow
        Inherits System.Data.DataRow
        
        Private tableFCPTSAC_CIPEMG_SUBAC As FCPTSAC_CIPEMG_SUBACDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTSAC_CIPEMG_SUBAC = CType(Me.Table,FCPTSAC_CIPEMG_SUBACDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTSAC_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTSAC_CIPEMG_SUBAC.FCPTSAC_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTSAC_CIPEMG_SUBAC.FCPTSAC_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTSAC_CIPEMG_SUBAC.FCPTSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTSAC_CIPEMG_SUBAC.FCPTSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTSAU_CIPEMG_SUBAURow
        Inherits System.Data.DataRow
        
        Private tableFCPTSAU_CIPEMG_SUBAU As FCPTSAU_CIPEMG_SUBAUDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTSAU_CIPEMG_SUBAU = CType(Me.Table,FCPTSAU_CIPEMG_SUBAUDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTSAU_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTSAU_CIPEMG_SUBAU.FCPTSAU_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTSAU_CIPEMG_SUBAU.FCPTSAU_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTSAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTSAU_CIPEMG_SUBAU.FCPTSAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTSAU_CIPEMG_SUBAU.FCPTSAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTPR_CIPEMG_PRODRow
        Inherits System.Data.DataRow
        
        Private tableFCPTPR_CIPEMG_PROD As FCPTPR_CIPEMG_PRODDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTPR_CIPEMG_PROD = CType(Me.Table,FCPTPR_CIPEMG_PRODDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTPR_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTPR_CIPEMG_PROD.FCPTPR_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTPR_CIPEMG_PROD.FCPTPR_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTPR_CIPEMG_PROD.FCPTPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTPR_CIPEMG_PROD.FCPTPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTSP_CIPEMG_SPERow
        Inherits System.Data.DataRow
        
        Private tableFCPTSP_CIPEMG_SPE As FCPTSP_CIPEMG_SPEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTSP_CIPEMG_SPE = CType(Me.Table,FCPTSP_CIPEMG_SPEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTSP_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTSP_CIPEMG_SPE.FCPTSP_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTSP_CIPEMG_SPE.FCPTSP_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTSP_CIPEMG_SPE.FCPTSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTSP_CIPEMG_SPE.FCPTSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTTX1_CIPEMG_TXCIRow
        Inherits System.Data.DataRow
        
        Private tableFCPTTX1_CIPEMG_TXCI As FCPTTX1_CIPEMG_TXCIDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTTX1_CIPEMG_TXCI = CType(Me.Table,FCPTTX1_CIPEMG_TXCIDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTTX1_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTTX1_CIPEMG_TXCI.FCPTTX1_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTTX1_CIPEMG_TXCI.FCPTTX1_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTTX1_TXTCI() As String
            Get
                Try 
                    Return CType(Me(Me.tableFCPTTX1_CIPEMG_TXCI.FCPTTX1_TXTCIColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCPTTX1_TXTCI' dans la table 'FCPTTX1_CIPEMG_TXCI' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFCPTTX1_CIPEMG_TXCI.FCPTTX1_TXTCIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCPTTX1_TXTCINull() As Boolean
            Return Me.IsNull(Me.tableFCPTTX1_CIPEMG_TXCI.FCPTTX1_TXTCIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCPTTX1_TXTCINull()
            Me(Me.tableFCPTTX1_CIPEMG_TXCI.FCPTTX1_TXTCIColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTTX2_CIPEMG_TXPEMGRow
        Inherits System.Data.DataRow
        
        Private tableFCPTTX2_CIPEMG_TXPEMG As FCPTTX2_CIPEMG_TXPEMGDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTTX2_CIPEMG_TXPEMG = CType(Me.Table,FCPTTX2_CIPEMG_TXPEMGDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTTX2_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTTX2_CIPEMG_TXPEMG.FCPTTX2_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTTX2_CIPEMG_TXPEMG.FCPTTX2_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTTX2_TXTPEMG() As String
            Get
                Try 
                    Return CType(Me(Me.tableFCPTTX2_CIPEMG_TXPEMG.FCPTTX2_TXTPEMGColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FCPTTX2_TXTPEMG' dans la table 'FCPTTX2_CIPEMG_TXPEMG'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFCPTTX2_CIPEMG_TXPEMG.FCPTTX2_TXTPEMGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFCPTTX2_TXTPEMGNull() As Boolean
            Return Me.IsNull(Me.tableFCPTTX2_CIPEMG_TXPEMG.FCPTTX2_TXTPEMGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFCPTTX2_TXTPEMGNull()
            Me(Me.tableFCPTTX2_CIPEMG_TXPEMG.FCPTTX2_TXTPEMGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FCPTAFS_CIPEMG_AFSSAPSRow
        Inherits System.Data.DataRow
        
        Private tableFCPTAFS_CIPEMG_AFSSAPS As FCPTAFS_CIPEMG_AFSSAPSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFCPTAFS_CIPEMG_AFSSAPS = CType(Me.Table,FCPTAFS_CIPEMG_AFSSAPSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTAFS_FCPT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_FCPT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_FCPT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FCPTAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFCPTAFS_CIPEMG_AFSSAPS.FCPTAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPT_FICHECIPEMGRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPT_FICHECIPEMGRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPT_FICHECIPEMGRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPT_FICHECIPEMGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTCPH_CIPEMG_CLPHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTCPH_CIPEMG_CLPHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTCPH_CIPEMG_CLPHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTCPH_CIPEMG_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTCCH_CIPEMG_CLCHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTCCH_CIPEMG_CLCHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTCCH_CIPEMG_CLCHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTCCH_CIPEMG_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTSAC_CIPEMG_SUBACRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTSAC_CIPEMG_SUBACRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTSAC_CIPEMG_SUBACRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTSAC_CIPEMG_SUBACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTSAU_CIPEMG_SUBAURowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTSAU_CIPEMG_SUBAURow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTSAU_CIPEMG_SUBAURow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTSAU_CIPEMG_SUBAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTPR_CIPEMG_PRODRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTPR_CIPEMG_PRODRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTPR_CIPEMG_PRODRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTPR_CIPEMG_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTSP_CIPEMG_SPERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTSP_CIPEMG_SPERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTSP_CIPEMG_SPERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTSP_CIPEMG_SPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTTX1_CIPEMG_TXCIRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTTX1_CIPEMG_TXCIRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTTX1_CIPEMG_TXCIRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTTX1_CIPEMG_TXCIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTTX2_CIPEMG_TXPEMGRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTTX2_CIPEMG_TXPEMGRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTTX2_CIPEMG_TXPEMGRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTTX2_CIPEMG_TXPEMGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FCPTAFS_CIPEMG_AFSSAPSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FCPTAFS_CIPEMG_AFSSAPSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FCPTAFS_CIPEMG_AFSSAPSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FCPTAFS_CIPEMG_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Cipemg_TexteTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCPT_FICHECIPEMGTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPT_FICHECIPEMG"
            tableMapping.ColumnMappings.Add("FCPT_CODE_SQ_PK", "FCPT_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FCPT_DATECR", "FCPT_DATECR")
            tableMapping.ColumnMappings.Add("FCPT_DATEMJ", "FCPT_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPT_FICHECIPEMG] WHERE (([FCPT_CODE_SQ_PK] = @Original_"& _ 
                "FCPT_CODE_SQ_PK) AND ([FCPT_DATECR] = @Original_FCPT_DATECR) AND ((@IsNull_FCPT_"& _ 
                "DATEMJ = 1 AND [FCPT_DATEMJ] IS NULL) OR ([FCPT_DATEMJ] = @Original_FCPT_DATEMJ)"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPT_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPT_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCPT_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPT_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPT_FICHECIPEMG] ([FCPT_CODE_SQ_PK], [FCPT_DATECR], [FC"& _ 
                "PT_DATEMJ]) VALUES (@FCPT_CODE_SQ_PK, @FCPT_DATECR, @FCPT_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPT_"& _ 
                "CODE_SQ_PK, FCPT_DATECR, FCPT_DATEMJ FROM THERIAQUE.FCPT_FICHECIPEMG WHERE (FCPT"& _ 
                "_CODE_SQ_PK = @FCPT_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPT_FICHECIPEMG] SET [FCPT_CODE_SQ_PK] = @FCPT_CODE_SQ_PK, ["& _ 
                "FCPT_DATECR] = @FCPT_DATECR, [FCPT_DATEMJ] = @FCPT_DATEMJ WHERE (([FCPT_CODE_SQ_"& _ 
                "PK] = @Original_FCPT_CODE_SQ_PK) AND ([FCPT_DATECR] = @Original_FCPT_DATECR) AND"& _ 
                " ((@IsNull_FCPT_DATEMJ = 1 AND [FCPT_DATEMJ] IS NULL) OR ([FCPT_DATEMJ] = @Origi"& _ 
                "nal_FCPT_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPT_CODE_SQ_PK, FCPT_DATECR, FCPT_DATEMJ FROM THERI"& _ 
                "AQUE.FCPT_FICHECIPEMG WHERE (FCPT_CODE_SQ_PK = @FCPT_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPT_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPT_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FCPT_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPT_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPT_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPT_CODE_SQ_PK, FCPT_DATECR, FCPT_DATEMJ FROM THERIAQUE.FCPT_FICHECIPEMG"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPT_CODE_SQ_PK, FCPT_DATECR, FCPT_DATEMJ FROM THERIAQUE.FCPT_FICHECIPEMG" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPT_CODE_SQ_PK = @FCPT_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPT_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPT_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable = New dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable, ByVal FCPT_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPT_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPT_CODE_SQ_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPT_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable = New dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPT_FICHECIPEMGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPT_FICHECIPEMG")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPT_CODE_SQ_PK As Integer, ByVal Original_FCPT_DATECR As Date, ByVal Original_FCPT_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPT_CODE_SQ_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPT_DATECR, Date)
            If (Original_FCPT_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FCPT_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPT_CODE_SQ_PK As Integer, ByVal FCPT_DATECR As Date, ByVal FCPT_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPT_CODE_SQ_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPT_DATECR, Date)
            If (FCPT_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FCPT_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPT_CODE_SQ_PK As Integer, ByVal FCPT_DATECR As Date, ByVal FCPT_DATEMJ As System.Nullable(Of Date), ByVal Original_FCPT_CODE_SQ_PK As Integer, ByVal Original_FCPT_DATECR As Date, ByVal Original_FCPT_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPT_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPT_DATECR, Date)
            If (FCPT_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FCPT_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPT_CODE_SQ_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FCPT_DATECR, Date)
            If (Original_FCPT_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FCPT_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCPTCPH_CIPEMG_CLPHTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTCPH_CIPEMG_CLPH"
            tableMapping.ColumnMappings.Add("FCPTCPH_FCPT_CODE_FK_PK", "FCPTCPH_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTCPH_CPH_CODE_FK_PK", "FCPTCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTCPH_CIPEMG_CLPH] WHERE (([FCPTCPH_FCPT_CODE_FK_PK] =" & _
                " @Original_FCPTCPH_FCPT_CODE_FK_PK) AND ([FCPTCPH_CPH_CODE_FK_PK] = @Original_FC" & _
                "PTCPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCPH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTCPH_CIPEMG_CLPH] ([FCPTCPH_FCPT_CODE_FK_PK], [FCPTCP" & _
                "H_CPH_CODE_FK_PK]) VALUES (@FCPTCPH_FCPT_CODE_FK_PK, @FCPTCPH_CPH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT FCPTCPH_FCPT_CODE_FK_PK, FCPTCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCPTCPH_CI" & _
                "PEMG_CLPH WHERE (FCPTCPH_CPH_CODE_FK_PK = @FCPTCPH_CPH_CODE_FK_PK) AND (FCPTCPH_" & _
                "FCPT_CODE_FK_PK = @FCPTCPH_FCPT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCPH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTCPH_CIPEMG_CLPH] SET [FCPTCPH_FCPT_CODE_FK_PK] = @FCPTCPH" & _
                "_FCPT_CODE_FK_PK, [FCPTCPH_CPH_CODE_FK_PK] = @FCPTCPH_CPH_CODE_FK_PK WHERE (([FC" & _
                "PTCPH_FCPT_CODE_FK_PK] = @Original_FCPTCPH_FCPT_CODE_FK_PK) AND ([FCPTCPH_CPH_CO" & _
                "DE_FK_PK] = @Original_FCPTCPH_CPH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTCPH_FCPT_CODE_FK_PK," & _
                " FCPTCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCPTCPH_CIPEMG_CLPH WHERE (FCPTCPH_CPH_CO" & _
                "DE_FK_PK = @FCPTCPH_CPH_CODE_FK_PK) AND (FCPTCPH_FCPT_CODE_FK_PK = @FCPTCPH_FCPT" & _
                "_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCPH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCPH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTCPH_FCPT_CODE_FK_PK, FCPTCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCPTCPH_CIP" & _
                "EMG_CLPH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTCPH_FCPT_CODE_FK_PK, FCPTCPH_CPH_CODE_FK_PK FROM THERIAQUE.FCPTCPH_CIP" & _
                "EMG_CLPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTCPH_FCPT_CODE_FK_PK = @FCPTCPH_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCPH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTCPH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable = New dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable, ByVal FCPTCPH_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTCPH_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTCPH_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTCPH_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable = New dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTCPH_CIPEMG_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTCPH_CIPEMG_CLPH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTCPH_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTCPH_FCPT_CODE_FK_PK, Integer)
            If (Original_FCPTCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCPTCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTCPH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTCPH_FCPT_CODE_FK_PK, Integer)
            If (FCPTCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCPTCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTCPH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCPH_CPH_CODE_FK_PK As String, ByVal Original_FCPTCPH_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTCPH_FCPT_CODE_FK_PK, Integer)
            If (FCPTCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCPTCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTCPH_FCPT_CODE_FK_PK, Integer)
            If (Original_FCPTCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCPTCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPTCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCPTCCH_CIPEMG_CLCHTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTCCH_CIPEMG_CLCH"
            tableMapping.ColumnMappings.Add("FCPTCCH_FCPT_CODE_FK_PK", "FCPTCCH_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTCCH_CCH_CODE_FK_PK", "FCPTCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTCCH_CIPEMG_CLCH] WHERE (([FCPTCCH_FCPT_CODE_FK_PK] ="& _ 
                " @Original_FCPTCCH_FCPT_CODE_FK_PK) AND ([FCPTCCH_CCH_CODE_FK_PK] = @Original_FC"& _ 
                "PTCCH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCCH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTCCH_CIPEMG_CLCH] ([FCPTCCH_FCPT_CODE_FK_PK], [FCPTCC"& _ 
                "H_CCH_CODE_FK_PK]) VALUES (@FCPTCCH_FCPT_CODE_FK_PK, @FCPTCCH_CCH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT FCPTCCH_FCPT_CODE_FK_PK, FCPTCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCPTCCH_CI"& _ 
                "PEMG_CLCH WHERE (FCPTCCH_CCH_CODE_FK_PK = @FCPTCCH_CCH_CODE_FK_PK) AND (FCPTCCH_"& _ 
                "FCPT_CODE_FK_PK = @FCPTCCH_FCPT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCCH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTCCH_CIPEMG_CLCH] SET [FCPTCCH_FCPT_CODE_FK_PK] = @FCPTCCH"& _ 
                "_FCPT_CODE_FK_PK, [FCPTCCH_CCH_CODE_FK_PK] = @FCPTCCH_CCH_CODE_FK_PK WHERE (([FC"& _ 
                "PTCCH_FCPT_CODE_FK_PK] = @Original_FCPTCCH_FCPT_CODE_FK_PK) AND ([FCPTCCH_CCH_CO"& _ 
                "DE_FK_PK] = @Original_FCPTCCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPTCCH_FCPT_CODE_FK_PK,"& _ 
                " FCPTCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCPTCCH_CIPEMG_CLCH WHERE (FCPTCCH_CCH_CO"& _ 
                "DE_FK_PK = @FCPTCCH_CCH_CODE_FK_PK) AND (FCPTCCH_FCPT_CODE_FK_PK = @FCPTCCH_FCPT"& _ 
                "_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCCH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCCH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTCCH_FCPT_CODE_FK_PK, FCPTCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCPTCCH_CIP" & _
                "EMG_CLCH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTCCH_FCPT_CODE_FK_PK, FCPTCCH_CCH_CODE_FK_PK FROM THERIAQUE.FCPTCCH_CIP" & _
                "EMG_CLCH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTCCH_FCPT_CODE_FK_PK = @FCPTCCH_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTCCH_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTCCH_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable = New dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable, ByVal FCPTCCH_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTCCH_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTCCH_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTCCH_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable = New dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTCCH_CIPEMG_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTCCH_CIPEMG_CLCH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTCCH_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTCCH_FCPT_CODE_FK_PK, Integer)
            If (Original_FCPTCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCPTCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTCCH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTCCH_FCPT_CODE_FK_PK, Integer)
            If (FCPTCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCPTCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTCCH_FCPT_CODE_FK_PK As Integer, ByVal FCPTCCH_CCH_CODE_FK_PK As String, ByVal Original_FCPTCCH_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTCCH_FCPT_CODE_FK_PK, Integer)
            If (FCPTCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCPTCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTCCH_FCPT_CODE_FK_PK, Integer)
            If (Original_FCPTCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCPTCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPTCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCPTSAC_CIPEMG_SUBACTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTSAC_CIPEMG_SUBAC"
            tableMapping.ColumnMappings.Add("FCPTSAC_FCPT_CODE_FK_PK", "FCPTSAC_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTSAC_SAC_CODE_FK_PK", "FCPTSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTSAC_CIPEMG_SUBAC] WHERE (([FCPTSAC_FCPT_CODE_FK_PK] " & _
                "= @Original_FCPTSAC_FCPT_CODE_FK_PK) AND ([FCPTSAC_SAC_CODE_FK_PK] = @Original_F" & _
                "CPTSAC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAC_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTSAC_CIPEMG_SUBAC] ([FCPTSAC_FCPT_CODE_FK_PK], [FCPTS" & _
                "AC_SAC_CODE_FK_PK]) VALUES (@FCPTSAC_FCPT_CODE_FK_PK, @FCPTSAC_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTSAC_FCPT_CODE_FK_PK, FCPTSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCPTSAC_C" & _
                "IPEMG_SUBAC WHERE (FCPTSAC_FCPT_CODE_FK_PK = @FCPTSAC_FCPT_CODE_FK_PK) AND (FCPT" & _
                "SAC_SAC_CODE_FK_PK = @FCPTSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAC_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTSAC_CIPEMG_SUBAC] SET [FCPTSAC_FCPT_CODE_FK_PK] = @FCPTSA" & _
                "C_FCPT_CODE_FK_PK, [FCPTSAC_SAC_CODE_FK_PK] = @FCPTSAC_SAC_CODE_FK_PK WHERE (([F" & _
                "CPTSAC_FCPT_CODE_FK_PK] = @Original_FCPTSAC_FCPT_CODE_FK_PK) AND ([FCPTSAC_SAC_C" & _
                "ODE_FK_PK] = @Original_FCPTSAC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTSAC_FCPT_CODE_FK_PK" & _
                ", FCPTSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCPTSAC_CIPEMG_SUBAC WHERE (FCPTSAC_FCPT" & _
                "_CODE_FK_PK = @FCPTSAC_FCPT_CODE_FK_PK) AND (FCPTSAC_SAC_CODE_FK_PK = @FCPTSAC_S" & _
                "AC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAC_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAC_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTSAC_FCPT_CODE_FK_PK, FCPTSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCPTSAC_CIP" & _
                "EMG_SUBAC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTSAC_FCPT_CODE_FK_PK, FCPTSAC_SAC_CODE_FK_PK FROM THERIAQUE.FCPTSAC_CIP" & _
                "EMG_SUBAC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTSAC_FCPT_CODE_FK_PK = @FCPTSAC_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAC_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAC_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable = New dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable, ByVal FCPTSAC_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTSAC_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTSAC_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTSAC_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable = New dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSAC_CIPEMG_SUBACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTSAC_CIPEMG_SUBAC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTSAC_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTSAC_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTSAC_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTSAC_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTSAC_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FCPTSAC_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTSAC_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTSAC_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPTSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCPTSAU_CIPEMG_SUBAUTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTSAU_CIPEMG_SUBAU"
            tableMapping.ColumnMappings.Add("FCPTSAU_FCPT_CODE_FK_PK", "FCPTSAU_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTSAU_SAU_CODE_FK_PK", "FCPTSAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTSAU_CIPEMG_SUBAU] WHERE (([FCPTSAU_FCPT_CODE_FK_PK] "& _ 
                "= @Original_FCPTSAU_FCPT_CODE_FK_PK) AND ([FCPTSAU_SAU_CODE_FK_PK] = @Original_F"& _ 
                "CPTSAU_SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAU_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTSAU_CIPEMG_SUBAU] ([FCPTSAU_FCPT_CODE_FK_PK], [FCPTS"& _ 
                "AU_SAU_CODE_FK_PK]) VALUES (@FCPTSAU_FCPT_CODE_FK_PK, @FCPTSAU_SAU_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPTSAU_FCPT_CODE_FK_PK, FCPTSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCPTSAU_C"& _ 
                "IPEMG_SUBAU WHERE (FCPTSAU_FCPT_CODE_FK_PK = @FCPTSAU_FCPT_CODE_FK_PK) AND (FCPT"& _ 
                "SAU_SAU_CODE_FK_PK = @FCPTSAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAU_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTSAU_CIPEMG_SUBAU] SET [FCPTSAU_FCPT_CODE_FK_PK] = @FCPTSA"& _ 
                "U_FCPT_CODE_FK_PK, [FCPTSAU_SAU_CODE_FK_PK] = @FCPTSAU_SAU_CODE_FK_PK WHERE (([F"& _ 
                "CPTSAU_FCPT_CODE_FK_PK] = @Original_FCPTSAU_FCPT_CODE_FK_PK) AND ([FCPTSAU_SAU_C"& _ 
                "ODE_FK_PK] = @Original_FCPTSAU_SAU_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPTSAU_FCPT_CODE_FK_PK"& _ 
                ", FCPTSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCPTSAU_CIPEMG_SUBAU WHERE (FCPTSAU_FCPT"& _ 
                "_CODE_FK_PK = @FCPTSAU_FCPT_CODE_FK_PK) AND (FCPTSAU_SAU_CODE_FK_PK = @FCPTSAU_S"& _ 
                "AU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAU_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAU_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSAU_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTSAU_FCPT_CODE_FK_PK, FCPTSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCPTSAU_CIP" & _
                "EMG_SUBAU"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTSAU_FCPT_CODE_FK_PK, FCPTSAU_SAU_CODE_FK_PK FROM THERIAQUE.FCPTSAU_CIP" & _
                "EMG_SUBAU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTSAU_FCPT_CODE_FK_PK = @FCPTSAU_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSAU_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTSAU_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable = New dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable, ByVal FCPTSAU_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTSAU_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTSAU_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTSAU_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable = New dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSAU_CIPEMG_SUBAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTSAU_CIPEMG_SUBAU")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTSAU_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTSAU_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTSAU_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTSAU_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTSAU_FCPT_CODE_FK_PK As Integer, ByVal FCPTSAU_SAU_CODE_FK_PK As Integer, ByVal Original_FCPTSAU_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTSAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTSAU_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTSAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTSAU_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPTSAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCPTPR_CIPEMG_PRODTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTPR_CIPEMG_PROD"
            tableMapping.ColumnMappings.Add("FCPTPR_FCPT_CODE_FK_PK", "FCPTPR_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTPR_PR_CODE_FK_PK", "FCPTPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTPR_CIPEMG_PROD] WHERE (([FCPTPR_FCPT_CODE_FK_PK] = @" & _
                "Original_FCPTPR_FCPT_CODE_FK_PK) AND ([FCPTPR_PR_CODE_FK_PK] = @Original_FCPTPR_" & _
                "PR_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTPR_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTPR_CIPEMG_PROD] ([FCPTPR_FCPT_CODE_FK_PK], [FCPTPR_P" & _
                "R_CODE_FK_PK]) VALUES (@FCPTPR_FCPT_CODE_FK_PK, @FCPTPR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT " & _
                "FCPTPR_FCPT_CODE_FK_PK, FCPTPR_PR_CODE_FK_PK FROM THERIAQUE.FCPTPR_CIPEMG_PROD W" & _
                "HERE (FCPTPR_FCPT_CODE_FK_PK = @FCPTPR_FCPT_CODE_FK_PK) AND (FCPTPR_PR_CODE_FK_P" & _
                "K = @FCPTPR_PR_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTPR_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTPR_CIPEMG_PROD] SET [FCPTPR_FCPT_CODE_FK_PK] = @FCPTPR_FC" & _
                "PT_CODE_FK_PK, [FCPTPR_PR_CODE_FK_PK] = @FCPTPR_PR_CODE_FK_PK WHERE (([FCPTPR_FC" & _
                "PT_CODE_FK_PK] = @Original_FCPTPR_FCPT_CODE_FK_PK) AND ([FCPTPR_PR_CODE_FK_PK] =" & _
                " @Original_FCPTPR_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTPR_FCPT_CODE_FK_PK, FCPTPR_PR_COD" & _
                "E_FK_PK FROM THERIAQUE.FCPTPR_CIPEMG_PROD WHERE (FCPTPR_FCPT_CODE_FK_PK = @FCPTP" & _
                "R_FCPT_CODE_FK_PK) AND (FCPTPR_PR_CODE_FK_PK = @FCPTPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTPR_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTPR_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTPR_FCPT_CODE_FK_PK, FCPTPR_PR_CODE_FK_PK FROM THERIAQUE.FCPTPR_CIPEMG_" & _
                "PROD"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTPR_FCPT_CODE_FK_PK, FCPTPR_PR_CODE_FK_PK FROM THERIAQUE.FCPTPR_CIPEMG_" & _
                "PROD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTPR_FCPT_CODE_FK_PK = @FCPTPR_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTPR_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTPR_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable = New dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable, ByVal FCPTPR_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTPR_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTPR_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTPR_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable = New dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTPR_CIPEMG_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTPR_CIPEMG_PROD")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTPR_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTPR_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTPR_FCPT_CODE_FK_PK As Integer, ByVal FCPTPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTPR_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTPR_FCPT_CODE_FK_PK As Integer, ByVal FCPTPR_PR_CODE_FK_PK As Integer, ByVal Original_FCPTPR_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTPR_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTPR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTPR_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPTPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCPTSP_CIPEMG_SPETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTSP_CIPEMG_SPE"
            tableMapping.ColumnMappings.Add("FCPTSP_FCPT_CODE_FK_PK", "FCPTSP_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTSP_SP_CODE_FK_PK", "FCPTSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTSP_CIPEMG_SPE] WHERE (([FCPTSP_FCPT_CODE_FK_PK] = @O"& _ 
                "riginal_FCPTSP_FCPT_CODE_FK_PK) AND ([FCPTSP_SP_CODE_FK_PK] = @Original_FCPTSP_S"& _ 
                "P_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSP_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTSP_CIPEMG_SPE] ([FCPTSP_FCPT_CODE_FK_PK], [FCPTSP_SP"& _ 
                "_CODE_FK_PK]) VALUES (@FCPTSP_FCPT_CODE_FK_PK, @FCPTSP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT F"& _ 
                "CPTSP_FCPT_CODE_FK_PK, FCPTSP_SP_CODE_FK_PK FROM THERIAQUE.FCPTSP_CIPEMG_SPE WHE"& _ 
                "RE (FCPTSP_FCPT_CODE_FK_PK = @FCPTSP_FCPT_CODE_FK_PK) AND (FCPTSP_SP_CODE_FK_PK "& _ 
                "= @FCPTSP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSP_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTSP_CIPEMG_SPE] SET [FCPTSP_FCPT_CODE_FK_PK] = @FCPTSP_FCP"& _ 
                "T_CODE_FK_PK, [FCPTSP_SP_CODE_FK_PK] = @FCPTSP_SP_CODE_FK_PK WHERE (([FCPTSP_FCP"& _ 
                "T_CODE_FK_PK] = @Original_FCPTSP_FCPT_CODE_FK_PK) AND ([FCPTSP_SP_CODE_FK_PK] = "& _ 
                "@Original_FCPTSP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPTSP_FCPT_CODE_FK_PK, FCPTSP_SP_CODE"& _ 
                "_FK_PK FROM THERIAQUE.FCPTSP_CIPEMG_SPE WHERE (FCPTSP_FCPT_CODE_FK_PK = @FCPTSP_"& _ 
                "FCPT_CODE_FK_PK) AND (FCPTSP_SP_CODE_FK_PK = @FCPTSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSP_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSP_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTSP_FCPT_CODE_FK_PK, FCPTSP_SP_CODE_FK_PK FROM THERIAQUE.FCPTSP_CIPEMG_" & _
                "SPE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTSP_FCPT_CODE_FK_PK, FCPTSP_SP_CODE_FK_PK FROM THERIAQUE.FCPTSP_CIPEMG_" & _
                "SPE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTSP_FCPT_CODE_FK_PK = @FCPTSP_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTSP_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTSP_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable = New dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable, ByVal FCPTSP_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTSP_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTSP_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTSP_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable = New dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTSP_CIPEMG_SPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTSP_CIPEMG_SPE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTSP_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTSP_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTSP_FCPT_CODE_FK_PK As Integer, ByVal FCPTSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTSP_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTSP_FCPT_CODE_FK_PK As Integer, ByVal FCPTSP_SP_CODE_FK_PK As Integer, ByVal Original_FCPTSP_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTSP_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTSP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTSP_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FCPTSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCPTTX1_CIPEMG_TXCITableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTTX1_CIPEMG_TXCI"
            tableMapping.ColumnMappings.Add("FCPTTX1_FCPT_CODE_FK_PK", "FCPTTX1_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTTX1_TXTCI", "FCPTTX1_TXTCI")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTTX1_CIPEMG_TXCI] WHERE (([FCPTTX1_FCPT_CODE_FK_PK] =" & _
                " @Original_FCPTTX1_FCPT_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTTX1_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTTX1_CIPEMG_TXCI] ([FCPTTX1_FCPT_CODE_FK_PK], [FCPTTX" & _
                "1_TXTCI]) VALUES (@FCPTTX1_FCPT_CODE_FK_PK, @FCPTTX1_TXTCI);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTTX1_FCP" & _
                "T_CODE_FK_PK, FCPTTX1_TXTCI FROM THERIAQUE.FCPTTX1_CIPEMG_TXCI WHERE (FCPTTX1_FC" & _
                "PT_CODE_FK_PK = @FCPTTX1_FCPT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX1_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX1_TXTCI", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_TXTCI", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTTX1_CIPEMG_TXCI] SET [FCPTTX1_FCPT_CODE_FK_PK] = @FCPTTX1" & _
                "_FCPT_CODE_FK_PK, [FCPTTX1_TXTCI] = @FCPTTX1_TXTCI WHERE (([FCPTTX1_FCPT_CODE_FK" & _
                "_PK] = @Original_FCPTTX1_FCPT_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTTX1_FCPT_CODE_FK_PK, FCP" & _
                "TTX1_TXTCI FROM THERIAQUE.FCPTTX1_CIPEMG_TXCI WHERE (FCPTTX1_FCPT_CODE_FK_PK = @" & _
                "FCPTTX1_FCPT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX1_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX1_TXTCI", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_TXTCI", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTTX1_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTTX1_FCPT_CODE_FK_PK, FCPTTX1_TXTCI FROM THERIAQUE.FCPTTX1_CIPEMG_TXCI"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTTX1_FCPT_CODE_FK_PK, FCPTTX1_TXTCI FROM THERIAQUE.FCPTTX1_CIPEMG_TXCI" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTTX1_FCPT_CODE_FK_PK = @FCPTTX1_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX1_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX1_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable = New dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable, ByVal FCPTTX1_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTTX1_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTTX1_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTTX1_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable = New dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTTX1_CIPEMG_TXCIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTTX1_CIPEMG_TXCI")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTTX1_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTTX1_FCPT_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTTX1_FCPT_CODE_FK_PK As Integer, ByVal FCPTTX1_TXTCI As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTTX1_FCPT_CODE_FK_PK, Integer)
            If (FCPTTX1_TXTCI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTTX1_TXTCI, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTTX1_FCPT_CODE_FK_PK As Integer, ByVal FCPTTX1_TXTCI As String, ByVal Original_FCPTTX1_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTTX1_FCPT_CODE_FK_PK, Integer)
            If (FCPTTX1_TXTCI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTTX1_TXTCI, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTTX1_FCPT_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FCPTTX2_CIPEMG_TXPEMGTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTTX2_CIPEMG_TXPEMG"
            tableMapping.ColumnMappings.Add("FCPTTX2_FCPT_CODE_FK_PK", "FCPTTX2_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTTX2_TXTPEMG", "FCPTTX2_TXTPEMG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTTX2_CIPEMG_TXPEMG] WHERE (([FCPTTX2_FCPT_CODE_FK_PK]"& _ 
                " = @Original_FCPTTX2_FCPT_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTTX2_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTTX2_CIPEMG_TXPEMG] ([FCPTTX2_FCPT_CODE_FK_PK], [FCPT"& _ 
                "TX2_TXTPEMG]) VALUES (@FCPTTX2_FCPT_CODE_FK_PK, @FCPTTX2_TXTPEMG);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPTT"& _ 
                "X2_FCPT_CODE_FK_PK, FCPTTX2_TXTPEMG FROM THERIAQUE.FCPTTX2_CIPEMG_TXPEMG WHERE ("& _ 
                "FCPTTX2_FCPT_CODE_FK_PK = @FCPTTX2_FCPT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX2_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX2_TXTPEMG", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_TXTPEMG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTTX2_CIPEMG_TXPEMG] SET [FCPTTX2_FCPT_CODE_FK_PK] = @FCPTT"& _ 
                "X2_FCPT_CODE_FK_PK, [FCPTTX2_TXTPEMG] = @FCPTTX2_TXTPEMG WHERE (([FCPTTX2_FCPT_C"& _ 
                "ODE_FK_PK] = @Original_FCPTTX2_FCPT_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FCPTTX2_FCPT_CODE_FK_P"& _ 
                "K, FCPTTX2_TXTPEMG FROM THERIAQUE.FCPTTX2_CIPEMG_TXPEMG WHERE (FCPTTX2_FCPT_CODE"& _ 
                "_FK_PK = @FCPTTX2_FCPT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX2_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX2_TXTPEMG", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_TXTPEMG", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTTX2_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTTX2_FCPT_CODE_FK_PK, FCPTTX2_TXTPEMG FROM THERIAQUE.FCPTTX2_CIPEMG_TXP" & _
                "EMG"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTTX2_FCPT_CODE_FK_PK, FCPTTX2_TXTPEMG FROM THERIAQUE.FCPTTX2_CIPEMG_TXP" & _
                "EMG" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTTX2_FCPT_CODE_FK_PK = @FCPTTX2_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTTX2_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTTX2_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable = New dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable, ByVal FCPTTX2_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTTX2_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTTX2_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTTX2_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable = New dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTTX2_CIPEMG_TXPEMGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTTX2_CIPEMG_TXPEMG")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTTX2_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTTX2_FCPT_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTTX2_FCPT_CODE_FK_PK As Integer, ByVal FCPTTX2_TXTPEMG As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTTX2_FCPT_CODE_FK_PK, Integer)
            If (FCPTTX2_TXTPEMG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTTX2_TXTPEMG, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTTX2_FCPT_CODE_FK_PK As Integer, ByVal FCPTTX2_TXTPEMG As String, ByVal Original_FCPTTX2_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTTX2_FCPT_CODE_FK_PK, Integer)
            If (FCPTTX2_TXTPEMG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTTX2_TXTPEMG, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FCPTTX2_FCPT_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FCPTAFS_CIPEMG_AFSSAPSTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FCPTAFS_CIPEMG_AFSSAPS"
            tableMapping.ColumnMappings.Add("FCPTAFS_FCPT_CODE_FK_PK", "FCPTAFS_FCPT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTAFS_SP_CODE_FK_PK", "FCPTAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FCPTAFS_DATE_PK", "FCPTAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FCPTAFS_CDF_DOCUMENT_FK_PK", "FCPTAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FCPTAFS_CIPEMG_AFSSAPS] WHERE (([FCPTAFS_FCPT_CODE_FK_PK" & _
                "] = @Original_FCPTAFS_FCPT_CODE_FK_PK) AND ([FCPTAFS_SP_CODE_FK_PK] = @Original_" & _
                "FCPTAFS_SP_CODE_FK_PK) AND ([FCPTAFS_DATE_PK] = @Original_FCPTAFS_DATE_PK) AND (" & _
                "[FCPTAFS_CDF_DOCUMENT_FK_PK] = @Original_FCPTAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_DATE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FCPTAFS_CIPEMG_AFSSAPS] ([FCPTAFS_FCPT_CODE_FK_PK], [FCP" & _
                "TAFS_SP_CODE_FK_PK], [FCPTAFS_DATE_PK], [FCPTAFS_CDF_DOCUMENT_FK_PK]) VALUES (@F" & _
                "CPTAFS_FCPT_CODE_FK_PK, @FCPTAFS_SP_CODE_FK_PK, @FCPTAFS_DATE_PK, @FCPTAFS_CDF_D" & _
                "OCUMENT_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTAFS_FCPT_CODE_FK_PK, FCPTAFS_SP_CODE_FK_PK, FCPTAFS_" & _
                "DATE_PK, FCPTAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FCPTAFS_CIPEMG_AFSSAPS WHERE " & _
                "(FCPTAFS_CDF_DOCUMENT_FK_PK = @FCPTAFS_CDF_DOCUMENT_FK_PK) AND (FCPTAFS_DATE_PK " & _
                "= @FCPTAFS_DATE_PK) AND (FCPTAFS_FCPT_CODE_FK_PK = @FCPTAFS_FCPT_CODE_FK_PK) AND" & _
                " (FCPTAFS_SP_CODE_FK_PK = @FCPTAFS_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_DATE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FCPTAFS_CIPEMG_AFSSAPS] SET [FCPTAFS_FCPT_CODE_FK_PK] = @FCPT" & _
                "AFS_FCPT_CODE_FK_PK, [FCPTAFS_SP_CODE_FK_PK] = @FCPTAFS_SP_CODE_FK_PK, [FCPTAFS_" & _
                "DATE_PK] = @FCPTAFS_DATE_PK, [FCPTAFS_CDF_DOCUMENT_FK_PK] = @FCPTAFS_CDF_DOCUMEN" & _
                "T_FK_PK WHERE (([FCPTAFS_FCPT_CODE_FK_PK] = @Original_FCPTAFS_FCPT_CODE_FK_PK) A" & _
                "ND ([FCPTAFS_SP_CODE_FK_PK] = @Original_FCPTAFS_SP_CODE_FK_PK) AND ([FCPTAFS_DAT" & _
                "E_PK] = @Original_FCPTAFS_DATE_PK) AND ([FCPTAFS_CDF_DOCUMENT_FK_PK] = @Original" & _
                "_FCPTAFS_CDF_DOCUMENT_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FCPTAFS_FCPT_CODE_FK_PK, FCPTAFS_SP_CODE_" & _
                "FK_PK, FCPTAFS_DATE_PK, FCPTAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FCPTAFS_CIPEMG" & _
                "_AFSSAPS WHERE (FCPTAFS_CDF_DOCUMENT_FK_PK = @FCPTAFS_CDF_DOCUMENT_FK_PK) AND (F" & _
                "CPTAFS_DATE_PK = @FCPTAFS_DATE_PK) AND (FCPTAFS_FCPT_CODE_FK_PK = @FCPTAFS_FCPT_" & _
                "CODE_FK_PK) AND (FCPTAFS_SP_CODE_FK_PK = @FCPTAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_DATE_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_DATE_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FCPTAFS_FCPT_CODE_FK_PK, FCPTAFS_SP_CODE_FK_PK, FCPTAFS_DATE_PK, FCPTAFS_C" & _
                "DF_DOCUMENT_FK_PK FROM THERIAQUE.FCPTAFS_CIPEMG_AFSSAPS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FCPTAFS_FCPT_CODE_FK_PK, FCPTAFS_SP_CODE_FK_PK, FCPTAFS_DATE_PK, FCPTAFS_C" & _
                "DF_DOCUMENT_FK_PK FROM THERIAQUE.FCPTAFS_CIPEMG_AFSSAPS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FCPTAFS_FCPT_CODE" & _
                "_FK_PK = @FCPTAFS_FCPT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FCPTAFS_FCPT_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FCPTAFS_FCPT_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable = New dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable, ByVal FCPTAFS_FCPT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTAFS_FCPT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FCPTAFS_FCPT_CODE_FK_PK As Integer) As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FCPTAFS_FCPT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable = New dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Cipemg_Texte.FCPTAFS_CIPEMG_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Cipemg_Texte) As Integer
            Return Me.Adapter.Update(dataSet, "FCPTAFS_CIPEMG_AFSSAPS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FCPTAFS_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTAFS_SP_CODE_FK_PK As Integer, ByVal Original_FCPTAFS_DATE_PK As Date, ByVal Original_FCPTAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FCPTAFS_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FCPTAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FCPTAFS_DATE_PK, Date)
            If (Original_FCPTAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCPTAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FCPTAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FCPTAFS_FCPT_CODE_FK_PK As Integer, ByVal FCPTAFS_SP_CODE_FK_PK As Integer, ByVal FCPTAFS_DATE_PK As Date, ByVal FCPTAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FCPTAFS_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FCPTAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FCPTAFS_DATE_PK, Date)
            If (FCPTAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCPTAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FCPTAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FCPTAFS_FCPT_CODE_FK_PK As Integer, ByVal FCPTAFS_SP_CODE_FK_PK As Integer, ByVal FCPTAFS_DATE_PK As Date, ByVal FCPTAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FCPTAFS_FCPT_CODE_FK_PK As Integer, ByVal Original_FCPTAFS_SP_CODE_FK_PK As Integer, ByVal Original_FCPTAFS_DATE_PK As Date, ByVal Original_FCPTAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FCPTAFS_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FCPTAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FCPTAFS_DATE_PK, Date)
            If (FCPTAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FCPTAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FCPTAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FCPTAFS_FCPT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FCPTAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FCPTAFS_DATE_PK, Date)
            If (Original_FCPTAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FCPTAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FCPTAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
