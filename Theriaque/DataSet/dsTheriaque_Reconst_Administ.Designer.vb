'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.312
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Reconst_Administ"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Reconst_Administ
    Inherits System.Data.DataSet
    
    Private tableFREC_RECONSADM As FREC_RECONSADMDataTable
    
    Private tableFRECCPH_FREC_CLPH As FRECCPH_FREC_CLPHDataTable
    
    Private tableFRECCCH_FREC_CLCH As FRECCCH_FREC_CLCHDataTable
    
    Private tableFRECSAC_FREC_SUBACT As FRECSAC_FREC_SUBACTDataTable
    
    Private tableFRECPR_FREC_PROD As FRECPR_FREC_PRODDataTable
    
    Private tableFRECCH_RECONSTCH As FRECCH_RECONSTCHDataTable
    
    Private tableFRECSP_RECONST_SPEC As FRECSP_RECONST_SPECDataTable
    
    Private tableFRECCOR_FREC_COMRECS As FRECCOR_FREC_COMRECSDataTable
    
    Private tableFRECVO_RECONSADM_VOIE As FRECVO_RECONSADM_VOIEDataTable
    
    Private tableFRECTXR_FREC_TXTRECS As FRECTXR_FREC_TXTRECSDataTable
    
    Private tableFRECCOA_FREC_COMADM As FRECCOA_FREC_COMADMDataTable
    
    Private tableFRECAFS_FREC_AFSSAPS As FRECAFS_FREC_AFSSAPSDataTable
    
    Private tableFRECTXA_FREC_TXTADM As FRECTXA_FREC_TXTADMDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FREC_RECONSADM")) Is Nothing) Then
                MyBase.Tables.Add(New FREC_RECONSADMDataTable(ds.Tables("FREC_RECONSADM")))
            End If
            If (Not (ds.Tables("FRECCPH_FREC_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCPH_FREC_CLPHDataTable(ds.Tables("FRECCPH_FREC_CLPH")))
            End If
            If (Not (ds.Tables("FRECCCH_FREC_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCCH_FREC_CLCHDataTable(ds.Tables("FRECCCH_FREC_CLCH")))
            End If
            If (Not (ds.Tables("FRECSAC_FREC_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FRECSAC_FREC_SUBACTDataTable(ds.Tables("FRECSAC_FREC_SUBACT")))
            End If
            If (Not (ds.Tables("FRECPR_FREC_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FRECPR_FREC_PRODDataTable(ds.Tables("FRECPR_FREC_PROD")))
            End If
            If (Not (ds.Tables("FRECCH_RECONSTCH")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCH_RECONSTCHDataTable(ds.Tables("FRECCH_RECONSTCH")))
            End If
            If (Not (ds.Tables("FRECSP_RECONST_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FRECSP_RECONST_SPECDataTable(ds.Tables("FRECSP_RECONST_SPEC")))
            End If
            If (Not (ds.Tables("FRECCOR_FREC_COMRECS")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCOR_FREC_COMRECSDataTable(ds.Tables("FRECCOR_FREC_COMRECS")))
            End If
            If (Not (ds.Tables("FRECVO_RECONSADM_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New FRECVO_RECONSADM_VOIEDataTable(ds.Tables("FRECVO_RECONSADM_VOIE")))
            End If
            If (Not (ds.Tables("FRECTXR_FREC_TXTRECS")) Is Nothing) Then
                MyBase.Tables.Add(New FRECTXR_FREC_TXTRECSDataTable(ds.Tables("FRECTXR_FREC_TXTRECS")))
            End If
            If (Not (ds.Tables("FRECCOA_FREC_COMADM")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCOA_FREC_COMADMDataTable(ds.Tables("FRECCOA_FREC_COMADM")))
            End If
            If (Not (ds.Tables("FRECAFS_FREC_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FRECAFS_FREC_AFSSAPSDataTable(ds.Tables("FRECAFS_FREC_AFSSAPS")))
            End If
            If (Not (ds.Tables("FRECTXA_FREC_TXTADM")) Is Nothing) Then
                MyBase.Tables.Add(New FRECTXA_FREC_TXTADMDataTable(ds.Tables("FRECTXA_FREC_TXTADM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FREC_RECONSADM() As FREC_RECONSADMDataTable
        Get
            Return Me.tableFREC_RECONSADM
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECCPH_FREC_CLPH() As FRECCPH_FREC_CLPHDataTable
        Get
            Return Me.tableFRECCPH_FREC_CLPH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECCCH_FREC_CLCH() As FRECCCH_FREC_CLCHDataTable
        Get
            Return Me.tableFRECCCH_FREC_CLCH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECSAC_FREC_SUBACT() As FRECSAC_FREC_SUBACTDataTable
        Get
            Return Me.tableFRECSAC_FREC_SUBACT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECPR_FREC_PROD() As FRECPR_FREC_PRODDataTable
        Get
            Return Me.tableFRECPR_FREC_PROD
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECCH_RECONSTCH() As FRECCH_RECONSTCHDataTable
        Get
            Return Me.tableFRECCH_RECONSTCH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECSP_RECONST_SPEC() As FRECSP_RECONST_SPECDataTable
        Get
            Return Me.tableFRECSP_RECONST_SPEC
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECCOR_FREC_COMRECS() As FRECCOR_FREC_COMRECSDataTable
        Get
            Return Me.tableFRECCOR_FREC_COMRECS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECVO_RECONSADM_VOIE() As FRECVO_RECONSADM_VOIEDataTable
        Get
            Return Me.tableFRECVO_RECONSADM_VOIE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECTXR_FREC_TXTRECS() As FRECTXR_FREC_TXTRECSDataTable
        Get
            Return Me.tableFRECTXR_FREC_TXTRECS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECCOA_FREC_COMADM() As FRECCOA_FREC_COMADMDataTable
        Get
            Return Me.tableFRECCOA_FREC_COMADM
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECAFS_FREC_AFSSAPS() As FRECAFS_FREC_AFSSAPSDataTable
        Get
            Return Me.tableFRECAFS_FREC_AFSSAPS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRECTXA_FREC_TXTADM() As FRECTXA_FREC_TXTADMDataTable
        Get
            Return Me.tableFRECTXA_FREC_TXTADM
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Reconst_Administ = CType(MyBase.Clone,dsTheriaque_Reconst_Administ)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FREC_RECONSADM")) Is Nothing) Then
                MyBase.Tables.Add(New FREC_RECONSADMDataTable(ds.Tables("FREC_RECONSADM")))
            End If
            If (Not (ds.Tables("FRECCPH_FREC_CLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCPH_FREC_CLPHDataTable(ds.Tables("FRECCPH_FREC_CLPH")))
            End If
            If (Not (ds.Tables("FRECCCH_FREC_CLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCCH_FREC_CLCHDataTable(ds.Tables("FRECCCH_FREC_CLCH")))
            End If
            If (Not (ds.Tables("FRECSAC_FREC_SUBACT")) Is Nothing) Then
                MyBase.Tables.Add(New FRECSAC_FREC_SUBACTDataTable(ds.Tables("FRECSAC_FREC_SUBACT")))
            End If
            If (Not (ds.Tables("FRECPR_FREC_PROD")) Is Nothing) Then
                MyBase.Tables.Add(New FRECPR_FREC_PRODDataTable(ds.Tables("FRECPR_FREC_PROD")))
            End If
            If (Not (ds.Tables("FRECCH_RECONSTCH")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCH_RECONSTCHDataTable(ds.Tables("FRECCH_RECONSTCH")))
            End If
            If (Not (ds.Tables("FRECSP_RECONST_SPEC")) Is Nothing) Then
                MyBase.Tables.Add(New FRECSP_RECONST_SPECDataTable(ds.Tables("FRECSP_RECONST_SPEC")))
            End If
            If (Not (ds.Tables("FRECCOR_FREC_COMRECS")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCOR_FREC_COMRECSDataTable(ds.Tables("FRECCOR_FREC_COMRECS")))
            End If
            If (Not (ds.Tables("FRECVO_RECONSADM_VOIE")) Is Nothing) Then
                MyBase.Tables.Add(New FRECVO_RECONSADM_VOIEDataTable(ds.Tables("FRECVO_RECONSADM_VOIE")))
            End If
            If (Not (ds.Tables("FRECTXR_FREC_TXTRECS")) Is Nothing) Then
                MyBase.Tables.Add(New FRECTXR_FREC_TXTRECSDataTable(ds.Tables("FRECTXR_FREC_TXTRECS")))
            End If
            If (Not (ds.Tables("FRECCOA_FREC_COMADM")) Is Nothing) Then
                MyBase.Tables.Add(New FRECCOA_FREC_COMADMDataTable(ds.Tables("FRECCOA_FREC_COMADM")))
            End If
            If (Not (ds.Tables("FRECAFS_FREC_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FRECAFS_FREC_AFSSAPSDataTable(ds.Tables("FRECAFS_FREC_AFSSAPS")))
            End If
            If (Not (ds.Tables("FRECTXA_FREC_TXTADM")) Is Nothing) Then
                MyBase.Tables.Add(New FRECTXA_FREC_TXTADMDataTable(ds.Tables("FRECTXA_FREC_TXTADM")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFREC_RECONSADM = CType(MyBase.Tables("FREC_RECONSADM"),FREC_RECONSADMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFREC_RECONSADM) Is Nothing) Then
                Me.tableFREC_RECONSADM.InitVars
            End If
        End If
        Me.tableFRECCPH_FREC_CLPH = CType(MyBase.Tables("FRECCPH_FREC_CLPH"),FRECCPH_FREC_CLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECCPH_FREC_CLPH) Is Nothing) Then
                Me.tableFRECCPH_FREC_CLPH.InitVars
            End If
        End If
        Me.tableFRECCCH_FREC_CLCH = CType(MyBase.Tables("FRECCCH_FREC_CLCH"),FRECCCH_FREC_CLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECCCH_FREC_CLCH) Is Nothing) Then
                Me.tableFRECCCH_FREC_CLCH.InitVars
            End If
        End If
        Me.tableFRECSAC_FREC_SUBACT = CType(MyBase.Tables("FRECSAC_FREC_SUBACT"),FRECSAC_FREC_SUBACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECSAC_FREC_SUBACT) Is Nothing) Then
                Me.tableFRECSAC_FREC_SUBACT.InitVars
            End If
        End If
        Me.tableFRECPR_FREC_PROD = CType(MyBase.Tables("FRECPR_FREC_PROD"),FRECPR_FREC_PRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECPR_FREC_PROD) Is Nothing) Then
                Me.tableFRECPR_FREC_PROD.InitVars
            End If
        End If
        Me.tableFRECCH_RECONSTCH = CType(MyBase.Tables("FRECCH_RECONSTCH"),FRECCH_RECONSTCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECCH_RECONSTCH) Is Nothing) Then
                Me.tableFRECCH_RECONSTCH.InitVars
            End If
        End If
        Me.tableFRECSP_RECONST_SPEC = CType(MyBase.Tables("FRECSP_RECONST_SPEC"),FRECSP_RECONST_SPECDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECSP_RECONST_SPEC) Is Nothing) Then
                Me.tableFRECSP_RECONST_SPEC.InitVars
            End If
        End If
        Me.tableFRECCOR_FREC_COMRECS = CType(MyBase.Tables("FRECCOR_FREC_COMRECS"),FRECCOR_FREC_COMRECSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECCOR_FREC_COMRECS) Is Nothing) Then
                Me.tableFRECCOR_FREC_COMRECS.InitVars
            End If
        End If
        Me.tableFRECVO_RECONSADM_VOIE = CType(MyBase.Tables("FRECVO_RECONSADM_VOIE"),FRECVO_RECONSADM_VOIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECVO_RECONSADM_VOIE) Is Nothing) Then
                Me.tableFRECVO_RECONSADM_VOIE.InitVars
            End If
        End If
        Me.tableFRECTXR_FREC_TXTRECS = CType(MyBase.Tables("FRECTXR_FREC_TXTRECS"),FRECTXR_FREC_TXTRECSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECTXR_FREC_TXTRECS) Is Nothing) Then
                Me.tableFRECTXR_FREC_TXTRECS.InitVars
            End If
        End If
        Me.tableFRECCOA_FREC_COMADM = CType(MyBase.Tables("FRECCOA_FREC_COMADM"),FRECCOA_FREC_COMADMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECCOA_FREC_COMADM) Is Nothing) Then
                Me.tableFRECCOA_FREC_COMADM.InitVars
            End If
        End If
        Me.tableFRECAFS_FREC_AFSSAPS = CType(MyBase.Tables("FRECAFS_FREC_AFSSAPS"),FRECAFS_FREC_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECAFS_FREC_AFSSAPS) Is Nothing) Then
                Me.tableFRECAFS_FREC_AFSSAPS.InitVars
            End If
        End If
        Me.tableFRECTXA_FREC_TXTADM = CType(MyBase.Tables("FRECTXA_FREC_TXTADM"),FRECTXA_FREC_TXTADMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFRECTXA_FREC_TXTADM) Is Nothing) Then
                Me.tableFRECTXA_FREC_TXTADM.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Reconst_Administ"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Reconst_Administ.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFREC_RECONSADM = New FREC_RECONSADMDataTable
        MyBase.Tables.Add(Me.tableFREC_RECONSADM)
        Me.tableFRECCPH_FREC_CLPH = New FRECCPH_FREC_CLPHDataTable
        MyBase.Tables.Add(Me.tableFRECCPH_FREC_CLPH)
        Me.tableFRECCCH_FREC_CLCH = New FRECCCH_FREC_CLCHDataTable
        MyBase.Tables.Add(Me.tableFRECCCH_FREC_CLCH)
        Me.tableFRECSAC_FREC_SUBACT = New FRECSAC_FREC_SUBACTDataTable
        MyBase.Tables.Add(Me.tableFRECSAC_FREC_SUBACT)
        Me.tableFRECPR_FREC_PROD = New FRECPR_FREC_PRODDataTable
        MyBase.Tables.Add(Me.tableFRECPR_FREC_PROD)
        Me.tableFRECCH_RECONSTCH = New FRECCH_RECONSTCHDataTable
        MyBase.Tables.Add(Me.tableFRECCH_RECONSTCH)
        Me.tableFRECSP_RECONST_SPEC = New FRECSP_RECONST_SPECDataTable
        MyBase.Tables.Add(Me.tableFRECSP_RECONST_SPEC)
        Me.tableFRECCOR_FREC_COMRECS = New FRECCOR_FREC_COMRECSDataTable
        MyBase.Tables.Add(Me.tableFRECCOR_FREC_COMRECS)
        Me.tableFRECVO_RECONSADM_VOIE = New FRECVO_RECONSADM_VOIEDataTable
        MyBase.Tables.Add(Me.tableFRECVO_RECONSADM_VOIE)
        Me.tableFRECTXR_FREC_TXTRECS = New FRECTXR_FREC_TXTRECSDataTable
        MyBase.Tables.Add(Me.tableFRECTXR_FREC_TXTRECS)
        Me.tableFRECCOA_FREC_COMADM = New FRECCOA_FREC_COMADMDataTable
        MyBase.Tables.Add(Me.tableFRECCOA_FREC_COMADM)
        Me.tableFRECAFS_FREC_AFSSAPS = New FRECAFS_FREC_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFRECAFS_FREC_AFSSAPS)
        Me.tableFRECTXA_FREC_TXTADM = New FRECTXA_FREC_TXTADMDataTable
        MyBase.Tables.Add(Me.tableFRECTXA_FREC_TXTADM)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFREC_RECONSADM() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECCPH_FREC_CLPH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECCCH_FREC_CLCH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECSAC_FREC_SUBACT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECPR_FREC_PROD() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECCH_RECONSTCH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECSP_RECONST_SPEC() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECCOR_FREC_COMRECS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECVO_RECONSADM_VOIE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECTXR_FREC_TXTRECS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECCOA_FREC_COMADM() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECAFS_FREC_AFSSAPS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFRECTXA_FREC_TXTADM() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub FREC_RECONSADMRowChangeEventHandler(ByVal sender As Object, ByVal e As FREC_RECONSADMRowChangeEvent)
    
    Public Delegate Sub FRECCPH_FREC_CLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECCPH_FREC_CLPHRowChangeEvent)
    
    Public Delegate Sub FRECCCH_FREC_CLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECCCH_FREC_CLCHRowChangeEvent)
    
    Public Delegate Sub FRECSAC_FREC_SUBACTRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECSAC_FREC_SUBACTRowChangeEvent)
    
    Public Delegate Sub FRECPR_FREC_PRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECPR_FREC_PRODRowChangeEvent)
    
    Public Delegate Sub FRECCH_RECONSTCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECCH_RECONSTCHRowChangeEvent)
    
    Public Delegate Sub FRECSP_RECONST_SPECRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECSP_RECONST_SPECRowChangeEvent)
    
    Public Delegate Sub FRECCOR_FREC_COMRECSRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECCOR_FREC_COMRECSRowChangeEvent)
    
    Public Delegate Sub FRECVO_RECONSADM_VOIERowChangeEventHandler(ByVal sender As Object, ByVal e As FRECVO_RECONSADM_VOIERowChangeEvent)
    
    Public Delegate Sub FRECTXR_FREC_TXTRECSRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECTXR_FREC_TXTRECSRowChangeEvent)
    
    Public Delegate Sub FRECCOA_FREC_COMADMRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECCOA_FREC_COMADMRowChangeEvent)
    
    Public Delegate Sub FRECAFS_FREC_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECAFS_FREC_AFSSAPSRowChangeEvent)
    
    Public Delegate Sub FRECTXA_FREC_TXTADMRowChangeEventHandler(ByVal sender As Object, ByVal e As FRECTXA_FREC_TXTADMRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FREC_RECONSADMDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFREC_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnFREC_DATECR As System.Data.DataColumn
        
        Private columnFREC_DATEMJ As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FREC_RECONSADM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FREC_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFREC_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FREC_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnFREC_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FREC_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnFREC_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FREC_RECONSADMRow
            Get
                Return CType(Me.Rows(index),FREC_RECONSADMRow)
            End Get
        End Property
        
        Public Event FREC_RECONSADMRowChanging As FREC_RECONSADMRowChangeEventHandler
        
        Public Event FREC_RECONSADMRowChanged As FREC_RECONSADMRowChangeEventHandler
        
        Public Event FREC_RECONSADMRowDeleting As FREC_RECONSADMRowChangeEventHandler
        
        Public Event FREC_RECONSADMRowDeleted As FREC_RECONSADMRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFREC_RECONSADMRow(ByVal row As FREC_RECONSADMRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFREC_RECONSADMRow(ByVal FREC_CODE_SQ_PK As Integer, ByVal FREC_DATECR As Date, ByVal FREC_DATEMJ As Date) As FREC_RECONSADMRow
            Dim rowFREC_RECONSADMRow As FREC_RECONSADMRow = CType(Me.NewRow,FREC_RECONSADMRow)
            rowFREC_RECONSADMRow.ItemArray = New Object() {FREC_CODE_SQ_PK, FREC_DATECR, FREC_DATEMJ}
            Me.Rows.Add(rowFREC_RECONSADMRow)
            Return rowFREC_RECONSADMRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFREC_CODE_SQ_PK(ByVal FREC_CODE_SQ_PK As Integer) As FREC_RECONSADMRow
            Return CType(Me.Rows.Find(New Object() {FREC_CODE_SQ_PK}),FREC_RECONSADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FREC_RECONSADMDataTable = CType(MyBase.Clone,FREC_RECONSADMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FREC_RECONSADMDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFREC_CODE_SQ_PK = MyBase.Columns("FREC_CODE_SQ_PK")
            Me.columnFREC_DATECR = MyBase.Columns("FREC_DATECR")
            Me.columnFREC_DATEMJ = MyBase.Columns("FREC_DATEMJ")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFREC_CODE_SQ_PK = New System.Data.DataColumn("FREC_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFREC_CODE_SQ_PK)
            Me.columnFREC_DATECR = New System.Data.DataColumn("FREC_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFREC_DATECR)
            Me.columnFREC_DATEMJ = New System.Data.DataColumn("FREC_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFREC_DATEMJ)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFREC_CODE_SQ_PK}, true))
            Me.columnFREC_CODE_SQ_PK.AllowDBNull = false
            Me.columnFREC_CODE_SQ_PK.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFREC_RECONSADMRow() As FREC_RECONSADMRow
            Return CType(Me.NewRow,FREC_RECONSADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FREC_RECONSADMRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FREC_RECONSADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FREC_RECONSADMRowChangedEvent) Is Nothing) Then
                RaiseEvent FREC_RECONSADMRowChanged(Me, New FREC_RECONSADMRowChangeEvent(CType(e.Row,FREC_RECONSADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FREC_RECONSADMRowChangingEvent) Is Nothing) Then
                RaiseEvent FREC_RECONSADMRowChanging(Me, New FREC_RECONSADMRowChangeEvent(CType(e.Row,FREC_RECONSADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FREC_RECONSADMRowDeletedEvent) Is Nothing) Then
                RaiseEvent FREC_RECONSADMRowDeleted(Me, New FREC_RECONSADMRowChangeEvent(CType(e.Row,FREC_RECONSADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FREC_RECONSADMRowDeletingEvent) Is Nothing) Then
                RaiseEvent FREC_RECONSADMRowDeleting(Me, New FREC_RECONSADMRowChangeEvent(CType(e.Row,FREC_RECONSADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFREC_RECONSADMRow(ByVal row As FREC_RECONSADMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FREC_RECONSADMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECCPH_FREC_CLPHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECCPH_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECCPH_CPH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECCPH_FREC_CLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCPH_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCPH_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCPH_CPH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECCPH_FREC_CLPHRow
            Get
                Return CType(Me.Rows(index),FRECCPH_FREC_CLPHRow)
            End Get
        End Property
        
        Public Event FRECCPH_FREC_CLPHRowChanging As FRECCPH_FREC_CLPHRowChangeEventHandler
        
        Public Event FRECCPH_FREC_CLPHRowChanged As FRECCPH_FREC_CLPHRowChangeEventHandler
        
        Public Event FRECCPH_FREC_CLPHRowDeleting As FRECCPH_FREC_CLPHRowChangeEventHandler
        
        Public Event FRECCPH_FREC_CLPHRowDeleted As FRECCPH_FREC_CLPHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECCPH_FREC_CLPHRow(ByVal row As FRECCPH_FREC_CLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECCPH_FREC_CLPHRow(ByVal FRECCPH_FREC_CODE_FK_PK As Integer, ByVal FRECCPH_CPH_CODE_FK_PK As String) As FRECCPH_FREC_CLPHRow
            Dim rowFRECCPH_FREC_CLPHRow As FRECCPH_FREC_CLPHRow = CType(Me.NewRow,FRECCPH_FREC_CLPHRow)
            rowFRECCPH_FREC_CLPHRow.ItemArray = New Object() {FRECCPH_FREC_CODE_FK_PK, FRECCPH_CPH_CODE_FK_PK}
            Me.Rows.Add(rowFRECCPH_FREC_CLPHRow)
            Return rowFRECCPH_FREC_CLPHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECCPH_FREC_CODE_FK_PKFRECCPH_CPH_CODE_FK_PK(ByVal FRECCPH_FREC_CODE_FK_PK As Integer, ByVal FRECCPH_CPH_CODE_FK_PK As String) As FRECCPH_FREC_CLPHRow
            Return CType(Me.Rows.Find(New Object() {FRECCPH_FREC_CODE_FK_PK, FRECCPH_CPH_CODE_FK_PK}),FRECCPH_FREC_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECCPH_FREC_CLPHDataTable = CType(MyBase.Clone,FRECCPH_FREC_CLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECCPH_FREC_CLPHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECCPH_FREC_CODE_FK_PK = MyBase.Columns("FRECCPH_FREC_CODE_FK_PK")
            Me.columnFRECCPH_CPH_CODE_FK_PK = MyBase.Columns("FRECCPH_CPH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECCPH_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECCPH_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCPH_FREC_CODE_FK_PK)
            Me.columnFRECCPH_CPH_CODE_FK_PK = New System.Data.DataColumn("FRECCPH_CPH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECCPH_FREC_CODE_FK_PK, Me.columnFRECCPH_CPH_CODE_FK_PK}, true))
            Me.columnFRECCPH_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECCPH_FREC_CLPHRow() As FRECCPH_FREC_CLPHRow
            Return CType(Me.NewRow,FRECCPH_FREC_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECCPH_FREC_CLPHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECCPH_FREC_CLPHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECCPH_FREC_CLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECCPH_FREC_CLPHRowChanged(Me, New FRECCPH_FREC_CLPHRowChangeEvent(CType(e.Row,FRECCPH_FREC_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECCPH_FREC_CLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECCPH_FREC_CLPHRowChanging(Me, New FRECCPH_FREC_CLPHRowChangeEvent(CType(e.Row,FRECCPH_FREC_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECCPH_FREC_CLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECCPH_FREC_CLPHRowDeleted(Me, New FRECCPH_FREC_CLPHRowChangeEvent(CType(e.Row,FRECCPH_FREC_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECCPH_FREC_CLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECCPH_FREC_CLPHRowDeleting(Me, New FRECCPH_FREC_CLPHRowChangeEvent(CType(e.Row,FRECCPH_FREC_CLPHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECCPH_FREC_CLPHRow(ByVal row As FRECCPH_FREC_CLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECCPH_FREC_CLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECCCH_FREC_CLCHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECCCH_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECCCH_CCH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECCCH_FREC_CLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCCH_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCCH_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCCH_CCH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECCCH_FREC_CLCHRow
            Get
                Return CType(Me.Rows(index),FRECCCH_FREC_CLCHRow)
            End Get
        End Property
        
        Public Event FRECCCH_FREC_CLCHRowChanging As FRECCCH_FREC_CLCHRowChangeEventHandler
        
        Public Event FRECCCH_FREC_CLCHRowChanged As FRECCCH_FREC_CLCHRowChangeEventHandler
        
        Public Event FRECCCH_FREC_CLCHRowDeleting As FRECCCH_FREC_CLCHRowChangeEventHandler
        
        Public Event FRECCCH_FREC_CLCHRowDeleted As FRECCCH_FREC_CLCHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECCCH_FREC_CLCHRow(ByVal row As FRECCCH_FREC_CLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECCCH_FREC_CLCHRow(ByVal FRECCCH_FREC_CODE_FK_PK As Integer, ByVal FRECCCH_CCH_CODE_FK_PK As String) As FRECCCH_FREC_CLCHRow
            Dim rowFRECCCH_FREC_CLCHRow As FRECCCH_FREC_CLCHRow = CType(Me.NewRow,FRECCCH_FREC_CLCHRow)
            rowFRECCCH_FREC_CLCHRow.ItemArray = New Object() {FRECCCH_FREC_CODE_FK_PK, FRECCCH_CCH_CODE_FK_PK}
            Me.Rows.Add(rowFRECCCH_FREC_CLCHRow)
            Return rowFRECCCH_FREC_CLCHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECCCH_FREC_CODE_FK_PKFRECCCH_CCH_CODE_FK_PK(ByVal FRECCCH_FREC_CODE_FK_PK As Integer, ByVal FRECCCH_CCH_CODE_FK_PK As String) As FRECCCH_FREC_CLCHRow
            Return CType(Me.Rows.Find(New Object() {FRECCCH_FREC_CODE_FK_PK, FRECCCH_CCH_CODE_FK_PK}),FRECCCH_FREC_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECCCH_FREC_CLCHDataTable = CType(MyBase.Clone,FRECCCH_FREC_CLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECCCH_FREC_CLCHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECCCH_FREC_CODE_FK_PK = MyBase.Columns("FRECCCH_FREC_CODE_FK_PK")
            Me.columnFRECCCH_CCH_CODE_FK_PK = MyBase.Columns("FRECCCH_CCH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECCCH_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECCCH_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCCH_FREC_CODE_FK_PK)
            Me.columnFRECCCH_CCH_CODE_FK_PK = New System.Data.DataColumn("FRECCCH_CCH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECCCH_FREC_CODE_FK_PK, Me.columnFRECCCH_CCH_CODE_FK_PK}, true))
            Me.columnFRECCCH_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECCCH_FREC_CLCHRow() As FRECCCH_FREC_CLCHRow
            Return CType(Me.NewRow,FRECCCH_FREC_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECCCH_FREC_CLCHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECCCH_FREC_CLCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECCCH_FREC_CLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECCCH_FREC_CLCHRowChanged(Me, New FRECCCH_FREC_CLCHRowChangeEvent(CType(e.Row,FRECCCH_FREC_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECCCH_FREC_CLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECCCH_FREC_CLCHRowChanging(Me, New FRECCCH_FREC_CLCHRowChangeEvent(CType(e.Row,FRECCCH_FREC_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECCCH_FREC_CLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECCCH_FREC_CLCHRowDeleted(Me, New FRECCCH_FREC_CLCHRowChangeEvent(CType(e.Row,FRECCCH_FREC_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECCCH_FREC_CLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECCCH_FREC_CLCHRowDeleting(Me, New FRECCCH_FREC_CLCHRowChangeEvent(CType(e.Row,FRECCCH_FREC_CLCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECCCH_FREC_CLCHRow(ByVal row As FRECCCH_FREC_CLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECCCH_FREC_CLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECSAC_FREC_SUBACTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECSAC_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECSAC_SAC_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECSAC_FREC_SUBACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECSAC_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECSAC_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECSAC_SAC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECSAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECSAC_FREC_SUBACTRow
            Get
                Return CType(Me.Rows(index),FRECSAC_FREC_SUBACTRow)
            End Get
        End Property
        
        Public Event FRECSAC_FREC_SUBACTRowChanging As FRECSAC_FREC_SUBACTRowChangeEventHandler
        
        Public Event FRECSAC_FREC_SUBACTRowChanged As FRECSAC_FREC_SUBACTRowChangeEventHandler
        
        Public Event FRECSAC_FREC_SUBACTRowDeleting As FRECSAC_FREC_SUBACTRowChangeEventHandler
        
        Public Event FRECSAC_FREC_SUBACTRowDeleted As FRECSAC_FREC_SUBACTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECSAC_FREC_SUBACTRow(ByVal row As FRECSAC_FREC_SUBACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECSAC_FREC_SUBACTRow(ByVal FRECSAC_FREC_CODE_FK_PK As Integer, ByVal FRECSAC_SAC_CODE_FK_PK As Integer) As FRECSAC_FREC_SUBACTRow
            Dim rowFRECSAC_FREC_SUBACTRow As FRECSAC_FREC_SUBACTRow = CType(Me.NewRow,FRECSAC_FREC_SUBACTRow)
            rowFRECSAC_FREC_SUBACTRow.ItemArray = New Object() {FRECSAC_FREC_CODE_FK_PK, FRECSAC_SAC_CODE_FK_PK}
            Me.Rows.Add(rowFRECSAC_FREC_SUBACTRow)
            Return rowFRECSAC_FREC_SUBACTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECSAC_FREC_CODE_FK_PKFRECSAC_SAC_CODE_FK_PK(ByVal FRECSAC_FREC_CODE_FK_PK As Integer, ByVal FRECSAC_SAC_CODE_FK_PK As Integer) As FRECSAC_FREC_SUBACTRow
            Return CType(Me.Rows.Find(New Object() {FRECSAC_FREC_CODE_FK_PK, FRECSAC_SAC_CODE_FK_PK}),FRECSAC_FREC_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECSAC_FREC_SUBACTDataTable = CType(MyBase.Clone,FRECSAC_FREC_SUBACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECSAC_FREC_SUBACTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECSAC_FREC_CODE_FK_PK = MyBase.Columns("FRECSAC_FREC_CODE_FK_PK")
            Me.columnFRECSAC_SAC_CODE_FK_PK = MyBase.Columns("FRECSAC_SAC_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECSAC_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECSAC_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECSAC_FREC_CODE_FK_PK)
            Me.columnFRECSAC_SAC_CODE_FK_PK = New System.Data.DataColumn("FRECSAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECSAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECSAC_FREC_CODE_FK_PK, Me.columnFRECSAC_SAC_CODE_FK_PK}, true))
            Me.columnFRECSAC_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECSAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECSAC_FREC_SUBACTRow() As FRECSAC_FREC_SUBACTRow
            Return CType(Me.NewRow,FRECSAC_FREC_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECSAC_FREC_SUBACTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECSAC_FREC_SUBACTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECSAC_FREC_SUBACTRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECSAC_FREC_SUBACTRowChanged(Me, New FRECSAC_FREC_SUBACTRowChangeEvent(CType(e.Row,FRECSAC_FREC_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECSAC_FREC_SUBACTRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECSAC_FREC_SUBACTRowChanging(Me, New FRECSAC_FREC_SUBACTRowChangeEvent(CType(e.Row,FRECSAC_FREC_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECSAC_FREC_SUBACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECSAC_FREC_SUBACTRowDeleted(Me, New FRECSAC_FREC_SUBACTRowChangeEvent(CType(e.Row,FRECSAC_FREC_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECSAC_FREC_SUBACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECSAC_FREC_SUBACTRowDeleting(Me, New FRECSAC_FREC_SUBACTRowChangeEvent(CType(e.Row,FRECSAC_FREC_SUBACTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECSAC_FREC_SUBACTRow(ByVal row As FRECSAC_FREC_SUBACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECSAC_FREC_SUBACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECPR_FREC_PRODDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECPR_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECPR_PR_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECPR_FREC_PROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECPR_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECPR_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECPR_PR_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECPR_FREC_PRODRow
            Get
                Return CType(Me.Rows(index),FRECPR_FREC_PRODRow)
            End Get
        End Property
        
        Public Event FRECPR_FREC_PRODRowChanging As FRECPR_FREC_PRODRowChangeEventHandler
        
        Public Event FRECPR_FREC_PRODRowChanged As FRECPR_FREC_PRODRowChangeEventHandler
        
        Public Event FRECPR_FREC_PRODRowDeleting As FRECPR_FREC_PRODRowChangeEventHandler
        
        Public Event FRECPR_FREC_PRODRowDeleted As FRECPR_FREC_PRODRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECPR_FREC_PRODRow(ByVal row As FRECPR_FREC_PRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECPR_FREC_PRODRow(ByVal FRECPR_FREC_CODE_FK_PK As Integer, ByVal FRECPR_PR_CODE_FK_PK As Integer) As FRECPR_FREC_PRODRow
            Dim rowFRECPR_FREC_PRODRow As FRECPR_FREC_PRODRow = CType(Me.NewRow,FRECPR_FREC_PRODRow)
            rowFRECPR_FREC_PRODRow.ItemArray = New Object() {FRECPR_FREC_CODE_FK_PK, FRECPR_PR_CODE_FK_PK}
            Me.Rows.Add(rowFRECPR_FREC_PRODRow)
            Return rowFRECPR_FREC_PRODRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECPR_FREC_CODE_FK_PKFRECPR_PR_CODE_FK_PK(ByVal FRECPR_FREC_CODE_FK_PK As Integer, ByVal FRECPR_PR_CODE_FK_PK As Integer) As FRECPR_FREC_PRODRow
            Return CType(Me.Rows.Find(New Object() {FRECPR_FREC_CODE_FK_PK, FRECPR_PR_CODE_FK_PK}),FRECPR_FREC_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECPR_FREC_PRODDataTable = CType(MyBase.Clone,FRECPR_FREC_PRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECPR_FREC_PRODDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECPR_FREC_CODE_FK_PK = MyBase.Columns("FRECPR_FREC_CODE_FK_PK")
            Me.columnFRECPR_PR_CODE_FK_PK = MyBase.Columns("FRECPR_PR_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECPR_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECPR_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECPR_FREC_CODE_FK_PK)
            Me.columnFRECPR_PR_CODE_FK_PK = New System.Data.DataColumn("FRECPR_PR_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECPR_FREC_CODE_FK_PK, Me.columnFRECPR_PR_CODE_FK_PK}, true))
            Me.columnFRECPR_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECPR_FREC_PRODRow() As FRECPR_FREC_PRODRow
            Return CType(Me.NewRow,FRECPR_FREC_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECPR_FREC_PRODRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECPR_FREC_PRODRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECPR_FREC_PRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECPR_FREC_PRODRowChanged(Me, New FRECPR_FREC_PRODRowChangeEvent(CType(e.Row,FRECPR_FREC_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECPR_FREC_PRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECPR_FREC_PRODRowChanging(Me, New FRECPR_FREC_PRODRowChangeEvent(CType(e.Row,FRECPR_FREC_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECPR_FREC_PRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECPR_FREC_PRODRowDeleted(Me, New FRECPR_FREC_PRODRowChangeEvent(CType(e.Row,FRECPR_FREC_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECPR_FREC_PRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECPR_FREC_PRODRowDeleting(Me, New FRECPR_FREC_PRODRowChangeEvent(CType(e.Row,FRECPR_FREC_PRODRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECPR_FREC_PRODRow(ByVal row As FRECPR_FREC_PRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECPR_FREC_PRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECCH_RECONSTCHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECCH_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECCH_CH_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECCH_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECCH_RECONSTCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCH_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCH_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCH_CH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCH_CH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCH_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCH_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECCH_RECONSTCHRow
            Get
                Return CType(Me.Rows(index),FRECCH_RECONSTCHRow)
            End Get
        End Property
        
        Public Event FRECCH_RECONSTCHRowChanging As FRECCH_RECONSTCHRowChangeEventHandler
        
        Public Event FRECCH_RECONSTCHRowChanged As FRECCH_RECONSTCHRowChangeEventHandler
        
        Public Event FRECCH_RECONSTCHRowDeleting As FRECCH_RECONSTCHRowChangeEventHandler
        
        Public Event FRECCH_RECONSTCHRowDeleted As FRECCH_RECONSTCHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECCH_RECONSTCHRow(ByVal row As FRECCH_RECONSTCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECCH_RECONSTCHRow(ByVal FRECCH_FREC_CODE_FK_PK As Integer, ByVal FRECCH_CH_CODE_FK_PK As Integer, ByVal FRECCH_NUMORD As Short) As FRECCH_RECONSTCHRow
            Dim rowFRECCH_RECONSTCHRow As FRECCH_RECONSTCHRow = CType(Me.NewRow,FRECCH_RECONSTCHRow)
            rowFRECCH_RECONSTCHRow.ItemArray = New Object() {FRECCH_FREC_CODE_FK_PK, FRECCH_CH_CODE_FK_PK, FRECCH_NUMORD}
            Me.Rows.Add(rowFRECCH_RECONSTCHRow)
            Return rowFRECCH_RECONSTCHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECCH_FREC_CODE_FK_PKFRECCH_CH_CODE_FK_PK(ByVal FRECCH_FREC_CODE_FK_PK As Integer, ByVal FRECCH_CH_CODE_FK_PK As Integer) As FRECCH_RECONSTCHRow
            Return CType(Me.Rows.Find(New Object() {FRECCH_FREC_CODE_FK_PK, FRECCH_CH_CODE_FK_PK}),FRECCH_RECONSTCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECCH_RECONSTCHDataTable = CType(MyBase.Clone,FRECCH_RECONSTCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECCH_RECONSTCHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECCH_FREC_CODE_FK_PK = MyBase.Columns("FRECCH_FREC_CODE_FK_PK")
            Me.columnFRECCH_CH_CODE_FK_PK = MyBase.Columns("FRECCH_CH_CODE_FK_PK")
            Me.columnFRECCH_NUMORD = MyBase.Columns("FRECCH_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECCH_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECCH_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCH_FREC_CODE_FK_PK)
            Me.columnFRECCH_CH_CODE_FK_PK = New System.Data.DataColumn("FRECCH_CH_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCH_CH_CODE_FK_PK)
            Me.columnFRECCH_NUMORD = New System.Data.DataColumn("FRECCH_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCH_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECCH_FREC_CODE_FK_PK, Me.columnFRECCH_CH_CODE_FK_PK}, true))
            Me.columnFRECCH_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCH_CH_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECCH_RECONSTCHRow() As FRECCH_RECONSTCHRow
            Return CType(Me.NewRow,FRECCH_RECONSTCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECCH_RECONSTCHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECCH_RECONSTCHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECCH_RECONSTCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECCH_RECONSTCHRowChanged(Me, New FRECCH_RECONSTCHRowChangeEvent(CType(e.Row,FRECCH_RECONSTCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECCH_RECONSTCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECCH_RECONSTCHRowChanging(Me, New FRECCH_RECONSTCHRowChangeEvent(CType(e.Row,FRECCH_RECONSTCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECCH_RECONSTCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECCH_RECONSTCHRowDeleted(Me, New FRECCH_RECONSTCHRowChangeEvent(CType(e.Row,FRECCH_RECONSTCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECCH_RECONSTCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECCH_RECONSTCHRowDeleting(Me, New FRECCH_RECONSTCHRowChangeEvent(CType(e.Row,FRECCH_RECONSTCHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECCH_RECONSTCHRow(ByVal row As FRECCH_RECONSTCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECCH_RECONSTCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECSP_RECONST_SPECDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECSP_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECSP_SP_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECSP_RECONST_SPEC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECSP_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECSP_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECSP_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECSP_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECSP_RECONST_SPECRow
            Get
                Return CType(Me.Rows(index),FRECSP_RECONST_SPECRow)
            End Get
        End Property
        
        Public Event FRECSP_RECONST_SPECRowChanging As FRECSP_RECONST_SPECRowChangeEventHandler
        
        Public Event FRECSP_RECONST_SPECRowChanged As FRECSP_RECONST_SPECRowChangeEventHandler
        
        Public Event FRECSP_RECONST_SPECRowDeleting As FRECSP_RECONST_SPECRowChangeEventHandler
        
        Public Event FRECSP_RECONST_SPECRowDeleted As FRECSP_RECONST_SPECRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECSP_RECONST_SPECRow(ByVal row As FRECSP_RECONST_SPECRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECSP_RECONST_SPECRow(ByVal FRECSP_FREC_CODE_FK_PK As Integer, ByVal FRECSP_SP_CODE_FK_PK As Integer) As FRECSP_RECONST_SPECRow
            Dim rowFRECSP_RECONST_SPECRow As FRECSP_RECONST_SPECRow = CType(Me.NewRow,FRECSP_RECONST_SPECRow)
            rowFRECSP_RECONST_SPECRow.ItemArray = New Object() {FRECSP_FREC_CODE_FK_PK, FRECSP_SP_CODE_FK_PK}
            Me.Rows.Add(rowFRECSP_RECONST_SPECRow)
            Return rowFRECSP_RECONST_SPECRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECSP_FREC_CODE_FK_PKFRECSP_SP_CODE_FK_PK(ByVal FRECSP_FREC_CODE_FK_PK As Integer, ByVal FRECSP_SP_CODE_FK_PK As Integer) As FRECSP_RECONST_SPECRow
            Return CType(Me.Rows.Find(New Object() {FRECSP_FREC_CODE_FK_PK, FRECSP_SP_CODE_FK_PK}),FRECSP_RECONST_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECSP_RECONST_SPECDataTable = CType(MyBase.Clone,FRECSP_RECONST_SPECDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECSP_RECONST_SPECDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECSP_FREC_CODE_FK_PK = MyBase.Columns("FRECSP_FREC_CODE_FK_PK")
            Me.columnFRECSP_SP_CODE_FK_PK = MyBase.Columns("FRECSP_SP_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECSP_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECSP_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECSP_FREC_CODE_FK_PK)
            Me.columnFRECSP_SP_CODE_FK_PK = New System.Data.DataColumn("FRECSP_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECSP_SP_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECSP_FREC_CODE_FK_PK, Me.columnFRECSP_SP_CODE_FK_PK}, true))
            Me.columnFRECSP_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECSP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECSP_RECONST_SPECRow() As FRECSP_RECONST_SPECRow
            Return CType(Me.NewRow,FRECSP_RECONST_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECSP_RECONST_SPECRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECSP_RECONST_SPECRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECSP_RECONST_SPECRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECSP_RECONST_SPECRowChanged(Me, New FRECSP_RECONST_SPECRowChangeEvent(CType(e.Row,FRECSP_RECONST_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECSP_RECONST_SPECRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECSP_RECONST_SPECRowChanging(Me, New FRECSP_RECONST_SPECRowChangeEvent(CType(e.Row,FRECSP_RECONST_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECSP_RECONST_SPECRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECSP_RECONST_SPECRowDeleted(Me, New FRECSP_RECONST_SPECRowChangeEvent(CType(e.Row,FRECSP_RECONST_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECSP_RECONST_SPECRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECSP_RECONST_SPECRowDeleting(Me, New FRECSP_RECONST_SPECRowChangeEvent(CType(e.Row,FRECSP_RECONST_SPECRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECSP_RECONST_SPECRow(ByVal row As FRECSP_RECONST_SPECRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECSP_RECONST_SPECDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECCOR_FREC_COMRECSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECCOR_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECCOR_CDF_COMRECS_FK_PK As System.Data.DataColumn
        
        Private columnFRECCOR_NUM_ORD_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECCOR_FREC_COMRECS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCOR_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCOR_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCOR_CDF_COMRECS_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCOR_CDF_COMRECS_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCOR_NUM_ORD_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCOR_NUM_ORD_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECCOR_FREC_COMRECSRow
            Get
                Return CType(Me.Rows(index),FRECCOR_FREC_COMRECSRow)
            End Get
        End Property
        
        Public Event FRECCOR_FREC_COMRECSRowChanging As FRECCOR_FREC_COMRECSRowChangeEventHandler
        
        Public Event FRECCOR_FREC_COMRECSRowChanged As FRECCOR_FREC_COMRECSRowChangeEventHandler
        
        Public Event FRECCOR_FREC_COMRECSRowDeleting As FRECCOR_FREC_COMRECSRowChangeEventHandler
        
        Public Event FRECCOR_FREC_COMRECSRowDeleted As FRECCOR_FREC_COMRECSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECCOR_FREC_COMRECSRow(ByVal row As FRECCOR_FREC_COMRECSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECCOR_FREC_COMRECSRow(ByVal FRECCOR_FREC_CODE_FK_PK As Integer, ByVal FRECCOR_CDF_COMRECS_FK_PK As String, ByVal FRECCOR_NUM_ORD_PK As Byte) As FRECCOR_FREC_COMRECSRow
            Dim rowFRECCOR_FREC_COMRECSRow As FRECCOR_FREC_COMRECSRow = CType(Me.NewRow,FRECCOR_FREC_COMRECSRow)
            rowFRECCOR_FREC_COMRECSRow.ItemArray = New Object() {FRECCOR_FREC_CODE_FK_PK, FRECCOR_CDF_COMRECS_FK_PK, FRECCOR_NUM_ORD_PK}
            Me.Rows.Add(rowFRECCOR_FREC_COMRECSRow)
            Return rowFRECCOR_FREC_COMRECSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECCOR_FREC_CODE_FK_PKFRECCOR_CDF_COMRECS_FK_PKFRECCOR_NUM_ORD_PK(ByVal FRECCOR_FREC_CODE_FK_PK As Integer, ByVal FRECCOR_CDF_COMRECS_FK_PK As String, ByVal FRECCOR_NUM_ORD_PK As Byte) As FRECCOR_FREC_COMRECSRow
            Return CType(Me.Rows.Find(New Object() {FRECCOR_FREC_CODE_FK_PK, FRECCOR_CDF_COMRECS_FK_PK, FRECCOR_NUM_ORD_PK}),FRECCOR_FREC_COMRECSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECCOR_FREC_COMRECSDataTable = CType(MyBase.Clone,FRECCOR_FREC_COMRECSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECCOR_FREC_COMRECSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECCOR_FREC_CODE_FK_PK = MyBase.Columns("FRECCOR_FREC_CODE_FK_PK")
            Me.columnFRECCOR_CDF_COMRECS_FK_PK = MyBase.Columns("FRECCOR_CDF_COMRECS_FK_PK")
            Me.columnFRECCOR_NUM_ORD_PK = MyBase.Columns("FRECCOR_NUM_ORD_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECCOR_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECCOR_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCOR_FREC_CODE_FK_PK)
            Me.columnFRECCOR_CDF_COMRECS_FK_PK = New System.Data.DataColumn("FRECCOR_CDF_COMRECS_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCOR_CDF_COMRECS_FK_PK)
            Me.columnFRECCOR_NUM_ORD_PK = New System.Data.DataColumn("FRECCOR_NUM_ORD_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCOR_NUM_ORD_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECCOR_FREC_CODE_FK_PK, Me.columnFRECCOR_CDF_COMRECS_FK_PK, Me.columnFRECCOR_NUM_ORD_PK}, true))
            Me.columnFRECCOR_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCOR_CDF_COMRECS_FK_PK.AllowDBNull = false
            Me.columnFRECCOR_CDF_COMRECS_FK_PK.MaxLength = 10
            Me.columnFRECCOR_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECCOR_FREC_COMRECSRow() As FRECCOR_FREC_COMRECSRow
            Return CType(Me.NewRow,FRECCOR_FREC_COMRECSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECCOR_FREC_COMRECSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECCOR_FREC_COMRECSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECCOR_FREC_COMRECSRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECCOR_FREC_COMRECSRowChanged(Me, New FRECCOR_FREC_COMRECSRowChangeEvent(CType(e.Row,FRECCOR_FREC_COMRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECCOR_FREC_COMRECSRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECCOR_FREC_COMRECSRowChanging(Me, New FRECCOR_FREC_COMRECSRowChangeEvent(CType(e.Row,FRECCOR_FREC_COMRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECCOR_FREC_COMRECSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECCOR_FREC_COMRECSRowDeleted(Me, New FRECCOR_FREC_COMRECSRowChangeEvent(CType(e.Row,FRECCOR_FREC_COMRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECCOR_FREC_COMRECSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECCOR_FREC_COMRECSRowDeleting(Me, New FRECCOR_FREC_COMRECSRowChangeEvent(CType(e.Row,FRECCOR_FREC_COMRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECCOR_FREC_COMRECSRow(ByVal row As FRECCOR_FREC_COMRECSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECCOR_FREC_COMRECSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECVO_RECONSADM_VOIEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECVO_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECVO_CDF_VO_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECVO_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECVO_RECONSADM_VOIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECVO_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECVO_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECVO_CDF_VO_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECVO_CDF_VO_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECVO_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECVO_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECVO_RECONSADM_VOIERow
            Get
                Return CType(Me.Rows(index),FRECVO_RECONSADM_VOIERow)
            End Get
        End Property
        
        Public Event FRECVO_RECONSADM_VOIERowChanging As FRECVO_RECONSADM_VOIERowChangeEventHandler
        
        Public Event FRECVO_RECONSADM_VOIERowChanged As FRECVO_RECONSADM_VOIERowChangeEventHandler
        
        Public Event FRECVO_RECONSADM_VOIERowDeleting As FRECVO_RECONSADM_VOIERowChangeEventHandler
        
        Public Event FRECVO_RECONSADM_VOIERowDeleted As FRECVO_RECONSADM_VOIERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECVO_RECONSADM_VOIERow(ByVal row As FRECVO_RECONSADM_VOIERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECVO_RECONSADM_VOIERow(ByVal FRECVO_FREC_CODE_FK_PK As Integer, ByVal FRECVO_CDF_VO_CODE_FK_PK As String, ByVal FRECVO_NUMORD As Short) As FRECVO_RECONSADM_VOIERow
            Dim rowFRECVO_RECONSADM_VOIERow As FRECVO_RECONSADM_VOIERow = CType(Me.NewRow,FRECVO_RECONSADM_VOIERow)
            rowFRECVO_RECONSADM_VOIERow.ItemArray = New Object() {FRECVO_FREC_CODE_FK_PK, FRECVO_CDF_VO_CODE_FK_PK, FRECVO_NUMORD}
            Me.Rows.Add(rowFRECVO_RECONSADM_VOIERow)
            Return rowFRECVO_RECONSADM_VOIERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECVO_FREC_CODE_FK_PKFRECVO_CDF_VO_CODE_FK_PK(ByVal FRECVO_FREC_CODE_FK_PK As Integer, ByVal FRECVO_CDF_VO_CODE_FK_PK As String) As FRECVO_RECONSADM_VOIERow
            Return CType(Me.Rows.Find(New Object() {FRECVO_FREC_CODE_FK_PK, FRECVO_CDF_VO_CODE_FK_PK}),FRECVO_RECONSADM_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECVO_RECONSADM_VOIEDataTable = CType(MyBase.Clone,FRECVO_RECONSADM_VOIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECVO_RECONSADM_VOIEDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECVO_FREC_CODE_FK_PK = MyBase.Columns("FRECVO_FREC_CODE_FK_PK")
            Me.columnFRECVO_CDF_VO_CODE_FK_PK = MyBase.Columns("FRECVO_CDF_VO_CODE_FK_PK")
            Me.columnFRECVO_NUMORD = MyBase.Columns("FRECVO_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECVO_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECVO_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECVO_FREC_CODE_FK_PK)
            Me.columnFRECVO_CDF_VO_CODE_FK_PK = New System.Data.DataColumn("FRECVO_CDF_VO_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECVO_CDF_VO_CODE_FK_PK)
            Me.columnFRECVO_NUMORD = New System.Data.DataColumn("FRECVO_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECVO_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECVO_FREC_CODE_FK_PK, Me.columnFRECVO_CDF_VO_CODE_FK_PK}, true))
            Me.columnFRECVO_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECVO_CDF_VO_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECVO_CDF_VO_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECVO_RECONSADM_VOIERow() As FRECVO_RECONSADM_VOIERow
            Return CType(Me.NewRow,FRECVO_RECONSADM_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECVO_RECONSADM_VOIERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECVO_RECONSADM_VOIERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECVO_RECONSADM_VOIERowChangedEvent) Is Nothing) Then
                RaiseEvent FRECVO_RECONSADM_VOIERowChanged(Me, New FRECVO_RECONSADM_VOIERowChangeEvent(CType(e.Row,FRECVO_RECONSADM_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECVO_RECONSADM_VOIERowChangingEvent) Is Nothing) Then
                RaiseEvent FRECVO_RECONSADM_VOIERowChanging(Me, New FRECVO_RECONSADM_VOIERowChangeEvent(CType(e.Row,FRECVO_RECONSADM_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECVO_RECONSADM_VOIERowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECVO_RECONSADM_VOIERowDeleted(Me, New FRECVO_RECONSADM_VOIERowChangeEvent(CType(e.Row,FRECVO_RECONSADM_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECVO_RECONSADM_VOIERowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECVO_RECONSADM_VOIERowDeleting(Me, New FRECVO_RECONSADM_VOIERowChangeEvent(CType(e.Row,FRECVO_RECONSADM_VOIERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECVO_RECONSADM_VOIERow(ByVal row As FRECVO_RECONSADM_VOIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECVO_RECONSADM_VOIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECTXR_FREC_TXTRECSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECTXR_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECTXR_TXTRECS As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECTXR_FREC_TXTRECS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECTXR_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECTXR_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECTXR_TXTRECSColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECTXR_TXTRECS
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECTXR_FREC_TXTRECSRow
            Get
                Return CType(Me.Rows(index),FRECTXR_FREC_TXTRECSRow)
            End Get
        End Property
        
        Public Event FRECTXR_FREC_TXTRECSRowChanging As FRECTXR_FREC_TXTRECSRowChangeEventHandler
        
        Public Event FRECTXR_FREC_TXTRECSRowChanged As FRECTXR_FREC_TXTRECSRowChangeEventHandler
        
        Public Event FRECTXR_FREC_TXTRECSRowDeleting As FRECTXR_FREC_TXTRECSRowChangeEventHandler
        
        Public Event FRECTXR_FREC_TXTRECSRowDeleted As FRECTXR_FREC_TXTRECSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECTXR_FREC_TXTRECSRow(ByVal row As FRECTXR_FREC_TXTRECSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECTXR_FREC_TXTRECSRow(ByVal FRECTXR_FREC_CODE_FK_PK As Integer, ByVal FRECTXR_TXTRECS As String) As FRECTXR_FREC_TXTRECSRow
            Dim rowFRECTXR_FREC_TXTRECSRow As FRECTXR_FREC_TXTRECSRow = CType(Me.NewRow,FRECTXR_FREC_TXTRECSRow)
            rowFRECTXR_FREC_TXTRECSRow.ItemArray = New Object() {FRECTXR_FREC_CODE_FK_PK, FRECTXR_TXTRECS}
            Me.Rows.Add(rowFRECTXR_FREC_TXTRECSRow)
            Return rowFRECTXR_FREC_TXTRECSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECTXR_FREC_CODE_FK_PK(ByVal FRECTXR_FREC_CODE_FK_PK As Integer) As FRECTXR_FREC_TXTRECSRow
            Return CType(Me.Rows.Find(New Object() {FRECTXR_FREC_CODE_FK_PK}),FRECTXR_FREC_TXTRECSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECTXR_FREC_TXTRECSDataTable = CType(MyBase.Clone,FRECTXR_FREC_TXTRECSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECTXR_FREC_TXTRECSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECTXR_FREC_CODE_FK_PK = MyBase.Columns("FRECTXR_FREC_CODE_FK_PK")
            Me.columnFRECTXR_TXTRECS = MyBase.Columns("FRECTXR_TXTRECS")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECTXR_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECTXR_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECTXR_FREC_CODE_FK_PK)
            Me.columnFRECTXR_TXTRECS = New System.Data.DataColumn("FRECTXR_TXTRECS", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECTXR_TXTRECS)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECTXR_FREC_CODE_FK_PK}, true))
            Me.columnFRECTXR_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECTXR_FREC_CODE_FK_PK.Unique = true
            Me.columnFRECTXR_TXTRECS.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECTXR_FREC_TXTRECSRow() As FRECTXR_FREC_TXTRECSRow
            Return CType(Me.NewRow,FRECTXR_FREC_TXTRECSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECTXR_FREC_TXTRECSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECTXR_FREC_TXTRECSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECTXR_FREC_TXTRECSRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECTXR_FREC_TXTRECSRowChanged(Me, New FRECTXR_FREC_TXTRECSRowChangeEvent(CType(e.Row,FRECTXR_FREC_TXTRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECTXR_FREC_TXTRECSRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECTXR_FREC_TXTRECSRowChanging(Me, New FRECTXR_FREC_TXTRECSRowChangeEvent(CType(e.Row,FRECTXR_FREC_TXTRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECTXR_FREC_TXTRECSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECTXR_FREC_TXTRECSRowDeleted(Me, New FRECTXR_FREC_TXTRECSRowChangeEvent(CType(e.Row,FRECTXR_FREC_TXTRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECTXR_FREC_TXTRECSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECTXR_FREC_TXTRECSRowDeleting(Me, New FRECTXR_FREC_TXTRECSRowChangeEvent(CType(e.Row,FRECTXR_FREC_TXTRECSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECTXR_FREC_TXTRECSRow(ByVal row As FRECTXR_FREC_TXTRECSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECTXR_FREC_TXTRECSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECCOA_FREC_COMADMDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECCOA_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECCOA_CDF_COMADM_FK_PK As System.Data.DataColumn
        
        Private columnFRECCOA_NUM_ORD_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECCOA_FREC_COMADM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCOA_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCOA_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCOA_CDF_COMADM_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCOA_CDF_COMADM_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECCOA_NUM_ORD_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECCOA_NUM_ORD_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECCOA_FREC_COMADMRow
            Get
                Return CType(Me.Rows(index),FRECCOA_FREC_COMADMRow)
            End Get
        End Property
        
        Public Event FRECCOA_FREC_COMADMRowChanging As FRECCOA_FREC_COMADMRowChangeEventHandler
        
        Public Event FRECCOA_FREC_COMADMRowChanged As FRECCOA_FREC_COMADMRowChangeEventHandler
        
        Public Event FRECCOA_FREC_COMADMRowDeleting As FRECCOA_FREC_COMADMRowChangeEventHandler
        
        Public Event FRECCOA_FREC_COMADMRowDeleted As FRECCOA_FREC_COMADMRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECCOA_FREC_COMADMRow(ByVal row As FRECCOA_FREC_COMADMRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECCOA_FREC_COMADMRow(ByVal FRECCOA_FREC_CODE_FK_PK As Integer, ByVal FRECCOA_CDF_COMADM_FK_PK As String, ByVal FRECCOA_NUM_ORD_PK As Byte) As FRECCOA_FREC_COMADMRow
            Dim rowFRECCOA_FREC_COMADMRow As FRECCOA_FREC_COMADMRow = CType(Me.NewRow,FRECCOA_FREC_COMADMRow)
            rowFRECCOA_FREC_COMADMRow.ItemArray = New Object() {FRECCOA_FREC_CODE_FK_PK, FRECCOA_CDF_COMADM_FK_PK, FRECCOA_NUM_ORD_PK}
            Me.Rows.Add(rowFRECCOA_FREC_COMADMRow)
            Return rowFRECCOA_FREC_COMADMRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECCOA_FREC_CODE_FK_PKFRECCOA_CDF_COMADM_FK_PKFRECCOA_NUM_ORD_PK(ByVal FRECCOA_FREC_CODE_FK_PK As Integer, ByVal FRECCOA_CDF_COMADM_FK_PK As String, ByVal FRECCOA_NUM_ORD_PK As Byte) As FRECCOA_FREC_COMADMRow
            Return CType(Me.Rows.Find(New Object() {FRECCOA_FREC_CODE_FK_PK, FRECCOA_CDF_COMADM_FK_PK, FRECCOA_NUM_ORD_PK}),FRECCOA_FREC_COMADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECCOA_FREC_COMADMDataTable = CType(MyBase.Clone,FRECCOA_FREC_COMADMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECCOA_FREC_COMADMDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECCOA_FREC_CODE_FK_PK = MyBase.Columns("FRECCOA_FREC_CODE_FK_PK")
            Me.columnFRECCOA_CDF_COMADM_FK_PK = MyBase.Columns("FRECCOA_CDF_COMADM_FK_PK")
            Me.columnFRECCOA_NUM_ORD_PK = MyBase.Columns("FRECCOA_NUM_ORD_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECCOA_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECCOA_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCOA_FREC_CODE_FK_PK)
            Me.columnFRECCOA_CDF_COMADM_FK_PK = New System.Data.DataColumn("FRECCOA_CDF_COMADM_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCOA_CDF_COMADM_FK_PK)
            Me.columnFRECCOA_NUM_ORD_PK = New System.Data.DataColumn("FRECCOA_NUM_ORD_PK", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECCOA_NUM_ORD_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECCOA_FREC_CODE_FK_PK, Me.columnFRECCOA_CDF_COMADM_FK_PK, Me.columnFRECCOA_NUM_ORD_PK}, true))
            Me.columnFRECCOA_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECCOA_CDF_COMADM_FK_PK.AllowDBNull = false
            Me.columnFRECCOA_CDF_COMADM_FK_PK.MaxLength = 10
            Me.columnFRECCOA_NUM_ORD_PK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECCOA_FREC_COMADMRow() As FRECCOA_FREC_COMADMRow
            Return CType(Me.NewRow,FRECCOA_FREC_COMADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECCOA_FREC_COMADMRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECCOA_FREC_COMADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECCOA_FREC_COMADMRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECCOA_FREC_COMADMRowChanged(Me, New FRECCOA_FREC_COMADMRowChangeEvent(CType(e.Row,FRECCOA_FREC_COMADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECCOA_FREC_COMADMRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECCOA_FREC_COMADMRowChanging(Me, New FRECCOA_FREC_COMADMRowChangeEvent(CType(e.Row,FRECCOA_FREC_COMADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECCOA_FREC_COMADMRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECCOA_FREC_COMADMRowDeleted(Me, New FRECCOA_FREC_COMADMRowChangeEvent(CType(e.Row,FRECCOA_FREC_COMADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECCOA_FREC_COMADMRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECCOA_FREC_COMADMRowDeleting(Me, New FRECCOA_FREC_COMADMRowChangeEvent(CType(e.Row,FRECCOA_FREC_COMADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECCOA_FREC_COMADMRow(ByVal row As FRECCOA_FREC_COMADMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECCOA_FREC_COMADMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECAFS_FREC_AFSSAPSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECAFS_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECAFS_SP_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECAFS_DATE_PK As System.Data.DataColumn
        
        Private columnFRECAFS_CDF_DOCUMENT_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECAFS_FREC_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECAFS_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECAFS_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECAFS_SP_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECAFS_DATE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECAFS_DATE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECAFS_CDF_DOCUMENT_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECAFS_FREC_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FRECAFS_FREC_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FRECAFS_FREC_AFSSAPSRowChanging As FRECAFS_FREC_AFSSAPSRowChangeEventHandler
        
        Public Event FRECAFS_FREC_AFSSAPSRowChanged As FRECAFS_FREC_AFSSAPSRowChangeEventHandler
        
        Public Event FRECAFS_FREC_AFSSAPSRowDeleting As FRECAFS_FREC_AFSSAPSRowChangeEventHandler
        
        Public Event FRECAFS_FREC_AFSSAPSRowDeleted As FRECAFS_FREC_AFSSAPSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECAFS_FREC_AFSSAPSRow(ByVal row As FRECAFS_FREC_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECAFS_FREC_AFSSAPSRow(ByVal FRECAFS_FREC_CODE_FK_PK As Integer, ByVal FRECAFS_SP_CODE_FK_PK As Integer, ByVal FRECAFS_DATE_PK As Date, ByVal FRECAFS_CDF_DOCUMENT_FK_PK As String) As FRECAFS_FREC_AFSSAPSRow
            Dim rowFRECAFS_FREC_AFSSAPSRow As FRECAFS_FREC_AFSSAPSRow = CType(Me.NewRow,FRECAFS_FREC_AFSSAPSRow)
            rowFRECAFS_FREC_AFSSAPSRow.ItemArray = New Object() {FRECAFS_FREC_CODE_FK_PK, FRECAFS_SP_CODE_FK_PK, FRECAFS_DATE_PK, FRECAFS_CDF_DOCUMENT_FK_PK}
            Me.Rows.Add(rowFRECAFS_FREC_AFSSAPSRow)
            Return rowFRECAFS_FREC_AFSSAPSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECAFS_FREC_CODE_FK_PKFRECAFS_SP_CODE_FK_PKFRECAFS_DATE_PKFRECAFS_CDF_DOCUMENT_FK_PK(ByVal FRECAFS_FREC_CODE_FK_PK As Integer, ByVal FRECAFS_SP_CODE_FK_PK As Integer, ByVal FRECAFS_DATE_PK As Date, ByVal FRECAFS_CDF_DOCUMENT_FK_PK As String) As FRECAFS_FREC_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FRECAFS_FREC_CODE_FK_PK, FRECAFS_SP_CODE_FK_PK, FRECAFS_DATE_PK, FRECAFS_CDF_DOCUMENT_FK_PK}),FRECAFS_FREC_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECAFS_FREC_AFSSAPSDataTable = CType(MyBase.Clone,FRECAFS_FREC_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECAFS_FREC_AFSSAPSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECAFS_FREC_CODE_FK_PK = MyBase.Columns("FRECAFS_FREC_CODE_FK_PK")
            Me.columnFRECAFS_SP_CODE_FK_PK = MyBase.Columns("FRECAFS_SP_CODE_FK_PK")
            Me.columnFRECAFS_DATE_PK = MyBase.Columns("FRECAFS_DATE_PK")
            Me.columnFRECAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FRECAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECAFS_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECAFS_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECAFS_FREC_CODE_FK_PK)
            Me.columnFRECAFS_SP_CODE_FK_PK = New System.Data.DataColumn("FRECAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECAFS_SP_CODE_FK_PK)
            Me.columnFRECAFS_DATE_PK = New System.Data.DataColumn("FRECAFS_DATE_PK", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECAFS_DATE_PK)
            Me.columnFRECAFS_CDF_DOCUMENT_FK_PK = New System.Data.DataColumn("FRECAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECAFS_FREC_CODE_FK_PK, Me.columnFRECAFS_SP_CODE_FK_PK, Me.columnFRECAFS_DATE_PK, Me.columnFRECAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFRECAFS_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECAFS_DATE_PK.AllowDBNull = false
            Me.columnFRECAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFRECAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECAFS_FREC_AFSSAPSRow() As FRECAFS_FREC_AFSSAPSRow
            Return CType(Me.NewRow,FRECAFS_FREC_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECAFS_FREC_AFSSAPSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECAFS_FREC_AFSSAPSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECAFS_FREC_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECAFS_FREC_AFSSAPSRowChanged(Me, New FRECAFS_FREC_AFSSAPSRowChangeEvent(CType(e.Row,FRECAFS_FREC_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECAFS_FREC_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECAFS_FREC_AFSSAPSRowChanging(Me, New FRECAFS_FREC_AFSSAPSRowChangeEvent(CType(e.Row,FRECAFS_FREC_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECAFS_FREC_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECAFS_FREC_AFSSAPSRowDeleted(Me, New FRECAFS_FREC_AFSSAPSRowChangeEvent(CType(e.Row,FRECAFS_FREC_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECAFS_FREC_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECAFS_FREC_AFSSAPSRowDeleting(Me, New FRECAFS_FREC_AFSSAPSRowChangeEvent(CType(e.Row,FRECAFS_FREC_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECAFS_FREC_AFSSAPSRow(ByVal row As FRECAFS_FREC_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECAFS_FREC_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FRECTXA_FREC_TXTADMDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFRECTXA_FREC_CODE_FK_PK As System.Data.DataColumn
        
        Private columnFRECTXA_TXTADM As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FRECTXA_FREC_TXTADM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECTXA_FREC_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECTXA_FREC_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FRECTXA_TXTADMColumn() As System.Data.DataColumn
            Get
                Return Me.columnFRECTXA_TXTADM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRECTXA_FREC_TXTADMRow
            Get
                Return CType(Me.Rows(index),FRECTXA_FREC_TXTADMRow)
            End Get
        End Property
        
        Public Event FRECTXA_FREC_TXTADMRowChanging As FRECTXA_FREC_TXTADMRowChangeEventHandler
        
        Public Event FRECTXA_FREC_TXTADMRowChanged As FRECTXA_FREC_TXTADMRowChangeEventHandler
        
        Public Event FRECTXA_FREC_TXTADMRowDeleting As FRECTXA_FREC_TXTADMRowChangeEventHandler
        
        Public Event FRECTXA_FREC_TXTADMRowDeleted As FRECTXA_FREC_TXTADMRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFRECTXA_FREC_TXTADMRow(ByVal row As FRECTXA_FREC_TXTADMRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFRECTXA_FREC_TXTADMRow(ByVal FRECTXA_FREC_CODE_FK_PK As Integer, ByVal FRECTXA_TXTADM As String) As FRECTXA_FREC_TXTADMRow
            Dim rowFRECTXA_FREC_TXTADMRow As FRECTXA_FREC_TXTADMRow = CType(Me.NewRow,FRECTXA_FREC_TXTADMRow)
            rowFRECTXA_FREC_TXTADMRow.ItemArray = New Object() {FRECTXA_FREC_CODE_FK_PK, FRECTXA_TXTADM}
            Me.Rows.Add(rowFRECTXA_FREC_TXTADMRow)
            Return rowFRECTXA_FREC_TXTADMRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFRECTXA_FREC_CODE_FK_PK(ByVal FRECTXA_FREC_CODE_FK_PK As Integer) As FRECTXA_FREC_TXTADMRow
            Return CType(Me.Rows.Find(New Object() {FRECTXA_FREC_CODE_FK_PK}),FRECTXA_FREC_TXTADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FRECTXA_FREC_TXTADMDataTable = CType(MyBase.Clone,FRECTXA_FREC_TXTADMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FRECTXA_FREC_TXTADMDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFRECTXA_FREC_CODE_FK_PK = MyBase.Columns("FRECTXA_FREC_CODE_FK_PK")
            Me.columnFRECTXA_TXTADM = MyBase.Columns("FRECTXA_TXTADM")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFRECTXA_FREC_CODE_FK_PK = New System.Data.DataColumn("FRECTXA_FREC_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECTXA_FREC_CODE_FK_PK)
            Me.columnFRECTXA_TXTADM = New System.Data.DataColumn("FRECTXA_TXTADM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFRECTXA_TXTADM)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFRECTXA_FREC_CODE_FK_PK}, true))
            Me.columnFRECTXA_FREC_CODE_FK_PK.AllowDBNull = false
            Me.columnFRECTXA_FREC_CODE_FK_PK.Unique = true
            Me.columnFRECTXA_TXTADM.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFRECTXA_FREC_TXTADMRow() As FRECTXA_FREC_TXTADMRow
            Return CType(Me.NewRow,FRECTXA_FREC_TXTADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FRECTXA_FREC_TXTADMRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRECTXA_FREC_TXTADMRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRECTXA_FREC_TXTADMRowChangedEvent) Is Nothing) Then
                RaiseEvent FRECTXA_FREC_TXTADMRowChanged(Me, New FRECTXA_FREC_TXTADMRowChangeEvent(CType(e.Row,FRECTXA_FREC_TXTADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRECTXA_FREC_TXTADMRowChangingEvent) Is Nothing) Then
                RaiseEvent FRECTXA_FREC_TXTADMRowChanging(Me, New FRECTXA_FREC_TXTADMRowChangeEvent(CType(e.Row,FRECTXA_FREC_TXTADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRECTXA_FREC_TXTADMRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRECTXA_FREC_TXTADMRowDeleted(Me, New FRECTXA_FREC_TXTADMRowChangeEvent(CType(e.Row,FRECTXA_FREC_TXTADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRECTXA_FREC_TXTADMRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRECTXA_FREC_TXTADMRowDeleting(Me, New FRECTXA_FREC_TXTADMRowChangeEvent(CType(e.Row,FRECTXA_FREC_TXTADMRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFRECTXA_FREC_TXTADMRow(ByVal row As FRECTXA_FREC_TXTADMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Reconst_Administ = New dsTheriaque_Reconst_Administ
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FRECTXA_FREC_TXTADMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FREC_RECONSADMRow
        Inherits System.Data.DataRow
        
        Private tableFREC_RECONSADM As FREC_RECONSADMDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFREC_RECONSADM = CType(Me.Table,FREC_RECONSADMDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FREC_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFREC_RECONSADM.FREC_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFREC_RECONSADM.FREC_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FREC_DATECR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFREC_RECONSADM.FREC_DATECRColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FREC_DATECR' dans la table 'FREC_RECONSADM' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFREC_RECONSADM.FREC_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FREC_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFREC_RECONSADM.FREC_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FREC_DATEMJ' dans la table 'FREC_RECONSADM' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFREC_RECONSADM.FREC_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFREC_DATECRNull() As Boolean
            Return Me.IsNull(Me.tableFREC_RECONSADM.FREC_DATECRColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFREC_DATECRNull()
            Me(Me.tableFREC_RECONSADM.FREC_DATECRColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFREC_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFREC_RECONSADM.FREC_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFREC_DATEMJNull()
            Me(Me.tableFREC_RECONSADM.FREC_DATEMJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECCPH_FREC_CLPHRow
        Inherits System.Data.DataRow
        
        Private tableFRECCPH_FREC_CLPH As FRECCPH_FREC_CLPHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECCPH_FREC_CLPH = CType(Me.Table,FRECCPH_FREC_CLPHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCPH_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECCPH_FREC_CLPH.FRECCPH_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECCPH_FREC_CLPH.FRECCPH_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFRECCPH_FREC_CLPH.FRECCPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFRECCPH_FREC_CLPH.FRECCPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECCCH_FREC_CLCHRow
        Inherits System.Data.DataRow
        
        Private tableFRECCCH_FREC_CLCH As FRECCCH_FREC_CLCHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECCCH_FREC_CLCH = CType(Me.Table,FRECCCH_FREC_CLCHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCCH_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECCCH_FREC_CLCH.FRECCCH_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECCCH_FREC_CLCH.FRECCCH_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFRECCCH_FREC_CLCH.FRECCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFRECCCH_FREC_CLCH.FRECCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECSAC_FREC_SUBACTRow
        Inherits System.Data.DataRow
        
        Private tableFRECSAC_FREC_SUBACT As FRECSAC_FREC_SUBACTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECSAC_FREC_SUBACT = CType(Me.Table,FRECSAC_FREC_SUBACTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECSAC_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECSAC_FREC_SUBACT.FRECSAC_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECSAC_FREC_SUBACT.FRECSAC_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECSAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECSAC_FREC_SUBACT.FRECSAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECSAC_FREC_SUBACT.FRECSAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECPR_FREC_PRODRow
        Inherits System.Data.DataRow
        
        Private tableFRECPR_FREC_PROD As FRECPR_FREC_PRODDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECPR_FREC_PROD = CType(Me.Table,FRECPR_FREC_PRODDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECPR_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECPR_FREC_PROD.FRECPR_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECPR_FREC_PROD.FRECPR_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECPR_FREC_PROD.FRECPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECPR_FREC_PROD.FRECPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECCH_RECONSTCHRow
        Inherits System.Data.DataRow
        
        Private tableFRECCH_RECONSTCH As FRECCH_RECONSTCHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECCH_RECONSTCH = CType(Me.Table,FRECCH_RECONSTCHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCH_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECCH_RECONSTCH.FRECCH_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECCH_RECONSTCH.FRECCH_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCH_CH_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECCH_RECONSTCH.FRECCH_CH_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECCH_RECONSTCH.FRECCH_CH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFRECCH_RECONSTCH.FRECCH_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FRECCH_NUMORD' dans la table 'FRECCH_RECONSTCH' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRECCH_RECONSTCH.FRECCH_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRECCH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFRECCH_RECONSTCH.FRECCH_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRECCH_NUMORDNull()
            Me(Me.tableFRECCH_RECONSTCH.FRECCH_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECSP_RECONST_SPECRow
        Inherits System.Data.DataRow
        
        Private tableFRECSP_RECONST_SPEC As FRECSP_RECONST_SPECDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECSP_RECONST_SPEC = CType(Me.Table,FRECSP_RECONST_SPECDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECSP_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECSP_RECONST_SPEC.FRECSP_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECSP_RECONST_SPEC.FRECSP_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECSP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECSP_RECONST_SPEC.FRECSP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECSP_RECONST_SPEC.FRECSP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECCOR_FREC_COMRECSRow
        Inherits System.Data.DataRow
        
        Private tableFRECCOR_FREC_COMRECS As FRECCOR_FREC_COMRECSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECCOR_FREC_COMRECS = CType(Me.Table,FRECCOR_FREC_COMRECSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCOR_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECCOR_FREC_COMRECS.FRECCOR_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECCOR_FREC_COMRECS.FRECCOR_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCOR_CDF_COMRECS_FK_PK() As String
            Get
                Return CType(Me(Me.tableFRECCOR_FREC_COMRECS.FRECCOR_CDF_COMRECS_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFRECCOR_FREC_COMRECS.FRECCOR_CDF_COMRECS_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCOR_NUM_ORD_PK() As Byte
            Get
                Return CType(Me(Me.tableFRECCOR_FREC_COMRECS.FRECCOR_NUM_ORD_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableFRECCOR_FREC_COMRECS.FRECCOR_NUM_ORD_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECVO_RECONSADM_VOIERow
        Inherits System.Data.DataRow
        
        Private tableFRECVO_RECONSADM_VOIE As FRECVO_RECONSADM_VOIEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECVO_RECONSADM_VOIE = CType(Me.Table,FRECVO_RECONSADM_VOIEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECVO_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECVO_CDF_VO_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_CDF_VO_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_CDF_VO_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECVO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FRECVO_NUMORD' dans la table 'FRECVO_RECONSADM_VOIE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRECVO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRECVO_NUMORDNull()
            Me(Me.tableFRECVO_RECONSADM_VOIE.FRECVO_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECTXR_FREC_TXTRECSRow
        Inherits System.Data.DataRow
        
        Private tableFRECTXR_FREC_TXTRECS As FRECTXR_FREC_TXTRECSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECTXR_FREC_TXTRECS = CType(Me.Table,FRECTXR_FREC_TXTRECSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECTXR_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECTXR_FREC_TXTRECS.FRECTXR_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECTXR_FREC_TXTRECS.FRECTXR_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECTXR_TXTRECS() As String
            Get
                Try 
                    Return CType(Me(Me.tableFRECTXR_FREC_TXTRECS.FRECTXR_TXTRECSColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FRECTXR_TXTRECS' dans la table 'FRECTXR_FREC_TXTRECS' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRECTXR_FREC_TXTRECS.FRECTXR_TXTRECSColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRECTXR_TXTRECSNull() As Boolean
            Return Me.IsNull(Me.tableFRECTXR_FREC_TXTRECS.FRECTXR_TXTRECSColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRECTXR_TXTRECSNull()
            Me(Me.tableFRECTXR_FREC_TXTRECS.FRECTXR_TXTRECSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECCOA_FREC_COMADMRow
        Inherits System.Data.DataRow
        
        Private tableFRECCOA_FREC_COMADM As FRECCOA_FREC_COMADMDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECCOA_FREC_COMADM = CType(Me.Table,FRECCOA_FREC_COMADMDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCOA_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECCOA_FREC_COMADM.FRECCOA_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECCOA_FREC_COMADM.FRECCOA_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCOA_CDF_COMADM_FK_PK() As String
            Get
                Return CType(Me(Me.tableFRECCOA_FREC_COMADM.FRECCOA_CDF_COMADM_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFRECCOA_FREC_COMADM.FRECCOA_CDF_COMADM_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECCOA_NUM_ORD_PK() As Byte
            Get
                Return CType(Me(Me.tableFRECCOA_FREC_COMADM.FRECCOA_NUM_ORD_PKColumn),Byte)
            End Get
            Set
                Me(Me.tableFRECCOA_FREC_COMADM.FRECCOA_NUM_ORD_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECAFS_FREC_AFSSAPSRow
        Inherits System.Data.DataRow
        
        Private tableFRECAFS_FREC_AFSSAPS As FRECAFS_FREC_AFSSAPSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECAFS_FREC_AFSSAPS = CType(Me.Table,FRECAFS_FREC_AFSSAPSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECAFS_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFRECAFS_FREC_AFSSAPS.FRECAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FRECTXA_FREC_TXTADMRow
        Inherits System.Data.DataRow
        
        Private tableFRECTXA_FREC_TXTADM As FRECTXA_FREC_TXTADMDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRECTXA_FREC_TXTADM = CType(Me.Table,FRECTXA_FREC_TXTADMDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECTXA_FREC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFRECTXA_FREC_TXTADM.FRECTXA_FREC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFRECTXA_FREC_TXTADM.FRECTXA_FREC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FRECTXA_TXTADM() As String
            Get
                Try 
                    Return CType(Me(Me.tableFRECTXA_FREC_TXTADM.FRECTXA_TXTADMColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FRECTXA_TXTADM' dans la table 'FRECTXA_FREC_TXTADM' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRECTXA_FREC_TXTADM.FRECTXA_TXTADMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFRECTXA_TXTADMNull() As Boolean
            Return Me.IsNull(Me.tableFRECTXA_FREC_TXTADM.FRECTXA_TXTADMColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFRECTXA_TXTADMNull()
            Me(Me.tableFRECTXA_FREC_TXTADM.FRECTXA_TXTADMColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FREC_RECONSADMRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FREC_RECONSADMRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FREC_RECONSADMRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FREC_RECONSADMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECCPH_FREC_CLPHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECCPH_FREC_CLPHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECCPH_FREC_CLPHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECCPH_FREC_CLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECCCH_FREC_CLCHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECCCH_FREC_CLCHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECCCH_FREC_CLCHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECCCH_FREC_CLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECSAC_FREC_SUBACTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECSAC_FREC_SUBACTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECSAC_FREC_SUBACTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECSAC_FREC_SUBACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECPR_FREC_PRODRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECPR_FREC_PRODRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECPR_FREC_PRODRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECPR_FREC_PRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECCH_RECONSTCHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECCH_RECONSTCHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECCH_RECONSTCHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECCH_RECONSTCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECSP_RECONST_SPECRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECSP_RECONST_SPECRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECSP_RECONST_SPECRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECSP_RECONST_SPECRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECCOR_FREC_COMRECSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECCOR_FREC_COMRECSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECCOR_FREC_COMRECSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECCOR_FREC_COMRECSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECVO_RECONSADM_VOIERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECVO_RECONSADM_VOIERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECVO_RECONSADM_VOIERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECVO_RECONSADM_VOIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECTXR_FREC_TXTRECSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECTXR_FREC_TXTRECSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECTXR_FREC_TXTRECSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECTXR_FREC_TXTRECSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECCOA_FREC_COMADMRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECCOA_FREC_COMADMRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECCOA_FREC_COMADMRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECCOA_FREC_COMADMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECAFS_FREC_AFSSAPSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECAFS_FREC_AFSSAPSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECAFS_FREC_AFSSAPSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECAFS_FREC_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FRECTXA_FREC_TXTADMRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FRECTXA_FREC_TXTADMRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FRECTXA_FREC_TXTADMRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FRECTXA_FREC_TXTADMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Reconst_AdministTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FREC_RECONSADMTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FREC_RECONSADM"
            tableMapping.ColumnMappings.Add("FREC_CODE_SQ_PK", "FREC_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FREC_DATECR", "FREC_DATECR")
            tableMapping.ColumnMappings.Add("FREC_DATEMJ", "FREC_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FREC_RECONSADM] WHERE (([FREC_CODE_SQ_PK] = @Original_FR"& _ 
                "EC_CODE_SQ_PK) AND ((@IsNull_FREC_DATECR = 1 AND [FREC_DATECR] IS NULL) OR ([FRE"& _ 
                "C_DATECR] = @Original_FREC_DATECR)) AND ((@IsNull_FREC_DATEMJ = 1 AND [FREC_DATE"& _ 
                "MJ] IS NULL) OR ([FREC_DATEMJ] = @Original_FREC_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FREC_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FREC_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FREC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FREC_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FREC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FREC_RECONSADM] ([FREC_CODE_SQ_PK], [FREC_DATECR], [FREC"& _ 
                "_DATEMJ]) VALUES (@FREC_CODE_SQ_PK, @FREC_DATECR, @FREC_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FREC_CO"& _ 
                "DE_SQ_PK, FREC_DATECR, FREC_DATEMJ FROM THERIAQUE.FREC_RECONSADM WHERE (FREC_COD"& _ 
                "E_SQ_PK = @FREC_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FREC_RECONSADM] SET [FREC_CODE_SQ_PK] = @FREC_CODE_SQ_PK, [FR"& _ 
                "EC_DATECR] = @FREC_DATECR, [FREC_DATEMJ] = @FREC_DATEMJ WHERE (([FREC_CODE_SQ_PK"& _ 
                "] = @Original_FREC_CODE_SQ_PK) AND ((@IsNull_FREC_DATECR = 1 AND [FREC_DATECR] I"& _ 
                "S NULL) OR ([FREC_DATECR] = @Original_FREC_DATECR)) AND ((@IsNull_FREC_DATEMJ = "& _ 
                "1 AND [FREC_DATEMJ] IS NULL) OR ([FREC_DATEMJ] = @Original_FREC_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT FREC_CODE_SQ_PK, FREC_DATECR, FREC_DATEMJ FROM THERIAQUE.FREC_RECONSADM WHERE"& _ 
                " (FREC_CODE_SQ_PK = @FREC_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FREC_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FREC_DATECR", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATECR", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FREC_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FREC_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FREC_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FREC_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FREC_CODE_SQ_PK, FREC_DATECR, FREC_DATEMJ FROM THERIAQUE.FREC_RECONSADM"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FREC_CODE_SQ_PK, FREC_DATECR, FREC_DATEMJ FROM THERIAQUE.FREC_RECONSADM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE FREC_CODE_SQ_PK = @FREC_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FREC_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FREC_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable = New dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable, ByVal FREC_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FREC_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FREC_CODE_SQ_PK As Integer) As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FREC_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable = New dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FREC_RECONSADMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FREC_RECONSADM")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FREC_CODE_SQ_PK As Integer, ByVal Original_FREC_DATECR As System.Nullable(Of Date), ByVal Original_FREC_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FREC_CODE_SQ_PK,Integer)
            If (Original_FREC_DATECR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FREC_DATECR.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_FREC_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FREC_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FREC_CODE_SQ_PK As Integer, ByVal FREC_DATECR As System.Nullable(Of Date), ByVal FREC_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FREC_CODE_SQ_PK,Integer)
            If (FREC_DATECR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FREC_DATECR.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (FREC_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FREC_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FREC_CODE_SQ_PK As Integer, ByVal FREC_DATECR As System.Nullable(Of Date), ByVal FREC_DATEMJ As System.Nullable(Of Date), ByVal Original_FREC_CODE_SQ_PK As Integer, ByVal Original_FREC_DATECR As System.Nullable(Of Date), ByVal Original_FREC_DATEMJ As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FREC_CODE_SQ_PK,Integer)
            If (FREC_DATECR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FREC_DATECR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (FREC_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FREC_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FREC_CODE_SQ_PK,Integer)
            If (Original_FREC_DATECR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FREC_DATECR.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_FREC_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FREC_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FRECCPH_FREC_CLPHTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECCPH_FREC_CLPH"
            tableMapping.ColumnMappings.Add("FRECCPH_FREC_CODE_FK_PK", "FRECCPH_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCPH_CPH_CODE_FK_PK", "FRECCPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECCPH_FREC_CLPH] WHERE (([FRECCPH_FREC_CODE_FK_PK] = @"& _ 
                "Original_FRECCPH_FREC_CODE_FK_PK) AND ([FRECCPH_CPH_CODE_FK_PK] = @Original_FREC"& _ 
                "CPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCPH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECCPH_FREC_CLPH] ([FRECCPH_FREC_CODE_FK_PK], [FRECCPH_"& _ 
                "CPH_CODE_FK_PK]) VALUES (@FRECCPH_FREC_CODE_FK_PK, @FRECCPH_CPH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT FRECCPH_FREC_CODE_FK_PK, FRECCPH_CPH_CODE_FK_PK FROM THERIAQUE.FRECCPH_FREC"& _ 
                "_CLPH WHERE (FRECCPH_CPH_CODE_FK_PK = @FRECCPH_CPH_CODE_FK_PK) AND (FRECCPH_FREC"& _ 
                "_CODE_FK_PK = @FRECCPH_FREC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCPH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECCPH_FREC_CLPH] SET [FRECCPH_FREC_CODE_FK_PK] = @FRECCPH_F"& _ 
                "REC_CODE_FK_PK, [FRECCPH_CPH_CODE_FK_PK] = @FRECCPH_CPH_CODE_FK_PK WHERE (([FREC"& _ 
                "CPH_FREC_CODE_FK_PK] = @Original_FRECCPH_FREC_CODE_FK_PK) AND ([FRECCPH_CPH_CODE"& _ 
                "_FK_PK] = @Original_FRECCPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECCPH_FREC_CODE_FK_PK, F"& _ 
                "RECCPH_CPH_CODE_FK_PK FROM THERIAQUE.FRECCPH_FREC_CLPH WHERE (FRECCPH_CPH_CODE_F"& _ 
                "K_PK = @FRECCPH_CPH_CODE_FK_PK) AND (FRECCPH_FREC_CODE_FK_PK = @FRECCPH_FREC_COD"& _ 
                "E_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCPH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCPH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCPH_CPH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_CPH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECCPH_FREC_CODE_FK_PK, FRECCPH_CPH_CODE_FK_PK FROM THERIAQUE.FRECCPH_FRE" & _
                "C_CLPH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECCPH_FREC_CODE_FK_PK, FRECCPH_CPH_CODE_FK_PK FROM THERIAQUE.FRECCPH_FRE" & _
                "C_CLPH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECCPH_FREC_CODE_FK_PK = @FRECCPH_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCPH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECCPH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable = New dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable, ByVal FRECCPH_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCPH_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECCPH_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCPH_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable = New dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCPH_FREC_CLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECCPH_FREC_CLPH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECCPH_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECCPH_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECCPH_FREC_CODE_FK_PK As Integer, ByVal FRECCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECCPH_FREC_CODE_FK_PK, Integer)
            If (FRECCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECCPH_FREC_CODE_FK_PK As Integer, ByVal FRECCPH_CPH_CODE_FK_PK As String, ByVal Original_FRECCPH_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECCPH_FREC_CODE_FK_PK, Integer)
            If (FRECCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECCPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECCPH_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECCPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FRECCCH_FREC_CLCHTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECCCH_FREC_CLCH"
            tableMapping.ColumnMappings.Add("FRECCCH_FREC_CODE_FK_PK", "FRECCCH_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCCH_CCH_CODE_FK_PK", "FRECCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECCCH_FREC_CLCH] WHERE (([FRECCCH_FREC_CODE_FK_PK] = @" & _
                "Original_FRECCCH_FREC_CODE_FK_PK) AND ([FRECCCH_CCH_CODE_FK_PK] = @Original_FREC" & _
                "CCH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECCCH_FREC_CLCH] ([FRECCCH_FREC_CODE_FK_PK], [FRECCCH_" & _
                "CCH_CODE_FK_PK]) VALUES (@FRECCCH_FREC_CODE_FK_PK, @FRECCCH_CCH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SE" & _
                "LECT FRECCCH_FREC_CODE_FK_PK, FRECCCH_CCH_CODE_FK_PK FROM THERIAQUE.FRECCCH_FREC" & _
                "_CLCH WHERE (FRECCCH_CCH_CODE_FK_PK = @FRECCCH_CCH_CODE_FK_PK) AND (FRECCCH_FREC" & _
                "_CODE_FK_PK = @FRECCCH_FREC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECCCH_FREC_CLCH] SET [FRECCCH_FREC_CODE_FK_PK] = @FRECCCH_F" & _
                "REC_CODE_FK_PK, [FRECCCH_CCH_CODE_FK_PK] = @FRECCCH_CCH_CODE_FK_PK WHERE (([FREC" & _
                "CCH_FREC_CODE_FK_PK] = @Original_FRECCCH_FREC_CODE_FK_PK) AND ([FRECCCH_CCH_CODE" & _
                "_FK_PK] = @Original_FRECCCH_CCH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECCCH_FREC_CODE_FK_PK, F" & _
                "RECCCH_CCH_CODE_FK_PK FROM THERIAQUE.FRECCCH_FREC_CLCH WHERE (FRECCCH_CCH_CODE_F" & _
                "K_PK = @FRECCCH_CCH_CODE_FK_PK) AND (FRECCCH_FREC_CODE_FK_PK = @FRECCCH_FREC_COD" & _
                "E_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECCCH_FREC_CODE_FK_PK, FRECCCH_CCH_CODE_FK_PK FROM THERIAQUE.FRECCCH_FRE" & _
                "C_CLCH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECCCH_FREC_CODE_FK_PK, FRECCCH_CCH_CODE_FK_PK FROM THERIAQUE.FRECCCH_FRE" & _
                "C_CLCH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECCCH_FREC_CODE_FK_PK = @FRECCCH_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECCCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable = New dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable, ByVal FRECCCH_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCCH_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECCCH_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCCH_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable = New dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCCH_FREC_CLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECCCH_FREC_CLCH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECCCH_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECCCH_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECCCH_FREC_CODE_FK_PK As Integer, ByVal FRECCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECCCH_FREC_CODE_FK_PK, Integer)
            If (FRECCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECCCH_FREC_CODE_FK_PK As Integer, ByVal FRECCCH_CCH_CODE_FK_PK As String, ByVal Original_FRECCCH_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECCCH_FREC_CODE_FK_PK, Integer)
            If (FRECCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECCCH_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FRECSAC_FREC_SUBACTTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECSAC_FREC_SUBACT"
            tableMapping.ColumnMappings.Add("FRECSAC_FREC_CODE_FK_PK", "FRECSAC_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECSAC_SAC_CODE_FK_PK", "FRECSAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECSAC_FREC_SUBACT] WHERE (([FRECSAC_FREC_CODE_FK_PK] ="& _ 
                " @Original_FRECSAC_FREC_CODE_FK_PK) AND ([FRECSAC_SAC_CODE_FK_PK] = @Original_FR"& _ 
                "ECSAC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSAC_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECSAC_FREC_SUBACT] ([FRECSAC_FREC_CODE_FK_PK], [FRECSA"& _ 
                "C_SAC_CODE_FK_PK]) VALUES (@FRECSAC_FREC_CODE_FK_PK, @FRECSAC_SAC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT FRECSAC_FREC_CODE_FK_PK, FRECSAC_SAC_CODE_FK_PK FROM THERIAQUE.FRECSAC_FR"& _ 
                "EC_SUBACT WHERE (FRECSAC_FREC_CODE_FK_PK = @FRECSAC_FREC_CODE_FK_PK) AND (FRECSA"& _ 
                "C_SAC_CODE_FK_PK = @FRECSAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSAC_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECSAC_FREC_SUBACT] SET [FRECSAC_FREC_CODE_FK_PK] = @FRECSAC"& _ 
                "_FREC_CODE_FK_PK, [FRECSAC_SAC_CODE_FK_PK] = @FRECSAC_SAC_CODE_FK_PK WHERE (([FR"& _ 
                "ECSAC_FREC_CODE_FK_PK] = @Original_FRECSAC_FREC_CODE_FK_PK) AND ([FRECSAC_SAC_CO"& _ 
                "DE_FK_PK] = @Original_FRECSAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECSAC_FREC_CODE_FK_PK,"& _ 
                " FRECSAC_SAC_CODE_FK_PK FROM THERIAQUE.FRECSAC_FREC_SUBACT WHERE (FRECSAC_FREC_C"& _ 
                "ODE_FK_PK = @FRECSAC_FREC_CODE_FK_PK) AND (FRECSAC_SAC_CODE_FK_PK = @FRECSAC_SAC"& _ 
                "_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSAC_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSAC_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSAC_SAC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_SAC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECSAC_FREC_CODE_FK_PK, FRECSAC_SAC_CODE_FK_PK FROM THERIAQUE.FRECSAC_FRE" & _
                "C_SUBACT"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECSAC_FREC_CODE_FK_PK, FRECSAC_SAC_CODE_FK_PK FROM THERIAQUE.FRECSAC_FRE" & _
                "C_SUBACT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECSAC_FREC_CODE_FK_PK = @FRECSAC_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSAC_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECSAC_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable = New dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable, ByVal FRECSAC_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECSAC_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECSAC_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECSAC_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable = New dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECSAC_FREC_SUBACTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECSAC_FREC_SUBACT")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECSAC_FREC_CODE_FK_PK As Integer, ByVal Original_FRECSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECSAC_FREC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECSAC_FREC_CODE_FK_PK As Integer, ByVal FRECSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECSAC_FREC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECSAC_FREC_CODE_FK_PK As Integer, ByVal FRECSAC_SAC_CODE_FK_PK As Integer, ByVal Original_FRECSAC_FREC_CODE_FK_PK As Integer, ByVal Original_FRECSAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECSAC_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECSAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECSAC_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECSAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FRECPR_FREC_PRODTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECPR_FREC_PROD"
            tableMapping.ColumnMappings.Add("FRECPR_FREC_CODE_FK_PK", "FRECPR_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECPR_PR_CODE_FK_PK", "FRECPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECPR_FREC_PROD] WHERE (([FRECPR_FREC_CODE_FK_PK] = @Or" & _
                "iginal_FRECPR_FREC_CODE_FK_PK) AND ([FRECPR_PR_CODE_FK_PK] = @Original_FRECPR_PR" & _
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECPR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECPR_FREC_PROD] ([FRECPR_FREC_CODE_FK_PK], [FRECPR_PR_" & _
                "CODE_FK_PK]) VALUES (@FRECPR_FREC_CODE_FK_PK, @FRECPR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FR" & _
                "ECPR_FREC_CODE_FK_PK, FRECPR_PR_CODE_FK_PK FROM THERIAQUE.FRECPR_FREC_PROD WHERE" & _
                " (FRECPR_FREC_CODE_FK_PK = @FRECPR_FREC_CODE_FK_PK) AND (FRECPR_PR_CODE_FK_PK = " & _
                "@FRECPR_PR_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECPR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECPR_FREC_PROD] SET [FRECPR_FREC_CODE_FK_PK] = @FRECPR_FREC" & _
                "_CODE_FK_PK, [FRECPR_PR_CODE_FK_PK] = @FRECPR_PR_CODE_FK_PK WHERE (([FRECPR_FREC" & _
                "_CODE_FK_PK] = @Original_FRECPR_FREC_CODE_FK_PK) AND ([FRECPR_PR_CODE_FK_PK] = @" & _
                "Original_FRECPR_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECPR_FREC_CODE_FK_PK, FRECPR_PR_CODE_" & _
                "FK_PK FROM THERIAQUE.FRECPR_FREC_PROD WHERE (FRECPR_FREC_CODE_FK_PK = @FRECPR_FR" & _
                "EC_CODE_FK_PK) AND (FRECPR_PR_CODE_FK_PK = @FRECPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECPR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECPR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECPR_PR_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_PR_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECPR_FREC_CODE_FK_PK, FRECPR_PR_CODE_FK_PK FROM THERIAQUE.FRECPR_FREC_PR" & _
                "OD"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECPR_FREC_CODE_FK_PK, FRECPR_PR_CODE_FK_PK FROM THERIAQUE.FRECPR_FREC_PR" & _
                "OD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECPR_FREC_CODE_FK_PK = @FRECPR_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECPR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECPR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable = New dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable, ByVal FRECPR_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECPR_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECPR_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECPR_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable = New dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECPR_FREC_PRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECPR_FREC_PROD")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECPR_FREC_CODE_FK_PK As Integer, ByVal Original_FRECPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECPR_FREC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECPR_FREC_CODE_FK_PK As Integer, ByVal FRECPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECPR_FREC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECPR_FREC_CODE_FK_PK As Integer, ByVal FRECPR_PR_CODE_FK_PK As Integer, ByVal Original_FRECPR_FREC_CODE_FK_PK As Integer, ByVal Original_FRECPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECPR_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECPR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECPR_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FRECCH_RECONSTCHTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECCH_RECONSTCH"
            tableMapping.ColumnMappings.Add("FRECCH_FREC_CODE_FK_PK", "FRECCH_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCH_CH_CODE_FK_PK", "FRECCH_CH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCH_NUMORD", "FRECCH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECCH_RECONSTCH] WHERE (([FRECCH_FREC_CODE_FK_PK] = @Or"& _ 
                "iginal_FRECCH_FREC_CODE_FK_PK) AND ([FRECCH_CH_CODE_FK_PK] = @Original_FRECCH_CH"& _ 
                "_CODE_FK_PK) AND ((@IsNull_FRECCH_NUMORD = 1 AND [FRECCH_NUMORD] IS NULL) OR ([F"& _ 
                "RECCH_NUMORD] = @Original_FRECCH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FRECCH_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECCH_RECONSTCH] ([FRECCH_FREC_CODE_FK_PK], [FRECCH_CH_"& _ 
                "CODE_FK_PK], [FRECCH_NUMORD]) VALUES (@FRECCH_FREC_CODE_FK_PK, @FRECCH_CH_CODE_F"& _ 
                "K_PK, @FRECCH_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECCH_FREC_CODE_FK_PK, FRECCH_CH_CODE_FK_PK, FRE"& _ 
                "CCH_NUMORD FROM THERIAQUE.FRECCH_RECONSTCH WHERE (FRECCH_CH_CODE_FK_PK = @FRECCH"& _ 
                "_CH_CODE_FK_PK) AND (FRECCH_FREC_CODE_FK_PK = @FRECCH_FREC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECCH_RECONSTCH] SET [FRECCH_FREC_CODE_FK_PK] = @FRECCH_FREC"& _ 
                "_CODE_FK_PK, [FRECCH_CH_CODE_FK_PK] = @FRECCH_CH_CODE_FK_PK, [FRECCH_NUMORD] = @"& _ 
                "FRECCH_NUMORD WHERE (([FRECCH_FREC_CODE_FK_PK] = @Original_FRECCH_FREC_CODE_FK_P"& _ 
                "K) AND ([FRECCH_CH_CODE_FK_PK] = @Original_FRECCH_CH_CODE_FK_PK) AND ((@IsNull_F"& _ 
                "RECCH_NUMORD = 1 AND [FRECCH_NUMORD] IS NULL) OR ([FRECCH_NUMORD] = @Original_FR"& _ 
                "ECCH_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECCH_FREC_CODE_FK_PK, FRECCH_CH_CODE_FK_PK, FRECCH_NUM"& _ 
                "ORD FROM THERIAQUE.FRECCH_RECONSTCH WHERE (FRECCH_CH_CODE_FK_PK = @FRECCH_CH_COD"& _ 
                "E_FK_PK) AND (FRECCH_FREC_CODE_FK_PK = @FRECCH_FREC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCH_CH_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_CH_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FRECCH_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCH_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECCH_FREC_CODE_FK_PK, FRECCH_CH_CODE_FK_PK, FRECCH_NUMORD FROM THERIAQUE" & _
                ".FRECCH_RECONSTCH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECCH_FREC_CODE_FK_PK, FRECCH_CH_CODE_FK_PK, FRECCH_NUMORD FROM THERIAQUE" & _
                ".FRECCH_RECONSTCH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECCH_FREC_CODE_FK_PK = @FRECCH_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCH_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECCH_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable = New dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable, ByVal FRECCH_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCH_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECCH_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCH_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable = New dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCH_RECONSTCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECCH_RECONSTCH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECCH_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCH_CH_CODE_FK_PK As Integer, ByVal Original_FRECCH_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECCH_FREC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECCH_CH_CODE_FK_PK, Integer)
            If (Original_FRECCH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FRECCH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECCH_FREC_CODE_FK_PK As Integer, ByVal FRECCH_CH_CODE_FK_PK As Integer, ByVal FRECCH_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECCH_FREC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECCH_CH_CODE_FK_PK, Integer)
            If (FRECCH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FRECCH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECCH_FREC_CODE_FK_PK As Integer, ByVal FRECCH_CH_CODE_FK_PK As Integer, ByVal FRECCH_NUMORD As System.Nullable(Of Short), ByVal Original_FRECCH_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCH_CH_CODE_FK_PK As Integer, ByVal Original_FRECCH_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECCH_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECCH_CH_CODE_FK_PK, Integer)
            If (FRECCH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FRECCH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECCH_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FRECCH_CH_CODE_FK_PK, Integer)
            If (Original_FRECCH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FRECCH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FRECSP_RECONST_SPECTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECSP_RECONST_SPEC"
            tableMapping.ColumnMappings.Add("FRECSP_FREC_CODE_FK_PK", "FRECSP_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECSP_SP_CODE_FK_PK", "FRECSP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECSP_RECONST_SPEC] WHERE (([FRECSP_FREC_CODE_FK_PK] = " & _
                "@Original_FRECSP_FREC_CODE_FK_PK) AND ([FRECSP_SP_CODE_FK_PK] = @Original_FRECSP" & _
                "_SP_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSP_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECSP_RECONST_SPEC] ([FRECSP_FREC_CODE_FK_PK], [FRECSP_" & _
                "SP_CODE_FK_PK]) VALUES (@FRECSP_FREC_CODE_FK_PK, @FRECSP_SP_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " FRECSP_FREC_CODE_FK_PK, FRECSP_SP_CODE_FK_PK FROM THERIAQUE.FRECSP_RECONST_SPEC" & _
                " WHERE (FRECSP_FREC_CODE_FK_PK = @FRECSP_FREC_CODE_FK_PK) AND (FRECSP_SP_CODE_FK" & _
                "_PK = @FRECSP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSP_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECSP_RECONST_SPEC] SET [FRECSP_FREC_CODE_FK_PK] = @FRECSP_F" & _
                "REC_CODE_FK_PK, [FRECSP_SP_CODE_FK_PK] = @FRECSP_SP_CODE_FK_PK WHERE (([FRECSP_F" & _
                "REC_CODE_FK_PK] = @Original_FRECSP_FREC_CODE_FK_PK) AND ([FRECSP_SP_CODE_FK_PK] " & _
                "= @Original_FRECSP_SP_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECSP_FREC_CODE_FK_PK, FRECSP_SP_CO" & _
                "DE_FK_PK FROM THERIAQUE.FRECSP_RECONST_SPEC WHERE (FRECSP_FREC_CODE_FK_PK = @FRE" & _
                "CSP_FREC_CODE_FK_PK) AND (FRECSP_SP_CODE_FK_PK = @FRECSP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSP_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSP_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECSP_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECSP_FREC_CODE_FK_PK, FRECSP_SP_CODE_FK_PK FROM THERIAQUE.FRECSP_RECONST" & _
                "_SPEC"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECSP_FREC_CODE_FK_PK, FRECSP_SP_CODE_FK_PK FROM THERIAQUE.FRECSP_RECONST" & _
                "_SPEC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECSP_FREC_CODE_FK_PK = @FRECSP_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECSP_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECSP_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable = New dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable, ByVal FRECSP_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECSP_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECSP_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECSP_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable = New dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECSP_RECONST_SPECDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECSP_RECONST_SPEC")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECSP_FREC_CODE_FK_PK As Integer, ByVal Original_FRECSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECSP_FREC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECSP_FREC_CODE_FK_PK As Integer, ByVal FRECSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECSP_FREC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECSP_FREC_CODE_FK_PK As Integer, ByVal FRECSP_SP_CODE_FK_PK As Integer, ByVal Original_FRECSP_FREC_CODE_FK_PK As Integer, ByVal Original_FRECSP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECSP_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECSP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECSP_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECSP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FRECCOR_FREC_COMRECSTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECCOR_FREC_COMRECS"
            tableMapping.ColumnMappings.Add("FRECCOR_FREC_CODE_FK_PK", "FRECCOR_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCOR_CDF_COMRECS_FK_PK", "FRECCOR_CDF_COMRECS_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCOR_NUM_ORD_PK", "FRECCOR_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECCOR_FREC_COMRECS] WHERE (([FRECCOR_FREC_CODE_FK_PK] "& _ 
                "= @Original_FRECCOR_FREC_CODE_FK_PK) AND ([FRECCOR_CDF_COMRECS_FK_PK] = @Origina"& _ 
                "l_FRECCOR_CDF_COMRECS_FK_PK) AND ([FRECCOR_NUM_ORD_PK] = @Original_FRECCOR_NUM_O"& _ 
                "RD_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOR_CDF_COMRECS_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_CDF_COMRECS_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOR_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_NUM_ORD_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECCOR_FREC_COMRECS] ([FRECCOR_FREC_CODE_FK_PK], [FRECC"& _ 
                "OR_CDF_COMRECS_FK_PK], [FRECCOR_NUM_ORD_PK]) VALUES (@FRECCOR_FREC_CODE_FK_PK, @"& _ 
                "FRECCOR_CDF_COMRECS_FK_PK, @FRECCOR_NUM_ORD_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECCOR_FREC_CODE_FK_PK"& _ 
                ", FRECCOR_CDF_COMRECS_FK_PK, FRECCOR_NUM_ORD_PK FROM THERIAQUE.FRECCOR_FREC_COMR"& _ 
                "ECS WHERE (FRECCOR_CDF_COMRECS_FK_PK = @FRECCOR_CDF_COMRECS_FK_PK) AND (FRECCOR_"& _ 
                "FREC_CODE_FK_PK = @FRECCOR_FREC_CODE_FK_PK) AND (FRECCOR_NUM_ORD_PK = @FRECCOR_N"& _ 
                "UM_ORD_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_CDF_COMRECS_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_CDF_COMRECS_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_NUM_ORD_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECCOR_FREC_COMRECS] SET [FRECCOR_FREC_CODE_FK_PK] = @FRECCO"& _ 
                "R_FREC_CODE_FK_PK, [FRECCOR_CDF_COMRECS_FK_PK] = @FRECCOR_CDF_COMRECS_FK_PK, [FR"& _ 
                "ECCOR_NUM_ORD_PK] = @FRECCOR_NUM_ORD_PK WHERE (([FRECCOR_FREC_CODE_FK_PK] = @Ori"& _ 
                "ginal_FRECCOR_FREC_CODE_FK_PK) AND ([FRECCOR_CDF_COMRECS_FK_PK] = @Original_FREC"& _ 
                "COR_CDF_COMRECS_FK_PK) AND ([FRECCOR_NUM_ORD_PK] = @Original_FRECCOR_NUM_ORD_PK)"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECCOR_FREC_CODE_FK_PK, FRECCOR_CDF_COMRECS_FK_PK, FRECCOR_NUM_ORD_P"& _ 
                "K FROM THERIAQUE.FRECCOR_FREC_COMRECS WHERE (FRECCOR_CDF_COMRECS_FK_PK = @FRECCO"& _ 
                "R_CDF_COMRECS_FK_PK) AND (FRECCOR_FREC_CODE_FK_PK = @FRECCOR_FREC_CODE_FK_PK) AN"& _ 
                "D (FRECCOR_NUM_ORD_PK = @FRECCOR_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_CDF_COMRECS_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_CDF_COMRECS_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_NUM_ORD_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOR_CDF_COMRECS_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_CDF_COMRECS_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOR_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_NUM_ORD_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECCOR_FREC_CODE_FK_PK, FRECCOR_CDF_COMRECS_FK_PK, FRECCOR_NUM_ORD_PK FRO" & _
                "M THERIAQUE.FRECCOR_FREC_COMRECS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECCOR_FREC_CODE_FK_PK, FRECCOR_CDF_COMRECS_FK_PK, FRECCOR_NUM_ORD_PK FRO" & _
                "M THERIAQUE.FRECCOR_FREC_COMRECS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECCOR_FREC_CODE_FK_PK = @FRECCOR_FREC_" & _
                "CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECCOR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable = New dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable, ByVal FRECCOR_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCOR_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECCOR_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCOR_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable = New dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCOR_FREC_COMRECSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECCOR_FREC_COMRECS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECCOR_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCOR_CDF_COMRECS_FK_PK As String, ByVal Original_FRECCOR_NUM_ORD_PK As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECCOR_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCOR_CDF_COMRECS_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCOR_CDF_COMRECS_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECCOR_CDF_COMRECS_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FRECCOR_NUM_ORD_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECCOR_FREC_CODE_FK_PK As Integer, ByVal FRECCOR_CDF_COMRECS_FK_PK As String, ByVal FRECCOR_NUM_ORD_PK As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECCOR_FREC_CODE_FK_PK, Integer)
            If (FRECCOR_CDF_COMRECS_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCOR_CDF_COMRECS_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECCOR_CDF_COMRECS_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FRECCOR_NUM_ORD_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECCOR_FREC_CODE_FK_PK As Integer, ByVal FRECCOR_CDF_COMRECS_FK_PK As String, ByVal FRECCOR_NUM_ORD_PK As Byte, ByVal Original_FRECCOR_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCOR_CDF_COMRECS_FK_PK As String, ByVal Original_FRECCOR_NUM_ORD_PK As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECCOR_FREC_CODE_FK_PK, Integer)
            If (FRECCOR_CDF_COMRECS_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCOR_CDF_COMRECS_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECCOR_CDF_COMRECS_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FRECCOR_NUM_ORD_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECCOR_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCOR_CDF_COMRECS_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCOR_CDF_COMRECS_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FRECCOR_CDF_COMRECS_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FRECCOR_NUM_ORD_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FRECVO_RECONSADM_VOIETableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECVO_RECONSADM_VOIE"
            tableMapping.ColumnMappings.Add("FRECVO_FREC_CODE_FK_PK", "FRECVO_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECVO_CDF_VO_CODE_FK_PK", "FRECVO_CDF_VO_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECVO_NUMORD", "FRECVO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECVO_RECONSADM_VOIE] WHERE (([FRECVO_FREC_CODE_FK_PK] " & _
                "= @Original_FRECVO_FREC_CODE_FK_PK) AND ([FRECVO_CDF_VO_CODE_FK_PK] = @Original_" & _
                "FRECVO_CDF_VO_CODE_FK_PK) AND ((@IsNull_FRECVO_NUMORD = 1 AND [FRECVO_NUMORD] IS" & _
                " NULL) OR ([FRECVO_NUMORD] = @Original_FRECVO_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECVO_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FRECVO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECVO_RECONSADM_VOIE] ([FRECVO_FREC_CODE_FK_PK], [FRECV" & _
                "O_CDF_VO_CODE_FK_PK], [FRECVO_NUMORD]) VALUES (@FRECVO_FREC_CODE_FK_PK, @FRECVO_" & _
                "CDF_VO_CODE_FK_PK, @FRECVO_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECVO_FREC_CODE_FK_PK, FRECVO_CDF_V" & _
                "O_CODE_FK_PK, FRECVO_NUMORD FROM THERIAQUE.FRECVO_RECONSADM_VOIE WHERE (FRECVO_C" & _
                "DF_VO_CODE_FK_PK = @FRECVO_CDF_VO_CODE_FK_PK) AND (FRECVO_FREC_CODE_FK_PK = @FRE" & _
                "CVO_FREC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECVO_RECONSADM_VOIE] SET [FRECVO_FREC_CODE_FK_PK] = @FRECVO" & _
                "_FREC_CODE_FK_PK, [FRECVO_CDF_VO_CODE_FK_PK] = @FRECVO_CDF_VO_CODE_FK_PK, [FRECV" & _
                "O_NUMORD] = @FRECVO_NUMORD WHERE (([FRECVO_FREC_CODE_FK_PK] = @Original_FRECVO_F" & _
                "REC_CODE_FK_PK) AND ([FRECVO_CDF_VO_CODE_FK_PK] = @Original_FRECVO_CDF_VO_CODE_F" & _
                "K_PK) AND ((@IsNull_FRECVO_NUMORD = 1 AND [FRECVO_NUMORD] IS NULL) OR ([FRECVO_N" & _
                "UMORD] = @Original_FRECVO_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECVO_FREC_CODE_FK_PK, FRECVO_CDF_" & _
                "VO_CODE_FK_PK, FRECVO_NUMORD FROM THERIAQUE.FRECVO_RECONSADM_VOIE WHERE (FRECVO_" & _
                "CDF_VO_CODE_FK_PK = @FRECVO_CDF_VO_CODE_FK_PK) AND (FRECVO_FREC_CODE_FK_PK = @FR" & _
                "ECVO_FREC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECVO_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECVO_CDF_VO_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_CDF_VO_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FRECVO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECVO_FREC_CODE_FK_PK, FRECVO_CDF_VO_CODE_FK_PK, FRECVO_NUMORD FROM THERI" & _
                "AQUE.FRECVO_RECONSADM_VOIE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECVO_FREC_CODE_FK_PK, FRECVO_CDF_VO_CODE_FK_PK, FRECVO_NUMORD FROM THERI" & _
                "AQUE.FRECVO_RECONSADM_VOIE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECVO_FREC_CODE_FK_PK = @FRECVO_FREC_CODE_FK_" & _
                "PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECVO_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECVO_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable = New dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable, ByVal FRECVO_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECVO_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECVO_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECVO_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable = New dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECVO_RECONSADM_VOIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECVO_RECONSADM_VOIE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECVO_FREC_CODE_FK_PK As Integer, ByVal Original_FRECVO_CDF_VO_CODE_FK_PK As String, ByVal Original_FRECVO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECVO_FREC_CODE_FK_PK, Integer)
            If (Original_FRECVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_FRECVO_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FRECVO_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECVO_FREC_CODE_FK_PK As Integer, ByVal FRECVO_CDF_VO_CODE_FK_PK As String, ByVal FRECVO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECVO_FREC_CODE_FK_PK, Integer)
            If (FRECVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (FRECVO_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FRECVO_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECVO_FREC_CODE_FK_PK As Integer, ByVal FRECVO_CDF_VO_CODE_FK_PK As String, ByVal FRECVO_NUMORD As System.Nullable(Of Short), ByVal Original_FRECVO_FREC_CODE_FK_PK As Integer, ByVal Original_FRECVO_CDF_VO_CODE_FK_PK As String, ByVal Original_FRECVO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECVO_FREC_CODE_FK_PK, Integer)
            If (FRECVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (FRECVO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FRECVO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECVO_FREC_CODE_FK_PK, Integer)
            If (Original_FRECVO_CDF_VO_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECVO_CDF_VO_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FRECVO_CDF_VO_CODE_FK_PK, String)
            End If
            If (Original_FRECVO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FRECVO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FRECTXR_FREC_TXTRECSTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECTXR_FREC_TXTRECS"
            tableMapping.ColumnMappings.Add("FRECTXR_FREC_CODE_FK_PK", "FRECTXR_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECTXR_TXTRECS", "FRECTXR_TXTRECS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECTXR_FREC_TXTRECS] WHERE (([FRECTXR_FREC_CODE_FK_PK] "& _ 
                "= @Original_FRECTXR_FREC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECTXR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECTXR_FREC_TXTRECS] ([FRECTXR_FREC_CODE_FK_PK], [FRECT"& _ 
                "XR_TXTRECS]) VALUES (@FRECTXR_FREC_CODE_FK_PK, @FRECTXR_TXTRECS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECTX"& _ 
                "R_FREC_CODE_FK_PK, FRECTXR_TXTRECS FROM THERIAQUE.FRECTXR_FREC_TXTRECS WHERE (FR"& _ 
                "ECTXR_FREC_CODE_FK_PK = @FRECTXR_FREC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXR_TXTRECS", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_TXTRECS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECTXR_FREC_TXTRECS] SET [FRECTXR_FREC_CODE_FK_PK] = @FRECTX"& _ 
                "R_FREC_CODE_FK_PK, [FRECTXR_TXTRECS] = @FRECTXR_TXTRECS WHERE (([FRECTXR_FREC_CO"& _ 
                "DE_FK_PK] = @Original_FRECTXR_FREC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECTXR_FREC_CODE_FK_PK"& _ 
                ", FRECTXR_TXTRECS FROM THERIAQUE.FRECTXR_FREC_TXTRECS WHERE (FRECTXR_FREC_CODE_F"& _ 
                "K_PK = @FRECTXR_FREC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXR_TXTRECS", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_TXTRECS", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECTXR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECTXR_FREC_CODE_FK_PK, FRECTXR_TXTRECS FROM THERIAQUE.FRECTXR_FREC_TXTRE" & _
                "CS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECTXR_FREC_CODE_FK_PK, FRECTXR_TXTRECS FROM THERIAQUE.FRECTXR_FREC_TXTRE" & _
                "CS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECTXR_FREC_CODE_FK_PK = @FRECTXR_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXR_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECTXR_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable = New dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable, ByVal FRECTXR_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECTXR_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECTXR_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECTXR_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable = New dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECTXR_FREC_TXTRECSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECTXR_FREC_TXTRECS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECTXR_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECTXR_FREC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECTXR_FREC_CODE_FK_PK As Integer, ByVal FRECTXR_TXTRECS As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECTXR_FREC_CODE_FK_PK, Integer)
            If (FRECTXR_TXTRECS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECTXR_TXTRECS, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECTXR_FREC_CODE_FK_PK As Integer, ByVal FRECTXR_TXTRECS As String, ByVal Original_FRECTXR_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECTXR_FREC_CODE_FK_PK, Integer)
            If (FRECTXR_TXTRECS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECTXR_TXTRECS, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECTXR_FREC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FRECCOA_FREC_COMADMTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECCOA_FREC_COMADM"
            tableMapping.ColumnMappings.Add("FRECCOA_FREC_CODE_FK_PK", "FRECCOA_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCOA_CDF_COMADM_FK_PK", "FRECCOA_CDF_COMADM_FK_PK")
            tableMapping.ColumnMappings.Add("FRECCOA_NUM_ORD_PK", "FRECCOA_NUM_ORD_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECCOA_FREC_COMADM] WHERE (([FRECCOA_FREC_CODE_FK_PK] =" & _
                " @Original_FRECCOA_FREC_CODE_FK_PK) AND ([FRECCOA_CDF_COMADM_FK_PK] = @Original_" & _
                "FRECCOA_CDF_COMADM_FK_PK) AND ([FRECCOA_NUM_ORD_PK] = @Original_FRECCOA_NUM_ORD_" & _
                "PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOA_CDF_COMADM_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_CDF_COMADM_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOA_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_NUM_ORD_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECCOA_FREC_COMADM] ([FRECCOA_FREC_CODE_FK_PK], [FRECCO" & _
                "A_CDF_COMADM_FK_PK], [FRECCOA_NUM_ORD_PK]) VALUES (@FRECCOA_FREC_CODE_FK_PK, @FR" & _
                "ECCOA_CDF_COMADM_FK_PK, @FRECCOA_NUM_ORD_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECCOA_FREC_CODE_FK_PK, F" & _
                "RECCOA_CDF_COMADM_FK_PK, FRECCOA_NUM_ORD_PK FROM THERIAQUE.FRECCOA_FREC_COMADM W" & _
                "HERE (FRECCOA_CDF_COMADM_FK_PK = @FRECCOA_CDF_COMADM_FK_PK) AND (FRECCOA_FREC_CO" & _
                "DE_FK_PK = @FRECCOA_FREC_CODE_FK_PK) AND (FRECCOA_NUM_ORD_PK = @FRECCOA_NUM_ORD_" & _
                "PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_CDF_COMADM_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_CDF_COMADM_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_NUM_ORD_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECCOA_FREC_COMADM] SET [FRECCOA_FREC_CODE_FK_PK] = @FRECCOA" & _
                "_FREC_CODE_FK_PK, [FRECCOA_CDF_COMADM_FK_PK] = @FRECCOA_CDF_COMADM_FK_PK, [FRECC" & _
                "OA_NUM_ORD_PK] = @FRECCOA_NUM_ORD_PK WHERE (([FRECCOA_FREC_CODE_FK_PK] = @Origin" & _
                "al_FRECCOA_FREC_CODE_FK_PK) AND ([FRECCOA_CDF_COMADM_FK_PK] = @Original_FRECCOA_" & _
                "CDF_COMADM_FK_PK) AND ([FRECCOA_NUM_ORD_PK] = @Original_FRECCOA_NUM_ORD_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S" & _
                "ELECT FRECCOA_FREC_CODE_FK_PK, FRECCOA_CDF_COMADM_FK_PK, FRECCOA_NUM_ORD_PK FROM" & _
                " THERIAQUE.FRECCOA_FREC_COMADM WHERE (FRECCOA_CDF_COMADM_FK_PK = @FRECCOA_CDF_CO" & _
                "MADM_FK_PK) AND (FRECCOA_FREC_CODE_FK_PK = @FRECCOA_FREC_CODE_FK_PK) AND (FRECCO" & _
                "A_NUM_ORD_PK = @FRECCOA_NUM_ORD_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_CDF_COMADM_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_CDF_COMADM_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_NUM_ORD_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOA_CDF_COMADM_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_CDF_COMADM_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECCOA_NUM_ORD_PK", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_NUM_ORD_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECCOA_FREC_CODE_FK_PK, FRECCOA_CDF_COMADM_FK_PK, FRECCOA_NUM_ORD_PK FROM" & _
                " THERIAQUE.FRECCOA_FREC_COMADM"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECCOA_FREC_CODE_FK_PK, FRECCOA_CDF_COMADM_FK_PK, FRECCOA_NUM_ORD_PK FROM" & _
                " THERIAQUE.FRECCOA_FREC_COMADM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECCOA_FREC_CODE_FK_PK = @FRECCOA_FREC_CO" & _
                "DE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECCOA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECCOA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable = New dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable, ByVal FRECCOA_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCOA_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECCOA_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECCOA_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable = New dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECCOA_FREC_COMADMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECCOA_FREC_COMADM")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECCOA_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCOA_CDF_COMADM_FK_PK As String, ByVal Original_FRECCOA_NUM_ORD_PK As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECCOA_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCOA_CDF_COMADM_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCOA_CDF_COMADM_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECCOA_CDF_COMADM_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FRECCOA_NUM_ORD_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECCOA_FREC_CODE_FK_PK As Integer, ByVal FRECCOA_CDF_COMADM_FK_PK As String, ByVal FRECCOA_NUM_ORD_PK As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECCOA_FREC_CODE_FK_PK, Integer)
            If (FRECCOA_CDF_COMADM_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCOA_CDF_COMADM_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECCOA_CDF_COMADM_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FRECCOA_NUM_ORD_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECCOA_FREC_CODE_FK_PK As Integer, ByVal FRECCOA_CDF_COMADM_FK_PK As String, ByVal FRECCOA_NUM_ORD_PK As Byte, ByVal Original_FRECCOA_FREC_CODE_FK_PK As Integer, ByVal Original_FRECCOA_CDF_COMADM_FK_PK As String, ByVal Original_FRECCOA_NUM_ORD_PK As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECCOA_FREC_CODE_FK_PK, Integer)
            If (FRECCOA_CDF_COMADM_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECCOA_CDF_COMADM_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECCOA_CDF_COMADM_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FRECCOA_NUM_ORD_PK, Byte)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FRECCOA_FREC_CODE_FK_PK, Integer)
            If (Original_FRECCOA_CDF_COMADM_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECCOA_CDF_COMADM_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FRECCOA_CDF_COMADM_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FRECCOA_NUM_ORD_PK, Byte)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FRECAFS_FREC_AFSSAPSTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECAFS_FREC_AFSSAPS"
            tableMapping.ColumnMappings.Add("FRECAFS_FREC_CODE_FK_PK", "FRECAFS_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECAFS_SP_CODE_FK_PK", "FRECAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECAFS_DATE_PK", "FRECAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FRECAFS_CDF_DOCUMENT_FK_PK", "FRECAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECAFS_FREC_AFSSAPS] WHERE (([FRECAFS_FREC_CODE_FK_PK] "& _ 
                "= @Original_FRECAFS_FREC_CODE_FK_PK) AND ([FRECAFS_SP_CODE_FK_PK] = @Original_FR"& _ 
                "ECAFS_SP_CODE_FK_PK) AND ([FRECAFS_DATE_PK] = @Original_FRECAFS_DATE_PK) AND ([F"& _ 
                "RECAFS_CDF_DOCUMENT_FK_PK] = @Original_FRECAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_DATE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECAFS_FREC_AFSSAPS] ([FRECAFS_FREC_CODE_FK_PK], [FRECA"& _ 
                "FS_SP_CODE_FK_PK], [FRECAFS_DATE_PK], [FRECAFS_CDF_DOCUMENT_FK_PK]) VALUES (@FRE"& _ 
                "CAFS_FREC_CODE_FK_PK, @FRECAFS_SP_CODE_FK_PK, @FRECAFS_DATE_PK, @FRECAFS_CDF_DOC"& _ 
                "UMENT_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECAFS_FREC_CODE_FK_PK, FRECAFS_SP_CODE_FK_PK, FRECAFS_DA"& _ 
                "TE_PK, FRECAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FRECAFS_FREC_AFSSAPS WHERE (FRE"& _ 
                "CAFS_CDF_DOCUMENT_FK_PK = @FRECAFS_CDF_DOCUMENT_FK_PK) AND (FRECAFS_DATE_PK = @F"& _ 
                "RECAFS_DATE_PK) AND (FRECAFS_FREC_CODE_FK_PK = @FRECAFS_FREC_CODE_FK_PK) AND (FR"& _ 
                "ECAFS_SP_CODE_FK_PK = @FRECAFS_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_DATE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECAFS_FREC_AFSSAPS] SET [FRECAFS_FREC_CODE_FK_PK] = @FRECAF"& _ 
                "S_FREC_CODE_FK_PK, [FRECAFS_SP_CODE_FK_PK] = @FRECAFS_SP_CODE_FK_PK, [FRECAFS_DA"& _ 
                "TE_PK] = @FRECAFS_DATE_PK, [FRECAFS_CDF_DOCUMENT_FK_PK] = @FRECAFS_CDF_DOCUMENT_"& _ 
                "FK_PK WHERE (([FRECAFS_FREC_CODE_FK_PK] = @Original_FRECAFS_FREC_CODE_FK_PK) AND"& _ 
                " ([FRECAFS_SP_CODE_FK_PK] = @Original_FRECAFS_SP_CODE_FK_PK) AND ([FRECAFS_DATE_"& _ 
                "PK] = @Original_FRECAFS_DATE_PK) AND ([FRECAFS_CDF_DOCUMENT_FK_PK] = @Original_F"& _ 
                "RECAFS_CDF_DOCUMENT_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FRECAFS_FREC_CODE_FK_PK, FRECAFS_SP_CODE_FK"& _ 
                "_PK, FRECAFS_DATE_PK, FRECAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FRECAFS_FREC_AFS"& _ 
                "SAPS WHERE (FRECAFS_CDF_DOCUMENT_FK_PK = @FRECAFS_CDF_DOCUMENT_FK_PK) AND (FRECA"& _ 
                "FS_DATE_PK = @FRECAFS_DATE_PK) AND (FRECAFS_FREC_CODE_FK_PK = @FRECAFS_FREC_CODE"& _ 
                "_FK_PK) AND (FRECAFS_SP_CODE_FK_PK = @FRECAFS_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_DATE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_SP_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_SP_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_DATE_PK", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_DATE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECAFS_FREC_CODE_FK_PK, FRECAFS_SP_CODE_FK_PK, FRECAFS_DATE_PK, FRECAFS_C" & _
                "DF_DOCUMENT_FK_PK FROM THERIAQUE.FRECAFS_FREC_AFSSAPS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECAFS_FREC_CODE_FK_PK, FRECAFS_SP_CODE_FK_PK, FRECAFS_DATE_PK, FRECAFS_C" & _
                "DF_DOCUMENT_FK_PK FROM THERIAQUE.FRECAFS_FREC_AFSSAPS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECAFS_FREC_CODE_F" & _
                "K_PK = @FRECAFS_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECAFS_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECAFS_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable = New dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable, ByVal FRECAFS_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECAFS_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECAFS_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECAFS_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable = New dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECAFS_FREC_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECAFS_FREC_AFSSAPS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECAFS_FREC_CODE_FK_PK As Integer, ByVal Original_FRECAFS_SP_CODE_FK_PK As Integer, ByVal Original_FRECAFS_DATE_PK As Date, ByVal Original_FRECAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECAFS_FREC_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FRECAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FRECAFS_DATE_PK, Date)
            If (Original_FRECAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FRECAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECAFS_FREC_CODE_FK_PK As Integer, ByVal FRECAFS_SP_CODE_FK_PK As Integer, ByVal FRECAFS_DATE_PK As Date, ByVal FRECAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECAFS_FREC_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FRECAFS_DATE_PK, Date)
            If (FRECAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FRECAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECAFS_FREC_CODE_FK_PK As Integer, ByVal FRECAFS_SP_CODE_FK_PK As Integer, ByVal FRECAFS_DATE_PK As Date, ByVal FRECAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FRECAFS_FREC_CODE_FK_PK As Integer, ByVal Original_FRECAFS_SP_CODE_FK_PK As Integer, ByVal Original_FRECAFS_DATE_PK As Date, ByVal Original_FRECAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECAFS_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FRECAFS_DATE_PK, Date)
            If (FRECAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("FRECAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FRECAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FRECAFS_FREC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FRECAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FRECAFS_DATE_PK, Date)
            If (Original_FRECAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_FRECAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FRECAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FRECTXA_FREC_TXTADMTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FRECTXA_FREC_TXTADM"
            tableMapping.ColumnMappings.Add("FRECTXA_FREC_CODE_FK_PK", "FRECTXA_FREC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FRECTXA_TXTADM", "FRECTXA_TXTADM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FRECTXA_FREC_TXTADM] WHERE (([FRECTXA_FREC_CODE_FK_PK] =" & _
                " @Original_FRECTXA_FREC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECTXA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FRECTXA_FREC_TXTADM] ([FRECTXA_FREC_CODE_FK_PK], [FRECTX" & _
                "A_TXTADM]) VALUES (@FRECTXA_FREC_CODE_FK_PK, @FRECTXA_TXTADM);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECTXA_F" & _
                "REC_CODE_FK_PK, FRECTXA_TXTADM FROM THERIAQUE.FRECTXA_FREC_TXTADM WHERE (FRECTXA" & _
                "_FREC_CODE_FK_PK = @FRECTXA_FREC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXA_TXTADM", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_TXTADM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FRECTXA_FREC_TXTADM] SET [FRECTXA_FREC_CODE_FK_PK] = @FRECTXA" & _
                "_FREC_CODE_FK_PK, [FRECTXA_TXTADM] = @FRECTXA_TXTADM WHERE (([FRECTXA_FREC_CODE_" & _
                "FK_PK] = @Original_FRECTXA_FREC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FRECTXA_FREC_CODE_FK_PK, F" & _
                "RECTXA_TXTADM FROM THERIAQUE.FRECTXA_FREC_TXTADM WHERE (FRECTXA_FREC_CODE_FK_PK " & _
                "= @FRECTXA_FREC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXA_TXTADM", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_TXTADM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FRECTXA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FRECTXA_FREC_CODE_FK_PK, FRECTXA_TXTADM FROM THERIAQUE.FRECTXA_FREC_TXTADM" & _
                ""
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FRECTXA_FREC_CODE_FK_PK, FRECTXA_TXTADM FROM THERIAQUE.FRECTXA_FREC_TXTADM" & _
                "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FRECTXA_FREC_CODE_FK_PK = @FRECTXA_FREC_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@FRECTXA_FREC_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FRECTXA_FREC_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable = New dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable, ByVal FRECTXA_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECTXA_FREC_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FRECTXA_FREC_CODE_FK_PK As Integer) As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FRECTXA_FREC_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable = New dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Reconst_Administ.FRECTXA_FREC_TXTADMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Reconst_Administ) As Integer
            Return Me.Adapter.Update(dataSet, "FRECTXA_FREC_TXTADM")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FRECTXA_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FRECTXA_FREC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FRECTXA_FREC_CODE_FK_PK As Integer, ByVal FRECTXA_TXTADM As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FRECTXA_FREC_CODE_FK_PK, Integer)
            If (FRECTXA_TXTADM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FRECTXA_TXTADM, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FRECTXA_FREC_CODE_FK_PK As Integer, ByVal FRECTXA_TXTADM As String, ByVal Original_FRECTXA_FREC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FRECTXA_FREC_CODE_FK_PK, Integer)
            If (FRECTXA_TXTADM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FRECTXA_TXTADM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FRECTXA_FREC_CODE_FK_PK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
