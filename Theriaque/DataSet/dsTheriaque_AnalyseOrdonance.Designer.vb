'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_AnalyseOrdonance"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_AnalyseOrdonance
    Inherits Global.System.Data.DataSet
    
    Private tableFIT_FICHEINTERAC As FIT_FICHEINTERACDataTable
    
    Private tableIT1CC_TERM1COMCLASSE As IT1CC_TERM1COMCLASSEDataTable
    
    Private tableIT1CCH_TERME1CLCHIM As IT1CCH_TERME1CLCHIMDataTable
    
    Private tableIT1CPH_TERME1CLPHARMTHER As IT1CPH_TERME1CLPHARMTHERDataTable
    
    Private tableIT1SAC_TERME1SUBACTIVE As IT1SAC_TERME1SUBACTIVEDataTable
    
    Private tableIT1SAU_TERME1SUBAUX As IT1SAU_TERME1SUBAUXDataTable
    
    Private tableIT1PR_TERME1PRODUIT As IT1PR_TERME1PRODUITDataTable
    
    Private tableIT1SP_TERME1SPECIALITE As IT1SP_TERME1SPECIALITEDataTable
    
    Private tableIT2CPH_TERME2CLPHARMTHER As IT2CPH_TERME2CLPHARMTHERDataTable
    
    Private tableIT2CCH_TERME2CLCHIM As IT2CCH_TERME2CLCHIMDataTable
    
    Private tableIT2CC_TERM2COMCLASSE As IT2CC_TERM2COMCLASSEDataTable
    
    Private tableIT2SAC_TERME2SUBACTIVE As IT2SAC_TERME2SUBACTIVEDataTable
    
    Private tableIT2SAU_TERME2SUBAUX As IT2SAU_TERME2SUBAUXDataTable
    
    Private tableIT2PR_TERME2PRODUIT As IT2PR_TERME2PRODUITDataTable
    
    Private tableIT2SP_TERME2SPECIALITE As IT2SP_TERME2SPECIALITEDataTable
    
    Private tableFITNA_INTERACTION_NATURE As FITNA_INTERACTION_NATUREDataTable
    
    Private tableFITROF_REF_OFFICIELLE As FITROF_REF_OFFICIELLEDataTable
    
    Private tableFITSE_INTERACTION_SENS As FITSE_INTERACTION_SENSDataTable
    
    Private tableFITTY_TYPEINTERACTION As FITTY_TYPEINTERACTIONDataTable
    
    Private tableFITVA_NIVEAU_VALIDATION As FITVA_NIVEAU_VALIDATIONDataTable
    
    Private tableFITVD1_INTERACTION_VOIE_DOSE As FITVD1_INTERACTION_VOIE_DOSEDataTable
    
    Private tableFITVD2_INTERACTION_VOIE_DOSE As FITVD2_INTERACTION_VOIE_DOSEDataTable
    
    Private tableFITTER_TERRAINFAVORISANT As FITTER_TERRAINFAVORISANTDataTable
    
    Private tableFITCH_CRITERECHOIX As FITCH_CRITERECHOIXDataTable
    
    Private tableFITCT_COMMENTAIRE_TERRAIN As FITCT_COMMENTAIRE_TERRAINDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FIT_FICHEINTERAC")) Is Nothing) Then
                MyBase.Tables.Add(New FIT_FICHEINTERACDataTable(ds.Tables("FIT_FICHEINTERAC")))
            End If
            If (Not (ds.Tables("IT1CC_TERM1COMCLASSE")) Is Nothing) Then
                MyBase.Tables.Add(New IT1CC_TERM1COMCLASSEDataTable(ds.Tables("IT1CC_TERM1COMCLASSE")))
            End If
            If (Not (ds.Tables("IT1CCH_TERME1CLCHIM")) Is Nothing) Then
                MyBase.Tables.Add(New IT1CCH_TERME1CLCHIMDataTable(ds.Tables("IT1CCH_TERME1CLCHIM")))
            End If
            If (Not (ds.Tables("IT1CPH_TERME1CLPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New IT1CPH_TERME1CLPHARMTHERDataTable(ds.Tables("IT1CPH_TERME1CLPHARMTHER")))
            End If
            If (Not (ds.Tables("IT1SAC_TERME1SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New IT1SAC_TERME1SUBACTIVEDataTable(ds.Tables("IT1SAC_TERME1SUBACTIVE")))
            End If
            If (Not (ds.Tables("IT1SAU_TERME1SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IT1SAU_TERME1SUBAUXDataTable(ds.Tables("IT1SAU_TERME1SUBAUX")))
            End If
            If (Not (ds.Tables("IT1PR_TERME1PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IT1PR_TERME1PRODUITDataTable(ds.Tables("IT1PR_TERME1PRODUIT")))
            End If
            If (Not (ds.Tables("IT1SP_TERME1SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IT1SP_TERME1SPECIALITEDataTable(ds.Tables("IT1SP_TERME1SPECIALITE")))
            End If
            If (Not (ds.Tables("IT2CPH_TERME2CLPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New IT2CPH_TERME2CLPHARMTHERDataTable(ds.Tables("IT2CPH_TERME2CLPHARMTHER")))
            End If
            If (Not (ds.Tables("IT2CCH_TERME2CLCHIM")) Is Nothing) Then
                MyBase.Tables.Add(New IT2CCH_TERME2CLCHIMDataTable(ds.Tables("IT2CCH_TERME2CLCHIM")))
            End If
            If (Not (ds.Tables("IT2CC_TERM2COMCLASSE")) Is Nothing) Then
                MyBase.Tables.Add(New IT2CC_TERM2COMCLASSEDataTable(ds.Tables("IT2CC_TERM2COMCLASSE")))
            End If
            If (Not (ds.Tables("IT2SAC_TERME2SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New IT2SAC_TERME2SUBACTIVEDataTable(ds.Tables("IT2SAC_TERME2SUBACTIVE")))
            End If
            If (Not (ds.Tables("IT2SAU_TERME2SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IT2SAU_TERME2SUBAUXDataTable(ds.Tables("IT2SAU_TERME2SUBAUX")))
            End If
            If (Not (ds.Tables("IT2PR_TERME2PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IT2PR_TERME2PRODUITDataTable(ds.Tables("IT2PR_TERME2PRODUIT")))
            End If
            If (Not (ds.Tables("IT2SP_TERME2SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IT2SP_TERME2SPECIALITEDataTable(ds.Tables("IT2SP_TERME2SPECIALITE")))
            End If
            If (Not (ds.Tables("FITNA_INTERACTION_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New FITNA_INTERACTION_NATUREDataTable(ds.Tables("FITNA_INTERACTION_NATURE")))
            End If
            If (Not (ds.Tables("FITROF_REF_OFFICIELLE")) Is Nothing) Then
                MyBase.Tables.Add(New FITROF_REF_OFFICIELLEDataTable(ds.Tables("FITROF_REF_OFFICIELLE")))
            End If
            If (Not (ds.Tables("FITSE_INTERACTION_SENS")) Is Nothing) Then
                MyBase.Tables.Add(New FITSE_INTERACTION_SENSDataTable(ds.Tables("FITSE_INTERACTION_SENS")))
            End If
            If (Not (ds.Tables("FITTY_TYPEINTERACTION")) Is Nothing) Then
                MyBase.Tables.Add(New FITTY_TYPEINTERACTIONDataTable(ds.Tables("FITTY_TYPEINTERACTION")))
            End If
            If (Not (ds.Tables("FITVA_NIVEAU_VALIDATION")) Is Nothing) Then
                MyBase.Tables.Add(New FITVA_NIVEAU_VALIDATIONDataTable(ds.Tables("FITVA_NIVEAU_VALIDATION")))
            End If
            If (Not (ds.Tables("FITVD1_INTERACTION_VOIE_DOSE")) Is Nothing) Then
                MyBase.Tables.Add(New FITVD1_INTERACTION_VOIE_DOSEDataTable(ds.Tables("FITVD1_INTERACTION_VOIE_DOSE")))
            End If
            If (Not (ds.Tables("FITVD2_INTERACTION_VOIE_DOSE")) Is Nothing) Then
                MyBase.Tables.Add(New FITVD2_INTERACTION_VOIE_DOSEDataTable(ds.Tables("FITVD2_INTERACTION_VOIE_DOSE")))
            End If
            If (Not (ds.Tables("FITTER_TERRAINFAVORISANT")) Is Nothing) Then
                MyBase.Tables.Add(New FITTER_TERRAINFAVORISANTDataTable(ds.Tables("FITTER_TERRAINFAVORISANT")))
            End If
            If (Not (ds.Tables("FITCH_CRITERECHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New FITCH_CRITERECHOIXDataTable(ds.Tables("FITCH_CRITERECHOIX")))
            End If
            If (Not (ds.Tables("FITCT_COMMENTAIRE_TERRAIN")) Is Nothing) Then
                MyBase.Tables.Add(New FITCT_COMMENTAIRE_TERRAINDataTable(ds.Tables("FITCT_COMMENTAIRE_TERRAIN")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FIT_FICHEINTERAC() As FIT_FICHEINTERACDataTable
        Get
            Return Me.tableFIT_FICHEINTERAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1CC_TERM1COMCLASSE() As IT1CC_TERM1COMCLASSEDataTable
        Get
            Return Me.tableIT1CC_TERM1COMCLASSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1CCH_TERME1CLCHIM() As IT1CCH_TERME1CLCHIMDataTable
        Get
            Return Me.tableIT1CCH_TERME1CLCHIM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1CPH_TERME1CLPHARMTHER() As IT1CPH_TERME1CLPHARMTHERDataTable
        Get
            Return Me.tableIT1CPH_TERME1CLPHARMTHER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1SAC_TERME1SUBACTIVE() As IT1SAC_TERME1SUBACTIVEDataTable
        Get
            Return Me.tableIT1SAC_TERME1SUBACTIVE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1SAU_TERME1SUBAUX() As IT1SAU_TERME1SUBAUXDataTable
        Get
            Return Me.tableIT1SAU_TERME1SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1PR_TERME1PRODUIT() As IT1PR_TERME1PRODUITDataTable
        Get
            Return Me.tableIT1PR_TERME1PRODUIT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT1SP_TERME1SPECIALITE() As IT1SP_TERME1SPECIALITEDataTable
        Get
            Return Me.tableIT1SP_TERME1SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2CPH_TERME2CLPHARMTHER() As IT2CPH_TERME2CLPHARMTHERDataTable
        Get
            Return Me.tableIT2CPH_TERME2CLPHARMTHER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2CCH_TERME2CLCHIM() As IT2CCH_TERME2CLCHIMDataTable
        Get
            Return Me.tableIT2CCH_TERME2CLCHIM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2CC_TERM2COMCLASSE() As IT2CC_TERM2COMCLASSEDataTable
        Get
            Return Me.tableIT2CC_TERM2COMCLASSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2SAC_TERME2SUBACTIVE() As IT2SAC_TERME2SUBACTIVEDataTable
        Get
            Return Me.tableIT2SAC_TERME2SUBACTIVE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2SAU_TERME2SUBAUX() As IT2SAU_TERME2SUBAUXDataTable
        Get
            Return Me.tableIT2SAU_TERME2SUBAUX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2PR_TERME2PRODUIT() As IT2PR_TERME2PRODUITDataTable
        Get
            Return Me.tableIT2PR_TERME2PRODUIT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IT2SP_TERME2SPECIALITE() As IT2SP_TERME2SPECIALITEDataTable
        Get
            Return Me.tableIT2SP_TERME2SPECIALITE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITNA_INTERACTION_NATURE() As FITNA_INTERACTION_NATUREDataTable
        Get
            Return Me.tableFITNA_INTERACTION_NATURE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITROF_REF_OFFICIELLE() As FITROF_REF_OFFICIELLEDataTable
        Get
            Return Me.tableFITROF_REF_OFFICIELLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITSE_INTERACTION_SENS() As FITSE_INTERACTION_SENSDataTable
        Get
            Return Me.tableFITSE_INTERACTION_SENS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITTY_TYPEINTERACTION() As FITTY_TYPEINTERACTIONDataTable
        Get
            Return Me.tableFITTY_TYPEINTERACTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITVA_NIVEAU_VALIDATION() As FITVA_NIVEAU_VALIDATIONDataTable
        Get
            Return Me.tableFITVA_NIVEAU_VALIDATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITVD1_INTERACTION_VOIE_DOSE() As FITVD1_INTERACTION_VOIE_DOSEDataTable
        Get
            Return Me.tableFITVD1_INTERACTION_VOIE_DOSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITVD2_INTERACTION_VOIE_DOSE() As FITVD2_INTERACTION_VOIE_DOSEDataTable
        Get
            Return Me.tableFITVD2_INTERACTION_VOIE_DOSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITTER_TERRAINFAVORISANT() As FITTER_TERRAINFAVORISANTDataTable
        Get
            Return Me.tableFITTER_TERRAINFAVORISANT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITCH_CRITERECHOIX() As FITCH_CRITERECHOIXDataTable
        Get
            Return Me.tableFITCH_CRITERECHOIX
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FITCT_COMMENTAIRE_TERRAIN() As FITCT_COMMENTAIRE_TERRAINDataTable
        Get
            Return Me.tableFITCT_COMMENTAIRE_TERRAIN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_AnalyseOrdonance = CType(MyBase.Clone,dsTheriaque_AnalyseOrdonance)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FIT_FICHEINTERAC")) Is Nothing) Then
                MyBase.Tables.Add(New FIT_FICHEINTERACDataTable(ds.Tables("FIT_FICHEINTERAC")))
            End If
            If (Not (ds.Tables("IT1CC_TERM1COMCLASSE")) Is Nothing) Then
                MyBase.Tables.Add(New IT1CC_TERM1COMCLASSEDataTable(ds.Tables("IT1CC_TERM1COMCLASSE")))
            End If
            If (Not (ds.Tables("IT1CCH_TERME1CLCHIM")) Is Nothing) Then
                MyBase.Tables.Add(New IT1CCH_TERME1CLCHIMDataTable(ds.Tables("IT1CCH_TERME1CLCHIM")))
            End If
            If (Not (ds.Tables("IT1CPH_TERME1CLPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New IT1CPH_TERME1CLPHARMTHERDataTable(ds.Tables("IT1CPH_TERME1CLPHARMTHER")))
            End If
            If (Not (ds.Tables("IT1SAC_TERME1SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New IT1SAC_TERME1SUBACTIVEDataTable(ds.Tables("IT1SAC_TERME1SUBACTIVE")))
            End If
            If (Not (ds.Tables("IT1SAU_TERME1SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IT1SAU_TERME1SUBAUXDataTable(ds.Tables("IT1SAU_TERME1SUBAUX")))
            End If
            If (Not (ds.Tables("IT1PR_TERME1PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IT1PR_TERME1PRODUITDataTable(ds.Tables("IT1PR_TERME1PRODUIT")))
            End If
            If (Not (ds.Tables("IT1SP_TERME1SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IT1SP_TERME1SPECIALITEDataTable(ds.Tables("IT1SP_TERME1SPECIALITE")))
            End If
            If (Not (ds.Tables("IT2CPH_TERME2CLPHARMTHER")) Is Nothing) Then
                MyBase.Tables.Add(New IT2CPH_TERME2CLPHARMTHERDataTable(ds.Tables("IT2CPH_TERME2CLPHARMTHER")))
            End If
            If (Not (ds.Tables("IT2CCH_TERME2CLCHIM")) Is Nothing) Then
                MyBase.Tables.Add(New IT2CCH_TERME2CLCHIMDataTable(ds.Tables("IT2CCH_TERME2CLCHIM")))
            End If
            If (Not (ds.Tables("IT2CC_TERM2COMCLASSE")) Is Nothing) Then
                MyBase.Tables.Add(New IT2CC_TERM2COMCLASSEDataTable(ds.Tables("IT2CC_TERM2COMCLASSE")))
            End If
            If (Not (ds.Tables("IT2SAC_TERME2SUBACTIVE")) Is Nothing) Then
                MyBase.Tables.Add(New IT2SAC_TERME2SUBACTIVEDataTable(ds.Tables("IT2SAC_TERME2SUBACTIVE")))
            End If
            If (Not (ds.Tables("IT2SAU_TERME2SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New IT2SAU_TERME2SUBAUXDataTable(ds.Tables("IT2SAU_TERME2SUBAUX")))
            End If
            If (Not (ds.Tables("IT2PR_TERME2PRODUIT")) Is Nothing) Then
                MyBase.Tables.Add(New IT2PR_TERME2PRODUITDataTable(ds.Tables("IT2PR_TERME2PRODUIT")))
            End If
            If (Not (ds.Tables("IT2SP_TERME2SPECIALITE")) Is Nothing) Then
                MyBase.Tables.Add(New IT2SP_TERME2SPECIALITEDataTable(ds.Tables("IT2SP_TERME2SPECIALITE")))
            End If
            If (Not (ds.Tables("FITNA_INTERACTION_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New FITNA_INTERACTION_NATUREDataTable(ds.Tables("FITNA_INTERACTION_NATURE")))
            End If
            If (Not (ds.Tables("FITROF_REF_OFFICIELLE")) Is Nothing) Then
                MyBase.Tables.Add(New FITROF_REF_OFFICIELLEDataTable(ds.Tables("FITROF_REF_OFFICIELLE")))
            End If
            If (Not (ds.Tables("FITSE_INTERACTION_SENS")) Is Nothing) Then
                MyBase.Tables.Add(New FITSE_INTERACTION_SENSDataTable(ds.Tables("FITSE_INTERACTION_SENS")))
            End If
            If (Not (ds.Tables("FITTY_TYPEINTERACTION")) Is Nothing) Then
                MyBase.Tables.Add(New FITTY_TYPEINTERACTIONDataTable(ds.Tables("FITTY_TYPEINTERACTION")))
            End If
            If (Not (ds.Tables("FITVA_NIVEAU_VALIDATION")) Is Nothing) Then
                MyBase.Tables.Add(New FITVA_NIVEAU_VALIDATIONDataTable(ds.Tables("FITVA_NIVEAU_VALIDATION")))
            End If
            If (Not (ds.Tables("FITVD1_INTERACTION_VOIE_DOSE")) Is Nothing) Then
                MyBase.Tables.Add(New FITVD1_INTERACTION_VOIE_DOSEDataTable(ds.Tables("FITVD1_INTERACTION_VOIE_DOSE")))
            End If
            If (Not (ds.Tables("FITVD2_INTERACTION_VOIE_DOSE")) Is Nothing) Then
                MyBase.Tables.Add(New FITVD2_INTERACTION_VOIE_DOSEDataTable(ds.Tables("FITVD2_INTERACTION_VOIE_DOSE")))
            End If
            If (Not (ds.Tables("FITTER_TERRAINFAVORISANT")) Is Nothing) Then
                MyBase.Tables.Add(New FITTER_TERRAINFAVORISANTDataTable(ds.Tables("FITTER_TERRAINFAVORISANT")))
            End If
            If (Not (ds.Tables("FITCH_CRITERECHOIX")) Is Nothing) Then
                MyBase.Tables.Add(New FITCH_CRITERECHOIXDataTable(ds.Tables("FITCH_CRITERECHOIX")))
            End If
            If (Not (ds.Tables("FITCT_COMMENTAIRE_TERRAIN")) Is Nothing) Then
                MyBase.Tables.Add(New FITCT_COMMENTAIRE_TERRAINDataTable(ds.Tables("FITCT_COMMENTAIRE_TERRAIN")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFIT_FICHEINTERAC = CType(MyBase.Tables("FIT_FICHEINTERAC"),FIT_FICHEINTERACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFIT_FICHEINTERAC) Is Nothing) Then
                Me.tableFIT_FICHEINTERAC.InitVars
            End If
        End If
        Me.tableIT1CC_TERM1COMCLASSE = CType(MyBase.Tables("IT1CC_TERM1COMCLASSE"),IT1CC_TERM1COMCLASSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1CC_TERM1COMCLASSE) Is Nothing) Then
                Me.tableIT1CC_TERM1COMCLASSE.InitVars
            End If
        End If
        Me.tableIT1CCH_TERME1CLCHIM = CType(MyBase.Tables("IT1CCH_TERME1CLCHIM"),IT1CCH_TERME1CLCHIMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1CCH_TERME1CLCHIM) Is Nothing) Then
                Me.tableIT1CCH_TERME1CLCHIM.InitVars
            End If
        End If
        Me.tableIT1CPH_TERME1CLPHARMTHER = CType(MyBase.Tables("IT1CPH_TERME1CLPHARMTHER"),IT1CPH_TERME1CLPHARMTHERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1CPH_TERME1CLPHARMTHER) Is Nothing) Then
                Me.tableIT1CPH_TERME1CLPHARMTHER.InitVars
            End If
        End If
        Me.tableIT1SAC_TERME1SUBACTIVE = CType(MyBase.Tables("IT1SAC_TERME1SUBACTIVE"),IT1SAC_TERME1SUBACTIVEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1SAC_TERME1SUBACTIVE) Is Nothing) Then
                Me.tableIT1SAC_TERME1SUBACTIVE.InitVars
            End If
        End If
        Me.tableIT1SAU_TERME1SUBAUX = CType(MyBase.Tables("IT1SAU_TERME1SUBAUX"),IT1SAU_TERME1SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1SAU_TERME1SUBAUX) Is Nothing) Then
                Me.tableIT1SAU_TERME1SUBAUX.InitVars
            End If
        End If
        Me.tableIT1PR_TERME1PRODUIT = CType(MyBase.Tables("IT1PR_TERME1PRODUIT"),IT1PR_TERME1PRODUITDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1PR_TERME1PRODUIT) Is Nothing) Then
                Me.tableIT1PR_TERME1PRODUIT.InitVars
            End If
        End If
        Me.tableIT1SP_TERME1SPECIALITE = CType(MyBase.Tables("IT1SP_TERME1SPECIALITE"),IT1SP_TERME1SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT1SP_TERME1SPECIALITE) Is Nothing) Then
                Me.tableIT1SP_TERME1SPECIALITE.InitVars
            End If
        End If
        Me.tableIT2CPH_TERME2CLPHARMTHER = CType(MyBase.Tables("IT2CPH_TERME2CLPHARMTHER"),IT2CPH_TERME2CLPHARMTHERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2CPH_TERME2CLPHARMTHER) Is Nothing) Then
                Me.tableIT2CPH_TERME2CLPHARMTHER.InitVars
            End If
        End If
        Me.tableIT2CCH_TERME2CLCHIM = CType(MyBase.Tables("IT2CCH_TERME2CLCHIM"),IT2CCH_TERME2CLCHIMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2CCH_TERME2CLCHIM) Is Nothing) Then
                Me.tableIT2CCH_TERME2CLCHIM.InitVars
            End If
        End If
        Me.tableIT2CC_TERM2COMCLASSE = CType(MyBase.Tables("IT2CC_TERM2COMCLASSE"),IT2CC_TERM2COMCLASSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2CC_TERM2COMCLASSE) Is Nothing) Then
                Me.tableIT2CC_TERM2COMCLASSE.InitVars
            End If
        End If
        Me.tableIT2SAC_TERME2SUBACTIVE = CType(MyBase.Tables("IT2SAC_TERME2SUBACTIVE"),IT2SAC_TERME2SUBACTIVEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2SAC_TERME2SUBACTIVE) Is Nothing) Then
                Me.tableIT2SAC_TERME2SUBACTIVE.InitVars
            End If
        End If
        Me.tableIT2SAU_TERME2SUBAUX = CType(MyBase.Tables("IT2SAU_TERME2SUBAUX"),IT2SAU_TERME2SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2SAU_TERME2SUBAUX) Is Nothing) Then
                Me.tableIT2SAU_TERME2SUBAUX.InitVars
            End If
        End If
        Me.tableIT2PR_TERME2PRODUIT = CType(MyBase.Tables("IT2PR_TERME2PRODUIT"),IT2PR_TERME2PRODUITDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2PR_TERME2PRODUIT) Is Nothing) Then
                Me.tableIT2PR_TERME2PRODUIT.InitVars
            End If
        End If
        Me.tableIT2SP_TERME2SPECIALITE = CType(MyBase.Tables("IT2SP_TERME2SPECIALITE"),IT2SP_TERME2SPECIALITEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIT2SP_TERME2SPECIALITE) Is Nothing) Then
                Me.tableIT2SP_TERME2SPECIALITE.InitVars
            End If
        End If
        Me.tableFITNA_INTERACTION_NATURE = CType(MyBase.Tables("FITNA_INTERACTION_NATURE"),FITNA_INTERACTION_NATUREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITNA_INTERACTION_NATURE) Is Nothing) Then
                Me.tableFITNA_INTERACTION_NATURE.InitVars
            End If
        End If
        Me.tableFITROF_REF_OFFICIELLE = CType(MyBase.Tables("FITROF_REF_OFFICIELLE"),FITROF_REF_OFFICIELLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITROF_REF_OFFICIELLE) Is Nothing) Then
                Me.tableFITROF_REF_OFFICIELLE.InitVars
            End If
        End If
        Me.tableFITSE_INTERACTION_SENS = CType(MyBase.Tables("FITSE_INTERACTION_SENS"),FITSE_INTERACTION_SENSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITSE_INTERACTION_SENS) Is Nothing) Then
                Me.tableFITSE_INTERACTION_SENS.InitVars
            End If
        End If
        Me.tableFITTY_TYPEINTERACTION = CType(MyBase.Tables("FITTY_TYPEINTERACTION"),FITTY_TYPEINTERACTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITTY_TYPEINTERACTION) Is Nothing) Then
                Me.tableFITTY_TYPEINTERACTION.InitVars
            End If
        End If
        Me.tableFITVA_NIVEAU_VALIDATION = CType(MyBase.Tables("FITVA_NIVEAU_VALIDATION"),FITVA_NIVEAU_VALIDATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITVA_NIVEAU_VALIDATION) Is Nothing) Then
                Me.tableFITVA_NIVEAU_VALIDATION.InitVars
            End If
        End If
        Me.tableFITVD1_INTERACTION_VOIE_DOSE = CType(MyBase.Tables("FITVD1_INTERACTION_VOIE_DOSE"),FITVD1_INTERACTION_VOIE_DOSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITVD1_INTERACTION_VOIE_DOSE) Is Nothing) Then
                Me.tableFITVD1_INTERACTION_VOIE_DOSE.InitVars
            End If
        End If
        Me.tableFITVD2_INTERACTION_VOIE_DOSE = CType(MyBase.Tables("FITVD2_INTERACTION_VOIE_DOSE"),FITVD2_INTERACTION_VOIE_DOSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITVD2_INTERACTION_VOIE_DOSE) Is Nothing) Then
                Me.tableFITVD2_INTERACTION_VOIE_DOSE.InitVars
            End If
        End If
        Me.tableFITTER_TERRAINFAVORISANT = CType(MyBase.Tables("FITTER_TERRAINFAVORISANT"),FITTER_TERRAINFAVORISANTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITTER_TERRAINFAVORISANT) Is Nothing) Then
                Me.tableFITTER_TERRAINFAVORISANT.InitVars
            End If
        End If
        Me.tableFITCH_CRITERECHOIX = CType(MyBase.Tables("FITCH_CRITERECHOIX"),FITCH_CRITERECHOIXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITCH_CRITERECHOIX) Is Nothing) Then
                Me.tableFITCH_CRITERECHOIX.InitVars
            End If
        End If
        Me.tableFITCT_COMMENTAIRE_TERRAIN = CType(MyBase.Tables("FITCT_COMMENTAIRE_TERRAIN"),FITCT_COMMENTAIRE_TERRAINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFITCT_COMMENTAIRE_TERRAIN) Is Nothing) Then
                Me.tableFITCT_COMMENTAIRE_TERRAIN.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_AnalyseOrdonance"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_AnalyseOrdonance.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFIT_FICHEINTERAC = New FIT_FICHEINTERACDataTable
        MyBase.Tables.Add(Me.tableFIT_FICHEINTERAC)
        Me.tableIT1CC_TERM1COMCLASSE = New IT1CC_TERM1COMCLASSEDataTable
        MyBase.Tables.Add(Me.tableIT1CC_TERM1COMCLASSE)
        Me.tableIT1CCH_TERME1CLCHIM = New IT1CCH_TERME1CLCHIMDataTable
        MyBase.Tables.Add(Me.tableIT1CCH_TERME1CLCHIM)
        Me.tableIT1CPH_TERME1CLPHARMTHER = New IT1CPH_TERME1CLPHARMTHERDataTable
        MyBase.Tables.Add(Me.tableIT1CPH_TERME1CLPHARMTHER)
        Me.tableIT1SAC_TERME1SUBACTIVE = New IT1SAC_TERME1SUBACTIVEDataTable
        MyBase.Tables.Add(Me.tableIT1SAC_TERME1SUBACTIVE)
        Me.tableIT1SAU_TERME1SUBAUX = New IT1SAU_TERME1SUBAUXDataTable
        MyBase.Tables.Add(Me.tableIT1SAU_TERME1SUBAUX)
        Me.tableIT1PR_TERME1PRODUIT = New IT1PR_TERME1PRODUITDataTable
        MyBase.Tables.Add(Me.tableIT1PR_TERME1PRODUIT)
        Me.tableIT1SP_TERME1SPECIALITE = New IT1SP_TERME1SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableIT1SP_TERME1SPECIALITE)
        Me.tableIT2CPH_TERME2CLPHARMTHER = New IT2CPH_TERME2CLPHARMTHERDataTable
        MyBase.Tables.Add(Me.tableIT2CPH_TERME2CLPHARMTHER)
        Me.tableIT2CCH_TERME2CLCHIM = New IT2CCH_TERME2CLCHIMDataTable
        MyBase.Tables.Add(Me.tableIT2CCH_TERME2CLCHIM)
        Me.tableIT2CC_TERM2COMCLASSE = New IT2CC_TERM2COMCLASSEDataTable
        MyBase.Tables.Add(Me.tableIT2CC_TERM2COMCLASSE)
        Me.tableIT2SAC_TERME2SUBACTIVE = New IT2SAC_TERME2SUBACTIVEDataTable
        MyBase.Tables.Add(Me.tableIT2SAC_TERME2SUBACTIVE)
        Me.tableIT2SAU_TERME2SUBAUX = New IT2SAU_TERME2SUBAUXDataTable
        MyBase.Tables.Add(Me.tableIT2SAU_TERME2SUBAUX)
        Me.tableIT2PR_TERME2PRODUIT = New IT2PR_TERME2PRODUITDataTable
        MyBase.Tables.Add(Me.tableIT2PR_TERME2PRODUIT)
        Me.tableIT2SP_TERME2SPECIALITE = New IT2SP_TERME2SPECIALITEDataTable
        MyBase.Tables.Add(Me.tableIT2SP_TERME2SPECIALITE)
        Me.tableFITNA_INTERACTION_NATURE = New FITNA_INTERACTION_NATUREDataTable
        MyBase.Tables.Add(Me.tableFITNA_INTERACTION_NATURE)
        Me.tableFITROF_REF_OFFICIELLE = New FITROF_REF_OFFICIELLEDataTable
        MyBase.Tables.Add(Me.tableFITROF_REF_OFFICIELLE)
        Me.tableFITSE_INTERACTION_SENS = New FITSE_INTERACTION_SENSDataTable
        MyBase.Tables.Add(Me.tableFITSE_INTERACTION_SENS)
        Me.tableFITTY_TYPEINTERACTION = New FITTY_TYPEINTERACTIONDataTable
        MyBase.Tables.Add(Me.tableFITTY_TYPEINTERACTION)
        Me.tableFITVA_NIVEAU_VALIDATION = New FITVA_NIVEAU_VALIDATIONDataTable
        MyBase.Tables.Add(Me.tableFITVA_NIVEAU_VALIDATION)
        Me.tableFITVD1_INTERACTION_VOIE_DOSE = New FITVD1_INTERACTION_VOIE_DOSEDataTable
        MyBase.Tables.Add(Me.tableFITVD1_INTERACTION_VOIE_DOSE)
        Me.tableFITVD2_INTERACTION_VOIE_DOSE = New FITVD2_INTERACTION_VOIE_DOSEDataTable
        MyBase.Tables.Add(Me.tableFITVD2_INTERACTION_VOIE_DOSE)
        Me.tableFITTER_TERRAINFAVORISANT = New FITTER_TERRAINFAVORISANTDataTable
        MyBase.Tables.Add(Me.tableFITTER_TERRAINFAVORISANT)
        Me.tableFITCH_CRITERECHOIX = New FITCH_CRITERECHOIXDataTable
        MyBase.Tables.Add(Me.tableFITCH_CRITERECHOIX)
        Me.tableFITCT_COMMENTAIRE_TERRAIN = New FITCT_COMMENTAIRE_TERRAINDataTable
        MyBase.Tables.Add(Me.tableFITCT_COMMENTAIRE_TERRAIN)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFIT_FICHEINTERAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1CC_TERM1COMCLASSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1CCH_TERME1CLCHIM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1CPH_TERME1CLPHARMTHER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1SAC_TERME1SUBACTIVE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1SAU_TERME1SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1PR_TERME1PRODUIT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT1SP_TERME1SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2CPH_TERME2CLPHARMTHER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2CCH_TERME2CLCHIM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2CC_TERM2COMCLASSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2SAC_TERME2SUBACTIVE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2SAU_TERME2SUBAUX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2PR_TERME2PRODUIT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIT2SP_TERME2SPECIALITE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITNA_INTERACTION_NATURE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITROF_REF_OFFICIELLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITSE_INTERACTION_SENS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITTY_TYPEINTERACTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITVA_NIVEAU_VALIDATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITVD1_INTERACTION_VOIE_DOSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITVD2_INTERACTION_VOIE_DOSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITTER_TERRAINFAVORISANT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITCH_CRITERECHOIX() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFITCT_COMMENTAIRE_TERRAIN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FIT_FICHEINTERACRowChangeEventHandler(ByVal sender As Object, ByVal e As FIT_FICHEINTERACRowChangeEvent)
    
    Public Delegate Sub IT1CC_TERM1COMCLASSERowChangeEventHandler(ByVal sender As Object, ByVal e As IT1CC_TERM1COMCLASSERowChangeEvent)
    
    Public Delegate Sub IT1CCH_TERME1CLCHIMRowChangeEventHandler(ByVal sender As Object, ByVal e As IT1CCH_TERME1CLCHIMRowChangeEvent)
    
    Public Delegate Sub IT1CPH_TERME1CLPHARMTHERRowChangeEventHandler(ByVal sender As Object, ByVal e As IT1CPH_TERME1CLPHARMTHERRowChangeEvent)
    
    Public Delegate Sub IT1SAC_TERME1SUBACTIVERowChangeEventHandler(ByVal sender As Object, ByVal e As IT1SAC_TERME1SUBACTIVERowChangeEvent)
    
    Public Delegate Sub IT1SAU_TERME1SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As IT1SAU_TERME1SUBAUXRowChangeEvent)
    
    Public Delegate Sub IT1PR_TERME1PRODUITRowChangeEventHandler(ByVal sender As Object, ByVal e As IT1PR_TERME1PRODUITRowChangeEvent)
    
    Public Delegate Sub IT1SP_TERME1SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As IT1SP_TERME1SPECIALITERowChangeEvent)
    
    Public Delegate Sub IT2CPH_TERME2CLPHARMTHERRowChangeEventHandler(ByVal sender As Object, ByVal e As IT2CPH_TERME2CLPHARMTHERRowChangeEvent)
    
    Public Delegate Sub IT2CCH_TERME2CLCHIMRowChangeEventHandler(ByVal sender As Object, ByVal e As IT2CCH_TERME2CLCHIMRowChangeEvent)
    
    Public Delegate Sub IT2CC_TERM2COMCLASSERowChangeEventHandler(ByVal sender As Object, ByVal e As IT2CC_TERM2COMCLASSERowChangeEvent)
    
    Public Delegate Sub IT2SAC_TERME2SUBACTIVERowChangeEventHandler(ByVal sender As Object, ByVal e As IT2SAC_TERME2SUBACTIVERowChangeEvent)
    
    Public Delegate Sub IT2SAU_TERME2SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As IT2SAU_TERME2SUBAUXRowChangeEvent)
    
    Public Delegate Sub IT2PR_TERME2PRODUITRowChangeEventHandler(ByVal sender As Object, ByVal e As IT2PR_TERME2PRODUITRowChangeEvent)
    
    Public Delegate Sub IT2SP_TERME2SPECIALITERowChangeEventHandler(ByVal sender As Object, ByVal e As IT2SP_TERME2SPECIALITERowChangeEvent)
    
    Public Delegate Sub FITNA_INTERACTION_NATURERowChangeEventHandler(ByVal sender As Object, ByVal e As FITNA_INTERACTION_NATURERowChangeEvent)
    
    Public Delegate Sub FITROF_REF_OFFICIELLERowChangeEventHandler(ByVal sender As Object, ByVal e As FITROF_REF_OFFICIELLERowChangeEvent)
    
    Public Delegate Sub FITSE_INTERACTION_SENSRowChangeEventHandler(ByVal sender As Object, ByVal e As FITSE_INTERACTION_SENSRowChangeEvent)
    
    Public Delegate Sub FITTY_TYPEINTERACTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As FITTY_TYPEINTERACTIONRowChangeEvent)
    
    Public Delegate Sub FITVA_NIVEAU_VALIDATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As FITVA_NIVEAU_VALIDATIONRowChangeEvent)
    
    Public Delegate Sub FITVD1_INTERACTION_VOIE_DOSERowChangeEventHandler(ByVal sender As Object, ByVal e As FITVD1_INTERACTION_VOIE_DOSERowChangeEvent)
    
    Public Delegate Sub FITVD2_INTERACTION_VOIE_DOSERowChangeEventHandler(ByVal sender As Object, ByVal e As FITVD2_INTERACTION_VOIE_DOSERowChangeEvent)
    
    Public Delegate Sub FITTER_TERRAINFAVORISANTRowChangeEventHandler(ByVal sender As Object, ByVal e As FITTER_TERRAINFAVORISANTRowChangeEvent)
    
    Public Delegate Sub FITCH_CRITERECHOIXRowChangeEventHandler(ByVal sender As Object, ByVal e As FITCH_CRITERECHOIXRowChangeEvent)
    
    Public Delegate Sub FITCT_COMMENTAIRE_TERRAINRowChangeEventHandler(ByVal sender As Object, ByVal e As FITCT_COMMENTAIRE_TERRAINRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FIT_FICHEINTERACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFIT_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFIT_ORIGINE As Global.System.Data.DataColumn
        
        Private columnFIT_DATECR As Global.System.Data.DataColumn
        
        Private columnFIT_DATEMJ As Global.System.Data.DataColumn
        
        Private columnFIT_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FIT_FICHEINTERAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIT_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIT_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIT_ORIGINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIT_ORIGINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIT_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIT_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIT_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIT_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FIT_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIT_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FIT_FICHEINTERACRow
            Get
                Return CType(Me.Rows(index),FIT_FICHEINTERACRow)
            End Get
        End Property
        
        Public Event FIT_FICHEINTERACRowChanging As FIT_FICHEINTERACRowChangeEventHandler
        
        Public Event FIT_FICHEINTERACRowChanged As FIT_FICHEINTERACRowChangeEventHandler
        
        Public Event FIT_FICHEINTERACRowDeleting As FIT_FICHEINTERACRowChangeEventHandler
        
        Public Event FIT_FICHEINTERACRowDeleted As FIT_FICHEINTERACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFIT_FICHEINTERACRow(ByVal row As FIT_FICHEINTERACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFIT_FICHEINTERACRow(ByVal FIT_CODE_SQ_PK As Integer, ByVal FIT_ORIGINE As String, ByVal FIT_DATECR As Date, ByVal FIT_DATEMJ As Date, ByVal FIT_TEXTE As String) As FIT_FICHEINTERACRow
            Dim rowFIT_FICHEINTERACRow As FIT_FICHEINTERACRow = CType(Me.NewRow,FIT_FICHEINTERACRow)
            Dim columnValuesArray() As Object = New Object() {FIT_CODE_SQ_PK, FIT_ORIGINE, FIT_DATECR, FIT_DATEMJ, FIT_TEXTE}
            rowFIT_FICHEINTERACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFIT_FICHEINTERACRow)
            Return rowFIT_FICHEINTERACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFIT_CODE_SQ_PK(ByVal FIT_CODE_SQ_PK As Integer) As FIT_FICHEINTERACRow
            Return CType(Me.Rows.Find(New Object() {FIT_CODE_SQ_PK}),FIT_FICHEINTERACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FIT_FICHEINTERACDataTable = CType(MyBase.Clone,FIT_FICHEINTERACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FIT_FICHEINTERACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFIT_CODE_SQ_PK = MyBase.Columns("FIT_CODE_SQ_PK")
            Me.columnFIT_ORIGINE = MyBase.Columns("FIT_ORIGINE")
            Me.columnFIT_DATECR = MyBase.Columns("FIT_DATECR")
            Me.columnFIT_DATEMJ = MyBase.Columns("FIT_DATEMJ")
            Me.columnFIT_TEXTE = MyBase.Columns("FIT_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFIT_CODE_SQ_PK = New Global.System.Data.DataColumn("FIT_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIT_CODE_SQ_PK)
            Me.columnFIT_ORIGINE = New Global.System.Data.DataColumn("FIT_ORIGINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIT_ORIGINE)
            Me.columnFIT_DATECR = New Global.System.Data.DataColumn("FIT_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIT_DATECR)
            Me.columnFIT_DATEMJ = New Global.System.Data.DataColumn("FIT_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIT_DATEMJ)
            Me.columnFIT_TEXTE = New Global.System.Data.DataColumn("FIT_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIT_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFIT_CODE_SQ_PK}, true))
            Me.columnFIT_CODE_SQ_PK.AllowDBNull = false
            Me.columnFIT_CODE_SQ_PK.Unique = true
            Me.columnFIT_ORIGINE.AllowDBNull = false
            Me.columnFIT_ORIGINE.MaxLength = 1
            Me.columnFIT_DATECR.AllowDBNull = false
            Me.columnFIT_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFIT_FICHEINTERACRow() As FIT_FICHEINTERACRow
            Return CType(Me.NewRow,FIT_FICHEINTERACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FIT_FICHEINTERACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FIT_FICHEINTERACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FIT_FICHEINTERACRowChangedEvent) Is Nothing) Then
                RaiseEvent FIT_FICHEINTERACRowChanged(Me, New FIT_FICHEINTERACRowChangeEvent(CType(e.Row,FIT_FICHEINTERACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FIT_FICHEINTERACRowChangingEvent) Is Nothing) Then
                RaiseEvent FIT_FICHEINTERACRowChanging(Me, New FIT_FICHEINTERACRowChangeEvent(CType(e.Row,FIT_FICHEINTERACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FIT_FICHEINTERACRowDeletedEvent) Is Nothing) Then
                RaiseEvent FIT_FICHEINTERACRowDeleted(Me, New FIT_FICHEINTERACRowChangeEvent(CType(e.Row,FIT_FICHEINTERACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FIT_FICHEINTERACRowDeletingEvent) Is Nothing) Then
                RaiseEvent FIT_FICHEINTERACRowDeleting(Me, New FIT_FICHEINTERACRowChangeEvent(CType(e.Row,FIT_FICHEINTERACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFIT_FICHEINTERACRow(ByVal row As FIT_FICHEINTERACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FIT_FICHEINTERACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1CC_TERM1COMCLASSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1CC_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1CC_CDF_CC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1CC_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1CC_TERM1COMCLASSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CC_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CC_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CC_CDF_CC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CC_CDF_CC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CC_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CC_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1CC_TERM1COMCLASSERow
            Get
                Return CType(Me.Rows(index),IT1CC_TERM1COMCLASSERow)
            End Get
        End Property
        
        Public Event IT1CC_TERM1COMCLASSERowChanging As IT1CC_TERM1COMCLASSERowChangeEventHandler
        
        Public Event IT1CC_TERM1COMCLASSERowChanged As IT1CC_TERM1COMCLASSERowChangeEventHandler
        
        Public Event IT1CC_TERM1COMCLASSERowDeleting As IT1CC_TERM1COMCLASSERowChangeEventHandler
        
        Public Event IT1CC_TERM1COMCLASSERowDeleted As IT1CC_TERM1COMCLASSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1CC_TERM1COMCLASSERow(ByVal row As IT1CC_TERM1COMCLASSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1CC_TERM1COMCLASSERow(ByVal IT1CC_FIT_CODE_FK_PK As Integer, ByVal IT1CC_CDF_CC_CODE_FK_PK As String, ByVal IT1CC_NUMORD As Short) As IT1CC_TERM1COMCLASSERow
            Dim rowIT1CC_TERM1COMCLASSERow As IT1CC_TERM1COMCLASSERow = CType(Me.NewRow,IT1CC_TERM1COMCLASSERow)
            Dim columnValuesArray() As Object = New Object() {IT1CC_FIT_CODE_FK_PK, IT1CC_CDF_CC_CODE_FK_PK, IT1CC_NUMORD}
            rowIT1CC_TERM1COMCLASSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1CC_TERM1COMCLASSERow)
            Return rowIT1CC_TERM1COMCLASSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1CC_FIT_CODE_FK_PKIT1CC_CDF_CC_CODE_FK_PK(ByVal IT1CC_FIT_CODE_FK_PK As Integer, ByVal IT1CC_CDF_CC_CODE_FK_PK As String) As IT1CC_TERM1COMCLASSERow
            Return CType(Me.Rows.Find(New Object() {IT1CC_FIT_CODE_FK_PK, IT1CC_CDF_CC_CODE_FK_PK}),IT1CC_TERM1COMCLASSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1CC_TERM1COMCLASSEDataTable = CType(MyBase.Clone,IT1CC_TERM1COMCLASSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1CC_TERM1COMCLASSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1CC_FIT_CODE_FK_PK = MyBase.Columns("IT1CC_FIT_CODE_FK_PK")
            Me.columnIT1CC_CDF_CC_CODE_FK_PK = MyBase.Columns("IT1CC_CDF_CC_CODE_FK_PK")
            Me.columnIT1CC_NUMORD = MyBase.Columns("IT1CC_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1CC_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1CC_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CC_FIT_CODE_FK_PK)
            Me.columnIT1CC_CDF_CC_CODE_FK_PK = New Global.System.Data.DataColumn("IT1CC_CDF_CC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CC_CDF_CC_CODE_FK_PK)
            Me.columnIT1CC_NUMORD = New Global.System.Data.DataColumn("IT1CC_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CC_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1CC_FIT_CODE_FK_PK, Me.columnIT1CC_CDF_CC_CODE_FK_PK}, true))
            Me.columnIT1CC_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1CC_CDF_CC_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1CC_CDF_CC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1CC_TERM1COMCLASSERow() As IT1CC_TERM1COMCLASSERow
            Return CType(Me.NewRow,IT1CC_TERM1COMCLASSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1CC_TERM1COMCLASSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1CC_TERM1COMCLASSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1CC_TERM1COMCLASSERowChangedEvent) Is Nothing) Then
                RaiseEvent IT1CC_TERM1COMCLASSERowChanged(Me, New IT1CC_TERM1COMCLASSERowChangeEvent(CType(e.Row,IT1CC_TERM1COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1CC_TERM1COMCLASSERowChangingEvent) Is Nothing) Then
                RaiseEvent IT1CC_TERM1COMCLASSERowChanging(Me, New IT1CC_TERM1COMCLASSERowChangeEvent(CType(e.Row,IT1CC_TERM1COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1CC_TERM1COMCLASSERowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1CC_TERM1COMCLASSERowDeleted(Me, New IT1CC_TERM1COMCLASSERowChangeEvent(CType(e.Row,IT1CC_TERM1COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1CC_TERM1COMCLASSERowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1CC_TERM1COMCLASSERowDeleting(Me, New IT1CC_TERM1COMCLASSERowChangeEvent(CType(e.Row,IT1CC_TERM1COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1CC_TERM1COMCLASSERow(ByVal row As IT1CC_TERM1COMCLASSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1CC_TERM1COMCLASSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1CCH_TERME1CLCHIMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1CCH_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1CCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1CCH_TERME1CLCHIM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CCH_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CCH_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1CCH_TERME1CLCHIMRow
            Get
                Return CType(Me.Rows(index),IT1CCH_TERME1CLCHIMRow)
            End Get
        End Property
        
        Public Event IT1CCH_TERME1CLCHIMRowChanging As IT1CCH_TERME1CLCHIMRowChangeEventHandler
        
        Public Event IT1CCH_TERME1CLCHIMRowChanged As IT1CCH_TERME1CLCHIMRowChangeEventHandler
        
        Public Event IT1CCH_TERME1CLCHIMRowDeleting As IT1CCH_TERME1CLCHIMRowChangeEventHandler
        
        Public Event IT1CCH_TERME1CLCHIMRowDeleted As IT1CCH_TERME1CLCHIMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1CCH_TERME1CLCHIMRow(ByVal row As IT1CCH_TERME1CLCHIMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1CCH_TERME1CLCHIMRow(ByVal IT1CCH_FIT_CODE_FK_PK As Integer, ByVal IT1CCH_CCH_CODE_FK_PK As String) As IT1CCH_TERME1CLCHIMRow
            Dim rowIT1CCH_TERME1CLCHIMRow As IT1CCH_TERME1CLCHIMRow = CType(Me.NewRow,IT1CCH_TERME1CLCHIMRow)
            Dim columnValuesArray() As Object = New Object() {IT1CCH_FIT_CODE_FK_PK, IT1CCH_CCH_CODE_FK_PK}
            rowIT1CCH_TERME1CLCHIMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1CCH_TERME1CLCHIMRow)
            Return rowIT1CCH_TERME1CLCHIMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1CCH_FIT_CODE_FK_PKIT1CCH_CCH_CODE_FK_PK(ByVal IT1CCH_FIT_CODE_FK_PK As Integer, ByVal IT1CCH_CCH_CODE_FK_PK As String) As IT1CCH_TERME1CLCHIMRow
            Return CType(Me.Rows.Find(New Object() {IT1CCH_FIT_CODE_FK_PK, IT1CCH_CCH_CODE_FK_PK}),IT1CCH_TERME1CLCHIMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1CCH_TERME1CLCHIMDataTable = CType(MyBase.Clone,IT1CCH_TERME1CLCHIMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1CCH_TERME1CLCHIMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1CCH_FIT_CODE_FK_PK = MyBase.Columns("IT1CCH_FIT_CODE_FK_PK")
            Me.columnIT1CCH_CCH_CODE_FK_PK = MyBase.Columns("IT1CCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1CCH_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1CCH_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CCH_FIT_CODE_FK_PK)
            Me.columnIT1CCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("IT1CCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1CCH_FIT_CODE_FK_PK, Me.columnIT1CCH_CCH_CODE_FK_PK}, true))
            Me.columnIT1CCH_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1CCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1CCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1CCH_TERME1CLCHIMRow() As IT1CCH_TERME1CLCHIMRow
            Return CType(Me.NewRow,IT1CCH_TERME1CLCHIMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1CCH_TERME1CLCHIMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1CCH_TERME1CLCHIMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1CCH_TERME1CLCHIMRowChangedEvent) Is Nothing) Then
                RaiseEvent IT1CCH_TERME1CLCHIMRowChanged(Me, New IT1CCH_TERME1CLCHIMRowChangeEvent(CType(e.Row,IT1CCH_TERME1CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1CCH_TERME1CLCHIMRowChangingEvent) Is Nothing) Then
                RaiseEvent IT1CCH_TERME1CLCHIMRowChanging(Me, New IT1CCH_TERME1CLCHIMRowChangeEvent(CType(e.Row,IT1CCH_TERME1CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1CCH_TERME1CLCHIMRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1CCH_TERME1CLCHIMRowDeleted(Me, New IT1CCH_TERME1CLCHIMRowChangeEvent(CType(e.Row,IT1CCH_TERME1CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1CCH_TERME1CLCHIMRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1CCH_TERME1CLCHIMRowDeleting(Me, New IT1CCH_TERME1CLCHIMRowChangeEvent(CType(e.Row,IT1CCH_TERME1CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1CCH_TERME1CLCHIMRow(ByVal row As IT1CCH_TERME1CLCHIMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1CCH_TERME1CLCHIMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1CPH_TERME1CLPHARMTHERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1CPH_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1CPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1CPH_TERME1CLPHARMTHER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CPH_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CPH_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1CPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1CPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1CPH_TERME1CLPHARMTHERRow
            Get
                Return CType(Me.Rows(index),IT1CPH_TERME1CLPHARMTHERRow)
            End Get
        End Property
        
        Public Event IT1CPH_TERME1CLPHARMTHERRowChanging As IT1CPH_TERME1CLPHARMTHERRowChangeEventHandler
        
        Public Event IT1CPH_TERME1CLPHARMTHERRowChanged As IT1CPH_TERME1CLPHARMTHERRowChangeEventHandler
        
        Public Event IT1CPH_TERME1CLPHARMTHERRowDeleting As IT1CPH_TERME1CLPHARMTHERRowChangeEventHandler
        
        Public Event IT1CPH_TERME1CLPHARMTHERRowDeleted As IT1CPH_TERME1CLPHARMTHERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1CPH_TERME1CLPHARMTHERRow(ByVal row As IT1CPH_TERME1CLPHARMTHERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1CPH_TERME1CLPHARMTHERRow(ByVal IT1CPH_FIT_CODE_FK_PK As Integer, ByVal IT1CPH_CPH_CODE_FK_PK As String) As IT1CPH_TERME1CLPHARMTHERRow
            Dim rowIT1CPH_TERME1CLPHARMTHERRow As IT1CPH_TERME1CLPHARMTHERRow = CType(Me.NewRow,IT1CPH_TERME1CLPHARMTHERRow)
            Dim columnValuesArray() As Object = New Object() {IT1CPH_FIT_CODE_FK_PK, IT1CPH_CPH_CODE_FK_PK}
            rowIT1CPH_TERME1CLPHARMTHERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1CPH_TERME1CLPHARMTHERRow)
            Return rowIT1CPH_TERME1CLPHARMTHERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1CPH_FIT_CODE_FK_PKIT1CPH_CPH_CODE_FK_PK(ByVal IT1CPH_FIT_CODE_FK_PK As Integer, ByVal IT1CPH_CPH_CODE_FK_PK As String) As IT1CPH_TERME1CLPHARMTHERRow
            Return CType(Me.Rows.Find(New Object() {IT1CPH_FIT_CODE_FK_PK, IT1CPH_CPH_CODE_FK_PK}),IT1CPH_TERME1CLPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1CPH_TERME1CLPHARMTHERDataTable = CType(MyBase.Clone,IT1CPH_TERME1CLPHARMTHERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1CPH_TERME1CLPHARMTHERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1CPH_FIT_CODE_FK_PK = MyBase.Columns("IT1CPH_FIT_CODE_FK_PK")
            Me.columnIT1CPH_CPH_CODE_FK_PK = MyBase.Columns("IT1CPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1CPH_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1CPH_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CPH_FIT_CODE_FK_PK)
            Me.columnIT1CPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("IT1CPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1CPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1CPH_FIT_CODE_FK_PK, Me.columnIT1CPH_CPH_CODE_FK_PK}, true))
            Me.columnIT1CPH_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1CPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1CPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1CPH_TERME1CLPHARMTHERRow() As IT1CPH_TERME1CLPHARMTHERRow
            Return CType(Me.NewRow,IT1CPH_TERME1CLPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1CPH_TERME1CLPHARMTHERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1CPH_TERME1CLPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1CPH_TERME1CLPHARMTHERRowChangedEvent) Is Nothing) Then
                RaiseEvent IT1CPH_TERME1CLPHARMTHERRowChanged(Me, New IT1CPH_TERME1CLPHARMTHERRowChangeEvent(CType(e.Row,IT1CPH_TERME1CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1CPH_TERME1CLPHARMTHERRowChangingEvent) Is Nothing) Then
                RaiseEvent IT1CPH_TERME1CLPHARMTHERRowChanging(Me, New IT1CPH_TERME1CLPHARMTHERRowChangeEvent(CType(e.Row,IT1CPH_TERME1CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1CPH_TERME1CLPHARMTHERRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1CPH_TERME1CLPHARMTHERRowDeleted(Me, New IT1CPH_TERME1CLPHARMTHERRowChangeEvent(CType(e.Row,IT1CPH_TERME1CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1CPH_TERME1CLPHARMTHERRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1CPH_TERME1CLPHARMTHERRowDeleting(Me, New IT1CPH_TERME1CLPHARMTHERRowChangeEvent(CType(e.Row,IT1CPH_TERME1CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1CPH_TERME1CLPHARMTHERRow(ByVal row As IT1CPH_TERME1CLPHARMTHERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1CPH_TERME1CLPHARMTHERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1SAC_TERME1SUBACTIVEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1SAC_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1SAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1SAC_TERME1SUBACTIVE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1SAC_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1SAC_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1SAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1SAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1SAC_TERME1SUBACTIVERow
            Get
                Return CType(Me.Rows(index),IT1SAC_TERME1SUBACTIVERow)
            End Get
        End Property
        
        Public Event IT1SAC_TERME1SUBACTIVERowChanging As IT1SAC_TERME1SUBACTIVERowChangeEventHandler
        
        Public Event IT1SAC_TERME1SUBACTIVERowChanged As IT1SAC_TERME1SUBACTIVERowChangeEventHandler
        
        Public Event IT1SAC_TERME1SUBACTIVERowDeleting As IT1SAC_TERME1SUBACTIVERowChangeEventHandler
        
        Public Event IT1SAC_TERME1SUBACTIVERowDeleted As IT1SAC_TERME1SUBACTIVERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1SAC_TERME1SUBACTIVERow(ByVal row As IT1SAC_TERME1SUBACTIVERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1SAC_TERME1SUBACTIVERow(ByVal IT1SAC_FIT_CODE_FK_PK As Integer, ByVal IT1SAC_SAC_CODE_FK_PK As Integer) As IT1SAC_TERME1SUBACTIVERow
            Dim rowIT1SAC_TERME1SUBACTIVERow As IT1SAC_TERME1SUBACTIVERow = CType(Me.NewRow,IT1SAC_TERME1SUBACTIVERow)
            Dim columnValuesArray() As Object = New Object() {IT1SAC_FIT_CODE_FK_PK, IT1SAC_SAC_CODE_FK_PK}
            rowIT1SAC_TERME1SUBACTIVERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1SAC_TERME1SUBACTIVERow)
            Return rowIT1SAC_TERME1SUBACTIVERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1SAC_FIT_CODE_FK_PKIT1SAC_SAC_CODE_FK_PK(ByVal IT1SAC_FIT_CODE_FK_PK As Integer, ByVal IT1SAC_SAC_CODE_FK_PK As Integer) As IT1SAC_TERME1SUBACTIVERow
            Return CType(Me.Rows.Find(New Object() {IT1SAC_FIT_CODE_FK_PK, IT1SAC_SAC_CODE_FK_PK}),IT1SAC_TERME1SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1SAC_TERME1SUBACTIVEDataTable = CType(MyBase.Clone,IT1SAC_TERME1SUBACTIVEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1SAC_TERME1SUBACTIVEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1SAC_FIT_CODE_FK_PK = MyBase.Columns("IT1SAC_FIT_CODE_FK_PK")
            Me.columnIT1SAC_SAC_CODE_FK_PK = MyBase.Columns("IT1SAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1SAC_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1SAC_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1SAC_FIT_CODE_FK_PK)
            Me.columnIT1SAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("IT1SAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1SAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1SAC_FIT_CODE_FK_PK, Me.columnIT1SAC_SAC_CODE_FK_PK}, true))
            Me.columnIT1SAC_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1SAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1SAC_TERME1SUBACTIVERow() As IT1SAC_TERME1SUBACTIVERow
            Return CType(Me.NewRow,IT1SAC_TERME1SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1SAC_TERME1SUBACTIVERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1SAC_TERME1SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1SAC_TERME1SUBACTIVERowChangedEvent) Is Nothing) Then
                RaiseEvent IT1SAC_TERME1SUBACTIVERowChanged(Me, New IT1SAC_TERME1SUBACTIVERowChangeEvent(CType(e.Row,IT1SAC_TERME1SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1SAC_TERME1SUBACTIVERowChangingEvent) Is Nothing) Then
                RaiseEvent IT1SAC_TERME1SUBACTIVERowChanging(Me, New IT1SAC_TERME1SUBACTIVERowChangeEvent(CType(e.Row,IT1SAC_TERME1SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1SAC_TERME1SUBACTIVERowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1SAC_TERME1SUBACTIVERowDeleted(Me, New IT1SAC_TERME1SUBACTIVERowChangeEvent(CType(e.Row,IT1SAC_TERME1SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1SAC_TERME1SUBACTIVERowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1SAC_TERME1SUBACTIVERowDeleting(Me, New IT1SAC_TERME1SUBACTIVERowChangeEvent(CType(e.Row,IT1SAC_TERME1SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1SAC_TERME1SUBACTIVERow(ByVal row As IT1SAC_TERME1SUBACTIVERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1SAC_TERME1SUBACTIVEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1SAU_TERME1SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1SAU_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1SAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1SAU_TERME1SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1SAU_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1SAU_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1SAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1SAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1SAU_TERME1SUBAUXRow
            Get
                Return CType(Me.Rows(index),IT1SAU_TERME1SUBAUXRow)
            End Get
        End Property
        
        Public Event IT1SAU_TERME1SUBAUXRowChanging As IT1SAU_TERME1SUBAUXRowChangeEventHandler
        
        Public Event IT1SAU_TERME1SUBAUXRowChanged As IT1SAU_TERME1SUBAUXRowChangeEventHandler
        
        Public Event IT1SAU_TERME1SUBAUXRowDeleting As IT1SAU_TERME1SUBAUXRowChangeEventHandler
        
        Public Event IT1SAU_TERME1SUBAUXRowDeleted As IT1SAU_TERME1SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1SAU_TERME1SUBAUXRow(ByVal row As IT1SAU_TERME1SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1SAU_TERME1SUBAUXRow(ByVal IT1SAU_FIT_CODE_FK_PK As Integer, ByVal IT1SAU_SAU_CODE_FK_PK As Integer) As IT1SAU_TERME1SUBAUXRow
            Dim rowIT1SAU_TERME1SUBAUXRow As IT1SAU_TERME1SUBAUXRow = CType(Me.NewRow,IT1SAU_TERME1SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {IT1SAU_FIT_CODE_FK_PK, IT1SAU_SAU_CODE_FK_PK}
            rowIT1SAU_TERME1SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1SAU_TERME1SUBAUXRow)
            Return rowIT1SAU_TERME1SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1SAU_FIT_CODE_FK_PKIT1SAU_SAU_CODE_FK_PK(ByVal IT1SAU_FIT_CODE_FK_PK As Integer, ByVal IT1SAU_SAU_CODE_FK_PK As Integer) As IT1SAU_TERME1SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {IT1SAU_FIT_CODE_FK_PK, IT1SAU_SAU_CODE_FK_PK}),IT1SAU_TERME1SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1SAU_TERME1SUBAUXDataTable = CType(MyBase.Clone,IT1SAU_TERME1SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1SAU_TERME1SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1SAU_FIT_CODE_FK_PK = MyBase.Columns("IT1SAU_FIT_CODE_FK_PK")
            Me.columnIT1SAU_SAU_CODE_FK_PK = MyBase.Columns("IT1SAU_SAU_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1SAU_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1SAU_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1SAU_FIT_CODE_FK_PK)
            Me.columnIT1SAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("IT1SAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1SAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1SAU_FIT_CODE_FK_PK, Me.columnIT1SAU_SAU_CODE_FK_PK}, true))
            Me.columnIT1SAU_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1SAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1SAU_TERME1SUBAUXRow() As IT1SAU_TERME1SUBAUXRow
            Return CType(Me.NewRow,IT1SAU_TERME1SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1SAU_TERME1SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1SAU_TERME1SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1SAU_TERME1SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent IT1SAU_TERME1SUBAUXRowChanged(Me, New IT1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IT1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1SAU_TERME1SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent IT1SAU_TERME1SUBAUXRowChanging(Me, New IT1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IT1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1SAU_TERME1SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1SAU_TERME1SUBAUXRowDeleted(Me, New IT1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IT1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1SAU_TERME1SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1SAU_TERME1SUBAUXRowDeleting(Me, New IT1SAU_TERME1SUBAUXRowChangeEvent(CType(e.Row,IT1SAU_TERME1SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1SAU_TERME1SUBAUXRow(ByVal row As IT1SAU_TERME1SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1SAU_TERME1SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1PR_TERME1PRODUITDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1PR_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1PR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1PR_TERME1PRODUIT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1PR_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1PR_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1PR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1PR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1PR_TERME1PRODUITRow
            Get
                Return CType(Me.Rows(index),IT1PR_TERME1PRODUITRow)
            End Get
        End Property
        
        Public Event IT1PR_TERME1PRODUITRowChanging As IT1PR_TERME1PRODUITRowChangeEventHandler
        
        Public Event IT1PR_TERME1PRODUITRowChanged As IT1PR_TERME1PRODUITRowChangeEventHandler
        
        Public Event IT1PR_TERME1PRODUITRowDeleting As IT1PR_TERME1PRODUITRowChangeEventHandler
        
        Public Event IT1PR_TERME1PRODUITRowDeleted As IT1PR_TERME1PRODUITRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1PR_TERME1PRODUITRow(ByVal row As IT1PR_TERME1PRODUITRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1PR_TERME1PRODUITRow(ByVal IT1PR_FIT_CODE_FK_PK As Integer, ByVal IT1PR_PR_CODE_FK_PK As Integer) As IT1PR_TERME1PRODUITRow
            Dim rowIT1PR_TERME1PRODUITRow As IT1PR_TERME1PRODUITRow = CType(Me.NewRow,IT1PR_TERME1PRODUITRow)
            Dim columnValuesArray() As Object = New Object() {IT1PR_FIT_CODE_FK_PK, IT1PR_PR_CODE_FK_PK}
            rowIT1PR_TERME1PRODUITRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1PR_TERME1PRODUITRow)
            Return rowIT1PR_TERME1PRODUITRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1PR_FIT_CODE_FK_PKIT1PR_PR_CODE_FK_PK(ByVal IT1PR_FIT_CODE_FK_PK As Integer, ByVal IT1PR_PR_CODE_FK_PK As Integer) As IT1PR_TERME1PRODUITRow
            Return CType(Me.Rows.Find(New Object() {IT1PR_FIT_CODE_FK_PK, IT1PR_PR_CODE_FK_PK}),IT1PR_TERME1PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1PR_TERME1PRODUITDataTable = CType(MyBase.Clone,IT1PR_TERME1PRODUITDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1PR_TERME1PRODUITDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1PR_FIT_CODE_FK_PK = MyBase.Columns("IT1PR_FIT_CODE_FK_PK")
            Me.columnIT1PR_PR_CODE_FK_PK = MyBase.Columns("IT1PR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1PR_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1PR_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1PR_FIT_CODE_FK_PK)
            Me.columnIT1PR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("IT1PR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1PR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1PR_FIT_CODE_FK_PK, Me.columnIT1PR_PR_CODE_FK_PK}, true))
            Me.columnIT1PR_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1PR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1PR_TERME1PRODUITRow() As IT1PR_TERME1PRODUITRow
            Return CType(Me.NewRow,IT1PR_TERME1PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1PR_TERME1PRODUITRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1PR_TERME1PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1PR_TERME1PRODUITRowChangedEvent) Is Nothing) Then
                RaiseEvent IT1PR_TERME1PRODUITRowChanged(Me, New IT1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IT1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1PR_TERME1PRODUITRowChangingEvent) Is Nothing) Then
                RaiseEvent IT1PR_TERME1PRODUITRowChanging(Me, New IT1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IT1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1PR_TERME1PRODUITRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1PR_TERME1PRODUITRowDeleted(Me, New IT1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IT1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1PR_TERME1PRODUITRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1PR_TERME1PRODUITRowDeleting(Me, New IT1PR_TERME1PRODUITRowChangeEvent(CType(e.Row,IT1PR_TERME1PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1PR_TERME1PRODUITRow(ByVal row As IT1PR_TERME1PRODUITRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1PR_TERME1PRODUITDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT1SP_TERME1SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT1SP_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT1SP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT1SP_TERME1SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1SP_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1SP_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT1SP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT1SP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT1SP_TERME1SPECIALITERow
            Get
                Return CType(Me.Rows(index),IT1SP_TERME1SPECIALITERow)
            End Get
        End Property
        
        Public Event IT1SP_TERME1SPECIALITERowChanging As IT1SP_TERME1SPECIALITERowChangeEventHandler
        
        Public Event IT1SP_TERME1SPECIALITERowChanged As IT1SP_TERME1SPECIALITERowChangeEventHandler
        
        Public Event IT1SP_TERME1SPECIALITERowDeleting As IT1SP_TERME1SPECIALITERowChangeEventHandler
        
        Public Event IT1SP_TERME1SPECIALITERowDeleted As IT1SP_TERME1SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT1SP_TERME1SPECIALITERow(ByVal row As IT1SP_TERME1SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT1SP_TERME1SPECIALITERow(ByVal IT1SP_FIT_CODE_FK_PK As Integer, ByVal IT1SP_SP_CODE_FK_PK As Integer) As IT1SP_TERME1SPECIALITERow
            Dim rowIT1SP_TERME1SPECIALITERow As IT1SP_TERME1SPECIALITERow = CType(Me.NewRow,IT1SP_TERME1SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {IT1SP_FIT_CODE_FK_PK, IT1SP_SP_CODE_FK_PK}
            rowIT1SP_TERME1SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT1SP_TERME1SPECIALITERow)
            Return rowIT1SP_TERME1SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT1SP_FIT_CODE_FK_PKIT1SP_SP_CODE_FK_PK(ByVal IT1SP_FIT_CODE_FK_PK As Integer, ByVal IT1SP_SP_CODE_FK_PK As Integer) As IT1SP_TERME1SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {IT1SP_FIT_CODE_FK_PK, IT1SP_SP_CODE_FK_PK}),IT1SP_TERME1SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT1SP_TERME1SPECIALITEDataTable = CType(MyBase.Clone,IT1SP_TERME1SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT1SP_TERME1SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT1SP_FIT_CODE_FK_PK = MyBase.Columns("IT1SP_FIT_CODE_FK_PK")
            Me.columnIT1SP_SP_CODE_FK_PK = MyBase.Columns("IT1SP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT1SP_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT1SP_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1SP_FIT_CODE_FK_PK)
            Me.columnIT1SP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("IT1SP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT1SP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT1SP_FIT_CODE_FK_PK, Me.columnIT1SP_SP_CODE_FK_PK}, true))
            Me.columnIT1SP_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT1SP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT1SP_TERME1SPECIALITERow() As IT1SP_TERME1SPECIALITERow
            Return CType(Me.NewRow,IT1SP_TERME1SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT1SP_TERME1SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT1SP_TERME1SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT1SP_TERME1SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent IT1SP_TERME1SPECIALITERowChanged(Me, New IT1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IT1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT1SP_TERME1SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent IT1SP_TERME1SPECIALITERowChanging(Me, New IT1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IT1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT1SP_TERME1SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent IT1SP_TERME1SPECIALITERowDeleted(Me, New IT1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IT1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT1SP_TERME1SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent IT1SP_TERME1SPECIALITERowDeleting(Me, New IT1SP_TERME1SPECIALITERowChangeEvent(CType(e.Row,IT1SP_TERME1SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT1SP_TERME1SPECIALITERow(ByVal row As IT1SP_TERME1SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT1SP_TERME1SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2CPH_TERME2CLPHARMTHERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2CPH_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2CPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2CPH_TERME2CLPHARMTHER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CPH_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CPH_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2CPH_TERME2CLPHARMTHERRow
            Get
                Return CType(Me.Rows(index),IT2CPH_TERME2CLPHARMTHERRow)
            End Get
        End Property
        
        Public Event IT2CPH_TERME2CLPHARMTHERRowChanging As IT2CPH_TERME2CLPHARMTHERRowChangeEventHandler
        
        Public Event IT2CPH_TERME2CLPHARMTHERRowChanged As IT2CPH_TERME2CLPHARMTHERRowChangeEventHandler
        
        Public Event IT2CPH_TERME2CLPHARMTHERRowDeleting As IT2CPH_TERME2CLPHARMTHERRowChangeEventHandler
        
        Public Event IT2CPH_TERME2CLPHARMTHERRowDeleted As IT2CPH_TERME2CLPHARMTHERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2CPH_TERME2CLPHARMTHERRow(ByVal row As IT2CPH_TERME2CLPHARMTHERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2CPH_TERME2CLPHARMTHERRow(ByVal IT2CPH_FIT_CODE_FK_PK As Integer, ByVal IT2CPH_CPH_CODE_FK_PK As String) As IT2CPH_TERME2CLPHARMTHERRow
            Dim rowIT2CPH_TERME2CLPHARMTHERRow As IT2CPH_TERME2CLPHARMTHERRow = CType(Me.NewRow,IT2CPH_TERME2CLPHARMTHERRow)
            Dim columnValuesArray() As Object = New Object() {IT2CPH_FIT_CODE_FK_PK, IT2CPH_CPH_CODE_FK_PK}
            rowIT2CPH_TERME2CLPHARMTHERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2CPH_TERME2CLPHARMTHERRow)
            Return rowIT2CPH_TERME2CLPHARMTHERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2CPH_FIT_CODE_FK_PKIT2CPH_CPH_CODE_FK_PK(ByVal IT2CPH_FIT_CODE_FK_PK As Integer, ByVal IT2CPH_CPH_CODE_FK_PK As String) As IT2CPH_TERME2CLPHARMTHERRow
            Return CType(Me.Rows.Find(New Object() {IT2CPH_FIT_CODE_FK_PK, IT2CPH_CPH_CODE_FK_PK}),IT2CPH_TERME2CLPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2CPH_TERME2CLPHARMTHERDataTable = CType(MyBase.Clone,IT2CPH_TERME2CLPHARMTHERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2CPH_TERME2CLPHARMTHERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2CPH_FIT_CODE_FK_PK = MyBase.Columns("IT2CPH_FIT_CODE_FK_PK")
            Me.columnIT2CPH_CPH_CODE_FK_PK = MyBase.Columns("IT2CPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2CPH_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2CPH_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CPH_FIT_CODE_FK_PK)
            Me.columnIT2CPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("IT2CPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2CPH_FIT_CODE_FK_PK, Me.columnIT2CPH_CPH_CODE_FK_PK}, true))
            Me.columnIT2CPH_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2CPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2CPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2CPH_TERME2CLPHARMTHERRow() As IT2CPH_TERME2CLPHARMTHERRow
            Return CType(Me.NewRow,IT2CPH_TERME2CLPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2CPH_TERME2CLPHARMTHERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2CPH_TERME2CLPHARMTHERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2CPH_TERME2CLPHARMTHERRowChangedEvent) Is Nothing) Then
                RaiseEvent IT2CPH_TERME2CLPHARMTHERRowChanged(Me, New IT2CPH_TERME2CLPHARMTHERRowChangeEvent(CType(e.Row,IT2CPH_TERME2CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2CPH_TERME2CLPHARMTHERRowChangingEvent) Is Nothing) Then
                RaiseEvent IT2CPH_TERME2CLPHARMTHERRowChanging(Me, New IT2CPH_TERME2CLPHARMTHERRowChangeEvent(CType(e.Row,IT2CPH_TERME2CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2CPH_TERME2CLPHARMTHERRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2CPH_TERME2CLPHARMTHERRowDeleted(Me, New IT2CPH_TERME2CLPHARMTHERRowChangeEvent(CType(e.Row,IT2CPH_TERME2CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2CPH_TERME2CLPHARMTHERRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2CPH_TERME2CLPHARMTHERRowDeleting(Me, New IT2CPH_TERME2CLPHARMTHERRowChangeEvent(CType(e.Row,IT2CPH_TERME2CLPHARMTHERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2CPH_TERME2CLPHARMTHERRow(ByVal row As IT2CPH_TERME2CLPHARMTHERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2CPH_TERME2CLPHARMTHERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2CCH_TERME2CLCHIMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2CCH_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2CCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2CCH_TERME2CLCHIM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CCH_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CCH_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2CCH_TERME2CLCHIMRow
            Get
                Return CType(Me.Rows(index),IT2CCH_TERME2CLCHIMRow)
            End Get
        End Property
        
        Public Event IT2CCH_TERME2CLCHIMRowChanging As IT2CCH_TERME2CLCHIMRowChangeEventHandler
        
        Public Event IT2CCH_TERME2CLCHIMRowChanged As IT2CCH_TERME2CLCHIMRowChangeEventHandler
        
        Public Event IT2CCH_TERME2CLCHIMRowDeleting As IT2CCH_TERME2CLCHIMRowChangeEventHandler
        
        Public Event IT2CCH_TERME2CLCHIMRowDeleted As IT2CCH_TERME2CLCHIMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2CCH_TERME2CLCHIMRow(ByVal row As IT2CCH_TERME2CLCHIMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2CCH_TERME2CLCHIMRow(ByVal IT2CCH_FIT_CODE_FK_PK As Integer, ByVal IT2CCH_CCH_CODE_FK_PK As String) As IT2CCH_TERME2CLCHIMRow
            Dim rowIT2CCH_TERME2CLCHIMRow As IT2CCH_TERME2CLCHIMRow = CType(Me.NewRow,IT2CCH_TERME2CLCHIMRow)
            Dim columnValuesArray() As Object = New Object() {IT2CCH_FIT_CODE_FK_PK, IT2CCH_CCH_CODE_FK_PK}
            rowIT2CCH_TERME2CLCHIMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2CCH_TERME2CLCHIMRow)
            Return rowIT2CCH_TERME2CLCHIMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2CCH_FIT_CODE_FK_PKIT2CCH_CCH_CODE_FK_PK(ByVal IT2CCH_FIT_CODE_FK_PK As Integer, ByVal IT2CCH_CCH_CODE_FK_PK As String) As IT2CCH_TERME2CLCHIMRow
            Return CType(Me.Rows.Find(New Object() {IT2CCH_FIT_CODE_FK_PK, IT2CCH_CCH_CODE_FK_PK}),IT2CCH_TERME2CLCHIMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2CCH_TERME2CLCHIMDataTable = CType(MyBase.Clone,IT2CCH_TERME2CLCHIMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2CCH_TERME2CLCHIMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2CCH_FIT_CODE_FK_PK = MyBase.Columns("IT2CCH_FIT_CODE_FK_PK")
            Me.columnIT2CCH_CCH_CODE_FK_PK = MyBase.Columns("IT2CCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2CCH_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2CCH_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CCH_FIT_CODE_FK_PK)
            Me.columnIT2CCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("IT2CCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2CCH_FIT_CODE_FK_PK, Me.columnIT2CCH_CCH_CODE_FK_PK}, true))
            Me.columnIT2CCH_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2CCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2CCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2CCH_TERME2CLCHIMRow() As IT2CCH_TERME2CLCHIMRow
            Return CType(Me.NewRow,IT2CCH_TERME2CLCHIMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2CCH_TERME2CLCHIMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2CCH_TERME2CLCHIMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2CCH_TERME2CLCHIMRowChangedEvent) Is Nothing) Then
                RaiseEvent IT2CCH_TERME2CLCHIMRowChanged(Me, New IT2CCH_TERME2CLCHIMRowChangeEvent(CType(e.Row,IT2CCH_TERME2CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2CCH_TERME2CLCHIMRowChangingEvent) Is Nothing) Then
                RaiseEvent IT2CCH_TERME2CLCHIMRowChanging(Me, New IT2CCH_TERME2CLCHIMRowChangeEvent(CType(e.Row,IT2CCH_TERME2CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2CCH_TERME2CLCHIMRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2CCH_TERME2CLCHIMRowDeleted(Me, New IT2CCH_TERME2CLCHIMRowChangeEvent(CType(e.Row,IT2CCH_TERME2CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2CCH_TERME2CLCHIMRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2CCH_TERME2CLCHIMRowDeleting(Me, New IT2CCH_TERME2CLCHIMRowChangeEvent(CType(e.Row,IT2CCH_TERME2CLCHIMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2CCH_TERME2CLCHIMRow(ByVal row As IT2CCH_TERME2CLCHIMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2CCH_TERME2CLCHIMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2CC_TERM2COMCLASSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2CC_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2CC_CDF_CC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2CC_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2CC_TERM2COMCLASSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CC_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CC_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CC_CDF_CC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CC_CDF_CC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2CC_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2CC_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2CC_TERM2COMCLASSERow
            Get
                Return CType(Me.Rows(index),IT2CC_TERM2COMCLASSERow)
            End Get
        End Property
        
        Public Event IT2CC_TERM2COMCLASSERowChanging As IT2CC_TERM2COMCLASSERowChangeEventHandler
        
        Public Event IT2CC_TERM2COMCLASSERowChanged As IT2CC_TERM2COMCLASSERowChangeEventHandler
        
        Public Event IT2CC_TERM2COMCLASSERowDeleting As IT2CC_TERM2COMCLASSERowChangeEventHandler
        
        Public Event IT2CC_TERM2COMCLASSERowDeleted As IT2CC_TERM2COMCLASSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2CC_TERM2COMCLASSERow(ByVal row As IT2CC_TERM2COMCLASSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2CC_TERM2COMCLASSERow(ByVal IT2CC_FIT_CODE_FK_PK As Integer, ByVal IT2CC_CDF_CC_CODE_FK_PK As String, ByVal IT2CC_NUMORD As Short) As IT2CC_TERM2COMCLASSERow
            Dim rowIT2CC_TERM2COMCLASSERow As IT2CC_TERM2COMCLASSERow = CType(Me.NewRow,IT2CC_TERM2COMCLASSERow)
            Dim columnValuesArray() As Object = New Object() {IT2CC_FIT_CODE_FK_PK, IT2CC_CDF_CC_CODE_FK_PK, IT2CC_NUMORD}
            rowIT2CC_TERM2COMCLASSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2CC_TERM2COMCLASSERow)
            Return rowIT2CC_TERM2COMCLASSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2CC_FIT_CODE_FK_PKIT2CC_CDF_CC_CODE_FK_PK(ByVal IT2CC_FIT_CODE_FK_PK As Integer, ByVal IT2CC_CDF_CC_CODE_FK_PK As String) As IT2CC_TERM2COMCLASSERow
            Return CType(Me.Rows.Find(New Object() {IT2CC_FIT_CODE_FK_PK, IT2CC_CDF_CC_CODE_FK_PK}),IT2CC_TERM2COMCLASSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2CC_TERM2COMCLASSEDataTable = CType(MyBase.Clone,IT2CC_TERM2COMCLASSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2CC_TERM2COMCLASSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2CC_FIT_CODE_FK_PK = MyBase.Columns("IT2CC_FIT_CODE_FK_PK")
            Me.columnIT2CC_CDF_CC_CODE_FK_PK = MyBase.Columns("IT2CC_CDF_CC_CODE_FK_PK")
            Me.columnIT2CC_NUMORD = MyBase.Columns("IT2CC_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2CC_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2CC_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CC_FIT_CODE_FK_PK)
            Me.columnIT2CC_CDF_CC_CODE_FK_PK = New Global.System.Data.DataColumn("IT2CC_CDF_CC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CC_CDF_CC_CODE_FK_PK)
            Me.columnIT2CC_NUMORD = New Global.System.Data.DataColumn("IT2CC_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2CC_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2CC_FIT_CODE_FK_PK, Me.columnIT2CC_CDF_CC_CODE_FK_PK}, true))
            Me.columnIT2CC_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2CC_CDF_CC_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2CC_CDF_CC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2CC_TERM2COMCLASSERow() As IT2CC_TERM2COMCLASSERow
            Return CType(Me.NewRow,IT2CC_TERM2COMCLASSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2CC_TERM2COMCLASSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2CC_TERM2COMCLASSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2CC_TERM2COMCLASSERowChangedEvent) Is Nothing) Then
                RaiseEvent IT2CC_TERM2COMCLASSERowChanged(Me, New IT2CC_TERM2COMCLASSERowChangeEvent(CType(e.Row,IT2CC_TERM2COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2CC_TERM2COMCLASSERowChangingEvent) Is Nothing) Then
                RaiseEvent IT2CC_TERM2COMCLASSERowChanging(Me, New IT2CC_TERM2COMCLASSERowChangeEvent(CType(e.Row,IT2CC_TERM2COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2CC_TERM2COMCLASSERowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2CC_TERM2COMCLASSERowDeleted(Me, New IT2CC_TERM2COMCLASSERowChangeEvent(CType(e.Row,IT2CC_TERM2COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2CC_TERM2COMCLASSERowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2CC_TERM2COMCLASSERowDeleting(Me, New IT2CC_TERM2COMCLASSERowChangeEvent(CType(e.Row,IT2CC_TERM2COMCLASSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2CC_TERM2COMCLASSERow(ByVal row As IT2CC_TERM2COMCLASSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2CC_TERM2COMCLASSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2SAC_TERME2SUBACTIVEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2SAC_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2SAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2SAC_TERME2SUBACTIVE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2SAC_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2SAC_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2SAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2SAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2SAC_TERME2SUBACTIVERow
            Get
                Return CType(Me.Rows(index),IT2SAC_TERME2SUBACTIVERow)
            End Get
        End Property
        
        Public Event IT2SAC_TERME2SUBACTIVERowChanging As IT2SAC_TERME2SUBACTIVERowChangeEventHandler
        
        Public Event IT2SAC_TERME2SUBACTIVERowChanged As IT2SAC_TERME2SUBACTIVERowChangeEventHandler
        
        Public Event IT2SAC_TERME2SUBACTIVERowDeleting As IT2SAC_TERME2SUBACTIVERowChangeEventHandler
        
        Public Event IT2SAC_TERME2SUBACTIVERowDeleted As IT2SAC_TERME2SUBACTIVERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2SAC_TERME2SUBACTIVERow(ByVal row As IT2SAC_TERME2SUBACTIVERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2SAC_TERME2SUBACTIVERow(ByVal IT2SAC_FIT_CODE_FK_PK As Integer, ByVal IT2SAC_SAC_CODE_FK_PK As Integer) As IT2SAC_TERME2SUBACTIVERow
            Dim rowIT2SAC_TERME2SUBACTIVERow As IT2SAC_TERME2SUBACTIVERow = CType(Me.NewRow,IT2SAC_TERME2SUBACTIVERow)
            Dim columnValuesArray() As Object = New Object() {IT2SAC_FIT_CODE_FK_PK, IT2SAC_SAC_CODE_FK_PK}
            rowIT2SAC_TERME2SUBACTIVERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2SAC_TERME2SUBACTIVERow)
            Return rowIT2SAC_TERME2SUBACTIVERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2SAC_FIT_CODE_FK_PKIT2SAC_SAC_CODE_FK_PK(ByVal IT2SAC_FIT_CODE_FK_PK As Integer, ByVal IT2SAC_SAC_CODE_FK_PK As Integer) As IT2SAC_TERME2SUBACTIVERow
            Return CType(Me.Rows.Find(New Object() {IT2SAC_FIT_CODE_FK_PK, IT2SAC_SAC_CODE_FK_PK}),IT2SAC_TERME2SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2SAC_TERME2SUBACTIVEDataTable = CType(MyBase.Clone,IT2SAC_TERME2SUBACTIVEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2SAC_TERME2SUBACTIVEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2SAC_FIT_CODE_FK_PK = MyBase.Columns("IT2SAC_FIT_CODE_FK_PK")
            Me.columnIT2SAC_SAC_CODE_FK_PK = MyBase.Columns("IT2SAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2SAC_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2SAC_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2SAC_FIT_CODE_FK_PK)
            Me.columnIT2SAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("IT2SAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2SAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2SAC_FIT_CODE_FK_PK, Me.columnIT2SAC_SAC_CODE_FK_PK}, true))
            Me.columnIT2SAC_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2SAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2SAC_TERME2SUBACTIVERow() As IT2SAC_TERME2SUBACTIVERow
            Return CType(Me.NewRow,IT2SAC_TERME2SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2SAC_TERME2SUBACTIVERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2SAC_TERME2SUBACTIVERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2SAC_TERME2SUBACTIVERowChangedEvent) Is Nothing) Then
                RaiseEvent IT2SAC_TERME2SUBACTIVERowChanged(Me, New IT2SAC_TERME2SUBACTIVERowChangeEvent(CType(e.Row,IT2SAC_TERME2SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2SAC_TERME2SUBACTIVERowChangingEvent) Is Nothing) Then
                RaiseEvent IT2SAC_TERME2SUBACTIVERowChanging(Me, New IT2SAC_TERME2SUBACTIVERowChangeEvent(CType(e.Row,IT2SAC_TERME2SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2SAC_TERME2SUBACTIVERowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2SAC_TERME2SUBACTIVERowDeleted(Me, New IT2SAC_TERME2SUBACTIVERowChangeEvent(CType(e.Row,IT2SAC_TERME2SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2SAC_TERME2SUBACTIVERowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2SAC_TERME2SUBACTIVERowDeleting(Me, New IT2SAC_TERME2SUBACTIVERowChangeEvent(CType(e.Row,IT2SAC_TERME2SUBACTIVERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2SAC_TERME2SUBACTIVERow(ByVal row As IT2SAC_TERME2SUBACTIVERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2SAC_TERME2SUBACTIVEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2SAU_TERME2SUBAUXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2SAU_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2SAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2SAU_TERME2SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2SAU_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2SAU_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2SAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2SAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2SAU_TERME2SUBAUXRow
            Get
                Return CType(Me.Rows(index),IT2SAU_TERME2SUBAUXRow)
            End Get
        End Property
        
        Public Event IT2SAU_TERME2SUBAUXRowChanging As IT2SAU_TERME2SUBAUXRowChangeEventHandler
        
        Public Event IT2SAU_TERME2SUBAUXRowChanged As IT2SAU_TERME2SUBAUXRowChangeEventHandler
        
        Public Event IT2SAU_TERME2SUBAUXRowDeleting As IT2SAU_TERME2SUBAUXRowChangeEventHandler
        
        Public Event IT2SAU_TERME2SUBAUXRowDeleted As IT2SAU_TERME2SUBAUXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2SAU_TERME2SUBAUXRow(ByVal row As IT2SAU_TERME2SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2SAU_TERME2SUBAUXRow(ByVal IT2SAU_FIT_CODE_FK_PK As Integer, ByVal IT2SAU_SAU_CODE_FK_PK As Integer) As IT2SAU_TERME2SUBAUXRow
            Dim rowIT2SAU_TERME2SUBAUXRow As IT2SAU_TERME2SUBAUXRow = CType(Me.NewRow,IT2SAU_TERME2SUBAUXRow)
            Dim columnValuesArray() As Object = New Object() {IT2SAU_FIT_CODE_FK_PK, IT2SAU_SAU_CODE_FK_PK}
            rowIT2SAU_TERME2SUBAUXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2SAU_TERME2SUBAUXRow)
            Return rowIT2SAU_TERME2SUBAUXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2SAU_FIT_CODE_FK_PKIT2SAU_SAU_CODE_FK_PK(ByVal IT2SAU_FIT_CODE_FK_PK As Integer, ByVal IT2SAU_SAU_CODE_FK_PK As Integer) As IT2SAU_TERME2SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {IT2SAU_FIT_CODE_FK_PK, IT2SAU_SAU_CODE_FK_PK}),IT2SAU_TERME2SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2SAU_TERME2SUBAUXDataTable = CType(MyBase.Clone,IT2SAU_TERME2SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2SAU_TERME2SUBAUXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2SAU_FIT_CODE_FK_PK = MyBase.Columns("IT2SAU_FIT_CODE_FK_PK")
            Me.columnIT2SAU_SAU_CODE_FK_PK = MyBase.Columns("IT2SAU_SAU_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2SAU_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2SAU_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2SAU_FIT_CODE_FK_PK)
            Me.columnIT2SAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("IT2SAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2SAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2SAU_FIT_CODE_FK_PK, Me.columnIT2SAU_SAU_CODE_FK_PK}, true))
            Me.columnIT2SAU_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2SAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2SAU_TERME2SUBAUXRow() As IT2SAU_TERME2SUBAUXRow
            Return CType(Me.NewRow,IT2SAU_TERME2SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2SAU_TERME2SUBAUXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2SAU_TERME2SUBAUXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2SAU_TERME2SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent IT2SAU_TERME2SUBAUXRowChanged(Me, New IT2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IT2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2SAU_TERME2SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent IT2SAU_TERME2SUBAUXRowChanging(Me, New IT2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IT2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2SAU_TERME2SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2SAU_TERME2SUBAUXRowDeleted(Me, New IT2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IT2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2SAU_TERME2SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2SAU_TERME2SUBAUXRowDeleting(Me, New IT2SAU_TERME2SUBAUXRowChangeEvent(CType(e.Row,IT2SAU_TERME2SUBAUXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2SAU_TERME2SUBAUXRow(ByVal row As IT2SAU_TERME2SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2SAU_TERME2SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2PR_TERME2PRODUITDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2PR_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2PR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2PR_TERME2PRODUIT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2PR_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2PR_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2PR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2PR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2PR_TERME2PRODUITRow
            Get
                Return CType(Me.Rows(index),IT2PR_TERME2PRODUITRow)
            End Get
        End Property
        
        Public Event IT2PR_TERME2PRODUITRowChanging As IT2PR_TERME2PRODUITRowChangeEventHandler
        
        Public Event IT2PR_TERME2PRODUITRowChanged As IT2PR_TERME2PRODUITRowChangeEventHandler
        
        Public Event IT2PR_TERME2PRODUITRowDeleting As IT2PR_TERME2PRODUITRowChangeEventHandler
        
        Public Event IT2PR_TERME2PRODUITRowDeleted As IT2PR_TERME2PRODUITRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2PR_TERME2PRODUITRow(ByVal row As IT2PR_TERME2PRODUITRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2PR_TERME2PRODUITRow(ByVal IT2PR_FIT_CODE_FK_PK As Integer, ByVal IT2PR_PR_CODE_FK_PK As Integer) As IT2PR_TERME2PRODUITRow
            Dim rowIT2PR_TERME2PRODUITRow As IT2PR_TERME2PRODUITRow = CType(Me.NewRow,IT2PR_TERME2PRODUITRow)
            Dim columnValuesArray() As Object = New Object() {IT2PR_FIT_CODE_FK_PK, IT2PR_PR_CODE_FK_PK}
            rowIT2PR_TERME2PRODUITRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2PR_TERME2PRODUITRow)
            Return rowIT2PR_TERME2PRODUITRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2PR_FIT_CODE_FK_PKIT2PR_PR_CODE_FK_PK(ByVal IT2PR_FIT_CODE_FK_PK As Integer, ByVal IT2PR_PR_CODE_FK_PK As Integer) As IT2PR_TERME2PRODUITRow
            Return CType(Me.Rows.Find(New Object() {IT2PR_FIT_CODE_FK_PK, IT2PR_PR_CODE_FK_PK}),IT2PR_TERME2PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2PR_TERME2PRODUITDataTable = CType(MyBase.Clone,IT2PR_TERME2PRODUITDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2PR_TERME2PRODUITDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2PR_FIT_CODE_FK_PK = MyBase.Columns("IT2PR_FIT_CODE_FK_PK")
            Me.columnIT2PR_PR_CODE_FK_PK = MyBase.Columns("IT2PR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2PR_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2PR_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2PR_FIT_CODE_FK_PK)
            Me.columnIT2PR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("IT2PR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2PR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2PR_FIT_CODE_FK_PK, Me.columnIT2PR_PR_CODE_FK_PK}, true))
            Me.columnIT2PR_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2PR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2PR_TERME2PRODUITRow() As IT2PR_TERME2PRODUITRow
            Return CType(Me.NewRow,IT2PR_TERME2PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2PR_TERME2PRODUITRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2PR_TERME2PRODUITRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2PR_TERME2PRODUITRowChangedEvent) Is Nothing) Then
                RaiseEvent IT2PR_TERME2PRODUITRowChanged(Me, New IT2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IT2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2PR_TERME2PRODUITRowChangingEvent) Is Nothing) Then
                RaiseEvent IT2PR_TERME2PRODUITRowChanging(Me, New IT2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IT2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2PR_TERME2PRODUITRowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2PR_TERME2PRODUITRowDeleted(Me, New IT2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IT2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2PR_TERME2PRODUITRowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2PR_TERME2PRODUITRowDeleting(Me, New IT2PR_TERME2PRODUITRowChangeEvent(CType(e.Row,IT2PR_TERME2PRODUITRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2PR_TERME2PRODUITRow(ByVal row As IT2PR_TERME2PRODUITRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2PR_TERME2PRODUITDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IT2SP_TERME2SPECIALITEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnIT2SP_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnIT2SP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IT2SP_TERME2SPECIALITE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2SP_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2SP_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IT2SP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIT2SP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IT2SP_TERME2SPECIALITERow
            Get
                Return CType(Me.Rows(index),IT2SP_TERME2SPECIALITERow)
            End Get
        End Property
        
        Public Event IT2SP_TERME2SPECIALITERowChanging As IT2SP_TERME2SPECIALITERowChangeEventHandler
        
        Public Event IT2SP_TERME2SPECIALITERowChanged As IT2SP_TERME2SPECIALITERowChangeEventHandler
        
        Public Event IT2SP_TERME2SPECIALITERowDeleting As IT2SP_TERME2SPECIALITERowChangeEventHandler
        
        Public Event IT2SP_TERME2SPECIALITERowDeleted As IT2SP_TERME2SPECIALITERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIT2SP_TERME2SPECIALITERow(ByVal row As IT2SP_TERME2SPECIALITERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIT2SP_TERME2SPECIALITERow(ByVal IT2SP_FIT_CODE_FK_PK As Integer, ByVal IT2SP_SP_CODE_FK_PK As Integer) As IT2SP_TERME2SPECIALITERow
            Dim rowIT2SP_TERME2SPECIALITERow As IT2SP_TERME2SPECIALITERow = CType(Me.NewRow,IT2SP_TERME2SPECIALITERow)
            Dim columnValuesArray() As Object = New Object() {IT2SP_FIT_CODE_FK_PK, IT2SP_SP_CODE_FK_PK}
            rowIT2SP_TERME2SPECIALITERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIT2SP_TERME2SPECIALITERow)
            Return rowIT2SP_TERME2SPECIALITERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIT2SP_FIT_CODE_FK_PKIT2SP_SP_CODE_FK_PK(ByVal IT2SP_FIT_CODE_FK_PK As Integer, ByVal IT2SP_SP_CODE_FK_PK As Integer) As IT2SP_TERME2SPECIALITERow
            Return CType(Me.Rows.Find(New Object() {IT2SP_FIT_CODE_FK_PK, IT2SP_SP_CODE_FK_PK}),IT2SP_TERME2SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IT2SP_TERME2SPECIALITEDataTable = CType(MyBase.Clone,IT2SP_TERME2SPECIALITEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IT2SP_TERME2SPECIALITEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIT2SP_FIT_CODE_FK_PK = MyBase.Columns("IT2SP_FIT_CODE_FK_PK")
            Me.columnIT2SP_SP_CODE_FK_PK = MyBase.Columns("IT2SP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIT2SP_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("IT2SP_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2SP_FIT_CODE_FK_PK)
            Me.columnIT2SP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("IT2SP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIT2SP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIT2SP_FIT_CODE_FK_PK, Me.columnIT2SP_SP_CODE_FK_PK}, true))
            Me.columnIT2SP_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnIT2SP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIT2SP_TERME2SPECIALITERow() As IT2SP_TERME2SPECIALITERow
            Return CType(Me.NewRow,IT2SP_TERME2SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IT2SP_TERME2SPECIALITERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IT2SP_TERME2SPECIALITERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IT2SP_TERME2SPECIALITERowChangedEvent) Is Nothing) Then
                RaiseEvent IT2SP_TERME2SPECIALITERowChanged(Me, New IT2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IT2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IT2SP_TERME2SPECIALITERowChangingEvent) Is Nothing) Then
                RaiseEvent IT2SP_TERME2SPECIALITERowChanging(Me, New IT2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IT2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IT2SP_TERME2SPECIALITERowDeletedEvent) Is Nothing) Then
                RaiseEvent IT2SP_TERME2SPECIALITERowDeleted(Me, New IT2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IT2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IT2SP_TERME2SPECIALITERowDeletingEvent) Is Nothing) Then
                RaiseEvent IT2SP_TERME2SPECIALITERowDeleting(Me, New IT2SP_TERME2SPECIALITERowChangeEvent(CType(e.Row,IT2SP_TERME2SPECIALITERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIT2SP_TERME2SPECIALITERow(ByVal row As IT2SP_TERME2SPECIALITERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IT2SP_TERME2SPECIALITEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITNA_INTERACTION_NATUREDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITNA_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITNA_CDF_NAIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITNA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITNA_INTERACTION_NATURE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITNA_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITNA_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITNA_CDF_NAIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITNA_CDF_NAIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITNA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITNA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITNA_INTERACTION_NATURERow
            Get
                Return CType(Me.Rows(index),FITNA_INTERACTION_NATURERow)
            End Get
        End Property
        
        Public Event FITNA_INTERACTION_NATURERowChanging As FITNA_INTERACTION_NATURERowChangeEventHandler
        
        Public Event FITNA_INTERACTION_NATURERowChanged As FITNA_INTERACTION_NATURERowChangeEventHandler
        
        Public Event FITNA_INTERACTION_NATURERowDeleting As FITNA_INTERACTION_NATURERowChangeEventHandler
        
        Public Event FITNA_INTERACTION_NATURERowDeleted As FITNA_INTERACTION_NATURERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITNA_INTERACTION_NATURERow(ByVal row As FITNA_INTERACTION_NATURERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITNA_INTERACTION_NATURERow(ByVal FITNA_FIT_CODE_FK_PK As Integer, ByVal FITNA_CDF_NAIT_CODE_FK_PK As String, ByVal FITNA_NUMORD As Short) As FITNA_INTERACTION_NATURERow
            Dim rowFITNA_INTERACTION_NATURERow As FITNA_INTERACTION_NATURERow = CType(Me.NewRow,FITNA_INTERACTION_NATURERow)
            Dim columnValuesArray() As Object = New Object() {FITNA_FIT_CODE_FK_PK, FITNA_CDF_NAIT_CODE_FK_PK, FITNA_NUMORD}
            rowFITNA_INTERACTION_NATURERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITNA_INTERACTION_NATURERow)
            Return rowFITNA_INTERACTION_NATURERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITNA_FIT_CODE_FK_PKFITNA_CDF_NAIT_CODE_FK_PK(ByVal FITNA_FIT_CODE_FK_PK As Integer, ByVal FITNA_CDF_NAIT_CODE_FK_PK As String) As FITNA_INTERACTION_NATURERow
            Return CType(Me.Rows.Find(New Object() {FITNA_FIT_CODE_FK_PK, FITNA_CDF_NAIT_CODE_FK_PK}),FITNA_INTERACTION_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITNA_INTERACTION_NATUREDataTable = CType(MyBase.Clone,FITNA_INTERACTION_NATUREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITNA_INTERACTION_NATUREDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITNA_FIT_CODE_FK_PK = MyBase.Columns("FITNA_FIT_CODE_FK_PK")
            Me.columnFITNA_CDF_NAIT_CODE_FK_PK = MyBase.Columns("FITNA_CDF_NAIT_CODE_FK_PK")
            Me.columnFITNA_NUMORD = MyBase.Columns("FITNA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITNA_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITNA_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITNA_FIT_CODE_FK_PK)
            Me.columnFITNA_CDF_NAIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITNA_CDF_NAIT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITNA_CDF_NAIT_CODE_FK_PK)
            Me.columnFITNA_NUMORD = New Global.System.Data.DataColumn("FITNA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITNA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITNA_FIT_CODE_FK_PK, Me.columnFITNA_CDF_NAIT_CODE_FK_PK}, true))
            Me.columnFITNA_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITNA_CDF_NAIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITNA_CDF_NAIT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITNA_INTERACTION_NATURERow() As FITNA_INTERACTION_NATURERow
            Return CType(Me.NewRow,FITNA_INTERACTION_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITNA_INTERACTION_NATURERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITNA_INTERACTION_NATURERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITNA_INTERACTION_NATURERowChangedEvent) Is Nothing) Then
                RaiseEvent FITNA_INTERACTION_NATURERowChanged(Me, New FITNA_INTERACTION_NATURERowChangeEvent(CType(e.Row,FITNA_INTERACTION_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITNA_INTERACTION_NATURERowChangingEvent) Is Nothing) Then
                RaiseEvent FITNA_INTERACTION_NATURERowChanging(Me, New FITNA_INTERACTION_NATURERowChangeEvent(CType(e.Row,FITNA_INTERACTION_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITNA_INTERACTION_NATURERowDeletedEvent) Is Nothing) Then
                RaiseEvent FITNA_INTERACTION_NATURERowDeleted(Me, New FITNA_INTERACTION_NATURERowChangeEvent(CType(e.Row,FITNA_INTERACTION_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITNA_INTERACTION_NATURERowDeletingEvent) Is Nothing) Then
                RaiseEvent FITNA_INTERACTION_NATURERowDeleting(Me, New FITNA_INTERACTION_NATURERowChangeEvent(CType(e.Row,FITNA_INTERACTION_NATURERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITNA_INTERACTION_NATURERow(ByVal row As FITNA_INTERACTION_NATURERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITNA_INTERACTION_NATUREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITROF_REF_OFFICIELLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITROF_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITROF_CDF_DOC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITROF_NUM_DOC_PK As Global.System.Data.DataColumn
        
        Private columnFITROF_DATE_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITROF_REF_OFFICIELLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITROF_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITROF_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITROF_CDF_DOC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITROF_CDF_DOC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITROF_NUM_DOC_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITROF_NUM_DOC_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITROF_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITROF_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITROF_REF_OFFICIELLERow
            Get
                Return CType(Me.Rows(index),FITROF_REF_OFFICIELLERow)
            End Get
        End Property
        
        Public Event FITROF_REF_OFFICIELLERowChanging As FITROF_REF_OFFICIELLERowChangeEventHandler
        
        Public Event FITROF_REF_OFFICIELLERowChanged As FITROF_REF_OFFICIELLERowChangeEventHandler
        
        Public Event FITROF_REF_OFFICIELLERowDeleting As FITROF_REF_OFFICIELLERowChangeEventHandler
        
        Public Event FITROF_REF_OFFICIELLERowDeleted As FITROF_REF_OFFICIELLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITROF_REF_OFFICIELLERow(ByVal row As FITROF_REF_OFFICIELLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITROF_REF_OFFICIELLERow(ByVal FITROF_FIT_CODE_FK_PK As Integer, ByVal FITROF_CDF_DOC_CODE_FK_PK As String, ByVal FITROF_NUM_DOC_PK As Short, ByVal FITROF_DATE_PK As Date) As FITROF_REF_OFFICIELLERow
            Dim rowFITROF_REF_OFFICIELLERow As FITROF_REF_OFFICIELLERow = CType(Me.NewRow,FITROF_REF_OFFICIELLERow)
            Dim columnValuesArray() As Object = New Object() {FITROF_FIT_CODE_FK_PK, FITROF_CDF_DOC_CODE_FK_PK, FITROF_NUM_DOC_PK, FITROF_DATE_PK}
            rowFITROF_REF_OFFICIELLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITROF_REF_OFFICIELLERow)
            Return rowFITROF_REF_OFFICIELLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITROF_FIT_CODE_FK_PKFITROF_CDF_DOC_CODE_FK_PKFITROF_NUM_DOC_PKFITROF_DATE_PK(ByVal FITROF_FIT_CODE_FK_PK As Integer, ByVal FITROF_CDF_DOC_CODE_FK_PK As String, ByVal FITROF_NUM_DOC_PK As Short, ByVal FITROF_DATE_PK As Date) As FITROF_REF_OFFICIELLERow
            Return CType(Me.Rows.Find(New Object() {FITROF_FIT_CODE_FK_PK, FITROF_CDF_DOC_CODE_FK_PK, FITROF_NUM_DOC_PK, FITROF_DATE_PK}),FITROF_REF_OFFICIELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITROF_REF_OFFICIELLEDataTable = CType(MyBase.Clone,FITROF_REF_OFFICIELLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITROF_REF_OFFICIELLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITROF_FIT_CODE_FK_PK = MyBase.Columns("FITROF_FIT_CODE_FK_PK")
            Me.columnFITROF_CDF_DOC_CODE_FK_PK = MyBase.Columns("FITROF_CDF_DOC_CODE_FK_PK")
            Me.columnFITROF_NUM_DOC_PK = MyBase.Columns("FITROF_NUM_DOC_PK")
            Me.columnFITROF_DATE_PK = MyBase.Columns("FITROF_DATE_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITROF_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITROF_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITROF_FIT_CODE_FK_PK)
            Me.columnFITROF_CDF_DOC_CODE_FK_PK = New Global.System.Data.DataColumn("FITROF_CDF_DOC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITROF_CDF_DOC_CODE_FK_PK)
            Me.columnFITROF_NUM_DOC_PK = New Global.System.Data.DataColumn("FITROF_NUM_DOC_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITROF_NUM_DOC_PK)
            Me.columnFITROF_DATE_PK = New Global.System.Data.DataColumn("FITROF_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITROF_DATE_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITROF_FIT_CODE_FK_PK, Me.columnFITROF_CDF_DOC_CODE_FK_PK, Me.columnFITROF_NUM_DOC_PK, Me.columnFITROF_DATE_PK}, true))
            Me.columnFITROF_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITROF_CDF_DOC_CODE_FK_PK.AllowDBNull = false
            Me.columnFITROF_CDF_DOC_CODE_FK_PK.MaxLength = 10
            Me.columnFITROF_NUM_DOC_PK.AllowDBNull = false
            Me.columnFITROF_DATE_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITROF_REF_OFFICIELLERow() As FITROF_REF_OFFICIELLERow
            Return CType(Me.NewRow,FITROF_REF_OFFICIELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITROF_REF_OFFICIELLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITROF_REF_OFFICIELLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITROF_REF_OFFICIELLERowChangedEvent) Is Nothing) Then
                RaiseEvent FITROF_REF_OFFICIELLERowChanged(Me, New FITROF_REF_OFFICIELLERowChangeEvent(CType(e.Row,FITROF_REF_OFFICIELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITROF_REF_OFFICIELLERowChangingEvent) Is Nothing) Then
                RaiseEvent FITROF_REF_OFFICIELLERowChanging(Me, New FITROF_REF_OFFICIELLERowChangeEvent(CType(e.Row,FITROF_REF_OFFICIELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITROF_REF_OFFICIELLERowDeletedEvent) Is Nothing) Then
                RaiseEvent FITROF_REF_OFFICIELLERowDeleted(Me, New FITROF_REF_OFFICIELLERowChangeEvent(CType(e.Row,FITROF_REF_OFFICIELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITROF_REF_OFFICIELLERowDeletingEvent) Is Nothing) Then
                RaiseEvent FITROF_REF_OFFICIELLERowDeleting(Me, New FITROF_REF_OFFICIELLERowChangeEvent(CType(e.Row,FITROF_REF_OFFICIELLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITROF_REF_OFFICIELLERow(ByVal row As FITROF_REF_OFFICIELLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITROF_REF_OFFICIELLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITSE_INTERACTION_SENSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITSE_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITSE_CDF_SEIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITSE_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITSE_INTERACTION_SENS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITSE_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITSE_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITSE_CDF_SEIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITSE_CDF_SEIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITSE_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITSE_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITSE_INTERACTION_SENSRow
            Get
                Return CType(Me.Rows(index),FITSE_INTERACTION_SENSRow)
            End Get
        End Property
        
        Public Event FITSE_INTERACTION_SENSRowChanging As FITSE_INTERACTION_SENSRowChangeEventHandler
        
        Public Event FITSE_INTERACTION_SENSRowChanged As FITSE_INTERACTION_SENSRowChangeEventHandler
        
        Public Event FITSE_INTERACTION_SENSRowDeleting As FITSE_INTERACTION_SENSRowChangeEventHandler
        
        Public Event FITSE_INTERACTION_SENSRowDeleted As FITSE_INTERACTION_SENSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITSE_INTERACTION_SENSRow(ByVal row As FITSE_INTERACTION_SENSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITSE_INTERACTION_SENSRow(ByVal FITSE_FIT_CODE_FK_PK As Integer, ByVal FITSE_CDF_SEIT_CODE_FK_PK As String, ByVal FITSE_NUMORD As Short) As FITSE_INTERACTION_SENSRow
            Dim rowFITSE_INTERACTION_SENSRow As FITSE_INTERACTION_SENSRow = CType(Me.NewRow,FITSE_INTERACTION_SENSRow)
            Dim columnValuesArray() As Object = New Object() {FITSE_FIT_CODE_FK_PK, FITSE_CDF_SEIT_CODE_FK_PK, FITSE_NUMORD}
            rowFITSE_INTERACTION_SENSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITSE_INTERACTION_SENSRow)
            Return rowFITSE_INTERACTION_SENSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITSE_FIT_CODE_FK_PKFITSE_CDF_SEIT_CODE_FK_PK(ByVal FITSE_FIT_CODE_FK_PK As Integer, ByVal FITSE_CDF_SEIT_CODE_FK_PK As String) As FITSE_INTERACTION_SENSRow
            Return CType(Me.Rows.Find(New Object() {FITSE_FIT_CODE_FK_PK, FITSE_CDF_SEIT_CODE_FK_PK}),FITSE_INTERACTION_SENSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITSE_INTERACTION_SENSDataTable = CType(MyBase.Clone,FITSE_INTERACTION_SENSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITSE_INTERACTION_SENSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITSE_FIT_CODE_FK_PK = MyBase.Columns("FITSE_FIT_CODE_FK_PK")
            Me.columnFITSE_CDF_SEIT_CODE_FK_PK = MyBase.Columns("FITSE_CDF_SEIT_CODE_FK_PK")
            Me.columnFITSE_NUMORD = MyBase.Columns("FITSE_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITSE_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITSE_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITSE_FIT_CODE_FK_PK)
            Me.columnFITSE_CDF_SEIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITSE_CDF_SEIT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITSE_CDF_SEIT_CODE_FK_PK)
            Me.columnFITSE_NUMORD = New Global.System.Data.DataColumn("FITSE_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITSE_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITSE_FIT_CODE_FK_PK, Me.columnFITSE_CDF_SEIT_CODE_FK_PK}, true))
            Me.columnFITSE_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITSE_CDF_SEIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITSE_CDF_SEIT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITSE_INTERACTION_SENSRow() As FITSE_INTERACTION_SENSRow
            Return CType(Me.NewRow,FITSE_INTERACTION_SENSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITSE_INTERACTION_SENSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITSE_INTERACTION_SENSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITSE_INTERACTION_SENSRowChangedEvent) Is Nothing) Then
                RaiseEvent FITSE_INTERACTION_SENSRowChanged(Me, New FITSE_INTERACTION_SENSRowChangeEvent(CType(e.Row,FITSE_INTERACTION_SENSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITSE_INTERACTION_SENSRowChangingEvent) Is Nothing) Then
                RaiseEvent FITSE_INTERACTION_SENSRowChanging(Me, New FITSE_INTERACTION_SENSRowChangeEvent(CType(e.Row,FITSE_INTERACTION_SENSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITSE_INTERACTION_SENSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FITSE_INTERACTION_SENSRowDeleted(Me, New FITSE_INTERACTION_SENSRowChangeEvent(CType(e.Row,FITSE_INTERACTION_SENSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITSE_INTERACTION_SENSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FITSE_INTERACTION_SENSRowDeleting(Me, New FITSE_INTERACTION_SENSRowChangeEvent(CType(e.Row,FITSE_INTERACTION_SENSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITSE_INTERACTION_SENSRow(ByVal row As FITSE_INTERACTION_SENSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITSE_INTERACTION_SENSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITTY_TYPEINTERACTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITTY_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITTY_CDF_TYPE_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITTY_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITTY_TYPEINTERACTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITTY_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITTY_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITTY_CDF_TYPE_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITTY_CDF_TYPE_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITTY_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITTY_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITTY_TYPEINTERACTIONRow
            Get
                Return CType(Me.Rows(index),FITTY_TYPEINTERACTIONRow)
            End Get
        End Property
        
        Public Event FITTY_TYPEINTERACTIONRowChanging As FITTY_TYPEINTERACTIONRowChangeEventHandler
        
        Public Event FITTY_TYPEINTERACTIONRowChanged As FITTY_TYPEINTERACTIONRowChangeEventHandler
        
        Public Event FITTY_TYPEINTERACTIONRowDeleting As FITTY_TYPEINTERACTIONRowChangeEventHandler
        
        Public Event FITTY_TYPEINTERACTIONRowDeleted As FITTY_TYPEINTERACTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITTY_TYPEINTERACTIONRow(ByVal row As FITTY_TYPEINTERACTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITTY_TYPEINTERACTIONRow(ByVal FITTY_FIT_CODE_FK_PK As Integer, ByVal FITTY_CDF_TYPE_CODE_FK_PK As String, ByVal FITTY_NUMORD As Short) As FITTY_TYPEINTERACTIONRow
            Dim rowFITTY_TYPEINTERACTIONRow As FITTY_TYPEINTERACTIONRow = CType(Me.NewRow,FITTY_TYPEINTERACTIONRow)
            Dim columnValuesArray() As Object = New Object() {FITTY_FIT_CODE_FK_PK, FITTY_CDF_TYPE_CODE_FK_PK, FITTY_NUMORD}
            rowFITTY_TYPEINTERACTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITTY_TYPEINTERACTIONRow)
            Return rowFITTY_TYPEINTERACTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITTY_FIT_CODE_FK_PKFITTY_CDF_TYPE_CODE_FK_PK(ByVal FITTY_FIT_CODE_FK_PK As Integer, ByVal FITTY_CDF_TYPE_CODE_FK_PK As String) As FITTY_TYPEINTERACTIONRow
            Return CType(Me.Rows.Find(New Object() {FITTY_FIT_CODE_FK_PK, FITTY_CDF_TYPE_CODE_FK_PK}),FITTY_TYPEINTERACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITTY_TYPEINTERACTIONDataTable = CType(MyBase.Clone,FITTY_TYPEINTERACTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITTY_TYPEINTERACTIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITTY_FIT_CODE_FK_PK = MyBase.Columns("FITTY_FIT_CODE_FK_PK")
            Me.columnFITTY_CDF_TYPE_CODE_FK_PK = MyBase.Columns("FITTY_CDF_TYPE_CODE_FK_PK")
            Me.columnFITTY_NUMORD = MyBase.Columns("FITTY_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITTY_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITTY_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITTY_FIT_CODE_FK_PK)
            Me.columnFITTY_CDF_TYPE_CODE_FK_PK = New Global.System.Data.DataColumn("FITTY_CDF_TYPE_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITTY_CDF_TYPE_CODE_FK_PK)
            Me.columnFITTY_NUMORD = New Global.System.Data.DataColumn("FITTY_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITTY_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITTY_FIT_CODE_FK_PK, Me.columnFITTY_CDF_TYPE_CODE_FK_PK}, true))
            Me.columnFITTY_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITTY_CDF_TYPE_CODE_FK_PK.AllowDBNull = false
            Me.columnFITTY_CDF_TYPE_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITTY_TYPEINTERACTIONRow() As FITTY_TYPEINTERACTIONRow
            Return CType(Me.NewRow,FITTY_TYPEINTERACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITTY_TYPEINTERACTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITTY_TYPEINTERACTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITTY_TYPEINTERACTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent FITTY_TYPEINTERACTIONRowChanged(Me, New FITTY_TYPEINTERACTIONRowChangeEvent(CType(e.Row,FITTY_TYPEINTERACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITTY_TYPEINTERACTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent FITTY_TYPEINTERACTIONRowChanging(Me, New FITTY_TYPEINTERACTIONRowChangeEvent(CType(e.Row,FITTY_TYPEINTERACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITTY_TYPEINTERACTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent FITTY_TYPEINTERACTIONRowDeleted(Me, New FITTY_TYPEINTERACTIONRowChangeEvent(CType(e.Row,FITTY_TYPEINTERACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITTY_TYPEINTERACTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent FITTY_TYPEINTERACTIONRowDeleting(Me, New FITTY_TYPEINTERACTIONRowChangeEvent(CType(e.Row,FITTY_TYPEINTERACTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITTY_TYPEINTERACTIONRow(ByVal row As FITTY_TYPEINTERACTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITTY_TYPEINTERACTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITVA_NIVEAU_VALIDATIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITVA_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITVA_CDF_VAIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITVA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITVA_NIVEAU_VALIDATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVA_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVA_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVA_CDF_VAIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVA_CDF_VAIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITVA_NIVEAU_VALIDATIONRow
            Get
                Return CType(Me.Rows(index),FITVA_NIVEAU_VALIDATIONRow)
            End Get
        End Property
        
        Public Event FITVA_NIVEAU_VALIDATIONRowChanging As FITVA_NIVEAU_VALIDATIONRowChangeEventHandler
        
        Public Event FITVA_NIVEAU_VALIDATIONRowChanged As FITVA_NIVEAU_VALIDATIONRowChangeEventHandler
        
        Public Event FITVA_NIVEAU_VALIDATIONRowDeleting As FITVA_NIVEAU_VALIDATIONRowChangeEventHandler
        
        Public Event FITVA_NIVEAU_VALIDATIONRowDeleted As FITVA_NIVEAU_VALIDATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITVA_NIVEAU_VALIDATIONRow(ByVal row As FITVA_NIVEAU_VALIDATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITVA_NIVEAU_VALIDATIONRow(ByVal FITVA_FIT_CODE_FK_PK As Integer, ByVal FITVA_CDF_VAIT_CODE_FK_PK As String, ByVal FITVA_NUMORD As Short) As FITVA_NIVEAU_VALIDATIONRow
            Dim rowFITVA_NIVEAU_VALIDATIONRow As FITVA_NIVEAU_VALIDATIONRow = CType(Me.NewRow,FITVA_NIVEAU_VALIDATIONRow)
            Dim columnValuesArray() As Object = New Object() {FITVA_FIT_CODE_FK_PK, FITVA_CDF_VAIT_CODE_FK_PK, FITVA_NUMORD}
            rowFITVA_NIVEAU_VALIDATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITVA_NIVEAU_VALIDATIONRow)
            Return rowFITVA_NIVEAU_VALIDATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITVA_FIT_CODE_FK_PKFITVA_CDF_VAIT_CODE_FK_PK(ByVal FITVA_FIT_CODE_FK_PK As Integer, ByVal FITVA_CDF_VAIT_CODE_FK_PK As String) As FITVA_NIVEAU_VALIDATIONRow
            Return CType(Me.Rows.Find(New Object() {FITVA_FIT_CODE_FK_PK, FITVA_CDF_VAIT_CODE_FK_PK}),FITVA_NIVEAU_VALIDATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITVA_NIVEAU_VALIDATIONDataTable = CType(MyBase.Clone,FITVA_NIVEAU_VALIDATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITVA_NIVEAU_VALIDATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITVA_FIT_CODE_FK_PK = MyBase.Columns("FITVA_FIT_CODE_FK_PK")
            Me.columnFITVA_CDF_VAIT_CODE_FK_PK = MyBase.Columns("FITVA_CDF_VAIT_CODE_FK_PK")
            Me.columnFITVA_NUMORD = MyBase.Columns("FITVA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITVA_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITVA_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVA_FIT_CODE_FK_PK)
            Me.columnFITVA_CDF_VAIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITVA_CDF_VAIT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVA_CDF_VAIT_CODE_FK_PK)
            Me.columnFITVA_NUMORD = New Global.System.Data.DataColumn("FITVA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITVA_FIT_CODE_FK_PK, Me.columnFITVA_CDF_VAIT_CODE_FK_PK}, true))
            Me.columnFITVA_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITVA_CDF_VAIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITVA_CDF_VAIT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITVA_NIVEAU_VALIDATIONRow() As FITVA_NIVEAU_VALIDATIONRow
            Return CType(Me.NewRow,FITVA_NIVEAU_VALIDATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITVA_NIVEAU_VALIDATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITVA_NIVEAU_VALIDATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITVA_NIVEAU_VALIDATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent FITVA_NIVEAU_VALIDATIONRowChanged(Me, New FITVA_NIVEAU_VALIDATIONRowChangeEvent(CType(e.Row,FITVA_NIVEAU_VALIDATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITVA_NIVEAU_VALIDATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent FITVA_NIVEAU_VALIDATIONRowChanging(Me, New FITVA_NIVEAU_VALIDATIONRowChangeEvent(CType(e.Row,FITVA_NIVEAU_VALIDATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITVA_NIVEAU_VALIDATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent FITVA_NIVEAU_VALIDATIONRowDeleted(Me, New FITVA_NIVEAU_VALIDATIONRowChangeEvent(CType(e.Row,FITVA_NIVEAU_VALIDATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITVA_NIVEAU_VALIDATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent FITVA_NIVEAU_VALIDATIONRowDeleting(Me, New FITVA_NIVEAU_VALIDATIONRowChangeEvent(CType(e.Row,FITVA_NIVEAU_VALIDATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITVA_NIVEAU_VALIDATIONRow(ByVal row As FITVA_NIVEAU_VALIDATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITVA_NIVEAU_VALIDATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITVD1_INTERACTION_VOIE_DOSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITVD1_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITVD1_NUMSEQ_PK As Global.System.Data.DataColumn
        
        Private columnFITVD1_CDF_VO_CODE1_FK As Global.System.Data.DataColumn
        
        Private columnFITVD1_CDF_PP_CODE1_FK As Global.System.Data.DataColumn
        
        Private columnFITVD1_DOSE1 As Global.System.Data.DataColumn
        
        Private columnFITVD1_QUALIFICATIF_DOSE1 As Global.System.Data.DataColumn
        
        Private columnFITVD1_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITVD1_INTERACTION_VOIE_DOSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_NUMSEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_NUMSEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_CDF_VO_CODE1_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_CDF_VO_CODE1_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_CDF_PP_CODE1_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_CDF_PP_CODE1_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_DOSE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_DOSE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_QUALIFICATIF_DOSE1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_QUALIFICATIF_DOSE1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD1_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD1_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITVD1_INTERACTION_VOIE_DOSERow
            Get
                Return CType(Me.Rows(index),FITVD1_INTERACTION_VOIE_DOSERow)
            End Get
        End Property
        
        Public Event FITVD1_INTERACTION_VOIE_DOSERowChanging As FITVD1_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        Public Event FITVD1_INTERACTION_VOIE_DOSERowChanged As FITVD1_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        Public Event FITVD1_INTERACTION_VOIE_DOSERowDeleting As FITVD1_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        Public Event FITVD1_INTERACTION_VOIE_DOSERowDeleted As FITVD1_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITVD1_INTERACTION_VOIE_DOSERow(ByVal row As FITVD1_INTERACTION_VOIE_DOSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITVD1_INTERACTION_VOIE_DOSERow(ByVal FITVD1_FIT_CODE_FK_PK As Integer, ByVal FITVD1_NUMSEQ_PK As Short, ByVal FITVD1_CDF_VO_CODE1_FK As String, ByVal FITVD1_CDF_PP_CODE1_FK As String, ByVal FITVD1_DOSE1 As Decimal, ByVal FITVD1_QUALIFICATIF_DOSE1 As String, ByVal FITVD1_NUMORD As Short) As FITVD1_INTERACTION_VOIE_DOSERow
            Dim rowFITVD1_INTERACTION_VOIE_DOSERow As FITVD1_INTERACTION_VOIE_DOSERow = CType(Me.NewRow,FITVD1_INTERACTION_VOIE_DOSERow)
            Dim columnValuesArray() As Object = New Object() {FITVD1_FIT_CODE_FK_PK, FITVD1_NUMSEQ_PK, FITVD1_CDF_VO_CODE1_FK, FITVD1_CDF_PP_CODE1_FK, FITVD1_DOSE1, FITVD1_QUALIFICATIF_DOSE1, FITVD1_NUMORD}
            rowFITVD1_INTERACTION_VOIE_DOSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITVD1_INTERACTION_VOIE_DOSERow)
            Return rowFITVD1_INTERACTION_VOIE_DOSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITVD1_FIT_CODE_FK_PKFITVD1_NUMSEQ_PK(ByVal FITVD1_FIT_CODE_FK_PK As Integer, ByVal FITVD1_NUMSEQ_PK As Short) As FITVD1_INTERACTION_VOIE_DOSERow
            Return CType(Me.Rows.Find(New Object() {FITVD1_FIT_CODE_FK_PK, FITVD1_NUMSEQ_PK}),FITVD1_INTERACTION_VOIE_DOSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITVD1_INTERACTION_VOIE_DOSEDataTable = CType(MyBase.Clone,FITVD1_INTERACTION_VOIE_DOSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITVD1_INTERACTION_VOIE_DOSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITVD1_FIT_CODE_FK_PK = MyBase.Columns("FITVD1_FIT_CODE_FK_PK")
            Me.columnFITVD1_NUMSEQ_PK = MyBase.Columns("FITVD1_NUMSEQ_PK")
            Me.columnFITVD1_CDF_VO_CODE1_FK = MyBase.Columns("FITVD1_CDF_VO_CODE1_FK")
            Me.columnFITVD1_CDF_PP_CODE1_FK = MyBase.Columns("FITVD1_CDF_PP_CODE1_FK")
            Me.columnFITVD1_DOSE1 = MyBase.Columns("FITVD1_DOSE1")
            Me.columnFITVD1_QUALIFICATIF_DOSE1 = MyBase.Columns("FITVD1_QUALIFICATIF_DOSE1")
            Me.columnFITVD1_NUMORD = MyBase.Columns("FITVD1_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITVD1_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITVD1_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_FIT_CODE_FK_PK)
            Me.columnFITVD1_NUMSEQ_PK = New Global.System.Data.DataColumn("FITVD1_NUMSEQ_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_NUMSEQ_PK)
            Me.columnFITVD1_CDF_VO_CODE1_FK = New Global.System.Data.DataColumn("FITVD1_CDF_VO_CODE1_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_CDF_VO_CODE1_FK)
            Me.columnFITVD1_CDF_PP_CODE1_FK = New Global.System.Data.DataColumn("FITVD1_CDF_PP_CODE1_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_CDF_PP_CODE1_FK)
            Me.columnFITVD1_DOSE1 = New Global.System.Data.DataColumn("FITVD1_DOSE1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_DOSE1)
            Me.columnFITVD1_QUALIFICATIF_DOSE1 = New Global.System.Data.DataColumn("FITVD1_QUALIFICATIF_DOSE1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_QUALIFICATIF_DOSE1)
            Me.columnFITVD1_NUMORD = New Global.System.Data.DataColumn("FITVD1_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD1_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITVD1_FIT_CODE_FK_PK, Me.columnFITVD1_NUMSEQ_PK}, true))
            Me.columnFITVD1_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITVD1_NUMSEQ_PK.AllowDBNull = false
            Me.columnFITVD1_CDF_VO_CODE1_FK.MaxLength = 10
            Me.columnFITVD1_CDF_PP_CODE1_FK.MaxLength = 10
            Me.columnFITVD1_QUALIFICATIF_DOSE1.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITVD1_INTERACTION_VOIE_DOSERow() As FITVD1_INTERACTION_VOIE_DOSERow
            Return CType(Me.NewRow,FITVD1_INTERACTION_VOIE_DOSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITVD1_INTERACTION_VOIE_DOSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITVD1_INTERACTION_VOIE_DOSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITVD1_INTERACTION_VOIE_DOSERowChangedEvent) Is Nothing) Then
                RaiseEvent FITVD1_INTERACTION_VOIE_DOSERowChanged(Me, New FITVD1_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD1_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITVD1_INTERACTION_VOIE_DOSERowChangingEvent) Is Nothing) Then
                RaiseEvent FITVD1_INTERACTION_VOIE_DOSERowChanging(Me, New FITVD1_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD1_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITVD1_INTERACTION_VOIE_DOSERowDeletedEvent) Is Nothing) Then
                RaiseEvent FITVD1_INTERACTION_VOIE_DOSERowDeleted(Me, New FITVD1_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD1_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITVD1_INTERACTION_VOIE_DOSERowDeletingEvent) Is Nothing) Then
                RaiseEvent FITVD1_INTERACTION_VOIE_DOSERowDeleting(Me, New FITVD1_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD1_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITVD1_INTERACTION_VOIE_DOSERow(ByVal row As FITVD1_INTERACTION_VOIE_DOSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITVD1_INTERACTION_VOIE_DOSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITVD2_INTERACTION_VOIE_DOSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITVD2_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITVD2_NUMSEQ_PK As Global.System.Data.DataColumn
        
        Private columnFITVD2_CDF_VO_CODE2_FK As Global.System.Data.DataColumn
        
        Private columnFITVD2_CDF_PP_CODE2_FK As Global.System.Data.DataColumn
        
        Private columnFITVD2_DOSE2 As Global.System.Data.DataColumn
        
        Private columnFITVD2_QUALIFICATIF_DOSE2 As Global.System.Data.DataColumn
        
        Private columnFITVD2_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITVD2_INTERACTION_VOIE_DOSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_NUMSEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_NUMSEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_CDF_VO_CODE2_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_CDF_VO_CODE2_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_CDF_PP_CODE2_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_CDF_PP_CODE2_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_DOSE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_DOSE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_QUALIFICATIF_DOSE2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_QUALIFICATIF_DOSE2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITVD2_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITVD2_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITVD2_INTERACTION_VOIE_DOSERow
            Get
                Return CType(Me.Rows(index),FITVD2_INTERACTION_VOIE_DOSERow)
            End Get
        End Property
        
        Public Event FITVD2_INTERACTION_VOIE_DOSERowChanging As FITVD2_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        Public Event FITVD2_INTERACTION_VOIE_DOSERowChanged As FITVD2_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        Public Event FITVD2_INTERACTION_VOIE_DOSERowDeleting As FITVD2_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        Public Event FITVD2_INTERACTION_VOIE_DOSERowDeleted As FITVD2_INTERACTION_VOIE_DOSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITVD2_INTERACTION_VOIE_DOSERow(ByVal row As FITVD2_INTERACTION_VOIE_DOSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITVD2_INTERACTION_VOIE_DOSERow(ByVal FITVD2_FIT_CODE_FK_PK As Integer, ByVal FITVD2_NUMSEQ_PK As Short, ByVal FITVD2_CDF_VO_CODE2_FK As String, ByVal FITVD2_CDF_PP_CODE2_FK As String, ByVal FITVD2_DOSE2 As Decimal, ByVal FITVD2_QUALIFICATIF_DOSE2 As String, ByVal FITVD2_NUMORD As Short) As FITVD2_INTERACTION_VOIE_DOSERow
            Dim rowFITVD2_INTERACTION_VOIE_DOSERow As FITVD2_INTERACTION_VOIE_DOSERow = CType(Me.NewRow,FITVD2_INTERACTION_VOIE_DOSERow)
            Dim columnValuesArray() As Object = New Object() {FITVD2_FIT_CODE_FK_PK, FITVD2_NUMSEQ_PK, FITVD2_CDF_VO_CODE2_FK, FITVD2_CDF_PP_CODE2_FK, FITVD2_DOSE2, FITVD2_QUALIFICATIF_DOSE2, FITVD2_NUMORD}
            rowFITVD2_INTERACTION_VOIE_DOSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITVD2_INTERACTION_VOIE_DOSERow)
            Return rowFITVD2_INTERACTION_VOIE_DOSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITVD2_FIT_CODE_FK_PKFITVD2_NUMSEQ_PK(ByVal FITVD2_FIT_CODE_FK_PK As Integer, ByVal FITVD2_NUMSEQ_PK As Short) As FITVD2_INTERACTION_VOIE_DOSERow
            Return CType(Me.Rows.Find(New Object() {FITVD2_FIT_CODE_FK_PK, FITVD2_NUMSEQ_PK}),FITVD2_INTERACTION_VOIE_DOSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITVD2_INTERACTION_VOIE_DOSEDataTable = CType(MyBase.Clone,FITVD2_INTERACTION_VOIE_DOSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITVD2_INTERACTION_VOIE_DOSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITVD2_FIT_CODE_FK_PK = MyBase.Columns("FITVD2_FIT_CODE_FK_PK")
            Me.columnFITVD2_NUMSEQ_PK = MyBase.Columns("FITVD2_NUMSEQ_PK")
            Me.columnFITVD2_CDF_VO_CODE2_FK = MyBase.Columns("FITVD2_CDF_VO_CODE2_FK")
            Me.columnFITVD2_CDF_PP_CODE2_FK = MyBase.Columns("FITVD2_CDF_PP_CODE2_FK")
            Me.columnFITVD2_DOSE2 = MyBase.Columns("FITVD2_DOSE2")
            Me.columnFITVD2_QUALIFICATIF_DOSE2 = MyBase.Columns("FITVD2_QUALIFICATIF_DOSE2")
            Me.columnFITVD2_NUMORD = MyBase.Columns("FITVD2_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITVD2_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITVD2_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_FIT_CODE_FK_PK)
            Me.columnFITVD2_NUMSEQ_PK = New Global.System.Data.DataColumn("FITVD2_NUMSEQ_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_NUMSEQ_PK)
            Me.columnFITVD2_CDF_VO_CODE2_FK = New Global.System.Data.DataColumn("FITVD2_CDF_VO_CODE2_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_CDF_VO_CODE2_FK)
            Me.columnFITVD2_CDF_PP_CODE2_FK = New Global.System.Data.DataColumn("FITVD2_CDF_PP_CODE2_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_CDF_PP_CODE2_FK)
            Me.columnFITVD2_DOSE2 = New Global.System.Data.DataColumn("FITVD2_DOSE2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_DOSE2)
            Me.columnFITVD2_QUALIFICATIF_DOSE2 = New Global.System.Data.DataColumn("FITVD2_QUALIFICATIF_DOSE2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_QUALIFICATIF_DOSE2)
            Me.columnFITVD2_NUMORD = New Global.System.Data.DataColumn("FITVD2_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITVD2_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITVD2_FIT_CODE_FK_PK, Me.columnFITVD2_NUMSEQ_PK}, true))
            Me.columnFITVD2_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITVD2_NUMSEQ_PK.AllowDBNull = false
            Me.columnFITVD2_CDF_VO_CODE2_FK.MaxLength = 10
            Me.columnFITVD2_CDF_PP_CODE2_FK.MaxLength = 10
            Me.columnFITVD2_QUALIFICATIF_DOSE2.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITVD2_INTERACTION_VOIE_DOSERow() As FITVD2_INTERACTION_VOIE_DOSERow
            Return CType(Me.NewRow,FITVD2_INTERACTION_VOIE_DOSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITVD2_INTERACTION_VOIE_DOSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITVD2_INTERACTION_VOIE_DOSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITVD2_INTERACTION_VOIE_DOSERowChangedEvent) Is Nothing) Then
                RaiseEvent FITVD2_INTERACTION_VOIE_DOSERowChanged(Me, New FITVD2_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD2_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITVD2_INTERACTION_VOIE_DOSERowChangingEvent) Is Nothing) Then
                RaiseEvent FITVD2_INTERACTION_VOIE_DOSERowChanging(Me, New FITVD2_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD2_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITVD2_INTERACTION_VOIE_DOSERowDeletedEvent) Is Nothing) Then
                RaiseEvent FITVD2_INTERACTION_VOIE_DOSERowDeleted(Me, New FITVD2_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD2_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITVD2_INTERACTION_VOIE_DOSERowDeletingEvent) Is Nothing) Then
                RaiseEvent FITVD2_INTERACTION_VOIE_DOSERowDeleting(Me, New FITVD2_INTERACTION_VOIE_DOSERowChangeEvent(CType(e.Row,FITVD2_INTERACTION_VOIE_DOSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITVD2_INTERACTION_VOIE_DOSERow(ByVal row As FITVD2_INTERACTION_VOIE_DOSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITVD2_INTERACTION_VOIE_DOSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITTER_TERRAINFAVORISANTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITTER_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITTER_CDF_TER_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITTER_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITTER_TERRAINFAVORISANT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITTER_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITTER_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITTER_CDF_TER_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITTER_CDF_TER_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITTER_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITTER_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITTER_TERRAINFAVORISANTRow
            Get
                Return CType(Me.Rows(index),FITTER_TERRAINFAVORISANTRow)
            End Get
        End Property
        
        Public Event FITTER_TERRAINFAVORISANTRowChanging As FITTER_TERRAINFAVORISANTRowChangeEventHandler
        
        Public Event FITTER_TERRAINFAVORISANTRowChanged As FITTER_TERRAINFAVORISANTRowChangeEventHandler
        
        Public Event FITTER_TERRAINFAVORISANTRowDeleting As FITTER_TERRAINFAVORISANTRowChangeEventHandler
        
        Public Event FITTER_TERRAINFAVORISANTRowDeleted As FITTER_TERRAINFAVORISANTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITTER_TERRAINFAVORISANTRow(ByVal row As FITTER_TERRAINFAVORISANTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITTER_TERRAINFAVORISANTRow(ByVal FITTER_FIT_CODE_FK_PK As Integer, ByVal FITTER_CDF_TER_CODE_FK_PK As String, ByVal FITTER_NUMORD As Short) As FITTER_TERRAINFAVORISANTRow
            Dim rowFITTER_TERRAINFAVORISANTRow As FITTER_TERRAINFAVORISANTRow = CType(Me.NewRow,FITTER_TERRAINFAVORISANTRow)
            Dim columnValuesArray() As Object = New Object() {FITTER_FIT_CODE_FK_PK, FITTER_CDF_TER_CODE_FK_PK, FITTER_NUMORD}
            rowFITTER_TERRAINFAVORISANTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITTER_TERRAINFAVORISANTRow)
            Return rowFITTER_TERRAINFAVORISANTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITTER_FIT_CODE_FK_PKFITTER_CDF_TER_CODE_FK_PK(ByVal FITTER_FIT_CODE_FK_PK As Integer, ByVal FITTER_CDF_TER_CODE_FK_PK As String) As FITTER_TERRAINFAVORISANTRow
            Return CType(Me.Rows.Find(New Object() {FITTER_FIT_CODE_FK_PK, FITTER_CDF_TER_CODE_FK_PK}),FITTER_TERRAINFAVORISANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITTER_TERRAINFAVORISANTDataTable = CType(MyBase.Clone,FITTER_TERRAINFAVORISANTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITTER_TERRAINFAVORISANTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITTER_FIT_CODE_FK_PK = MyBase.Columns("FITTER_FIT_CODE_FK_PK")
            Me.columnFITTER_CDF_TER_CODE_FK_PK = MyBase.Columns("FITTER_CDF_TER_CODE_FK_PK")
            Me.columnFITTER_NUMORD = MyBase.Columns("FITTER_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITTER_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITTER_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITTER_FIT_CODE_FK_PK)
            Me.columnFITTER_CDF_TER_CODE_FK_PK = New Global.System.Data.DataColumn("FITTER_CDF_TER_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITTER_CDF_TER_CODE_FK_PK)
            Me.columnFITTER_NUMORD = New Global.System.Data.DataColumn("FITTER_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITTER_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITTER_FIT_CODE_FK_PK, Me.columnFITTER_CDF_TER_CODE_FK_PK}, true))
            Me.columnFITTER_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITTER_CDF_TER_CODE_FK_PK.AllowDBNull = false
            Me.columnFITTER_CDF_TER_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITTER_TERRAINFAVORISANTRow() As FITTER_TERRAINFAVORISANTRow
            Return CType(Me.NewRow,FITTER_TERRAINFAVORISANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITTER_TERRAINFAVORISANTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITTER_TERRAINFAVORISANTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITTER_TERRAINFAVORISANTRowChangedEvent) Is Nothing) Then
                RaiseEvent FITTER_TERRAINFAVORISANTRowChanged(Me, New FITTER_TERRAINFAVORISANTRowChangeEvent(CType(e.Row,FITTER_TERRAINFAVORISANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITTER_TERRAINFAVORISANTRowChangingEvent) Is Nothing) Then
                RaiseEvent FITTER_TERRAINFAVORISANTRowChanging(Me, New FITTER_TERRAINFAVORISANTRowChangeEvent(CType(e.Row,FITTER_TERRAINFAVORISANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITTER_TERRAINFAVORISANTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FITTER_TERRAINFAVORISANTRowDeleted(Me, New FITTER_TERRAINFAVORISANTRowChangeEvent(CType(e.Row,FITTER_TERRAINFAVORISANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITTER_TERRAINFAVORISANTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FITTER_TERRAINFAVORISANTRowDeleting(Me, New FITTER_TERRAINFAVORISANTRowChangeEvent(CType(e.Row,FITTER_TERRAINFAVORISANTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITTER_TERRAINFAVORISANTRow(ByVal row As FITTER_TERRAINFAVORISANTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITTER_TERRAINFAVORISANTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITCH_CRITERECHOIXDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITCH_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITCH_CH_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITCH_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITCH_CRITERECHOIX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITCH_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITCH_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITCH_CH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITCH_CH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITCH_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITCH_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITCH_CRITERECHOIXRow
            Get
                Return CType(Me.Rows(index),FITCH_CRITERECHOIXRow)
            End Get
        End Property
        
        Public Event FITCH_CRITERECHOIXRowChanging As FITCH_CRITERECHOIXRowChangeEventHandler
        
        Public Event FITCH_CRITERECHOIXRowChanged As FITCH_CRITERECHOIXRowChangeEventHandler
        
        Public Event FITCH_CRITERECHOIXRowDeleting As FITCH_CRITERECHOIXRowChangeEventHandler
        
        Public Event FITCH_CRITERECHOIXRowDeleted As FITCH_CRITERECHOIXRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITCH_CRITERECHOIXRow(ByVal row As FITCH_CRITERECHOIXRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITCH_CRITERECHOIXRow(ByVal FITCH_FIT_CODE_FK_PK As Integer, ByVal FITCH_CH_CODE_FK_PK As Integer, ByVal FITCH_NUMORD As Short) As FITCH_CRITERECHOIXRow
            Dim rowFITCH_CRITERECHOIXRow As FITCH_CRITERECHOIXRow = CType(Me.NewRow,FITCH_CRITERECHOIXRow)
            Dim columnValuesArray() As Object = New Object() {FITCH_FIT_CODE_FK_PK, FITCH_CH_CODE_FK_PK, FITCH_NUMORD}
            rowFITCH_CRITERECHOIXRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITCH_CRITERECHOIXRow)
            Return rowFITCH_CRITERECHOIXRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITCH_FIT_CODE_FK_PKFITCH_CH_CODE_FK_PK(ByVal FITCH_FIT_CODE_FK_PK As Integer, ByVal FITCH_CH_CODE_FK_PK As Integer) As FITCH_CRITERECHOIXRow
            Return CType(Me.Rows.Find(New Object() {FITCH_FIT_CODE_FK_PK, FITCH_CH_CODE_FK_PK}),FITCH_CRITERECHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITCH_CRITERECHOIXDataTable = CType(MyBase.Clone,FITCH_CRITERECHOIXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITCH_CRITERECHOIXDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITCH_FIT_CODE_FK_PK = MyBase.Columns("FITCH_FIT_CODE_FK_PK")
            Me.columnFITCH_CH_CODE_FK_PK = MyBase.Columns("FITCH_CH_CODE_FK_PK")
            Me.columnFITCH_NUMORD = MyBase.Columns("FITCH_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITCH_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITCH_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITCH_FIT_CODE_FK_PK)
            Me.columnFITCH_CH_CODE_FK_PK = New Global.System.Data.DataColumn("FITCH_CH_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITCH_CH_CODE_FK_PK)
            Me.columnFITCH_NUMORD = New Global.System.Data.DataColumn("FITCH_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITCH_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITCH_FIT_CODE_FK_PK, Me.columnFITCH_CH_CODE_FK_PK}, true))
            Me.columnFITCH_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITCH_CH_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITCH_CRITERECHOIXRow() As FITCH_CRITERECHOIXRow
            Return CType(Me.NewRow,FITCH_CRITERECHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITCH_CRITERECHOIXRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITCH_CRITERECHOIXRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITCH_CRITERECHOIXRowChangedEvent) Is Nothing) Then
                RaiseEvent FITCH_CRITERECHOIXRowChanged(Me, New FITCH_CRITERECHOIXRowChangeEvent(CType(e.Row,FITCH_CRITERECHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITCH_CRITERECHOIXRowChangingEvent) Is Nothing) Then
                RaiseEvent FITCH_CRITERECHOIXRowChanging(Me, New FITCH_CRITERECHOIXRowChangeEvent(CType(e.Row,FITCH_CRITERECHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITCH_CRITERECHOIXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FITCH_CRITERECHOIXRowDeleted(Me, New FITCH_CRITERECHOIXRowChangeEvent(CType(e.Row,FITCH_CRITERECHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITCH_CRITERECHOIXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FITCH_CRITERECHOIXRowDeleting(Me, New FITCH_CRITERECHOIXRowChangeEvent(CType(e.Row,FITCH_CRITERECHOIXRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITCH_CRITERECHOIXRow(ByVal row As FITCH_CRITERECHOIXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITCH_CRITERECHOIXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FITCT_COMMENTAIRE_TERRAINDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFITCT_FIT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITCT_CDF_CT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFITCT_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FITCT_COMMENTAIRE_TERRAIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITCT_FIT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITCT_FIT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITCT_CDF_CT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITCT_CDF_CT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FITCT_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFITCT_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FITCT_COMMENTAIRE_TERRAINRow
            Get
                Return CType(Me.Rows(index),FITCT_COMMENTAIRE_TERRAINRow)
            End Get
        End Property
        
        Public Event FITCT_COMMENTAIRE_TERRAINRowChanging As FITCT_COMMENTAIRE_TERRAINRowChangeEventHandler
        
        Public Event FITCT_COMMENTAIRE_TERRAINRowChanged As FITCT_COMMENTAIRE_TERRAINRowChangeEventHandler
        
        Public Event FITCT_COMMENTAIRE_TERRAINRowDeleting As FITCT_COMMENTAIRE_TERRAINRowChangeEventHandler
        
        Public Event FITCT_COMMENTAIRE_TERRAINRowDeleted As FITCT_COMMENTAIRE_TERRAINRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFITCT_COMMENTAIRE_TERRAINRow(ByVal row As FITCT_COMMENTAIRE_TERRAINRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFITCT_COMMENTAIRE_TERRAINRow(ByVal FITCT_FIT_CODE_FK_PK As Integer, ByVal FITCT_CDF_CT_CODE_FK_PK As String, ByVal FITCT_NUMORD As Short) As FITCT_COMMENTAIRE_TERRAINRow
            Dim rowFITCT_COMMENTAIRE_TERRAINRow As FITCT_COMMENTAIRE_TERRAINRow = CType(Me.NewRow,FITCT_COMMENTAIRE_TERRAINRow)
            Dim columnValuesArray() As Object = New Object() {FITCT_FIT_CODE_FK_PK, FITCT_CDF_CT_CODE_FK_PK, FITCT_NUMORD}
            rowFITCT_COMMENTAIRE_TERRAINRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFITCT_COMMENTAIRE_TERRAINRow)
            Return rowFITCT_COMMENTAIRE_TERRAINRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFITCT_FIT_CODE_FK_PKFITCT_CDF_CT_CODE_FK_PK(ByVal FITCT_FIT_CODE_FK_PK As Integer, ByVal FITCT_CDF_CT_CODE_FK_PK As String) As FITCT_COMMENTAIRE_TERRAINRow
            Return CType(Me.Rows.Find(New Object() {FITCT_FIT_CODE_FK_PK, FITCT_CDF_CT_CODE_FK_PK}),FITCT_COMMENTAIRE_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FITCT_COMMENTAIRE_TERRAINDataTable = CType(MyBase.Clone,FITCT_COMMENTAIRE_TERRAINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FITCT_COMMENTAIRE_TERRAINDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFITCT_FIT_CODE_FK_PK = MyBase.Columns("FITCT_FIT_CODE_FK_PK")
            Me.columnFITCT_CDF_CT_CODE_FK_PK = MyBase.Columns("FITCT_CDF_CT_CODE_FK_PK")
            Me.columnFITCT_NUMORD = MyBase.Columns("FITCT_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFITCT_FIT_CODE_FK_PK = New Global.System.Data.DataColumn("FITCT_FIT_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITCT_FIT_CODE_FK_PK)
            Me.columnFITCT_CDF_CT_CODE_FK_PK = New Global.System.Data.DataColumn("FITCT_CDF_CT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITCT_CDF_CT_CODE_FK_PK)
            Me.columnFITCT_NUMORD = New Global.System.Data.DataColumn("FITCT_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFITCT_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFITCT_FIT_CODE_FK_PK, Me.columnFITCT_CDF_CT_CODE_FK_PK}, true))
            Me.columnFITCT_FIT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITCT_CDF_CT_CODE_FK_PK.AllowDBNull = false
            Me.columnFITCT_CDF_CT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFITCT_COMMENTAIRE_TERRAINRow() As FITCT_COMMENTAIRE_TERRAINRow
            Return CType(Me.NewRow,FITCT_COMMENTAIRE_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FITCT_COMMENTAIRE_TERRAINRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FITCT_COMMENTAIRE_TERRAINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FITCT_COMMENTAIRE_TERRAINRowChangedEvent) Is Nothing) Then
                RaiseEvent FITCT_COMMENTAIRE_TERRAINRowChanged(Me, New FITCT_COMMENTAIRE_TERRAINRowChangeEvent(CType(e.Row,FITCT_COMMENTAIRE_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FITCT_COMMENTAIRE_TERRAINRowChangingEvent) Is Nothing) Then
                RaiseEvent FITCT_COMMENTAIRE_TERRAINRowChanging(Me, New FITCT_COMMENTAIRE_TERRAINRowChangeEvent(CType(e.Row,FITCT_COMMENTAIRE_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FITCT_COMMENTAIRE_TERRAINRowDeletedEvent) Is Nothing) Then
                RaiseEvent FITCT_COMMENTAIRE_TERRAINRowDeleted(Me, New FITCT_COMMENTAIRE_TERRAINRowChangeEvent(CType(e.Row,FITCT_COMMENTAIRE_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FITCT_COMMENTAIRE_TERRAINRowDeletingEvent) Is Nothing) Then
                RaiseEvent FITCT_COMMENTAIRE_TERRAINRowDeleting(Me, New FITCT_COMMENTAIRE_TERRAINRowChangeEvent(CType(e.Row,FITCT_COMMENTAIRE_TERRAINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFITCT_COMMENTAIRE_TERRAINRow(ByVal row As FITCT_COMMENTAIRE_TERRAINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_AnalyseOrdonance = New dsTheriaque_AnalyseOrdonance
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FITCT_COMMENTAIRE_TERRAINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FIT_FICHEINTERACRow
        Inherits Global.System.Data.DataRow
        
        Private tableFIT_FICHEINTERAC As FIT_FICHEINTERACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFIT_FICHEINTERAC = CType(Me.Table,FIT_FICHEINTERACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIT_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFIT_FICHEINTERAC.FIT_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFIT_FICHEINTERAC.FIT_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIT_ORIGINE() As String
            Get
                Return CType(Me(Me.tableFIT_FICHEINTERAC.FIT_ORIGINEColumn),String)
            End Get
            Set
                Me(Me.tableFIT_FICHEINTERAC.FIT_ORIGINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIT_DATECR() As Date
            Get
                Return CType(Me(Me.tableFIT_FICHEINTERAC.FIT_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFIT_FICHEINTERAC.FIT_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIT_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFIT_FICHEINTERAC.FIT_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIT_DATEMJ' dans la table 'FIT_FICHEINTERAC' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFIT_FICHEINTERAC.FIT_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FIT_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFIT_FICHEINTERAC.FIT_TEXTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FIT_TEXTE' dans la table 'FIT_FICHEINTERAC' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableFIT_FICHEINTERAC.FIT_TEXTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIT_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFIT_FICHEINTERAC.FIT_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIT_DATEMJNull()
            Me(Me.tableFIT_FICHEINTERAC.FIT_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFIT_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableFIT_FICHEINTERAC.FIT_TEXTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFIT_TEXTENull()
            Me(Me.tableFIT_FICHEINTERAC.FIT_TEXTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1CC_TERM1COMCLASSERow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1CC_TERM1COMCLASSE As IT1CC_TERM1COMCLASSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1CC_TERM1COMCLASSE = CType(Me.Table,IT1CC_TERM1COMCLASSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CC_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CC_CDF_CC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_CDF_CC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_CDF_CC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CC_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IT1CC_NUMORD' dans la table 'IT1CC_TERM1COMCLASSE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIT1CC_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIT1CC_NUMORDNull()
            Me(Me.tableIT1CC_TERM1COMCLASSE.IT1CC_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1CCH_TERME1CLCHIMRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1CCH_TERME1CLCHIM As IT1CCH_TERME1CLCHIMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1CCH_TERME1CLCHIM = CType(Me.Table,IT1CCH_TERME1CLCHIMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CCH_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1CCH_TERME1CLCHIM.IT1CCH_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1CCH_TERME1CLCHIM.IT1CCH_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIT1CCH_TERME1CLCHIM.IT1CCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIT1CCH_TERME1CLCHIM.IT1CCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1CPH_TERME1CLPHARMTHERRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1CPH_TERME1CLPHARMTHER As IT1CPH_TERME1CLPHARMTHERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1CPH_TERME1CLPHARMTHER = CType(Me.Table,IT1CPH_TERME1CLPHARMTHERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CPH_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1CPH_TERME1CLPHARMTHER.IT1CPH_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1CPH_TERME1CLPHARMTHER.IT1CPH_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1CPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIT1CPH_TERME1CLPHARMTHER.IT1CPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIT1CPH_TERME1CLPHARMTHER.IT1CPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1SAC_TERME1SUBACTIVERow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1SAC_TERME1SUBACTIVE As IT1SAC_TERME1SUBACTIVEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1SAC_TERME1SUBACTIVE = CType(Me.Table,IT1SAC_TERME1SUBACTIVEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1SAC_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1SAC_TERME1SUBACTIVE.IT1SAC_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1SAC_TERME1SUBACTIVE.IT1SAC_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1SAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1SAC_TERME1SUBACTIVE.IT1SAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1SAC_TERME1SUBACTIVE.IT1SAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1SAU_TERME1SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1SAU_TERME1SUBAUX As IT1SAU_TERME1SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1SAU_TERME1SUBAUX = CType(Me.Table,IT1SAU_TERME1SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1SAU_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1SAU_TERME1SUBAUX.IT1SAU_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1SAU_TERME1SUBAUX.IT1SAU_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1SAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1SAU_TERME1SUBAUX.IT1SAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1SAU_TERME1SUBAUX.IT1SAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1PR_TERME1PRODUITRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1PR_TERME1PRODUIT As IT1PR_TERME1PRODUITDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1PR_TERME1PRODUIT = CType(Me.Table,IT1PR_TERME1PRODUITDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1PR_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1PR_TERME1PRODUIT.IT1PR_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1PR_TERME1PRODUIT.IT1PR_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1PR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1PR_TERME1PRODUIT.IT1PR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1PR_TERME1PRODUIT.IT1PR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT1SP_TERME1SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableIT1SP_TERME1SPECIALITE As IT1SP_TERME1SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT1SP_TERME1SPECIALITE = CType(Me.Table,IT1SP_TERME1SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1SP_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1SP_TERME1SPECIALITE.IT1SP_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1SP_TERME1SPECIALITE.IT1SP_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT1SP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT1SP_TERME1SPECIALITE.IT1SP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT1SP_TERME1SPECIALITE.IT1SP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2CPH_TERME2CLPHARMTHERRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2CPH_TERME2CLPHARMTHER As IT2CPH_TERME2CLPHARMTHERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2CPH_TERME2CLPHARMTHER = CType(Me.Table,IT2CPH_TERME2CLPHARMTHERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CPH_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2CPH_TERME2CLPHARMTHER.IT2CPH_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2CPH_TERME2CLPHARMTHER.IT2CPH_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIT2CPH_TERME2CLPHARMTHER.IT2CPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIT2CPH_TERME2CLPHARMTHER.IT2CPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2CCH_TERME2CLCHIMRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2CCH_TERME2CLCHIM As IT2CCH_TERME2CLCHIMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2CCH_TERME2CLCHIM = CType(Me.Table,IT2CCH_TERME2CLCHIMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CCH_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2CCH_TERME2CLCHIM.IT2CCH_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2CCH_TERME2CLCHIM.IT2CCH_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIT2CCH_TERME2CLCHIM.IT2CCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIT2CCH_TERME2CLCHIM.IT2CCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2CC_TERM2COMCLASSERow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2CC_TERM2COMCLASSE As IT2CC_TERM2COMCLASSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2CC_TERM2COMCLASSE = CType(Me.Table,IT2CC_TERM2COMCLASSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CC_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CC_CDF_CC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_CDF_CC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_CDF_CC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2CC_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'IT2CC_NUMORD' dans la table 'IT2CC_TERM2COMCLASSE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIT2CC_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIT2CC_NUMORDNull()
            Me(Me.tableIT2CC_TERM2COMCLASSE.IT2CC_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2SAC_TERME2SUBACTIVERow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2SAC_TERME2SUBACTIVE As IT2SAC_TERME2SUBACTIVEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2SAC_TERME2SUBACTIVE = CType(Me.Table,IT2SAC_TERME2SUBACTIVEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2SAC_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2SAC_TERME2SUBACTIVE.IT2SAC_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2SAC_TERME2SUBACTIVE.IT2SAC_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2SAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2SAC_TERME2SUBACTIVE.IT2SAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2SAC_TERME2SUBACTIVE.IT2SAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2SAU_TERME2SUBAUXRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2SAU_TERME2SUBAUX As IT2SAU_TERME2SUBAUXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2SAU_TERME2SUBAUX = CType(Me.Table,IT2SAU_TERME2SUBAUXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2SAU_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2SAU_TERME2SUBAUX.IT2SAU_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2SAU_TERME2SUBAUX.IT2SAU_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2SAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2SAU_TERME2SUBAUX.IT2SAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2SAU_TERME2SUBAUX.IT2SAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2PR_TERME2PRODUITRow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2PR_TERME2PRODUIT As IT2PR_TERME2PRODUITDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2PR_TERME2PRODUIT = CType(Me.Table,IT2PR_TERME2PRODUITDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2PR_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2PR_TERME2PRODUIT.IT2PR_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2PR_TERME2PRODUIT.IT2PR_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2PR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2PR_TERME2PRODUIT.IT2PR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2PR_TERME2PRODUIT.IT2PR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IT2SP_TERME2SPECIALITERow
        Inherits Global.System.Data.DataRow
        
        Private tableIT2SP_TERME2SPECIALITE As IT2SP_TERME2SPECIALITEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIT2SP_TERME2SPECIALITE = CType(Me.Table,IT2SP_TERME2SPECIALITEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2SP_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2SP_TERME2SPECIALITE.IT2SP_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2SP_TERME2SPECIALITE.IT2SP_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IT2SP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableIT2SP_TERME2SPECIALITE.IT2SP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableIT2SP_TERME2SPECIALITE.IT2SP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITNA_INTERACTION_NATURERow
        Inherits Global.System.Data.DataRow
        
        Private tableFITNA_INTERACTION_NATURE As FITNA_INTERACTION_NATUREDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITNA_INTERACTION_NATURE = CType(Me.Table,FITNA_INTERACTION_NATUREDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITNA_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITNA_CDF_NAIT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_CDF_NAIT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_CDF_NAIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITNA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITNA_NUMORD' dans la table 'FITNA_INTERACTION_NATURE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITNA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITNA_INTERACTION_NATURE.FITNA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITNA_NUMORDNull()
            Me(Me.tableFITNA_INTERACTION_NATURE.FITNA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITROF_REF_OFFICIELLERow
        Inherits Global.System.Data.DataRow
        
        Private tableFITROF_REF_OFFICIELLE As FITROF_REF_OFFICIELLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITROF_REF_OFFICIELLE = CType(Me.Table,FITROF_REF_OFFICIELLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITROF_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITROF_CDF_DOC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_CDF_DOC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_CDF_DOC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITROF_NUM_DOC_PK() As Short
            Get
                Return CType(Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_NUM_DOC_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_NUM_DOC_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITROF_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFITROF_REF_OFFICIELLE.FITROF_DATE_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITSE_INTERACTION_SENSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFITSE_INTERACTION_SENS As FITSE_INTERACTION_SENSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITSE_INTERACTION_SENS = CType(Me.Table,FITSE_INTERACTION_SENSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITSE_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITSE_INTERACTION_SENS.FITSE_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITSE_INTERACTION_SENS.FITSE_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITSE_CDF_SEIT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITSE_INTERACTION_SENS.FITSE_CDF_SEIT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITSE_INTERACTION_SENS.FITSE_CDF_SEIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITSE_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITSE_INTERACTION_SENS.FITSE_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITSE_NUMORD' dans la table 'FITSE_INTERACTION_SENS' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITSE_INTERACTION_SENS.FITSE_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITSE_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITSE_INTERACTION_SENS.FITSE_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITSE_NUMORDNull()
            Me(Me.tableFITSE_INTERACTION_SENS.FITSE_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITTY_TYPEINTERACTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableFITTY_TYPEINTERACTION As FITTY_TYPEINTERACTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITTY_TYPEINTERACTION = CType(Me.Table,FITTY_TYPEINTERACTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITTY_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITTY_TYPEINTERACTION.FITTY_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITTY_TYPEINTERACTION.FITTY_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITTY_CDF_TYPE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITTY_TYPEINTERACTION.FITTY_CDF_TYPE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITTY_TYPEINTERACTION.FITTY_CDF_TYPE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITTY_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITTY_TYPEINTERACTION.FITTY_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITTY_NUMORD' dans la table 'FITTY_TYPEINTERACTION' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITTY_TYPEINTERACTION.FITTY_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITTY_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITTY_TYPEINTERACTION.FITTY_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITTY_NUMORDNull()
            Me(Me.tableFITTY_TYPEINTERACTION.FITTY_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITVA_NIVEAU_VALIDATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableFITVA_NIVEAU_VALIDATION As FITVA_NIVEAU_VALIDATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITVA_NIVEAU_VALIDATION = CType(Me.Table,FITVA_NIVEAU_VALIDATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVA_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVA_CDF_VAIT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_CDF_VAIT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_CDF_VAIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVA_NUMORD' dans la table 'FITVA_NIVEAU_VALIDATION' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVA_NUMORDNull()
            Me(Me.tableFITVA_NIVEAU_VALIDATION.FITVA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITVD1_INTERACTION_VOIE_DOSERow
        Inherits Global.System.Data.DataRow
        
        Private tableFITVD1_INTERACTION_VOIE_DOSE As FITVD1_INTERACTION_VOIE_DOSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITVD1_INTERACTION_VOIE_DOSE = CType(Me.Table,FITVD1_INTERACTION_VOIE_DOSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_NUMSEQ_PK() As Short
            Get
                Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_NUMSEQ_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_CDF_VO_CODE1_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_VO_CODE1_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD1_CDF_VO_CODE1_FK' dans la table 'FITVD1_INTERACT"& _ 
                            "ION_VOIE_DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_VO_CODE1_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_CDF_PP_CODE1_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_PP_CODE1_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD1_CDF_PP_CODE1_FK' dans la table 'FITVD1_INTERACT"& _ 
                            "ION_VOIE_DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_PP_CODE1_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_DOSE1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_DOSE1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD1_DOSE1' dans la table 'FITVD1_INTERACTION_VOIE_D"& _ 
                            "OSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_DOSE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_QUALIFICATIF_DOSE1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_QUALIFICATIF_DOSE1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD1_QUALIFICATIF_DOSE1' dans la table 'FITVD1_INTER"& _ 
                            "ACTION_VOIE_DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_QUALIFICATIF_DOSE1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD1_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD1_NUMORD' dans la table 'FITVD1_INTERACTION_VOIE_"& _ 
                            "DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD1_CDF_VO_CODE1_FKNull() As Boolean
            Return Me.IsNull(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_VO_CODE1_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD1_CDF_VO_CODE1_FKNull()
            Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_VO_CODE1_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD1_CDF_PP_CODE1_FKNull() As Boolean
            Return Me.IsNull(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_PP_CODE1_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD1_CDF_PP_CODE1_FKNull()
            Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_CDF_PP_CODE1_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD1_DOSE1Null() As Boolean
            Return Me.IsNull(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_DOSE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD1_DOSE1Null()
            Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_DOSE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD1_QUALIFICATIF_DOSE1Null() As Boolean
            Return Me.IsNull(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_QUALIFICATIF_DOSE1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD1_QUALIFICATIF_DOSE1Null()
            Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_QUALIFICATIF_DOSE1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD1_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD1_NUMORDNull()
            Me(Me.tableFITVD1_INTERACTION_VOIE_DOSE.FITVD1_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITVD2_INTERACTION_VOIE_DOSERow
        Inherits Global.System.Data.DataRow
        
        Private tableFITVD2_INTERACTION_VOIE_DOSE As FITVD2_INTERACTION_VOIE_DOSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITVD2_INTERACTION_VOIE_DOSE = CType(Me.Table,FITVD2_INTERACTION_VOIE_DOSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_NUMSEQ_PK() As Short
            Get
                Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_NUMSEQ_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_CDF_VO_CODE2_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_VO_CODE2_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD2_CDF_VO_CODE2_FK' dans la table 'FITVD2_INTERACT"& _ 
                            "ION_VOIE_DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_VO_CODE2_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_CDF_PP_CODE2_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_PP_CODE2_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD2_CDF_PP_CODE2_FK' dans la table 'FITVD2_INTERACT"& _ 
                            "ION_VOIE_DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_PP_CODE2_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_DOSE2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_DOSE2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD2_DOSE2' dans la table 'FITVD2_INTERACTION_VOIE_D"& _ 
                            "OSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_DOSE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_QUALIFICATIF_DOSE2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_QUALIFICATIF_DOSE2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD2_QUALIFICATIF_DOSE2' dans la table 'FITVD2_INTER"& _ 
                            "ACTION_VOIE_DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_QUALIFICATIF_DOSE2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITVD2_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITVD2_NUMORD' dans la table 'FITVD2_INTERACTION_VOIE_"& _ 
                            "DOSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD2_CDF_VO_CODE2_FKNull() As Boolean
            Return Me.IsNull(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_VO_CODE2_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD2_CDF_VO_CODE2_FKNull()
            Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_VO_CODE2_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD2_CDF_PP_CODE2_FKNull() As Boolean
            Return Me.IsNull(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_PP_CODE2_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD2_CDF_PP_CODE2_FKNull()
            Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_CDF_PP_CODE2_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD2_DOSE2Null() As Boolean
            Return Me.IsNull(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_DOSE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD2_DOSE2Null()
            Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_DOSE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD2_QUALIFICATIF_DOSE2Null() As Boolean
            Return Me.IsNull(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_QUALIFICATIF_DOSE2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD2_QUALIFICATIF_DOSE2Null()
            Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_QUALIFICATIF_DOSE2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITVD2_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITVD2_NUMORDNull()
            Me(Me.tableFITVD2_INTERACTION_VOIE_DOSE.FITVD2_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITTER_TERRAINFAVORISANTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFITTER_TERRAINFAVORISANT As FITTER_TERRAINFAVORISANTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITTER_TERRAINFAVORISANT = CType(Me.Table,FITTER_TERRAINFAVORISANTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITTER_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITTER_CDF_TER_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_CDF_TER_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_CDF_TER_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITTER_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITTER_NUMORD' dans la table 'FITTER_TERRAINFAVORISANT"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITTER_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITTER_TERRAINFAVORISANT.FITTER_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITTER_NUMORDNull()
            Me(Me.tableFITTER_TERRAINFAVORISANT.FITTER_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITCH_CRITERECHOIXRow
        Inherits Global.System.Data.DataRow
        
        Private tableFITCH_CRITERECHOIX As FITCH_CRITERECHOIXDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITCH_CRITERECHOIX = CType(Me.Table,FITCH_CRITERECHOIXDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITCH_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITCH_CRITERECHOIX.FITCH_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITCH_CRITERECHOIX.FITCH_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITCH_CH_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITCH_CRITERECHOIX.FITCH_CH_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITCH_CRITERECHOIX.FITCH_CH_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITCH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITCH_CRITERECHOIX.FITCH_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITCH_NUMORD' dans la table 'FITCH_CRITERECHOIX' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITCH_CRITERECHOIX.FITCH_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITCH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITCH_CRITERECHOIX.FITCH_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITCH_NUMORDNull()
            Me(Me.tableFITCH_CRITERECHOIX.FITCH_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FITCT_COMMENTAIRE_TERRAINRow
        Inherits Global.System.Data.DataRow
        
        Private tableFITCT_COMMENTAIRE_TERRAIN As FITCT_COMMENTAIRE_TERRAINDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFITCT_COMMENTAIRE_TERRAIN = CType(Me.Table,FITCT_COMMENTAIRE_TERRAINDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITCT_FIT_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_FIT_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_FIT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITCT_CDF_CT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_CDF_CT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_CDF_CT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FITCT_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FITCT_NUMORD' dans la table 'FITCT_COMMENTAIRE_TERRAIN"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFITCT_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFITCT_NUMORDNull()
            Me(Me.tableFITCT_COMMENTAIRE_TERRAIN.FITCT_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FIT_FICHEINTERACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FIT_FICHEINTERACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FIT_FICHEINTERACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FIT_FICHEINTERACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1CC_TERM1COMCLASSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1CC_TERM1COMCLASSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1CC_TERM1COMCLASSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1CC_TERM1COMCLASSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1CCH_TERME1CLCHIMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1CCH_TERME1CLCHIMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1CCH_TERME1CLCHIMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1CCH_TERME1CLCHIMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1CPH_TERME1CLPHARMTHERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1CPH_TERME1CLPHARMTHERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1CPH_TERME1CLPHARMTHERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1CPH_TERME1CLPHARMTHERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1SAC_TERME1SUBACTIVERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1SAC_TERME1SUBACTIVERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1SAC_TERME1SUBACTIVERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1SAC_TERME1SUBACTIVERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1SAU_TERME1SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1SAU_TERME1SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1SAU_TERME1SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1SAU_TERME1SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1PR_TERME1PRODUITRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1PR_TERME1PRODUITRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1PR_TERME1PRODUITRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1PR_TERME1PRODUITRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT1SP_TERME1SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT1SP_TERME1SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT1SP_TERME1SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT1SP_TERME1SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2CPH_TERME2CLPHARMTHERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2CPH_TERME2CLPHARMTHERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2CPH_TERME2CLPHARMTHERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2CPH_TERME2CLPHARMTHERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2CCH_TERME2CLCHIMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2CCH_TERME2CLCHIMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2CCH_TERME2CLCHIMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2CCH_TERME2CLCHIMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2CC_TERM2COMCLASSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2CC_TERM2COMCLASSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2CC_TERM2COMCLASSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2CC_TERM2COMCLASSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2SAC_TERME2SUBACTIVERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2SAC_TERME2SUBACTIVERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2SAC_TERME2SUBACTIVERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2SAC_TERME2SUBACTIVERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2SAU_TERME2SUBAUXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2SAU_TERME2SUBAUXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2SAU_TERME2SUBAUXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2SAU_TERME2SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2PR_TERME2PRODUITRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2PR_TERME2PRODUITRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2PR_TERME2PRODUITRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2PR_TERME2PRODUITRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IT2SP_TERME2SPECIALITERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IT2SP_TERME2SPECIALITERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IT2SP_TERME2SPECIALITERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IT2SP_TERME2SPECIALITERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITNA_INTERACTION_NATURERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITNA_INTERACTION_NATURERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITNA_INTERACTION_NATURERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITNA_INTERACTION_NATURERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITROF_REF_OFFICIELLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITROF_REF_OFFICIELLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITROF_REF_OFFICIELLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITROF_REF_OFFICIELLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITSE_INTERACTION_SENSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITSE_INTERACTION_SENSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITSE_INTERACTION_SENSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITSE_INTERACTION_SENSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITTY_TYPEINTERACTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITTY_TYPEINTERACTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITTY_TYPEINTERACTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITTY_TYPEINTERACTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITVA_NIVEAU_VALIDATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITVA_NIVEAU_VALIDATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITVA_NIVEAU_VALIDATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITVA_NIVEAU_VALIDATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITVD1_INTERACTION_VOIE_DOSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITVD1_INTERACTION_VOIE_DOSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITVD1_INTERACTION_VOIE_DOSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITVD1_INTERACTION_VOIE_DOSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITVD2_INTERACTION_VOIE_DOSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITVD2_INTERACTION_VOIE_DOSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITVD2_INTERACTION_VOIE_DOSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITVD2_INTERACTION_VOIE_DOSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITTER_TERRAINFAVORISANTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITTER_TERRAINFAVORISANTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITTER_TERRAINFAVORISANTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITTER_TERRAINFAVORISANTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITCH_CRITERECHOIXRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITCH_CRITERECHOIXRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITCH_CRITERECHOIXRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITCH_CRITERECHOIXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FITCT_COMMENTAIRE_TERRAINRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FITCT_COMMENTAIRE_TERRAINRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FITCT_COMMENTAIRE_TERRAINRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FITCT_COMMENTAIRE_TERRAINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_AnalyseOrdonanceTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FIT_FICHEINTERACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FIT_FICHEINTERAC"
            tableMapping.ColumnMappings.Add("FIT_CODE_SQ_PK", "FIT_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FIT_ORIGINE", "FIT_ORIGINE")
            tableMapping.ColumnMappings.Add("FIT_DATECR", "FIT_DATECR")
            tableMapping.ColumnMappings.Add("FIT_DATEMJ", "FIT_DATEMJ")
            tableMapping.ColumnMappings.Add("FIT_TEXTE", "FIT_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FIT_FICHEINTERAC] WHERE (([FIT_CODE_SQ_PK] = @Original_F"& _ 
                "IT_CODE_SQ_PK) AND ([FIT_ORIGINE] = @Original_FIT_ORIGINE) AND ([FIT_DATECR] = @"& _ 
                "Original_FIT_DATECR) AND ((@IsNull_FIT_DATEMJ = 1 AND [FIT_DATEMJ] IS NULL) OR ("& _ 
                "[FIT_DATEMJ] = @Original_FIT_DATEMJ)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_ORIGINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIT_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FIT_FICHEINTERAC] ([FIT_CODE_SQ_PK], [FIT_ORIGINE], [FIT"& _ 
                "_DATECR], [FIT_DATEMJ], [FIT_TEXTE]) VALUES (@FIT_CODE_SQ_PK, @FIT_ORIGINE, @FIT"& _ 
                "_DATECR, @FIT_DATEMJ, @FIT_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FIT_CODE_SQ_PK, FIT_ORIGINE, FIT_DATE"& _ 
                "CR, FIT_DATEMJ, FIT_TEXTE FROM THERIAQUE.FIT_FICHEINTERAC WHERE (FIT_CODE_SQ_PK "& _ 
                "= @FIT_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_ORIGINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FIT_FICHEINTERAC] SET [FIT_CODE_SQ_PK] = @FIT_CODE_SQ_PK, [FI"& _ 
                "T_ORIGINE] = @FIT_ORIGINE, [FIT_DATECR] = @FIT_DATECR, [FIT_DATEMJ] = @FIT_DATEM"& _ 
                "J, [FIT_TEXTE] = @FIT_TEXTE WHERE (([FIT_CODE_SQ_PK] = @Original_FIT_CODE_SQ_PK)"& _ 
                " AND ([FIT_ORIGINE] = @Original_FIT_ORIGINE) AND ([FIT_DATECR] = @Original_FIT_D"& _ 
                "ATECR) AND ((@IsNull_FIT_DATEMJ = 1 AND [FIT_DATEMJ] IS NULL) OR ([FIT_DATEMJ] ="& _ 
                " @Original_FIT_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FIT_CODE_SQ_PK, FIT_ORIGINE, FIT_DATECR, FIT_D"& _ 
                "ATEMJ, FIT_TEXTE FROM THERIAQUE.FIT_FICHEINTERAC WHERE (FIT_CODE_SQ_PK = @FIT_CO"& _ 
                "DE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_ORIGINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_ORIGINE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_ORIGINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FIT_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIT_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FIT_CODE_SQ_PK, FIT_ORIGINE, FIT_DATECR, FIT_DATEMJ, FIT_TEXTE FROM THERIA"& _ 
                "QUE.FIT_FICHEINTERAC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FIT_CODE_SQ_PK, FIT_ORIGINE, FIT_DATECR, FIT_DATEMJ, FIT_TEXTE FROM THERIA"& _ 
                "QUE.FIT_FICHEINTERAC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE FIT_CODE_SQ_PK = @FIT_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIT_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FIT_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable = New dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable, ByVal FIT_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIT_CODE_SQ_PK,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal FIT_CODE_SQ_PK As Integer) As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FIT_CODE_SQ_PK,Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable = New dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FIT_FICHEINTERACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FIT_FICHEINTERAC")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FIT_CODE_SQ_PK As Integer, ByVal Original_FIT_ORIGINE As String, ByVal Original_FIT_DATECR As Date, ByVal Original_FIT_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FIT_CODE_SQ_PK,Integer)
            If (Original_FIT_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIT_ORIGINE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FIT_ORIGINE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FIT_DATECR,Date)
            If (Original_FIT_DATEMJ.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FIT_DATEMJ.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FIT_CODE_SQ_PK As Integer, ByVal FIT_ORIGINE As String, ByVal FIT_DATECR As Date, ByVal FIT_DATEMJ As Global.System.Nullable(Of Date), ByVal FIT_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FIT_CODE_SQ_PK,Integer)
            If (FIT_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIT_ORIGINE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FIT_ORIGINE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FIT_DATECR,Date)
            If (FIT_DATEMJ.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FIT_DATEMJ.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FIT_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FIT_TEXTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FIT_CODE_SQ_PK As Integer, ByVal FIT_ORIGINE As String, ByVal FIT_DATECR As Date, ByVal FIT_DATEMJ As Global.System.Nullable(Of Date), ByVal FIT_TEXTE As String, ByVal Original_FIT_CODE_SQ_PK As Integer, ByVal Original_FIT_ORIGINE As String, ByVal Original_FIT_DATECR As Date, ByVal Original_FIT_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FIT_CODE_SQ_PK,Integer)
            If (FIT_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIT_ORIGINE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FIT_ORIGINE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FIT_DATECR,Date)
            If (FIT_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FIT_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (FIT_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FIT_TEXTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FIT_CODE_SQ_PK,Integer)
            If (Original_FIT_ORIGINE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIT_ORIGINE")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FIT_ORIGINE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FIT_DATECR,Date)
            If (Original_FIT_DATEMJ.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FIT_DATEMJ.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FIT_ORIGINE As String, ByVal FIT_DATECR As Date, ByVal FIT_DATEMJ As Global.System.Nullable(Of Date), ByVal FIT_TEXTE As String, ByVal Original_FIT_CODE_SQ_PK As Integer, ByVal Original_FIT_ORIGINE As String, ByVal Original_FIT_DATECR As Date, ByVal Original_FIT_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FIT_CODE_SQ_PK, FIT_ORIGINE, FIT_DATECR, FIT_DATEMJ, FIT_TEXTE, Original_FIT_CODE_SQ_PK, Original_FIT_ORIGINE, Original_FIT_DATECR, Original_FIT_DATEMJ)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT1CC_TERM1COMCLASSETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1CC_TERM1COMCLASSE"
            tableMapping.ColumnMappings.Add("IT1CC_FIT_CODE_FK_PK", "IT1CC_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1CC_CDF_CC_CODE_FK_PK", "IT1CC_CDF_CC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1CC_NUMORD", "IT1CC_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1CC_TERM1COMCLASSE] WHERE (([IT1CC_FIT_CODE_FK_PK] = @"& _ 
                "Original_IT1CC_FIT_CODE_FK_PK) AND ([IT1CC_CDF_CC_CODE_FK_PK] = @Original_IT1CC_"& _ 
                "CDF_CC_CODE_FK_PK) AND ((@IsNull_IT1CC_NUMORD = 1 AND [IT1CC_NUMORD] IS NULL) OR"& _ 
                " ([IT1CC_NUMORD] = @Original_IT1CC_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IT1CC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1CC_TERM1COMCLASSE] ([IT1CC_FIT_CODE_FK_PK], [IT1CC_CD"& _ 
                "F_CC_CODE_FK_PK], [IT1CC_NUMORD]) VALUES (@IT1CC_FIT_CODE_FK_PK, @IT1CC_CDF_CC_C"& _ 
                "ODE_FK_PK, @IT1CC_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT1CC_FIT_CODE_FK_PK, IT1CC_CDF_CC_CODE_FK_PK"& _ 
                ", IT1CC_NUMORD FROM THERIAQUE.IT1CC_TERM1COMCLASSE WHERE (IT1CC_CDF_CC_CODE_FK_P"& _ 
                "K = @IT1CC_CDF_CC_CODE_FK_PK) AND (IT1CC_FIT_CODE_FK_PK = @IT1CC_FIT_CODE_FK_PK)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1CC_TERM1COMCLASSE] SET [IT1CC_FIT_CODE_FK_PK] = @IT1CC_FIT"& _ 
                "_CODE_FK_PK, [IT1CC_CDF_CC_CODE_FK_PK] = @IT1CC_CDF_CC_CODE_FK_PK, [IT1CC_NUMORD"& _ 
                "] = @IT1CC_NUMORD WHERE (([IT1CC_FIT_CODE_FK_PK] = @Original_IT1CC_FIT_CODE_FK_P"& _ 
                "K) AND ([IT1CC_CDF_CC_CODE_FK_PK] = @Original_IT1CC_CDF_CC_CODE_FK_PK) AND ((@Is"& _ 
                "Null_IT1CC_NUMORD = 1 AND [IT1CC_NUMORD] IS NULL) OR ([IT1CC_NUMORD] = @Original"& _ 
                "_IT1CC_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT1CC_FIT_CODE_FK_PK, IT1CC_CDF_CC_CODE_FK_PK, IT1CC_N"& _ 
                "UMORD FROM THERIAQUE.IT1CC_TERM1COMCLASSE WHERE (IT1CC_CDF_CC_CODE_FK_PK = @IT1C"& _ 
                "C_CDF_CC_CODE_FK_PK) AND (IT1CC_FIT_CODE_FK_PK = @IT1CC_FIT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IT1CC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1CC_FIT_CODE_FK_PK, IT1CC_CDF_CC_CODE_FK_PK, IT1CC_NUMORD FROM THERIAQUE" & _
                ".IT1CC_TERM1COMCLASSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1CC_FIT_CODE_FK_PK, IT1CC_CDF_CC_CODE_FK_PK, IT1CC_NUMORD FROM THERIAQUE" & _
                ".IT1CC_TERM1COMCLASSE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1CC_FIT_CODE_FK_PK = @IT1CC_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable = New dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable, ByVal IT1CC_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1CC_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1CC_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1CC_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable = New dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CC_TERM1COMCLASSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1CC_TERM1COMCLASSE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1CC_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CC_CDF_CC_CODE_FK_PK As String, ByVal Original_IT1CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1CC_FIT_CODE_FK_PK, Integer)
            If (Original_IT1CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT1CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (Original_IT1CC_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IT1CC_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1CC_FIT_CODE_FK_PK As Integer, ByVal IT1CC_CDF_CC_CODE_FK_PK As String, ByVal IT1CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1CC_FIT_CODE_FK_PK, Integer)
            If (IT1CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT1CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (IT1CC_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IT1CC_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1CC_FIT_CODE_FK_PK As Integer, ByVal IT1CC_CDF_CC_CODE_FK_PK As String, ByVal IT1CC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_IT1CC_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CC_CDF_CC_CODE_FK_PK As String, ByVal Original_IT1CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1CC_FIT_CODE_FK_PK, Integer)
            If (IT1CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT1CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (IT1CC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IT1CC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1CC_FIT_CODE_FK_PK, Integer)
            If (Original_IT1CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT1CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IT1CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (Original_IT1CC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IT1CC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1CC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_IT1CC_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CC_CDF_CC_CODE_FK_PK As String, ByVal Original_IT1CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_IT1CC_FIT_CODE_FK_PK, Original_IT1CC_CDF_CC_CODE_FK_PK, IT1CC_NUMORD, Original_IT1CC_FIT_CODE_FK_PK, Original_IT1CC_CDF_CC_CODE_FK_PK, Original_IT1CC_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT1CCH_TERME1CLCHIMTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1CCH_TERME1CLCHIM"
            tableMapping.ColumnMappings.Add("IT1CCH_FIT_CODE_FK_PK", "IT1CCH_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1CCH_CCH_CODE_FK_PK", "IT1CCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1CCH_TERME1CLCHIM] WHERE (([IT1CCH_FIT_CODE_FK_PK] = @" & _
                "Original_IT1CCH_FIT_CODE_FK_PK) AND ([IT1CCH_CCH_CODE_FK_PK] = @Original_IT1CCH_" & _
                "CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1CCH_TERME1CLCHIM] ([IT1CCH_FIT_CODE_FK_PK], [IT1CCH_C" & _
                "CH_CODE_FK_PK]) VALUES (@IT1CCH_FIT_CODE_FK_PK, @IT1CCH_CCH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " IT1CCH_FIT_CODE_FK_PK, IT1CCH_CCH_CODE_FK_PK FROM THERIAQUE.IT1CCH_TERME1CLCHIM" & _
                " WHERE (IT1CCH_CCH_CODE_FK_PK = @IT1CCH_CCH_CODE_FK_PK) AND (IT1CCH_FIT_CODE_FK_" & _
                "PK = @IT1CCH_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1CCH_TERME1CLCHIM] SET [IT1CCH_FIT_CODE_FK_PK] = @IT1CCH_FI" & _
                "T_CODE_FK_PK, [IT1CCH_CCH_CODE_FK_PK] = @IT1CCH_CCH_CODE_FK_PK WHERE (([IT1CCH_F" & _
                "IT_CODE_FK_PK] = @Original_IT1CCH_FIT_CODE_FK_PK) AND ([IT1CCH_CCH_CODE_FK_PK] =" & _
                " @Original_IT1CCH_CCH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT1CCH_FIT_CODE_FK_PK, IT1CCH_CCH_CO" & _
                "DE_FK_PK FROM THERIAQUE.IT1CCH_TERME1CLCHIM WHERE (IT1CCH_CCH_CODE_FK_PK = @IT1C" & _
                "CH_CCH_CODE_FK_PK) AND (IT1CCH_FIT_CODE_FK_PK = @IT1CCH_FIT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1CCH_FIT_CODE_FK_PK, IT1CCH_CCH_CODE_FK_PK FROM THERIAQUE.IT1CCH_TERME1C" & _
                "LCHIM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1CCH_FIT_CODE_FK_PK, IT1CCH_CCH_CODE_FK_PK FROM THERIAQUE.IT1CCH_TERME1C" & _
                "LCHIM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1CCH_FIT_CODE_FK_PK = @IT1CCH_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable = New dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable, ByVal IT1CCH_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1CCH_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1CCH_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1CCH_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable = New dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CCH_TERME1CLCHIMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1CCH_TERME1CLCHIM")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1CCH_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1CCH_FIT_CODE_FK_PK, Integer)
            If (Original_IT1CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT1CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1CCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1CCH_FIT_CODE_FK_PK As Integer, ByVal IT1CCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1CCH_FIT_CODE_FK_PK, Integer)
            If (IT1CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT1CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1CCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1CCH_FIT_CODE_FK_PK As Integer, ByVal IT1CCH_CCH_CODE_FK_PK As String, ByVal Original_IT1CCH_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1CCH_FIT_CODE_FK_PK, Integer)
            If (IT1CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT1CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1CCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT1CCH_FIT_CODE_FK_PK, Integer)
            If (Original_IT1CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT1CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1CCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT1CCH_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_IT1CCH_FIT_CODE_FK_PK, Original_IT1CCH_CCH_CODE_FK_PK, Original_IT1CCH_FIT_CODE_FK_PK, Original_IT1CCH_CCH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT1CPH_TERME1CLPHARMTHERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1CPH_TERME1CLPHARMTHER"
            tableMapping.ColumnMappings.Add("IT1CPH_FIT_CODE_FK_PK", "IT1CPH_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1CPH_CPH_CODE_FK_PK", "IT1CPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1CPH_TERME1CLPHARMTHER] WHERE (([IT1CPH_FIT_CODE_FK_PK"& _ 
                "] = @Original_IT1CPH_FIT_CODE_FK_PK) AND ([IT1CPH_CPH_CODE_FK_PK] = @Original_IT"& _ 
                "1CPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1CPH_TERME1CLPHARMTHER] ([IT1CPH_FIT_CODE_FK_PK], [IT1"& _ 
                "CPH_CPH_CODE_FK_PK]) VALUES (@IT1CPH_FIT_CODE_FK_PK, @IT1CPH_CPH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT IT1CPH_FIT_CODE_FK_PK, IT1CPH_CPH_CODE_FK_PK FROM THERIAQUE.IT1CPH_TERME1C"& _ 
                "LPHARMTHER WHERE (IT1CPH_CPH_CODE_FK_PK = @IT1CPH_CPH_CODE_FK_PK) AND (IT1CPH_FI"& _ 
                "T_CODE_FK_PK = @IT1CPH_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1CPH_TERME1CLPHARMTHER] SET [IT1CPH_FIT_CODE_FK_PK] = @IT1C"& _ 
                "PH_FIT_CODE_FK_PK, [IT1CPH_CPH_CODE_FK_PK] = @IT1CPH_CPH_CODE_FK_PK WHERE (([IT1"& _ 
                "CPH_FIT_CODE_FK_PK] = @Original_IT1CPH_FIT_CODE_FK_PK) AND ([IT1CPH_CPH_CODE_FK_"& _ 
                "PK] = @Original_IT1CPH_CPH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT1CPH_FIT_CODE_FK_PK, IT1CPH_C"& _ 
                "PH_CODE_FK_PK FROM THERIAQUE.IT1CPH_TERME1CLPHARMTHER WHERE (IT1CPH_CPH_CODE_FK_"& _ 
                "PK = @IT1CPH_CPH_CODE_FK_PK) AND (IT1CPH_FIT_CODE_FK_PK = @IT1CPH_FIT_CODE_FK_PK"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1CPH_FIT_CODE_FK_PK, IT1CPH_CPH_CODE_FK_PK FROM THERIAQUE.IT1CPH_TERME1C" & _
                "LPHARMTHER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1CPH_FIT_CODE_FK_PK, IT1CPH_CPH_CODE_FK_PK FROM THERIAQUE.IT1CPH_TERME1C" & _
                "LPHARMTHER" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1CPH_FIT_CODE_FK_PK = @IT1CPH_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable = New dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable, ByVal IT1CPH_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1CPH_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1CPH_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1CPH_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable = New dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1CPH_TERME1CLPHARMTHERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1CPH_TERME1CLPHARMTHER")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1CPH_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1CPH_FIT_CODE_FK_PK, Integer)
            If (Original_IT1CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT1CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1CPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1CPH_FIT_CODE_FK_PK As Integer, ByVal IT1CPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1CPH_FIT_CODE_FK_PK, Integer)
            If (IT1CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT1CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1CPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1CPH_FIT_CODE_FK_PK As Integer, ByVal IT1CPH_CPH_CODE_FK_PK As String, ByVal Original_IT1CPH_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1CPH_FIT_CODE_FK_PK, Integer)
            If (IT1CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT1CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1CPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT1CPH_FIT_CODE_FK_PK, Integer)
            If (Original_IT1CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT1CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1CPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT1CPH_FIT_CODE_FK_PK As Integer, ByVal Original_IT1CPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_IT1CPH_FIT_CODE_FK_PK, Original_IT1CPH_CPH_CODE_FK_PK, Original_IT1CPH_FIT_CODE_FK_PK, Original_IT1CPH_CPH_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT1SAC_TERME1SUBACTIVETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1SAC_TERME1SUBACTIVE"
            tableMapping.ColumnMappings.Add("IT1SAC_FIT_CODE_FK_PK", "IT1SAC_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1SAC_SAC_CODE_FK_PK", "IT1SAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1SAC_TERME1SUBACTIVE] WHERE (([IT1SAC_FIT_CODE_FK_PK] " & _
                "= @Original_IT1SAC_FIT_CODE_FK_PK) AND ([IT1SAC_SAC_CODE_FK_PK] = @Original_IT1S" & _
                "AC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1SAC_TERME1SUBACTIVE] ([IT1SAC_FIT_CODE_FK_PK], [IT1SA" & _
                "C_SAC_CODE_FK_PK]) VALUES (@IT1SAC_FIT_CODE_FK_PK, @IT1SAC_SAC_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SEL" & _
                "ECT IT1SAC_FIT_CODE_FK_PK, IT1SAC_SAC_CODE_FK_PK FROM THERIAQUE.IT1SAC_TERME1SUB" & _
                "ACTIVE WHERE (IT1SAC_FIT_CODE_FK_PK = @IT1SAC_FIT_CODE_FK_PK) AND (IT1SAC_SAC_CO" & _
                "DE_FK_PK = @IT1SAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1SAC_TERME1SUBACTIVE] SET [IT1SAC_FIT_CODE_FK_PK] = @IT1SAC" & _
                "_FIT_CODE_FK_PK, [IT1SAC_SAC_CODE_FK_PK] = @IT1SAC_SAC_CODE_FK_PK WHERE (([IT1SA" & _
                "C_FIT_CODE_FK_PK] = @Original_IT1SAC_FIT_CODE_FK_PK) AND ([IT1SAC_SAC_CODE_FK_PK" & _
                "] = @Original_IT1SAC_SAC_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT1SAC_FIT_CODE_FK_PK, IT1SAC_SAC" & _
                "_CODE_FK_PK FROM THERIAQUE.IT1SAC_TERME1SUBACTIVE WHERE (IT1SAC_FIT_CODE_FK_PK =" & _
                " @IT1SAC_FIT_CODE_FK_PK) AND (IT1SAC_SAC_CODE_FK_PK = @IT1SAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1SAC_FIT_CODE_FK_PK, IT1SAC_SAC_CODE_FK_PK FROM THERIAQUE.IT1SAC_TERME1S" & _
                "UBACTIVE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1SAC_FIT_CODE_FK_PK, IT1SAC_SAC_CODE_FK_PK FROM THERIAQUE.IT1SAC_TERME1S" & _
                "UBACTIVE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1SAC_FIT_CODE_FK_PK = @IT1SAC_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable = New dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable, ByVal IT1SAC_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1SAC_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1SAC_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1SAC_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable = New dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SAC_TERME1SUBACTIVEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1SAC_TERME1SUBACTIVE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1SAC_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1SAC_FIT_CODE_FK_PK As Integer, ByVal IT1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1SAC_FIT_CODE_FK_PK As Integer, ByVal IT1SAC_SAC_CODE_FK_PK As Integer, ByVal Original_IT1SAC_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1SAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT1SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT1SAC_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT1SAC_FIT_CODE_FK_PK, Original_IT1SAC_SAC_CODE_FK_PK, Original_IT1SAC_FIT_CODE_FK_PK, Original_IT1SAC_SAC_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT1SAU_TERME1SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1SAU_TERME1SUBAUX"
            tableMapping.ColumnMappings.Add("IT1SAU_FIT_CODE_FK_PK", "IT1SAU_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1SAU_SAU_CODE_FK_PK", "IT1SAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1SAU_TERME1SUBAUX] WHERE (([IT1SAU_FIT_CODE_FK_PK] = @"& _ 
                "Original_IT1SAU_FIT_CODE_FK_PK) AND ([IT1SAU_SAU_CODE_FK_PK] = @Original_IT1SAU_"& _ 
                "SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1SAU_TERME1SUBAUX] ([IT1SAU_FIT_CODE_FK_PK], [IT1SAU_S"& _ 
                "AU_CODE_FK_PK]) VALUES (@IT1SAU_FIT_CODE_FK_PK, @IT1SAU_SAU_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " IT1SAU_FIT_CODE_FK_PK, IT1SAU_SAU_CODE_FK_PK FROM THERIAQUE.IT1SAU_TERME1SUBAUX"& _ 
                " WHERE (IT1SAU_FIT_CODE_FK_PK = @IT1SAU_FIT_CODE_FK_PK) AND (IT1SAU_SAU_CODE_FK_"& _ 
                "PK = @IT1SAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1SAU_TERME1SUBAUX] SET [IT1SAU_FIT_CODE_FK_PK] = @IT1SAU_FI"& _ 
                "T_CODE_FK_PK, [IT1SAU_SAU_CODE_FK_PK] = @IT1SAU_SAU_CODE_FK_PK WHERE (([IT1SAU_F"& _ 
                "IT_CODE_FK_PK] = @Original_IT1SAU_FIT_CODE_FK_PK) AND ([IT1SAU_SAU_CODE_FK_PK] ="& _ 
                " @Original_IT1SAU_SAU_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT1SAU_FIT_CODE_FK_PK, IT1SAU_SAU_CO"& _ 
                "DE_FK_PK FROM THERIAQUE.IT1SAU_TERME1SUBAUX WHERE (IT1SAU_FIT_CODE_FK_PK = @IT1S"& _ 
                "AU_FIT_CODE_FK_PK) AND (IT1SAU_SAU_CODE_FK_PK = @IT1SAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1SAU_FIT_CODE_FK_PK, IT1SAU_SAU_CODE_FK_PK FROM THERIAQUE.IT1SAU_TERME1S" & _
                "UBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1SAU_FIT_CODE_FK_PK, IT1SAU_SAU_CODE_FK_PK FROM THERIAQUE.IT1SAU_TERME1S" & _
                "UBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1SAU_FIT_CODE_FK_PK = @IT1SAU_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable, ByVal IT1SAU_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1SAU_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1SAU_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1SAU_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SAU_TERME1SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1SAU_TERME1SUBAUX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1SAU_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1SAU_FIT_CODE_FK_PK As Integer, ByVal IT1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1SAU_FIT_CODE_FK_PK As Integer, ByVal IT1SAU_SAU_CODE_FK_PK As Integer, ByVal Original_IT1SAU_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1SAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT1SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT1SAU_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SAU_SAU_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT1SAU_FIT_CODE_FK_PK, Original_IT1SAU_SAU_CODE_FK_PK, Original_IT1SAU_FIT_CODE_FK_PK, Original_IT1SAU_SAU_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT1PR_TERME1PRODUITTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1PR_TERME1PRODUIT"
            tableMapping.ColumnMappings.Add("IT1PR_FIT_CODE_FK_PK", "IT1PR_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1PR_PR_CODE_FK_PK", "IT1PR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1PR_TERME1PRODUIT] WHERE (([IT1PR_FIT_CODE_FK_PK] = @O" & _
                "riginal_IT1PR_FIT_CODE_FK_PK) AND ([IT1PR_PR_CODE_FK_PK] = @Original_IT1PR_PR_CO" & _
                "DE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1PR_TERME1PRODUIT] ([IT1PR_FIT_CODE_FK_PK], [IT1PR_PR_" & _
                "CODE_FK_PK]) VALUES (@IT1PR_FIT_CODE_FK_PK, @IT1PR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT1PR" & _
                "_FIT_CODE_FK_PK, IT1PR_PR_CODE_FK_PK FROM THERIAQUE.IT1PR_TERME1PRODUIT WHERE (I" & _
                "T1PR_FIT_CODE_FK_PK = @IT1PR_FIT_CODE_FK_PK) AND (IT1PR_PR_CODE_FK_PK = @IT1PR_P" & _
                "R_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1PR_TERME1PRODUIT] SET [IT1PR_FIT_CODE_FK_PK] = @IT1PR_FIT_" & _
                "CODE_FK_PK, [IT1PR_PR_CODE_FK_PK] = @IT1PR_PR_CODE_FK_PK WHERE (([IT1PR_FIT_CODE" & _
                "_FK_PK] = @Original_IT1PR_FIT_CODE_FK_PK) AND ([IT1PR_PR_CODE_FK_PK] = @Original" & _
                "_IT1PR_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT1PR_FIT_CODE_FK_PK, IT1PR_PR_CODE_FK_PK FROM T" & _
                "HERIAQUE.IT1PR_TERME1PRODUIT WHERE (IT1PR_FIT_CODE_FK_PK = @IT1PR_FIT_CODE_FK_PK" & _
                ") AND (IT1PR_PR_CODE_FK_PK = @IT1PR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1PR_FIT_CODE_FK_PK, IT1PR_PR_CODE_FK_PK FROM THERIAQUE.IT1PR_TERME1PRODU" & _
                "IT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1PR_FIT_CODE_FK_PK, IT1PR_PR_CODE_FK_PK FROM THERIAQUE.IT1PR_TERME1PRODU" & _
                "IT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1PR_FIT_CODE_FK_PK = @IT1PR_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable = New dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable, ByVal IT1PR_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1PR_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1PR_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1PR_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable = New dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1PR_TERME1PRODUITDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1PR_TERME1PRODUIT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1PR_FIT_CODE_FK_PK As Integer, ByVal Original_IT1PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1PR_FIT_CODE_FK_PK As Integer, ByVal IT1PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1PR_FIT_CODE_FK_PK As Integer, ByVal IT1PR_PR_CODE_FK_PK As Integer, ByVal Original_IT1PR_FIT_CODE_FK_PK As Integer, ByVal Original_IT1PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1PR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT1PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT1PR_FIT_CODE_FK_PK As Integer, ByVal Original_IT1PR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT1PR_FIT_CODE_FK_PK, Original_IT1PR_PR_CODE_FK_PK, Original_IT1PR_FIT_CODE_FK_PK, Original_IT1PR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT1SP_TERME1SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT1SP_TERME1SPECIALITE"
            tableMapping.ColumnMappings.Add("IT1SP_FIT_CODE_FK_PK", "IT1SP_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT1SP_SP_CODE_FK_PK", "IT1SP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT1SP_TERME1SPECIALITE] WHERE (([IT1SP_FIT_CODE_FK_PK] ="& _ 
                " @Original_IT1SP_FIT_CODE_FK_PK) AND ([IT1SP_SP_CODE_FK_PK] = @Original_IT1SP_SP"& _ 
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT1SP_TERME1SPECIALITE] ([IT1SP_FIT_CODE_FK_PK], [IT1SP_"& _ 
                "SP_CODE_FK_PK]) VALUES (@IT1SP_FIT_CODE_FK_PK, @IT1SP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT"& _ 
                "1SP_FIT_CODE_FK_PK, IT1SP_SP_CODE_FK_PK FROM THERIAQUE.IT1SP_TERME1SPECIALITE WH"& _ 
                "ERE (IT1SP_FIT_CODE_FK_PK = @IT1SP_FIT_CODE_FK_PK) AND (IT1SP_SP_CODE_FK_PK = @I"& _ 
                "T1SP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT1SP_TERME1SPECIALITE] SET [IT1SP_FIT_CODE_FK_PK] = @IT1SP_F"& _ 
                "IT_CODE_FK_PK, [IT1SP_SP_CODE_FK_PK] = @IT1SP_SP_CODE_FK_PK WHERE (([IT1SP_FIT_C"& _ 
                "ODE_FK_PK] = @Original_IT1SP_FIT_CODE_FK_PK) AND ([IT1SP_SP_CODE_FK_PK] = @Origi"& _ 
                "nal_IT1SP_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT1SP_FIT_CODE_FK_PK, IT1SP_SP_CODE_FK_PK FRO"& _ 
                "M THERIAQUE.IT1SP_TERME1SPECIALITE WHERE (IT1SP_FIT_CODE_FK_PK = @IT1SP_FIT_CODE"& _ 
                "_FK_PK) AND (IT1SP_SP_CODE_FK_PK = @IT1SP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT1SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT1SP_FIT_CODE_FK_PK, IT1SP_SP_CODE_FK_PK FROM THERIAQUE.IT1SP_TERME1SPECI" & _
                "ALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT1SP_FIT_CODE_FK_PK, IT1SP_SP_CODE_FK_PK FROM THERIAQUE.IT1SP_TERME1SPECI" & _
                "ALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT1SP_FIT_CODE_FK_PK = @IT1SP_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT1SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT1SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable, ByVal IT1SP_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1SP_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT1SP_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT1SP_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT1SP_TERME1SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT1SP_TERME1SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT1SP_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT1SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT1SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT1SP_FIT_CODE_FK_PK As Integer, ByVal IT1SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT1SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT1SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT1SP_FIT_CODE_FK_PK As Integer, ByVal IT1SP_SP_CODE_FK_PK As Integer, ByVal Original_IT1SP_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT1SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT1SP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT1SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT1SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT1SP_FIT_CODE_FK_PK As Integer, ByVal Original_IT1SP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT1SP_FIT_CODE_FK_PK, Original_IT1SP_SP_CODE_FK_PK, Original_IT1SP_FIT_CODE_FK_PK, Original_IT1SP_SP_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT2CPH_TERME2CLPHARMTHERTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2CPH_TERME2CLPHARMTHER"
            tableMapping.ColumnMappings.Add("IT2CPH_FIT_CODE_FK_PK", "IT2CPH_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2CPH_CPH_CODE_FK_PK", "IT2CPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2CPH_TERME2CLPHARMTHER] WHERE (([IT2CPH_FIT_CODE_FK_PK" & _
                "] = @Original_IT2CPH_FIT_CODE_FK_PK) AND ([IT2CPH_CPH_CODE_FK_PK] = @Original_IT" & _
                "2CPH_CPH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2CPH_TERME2CLPHARMTHER] ([IT2CPH_FIT_CODE_FK_PK], [IT2" & _
                "CPH_CPH_CODE_FK_PK]) VALUES (@IT2CPH_FIT_CODE_FK_PK, @IT2CPH_CPH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S" & _
                "ELECT IT2CPH_FIT_CODE_FK_PK, IT2CPH_CPH_CODE_FK_PK FROM THERIAQUE.IT2CPH_TERME2C" & _
                "LPHARMTHER WHERE (IT2CPH_CPH_CODE_FK_PK = @IT2CPH_CPH_CODE_FK_PK) AND (IT2CPH_FI" & _
                "T_CODE_FK_PK = @IT2CPH_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2CPH_TERME2CLPHARMTHER] SET [IT2CPH_FIT_CODE_FK_PK] = @IT2C" & _
                "PH_FIT_CODE_FK_PK, [IT2CPH_CPH_CODE_FK_PK] = @IT2CPH_CPH_CODE_FK_PK WHERE (([IT2" & _
                "CPH_FIT_CODE_FK_PK] = @Original_IT2CPH_FIT_CODE_FK_PK) AND ([IT2CPH_CPH_CODE_FK_" & _
                "PK] = @Original_IT2CPH_CPH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT2CPH_FIT_CODE_FK_PK, IT2CPH_C" & _
                "PH_CODE_FK_PK FROM THERIAQUE.IT2CPH_TERME2CLPHARMTHER WHERE (IT2CPH_CPH_CODE_FK_" & _
                "PK = @IT2CPH_CPH_CODE_FK_PK) AND (IT2CPH_FIT_CODE_FK_PK = @IT2CPH_FIT_CODE_FK_PK" & _
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2CPH_FIT_CODE_FK_PK, IT2CPH_CPH_CODE_FK_PK FROM THERIAQUE.IT2CPH_TERME2C" & _
                "LPHARMTHER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2CPH_FIT_CODE_FK_PK, IT2CPH_CPH_CODE_FK_PK FROM THERIAQUE.IT2CPH_TERME2C" & _
                "LPHARMTHER" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2CPH_FIT_CODE_FK_PK = @IT2CPH_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CPH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CPH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable = New dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable, ByVal IT2CPH_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2CPH_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2CPH_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2CPH_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable = New dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CPH_TERME2CLPHARMTHERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2CPH_TERME2CLPHARMTHER")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2CPH_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2CPH_FIT_CODE_FK_PK, Integer)
            If (Original_IT2CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT2CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2CPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2CPH_FIT_CODE_FK_PK As Integer, ByVal IT2CPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2CPH_FIT_CODE_FK_PK, Integer)
            If (IT2CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT2CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2CPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2CPH_FIT_CODE_FK_PK As Integer, ByVal IT2CPH_CPH_CODE_FK_PK As String, ByVal Original_IT2CPH_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2CPH_FIT_CODE_FK_PK, Integer)
            If (IT2CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT2CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2CPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT2CPH_FIT_CODE_FK_PK, Integer)
            If (Original_IT2CPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT2CPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2CPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT2CPH_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_IT2CPH_FIT_CODE_FK_PK, Original_IT2CPH_CPH_CODE_FK_PK, Original_IT2CPH_FIT_CODE_FK_PK, Original_IT2CPH_CPH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT2CCH_TERME2CLCHIMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2CCH_TERME2CLCHIM"
            tableMapping.ColumnMappings.Add("IT2CCH_FIT_CODE_FK_PK", "IT2CCH_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2CCH_CCH_CODE_FK_PK", "IT2CCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2CCH_TERME2CLCHIM] WHERE (([IT2CCH_FIT_CODE_FK_PK] = @"& _ 
                "Original_IT2CCH_FIT_CODE_FK_PK) AND ([IT2CCH_CCH_CODE_FK_PK] = @Original_IT2CCH_"& _ 
                "CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2CCH_TERME2CLCHIM] ([IT2CCH_FIT_CODE_FK_PK], [IT2CCH_C"& _ 
                "CH_CODE_FK_PK]) VALUES (@IT2CCH_FIT_CODE_FK_PK, @IT2CCH_CCH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " IT2CCH_FIT_CODE_FK_PK, IT2CCH_CCH_CODE_FK_PK FROM THERIAQUE.IT2CCH_TERME2CLCHIM"& _ 
                " WHERE (IT2CCH_CCH_CODE_FK_PK = @IT2CCH_CCH_CODE_FK_PK) AND (IT2CCH_FIT_CODE_FK_"& _ 
                "PK = @IT2CCH_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2CCH_TERME2CLCHIM] SET [IT2CCH_FIT_CODE_FK_PK] = @IT2CCH_FI"& _ 
                "T_CODE_FK_PK, [IT2CCH_CCH_CODE_FK_PK] = @IT2CCH_CCH_CODE_FK_PK WHERE (([IT2CCH_F"& _ 
                "IT_CODE_FK_PK] = @Original_IT2CCH_FIT_CODE_FK_PK) AND ([IT2CCH_CCH_CODE_FK_PK] ="& _ 
                " @Original_IT2CCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT2CCH_FIT_CODE_FK_PK, IT2CCH_CCH_CO"& _ 
                "DE_FK_PK FROM THERIAQUE.IT2CCH_TERME2CLCHIM WHERE (IT2CCH_CCH_CODE_FK_PK = @IT2C"& _ 
                "CH_CCH_CODE_FK_PK) AND (IT2CCH_FIT_CODE_FK_PK = @IT2CCH_FIT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2CCH_FIT_CODE_FK_PK, IT2CCH_CCH_CODE_FK_PK FROM THERIAQUE.IT2CCH_TERME2C" & _
                "LCHIM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2CCH_FIT_CODE_FK_PK, IT2CCH_CCH_CODE_FK_PK FROM THERIAQUE.IT2CCH_TERME2C" & _
                "LCHIM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2CCH_FIT_CODE_FK_PK = @IT2CCH_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable = New dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable, ByVal IT2CCH_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2CCH_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2CCH_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2CCH_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable = New dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CCH_TERME2CLCHIMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2CCH_TERME2CLCHIM")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2CCH_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2CCH_FIT_CODE_FK_PK, Integer)
            If (Original_IT2CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT2CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2CCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2CCH_FIT_CODE_FK_PK As Integer, ByVal IT2CCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2CCH_FIT_CODE_FK_PK, Integer)
            If (IT2CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT2CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2CCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2CCH_FIT_CODE_FK_PK As Integer, ByVal IT2CCH_CCH_CODE_FK_PK As String, ByVal Original_IT2CCH_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2CCH_FIT_CODE_FK_PK, Integer)
            If (IT2CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT2CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2CCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT2CCH_FIT_CODE_FK_PK, Integer)
            If (Original_IT2CCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT2CCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2CCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT2CCH_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_IT2CCH_FIT_CODE_FK_PK, Original_IT2CCH_CCH_CODE_FK_PK, Original_IT2CCH_FIT_CODE_FK_PK, Original_IT2CCH_CCH_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT2CC_TERM2COMCLASSETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2CC_TERM2COMCLASSE"
            tableMapping.ColumnMappings.Add("IT2CC_FIT_CODE_FK_PK", "IT2CC_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2CC_CDF_CC_CODE_FK_PK", "IT2CC_CDF_CC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2CC_NUMORD", "IT2CC_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2CC_TERM2COMCLASSE] WHERE (([IT2CC_FIT_CODE_FK_PK] = @" & _
                "Original_IT2CC_FIT_CODE_FK_PK) AND ([IT2CC_CDF_CC_CODE_FK_PK] = @Original_IT2CC_" & _
                "CDF_CC_CODE_FK_PK) AND ((@IsNull_IT2CC_NUMORD = 1 AND [IT2CC_NUMORD] IS NULL) OR" & _
                " ([IT2CC_NUMORD] = @Original_IT2CC_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IT2CC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2CC_TERM2COMCLASSE] ([IT2CC_FIT_CODE_FK_PK], [IT2CC_CD" & _
                "F_CC_CODE_FK_PK], [IT2CC_NUMORD]) VALUES (@IT2CC_FIT_CODE_FK_PK, @IT2CC_CDF_CC_C" & _
                "ODE_FK_PK, @IT2CC_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT2CC_FIT_CODE_FK_PK, IT2CC_CDF_CC_CODE_FK_PK" & _
                ", IT2CC_NUMORD FROM THERIAQUE.IT2CC_TERM2COMCLASSE WHERE (IT2CC_CDF_CC_CODE_FK_P" & _
                "K = @IT2CC_CDF_CC_CODE_FK_PK) AND (IT2CC_FIT_CODE_FK_PK = @IT2CC_FIT_CODE_FK_PK)" & _
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2CC_TERM2COMCLASSE] SET [IT2CC_FIT_CODE_FK_PK] = @IT2CC_FIT" & _
                "_CODE_FK_PK, [IT2CC_CDF_CC_CODE_FK_PK] = @IT2CC_CDF_CC_CODE_FK_PK, [IT2CC_NUMORD" & _
                "] = @IT2CC_NUMORD WHERE (([IT2CC_FIT_CODE_FK_PK] = @Original_IT2CC_FIT_CODE_FK_P" & _
                "K) AND ([IT2CC_CDF_CC_CODE_FK_PK] = @Original_IT2CC_CDF_CC_CODE_FK_PK) AND ((@Is" & _
                "Null_IT2CC_NUMORD = 1 AND [IT2CC_NUMORD] IS NULL) OR ([IT2CC_NUMORD] = @Original" & _
                "_IT2CC_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT2CC_FIT_CODE_FK_PK, IT2CC_CDF_CC_CODE_FK_PK, IT2CC_N" & _
                "UMORD FROM THERIAQUE.IT2CC_TERM2COMCLASSE WHERE (IT2CC_CDF_CC_CODE_FK_PK = @IT2C" & _
                "C_CDF_CC_CODE_FK_PK) AND (IT2CC_FIT_CODE_FK_PK = @IT2CC_FIT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_CDF_CC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IT2CC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2CC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2CC_FIT_CODE_FK_PK, IT2CC_CDF_CC_CODE_FK_PK, IT2CC_NUMORD FROM THERIAQUE" & _
                ".IT2CC_TERM2COMCLASSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2CC_FIT_CODE_FK_PK, IT2CC_CDF_CC_CODE_FK_PK, IT2CC_NUMORD FROM THERIAQUE" & _
                ".IT2CC_TERM2COMCLASSE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2CC_FIT_CODE_FK_PK = @IT2CC_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2CC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2CC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable = New dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable, ByVal IT2CC_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2CC_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2CC_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2CC_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable = New dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2CC_TERM2COMCLASSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2CC_TERM2COMCLASSE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2CC_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CC_CDF_CC_CODE_FK_PK As String, ByVal Original_IT2CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2CC_FIT_CODE_FK_PK, Integer)
            If (Original_IT2CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT2CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (Original_IT2CC_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IT2CC_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2CC_FIT_CODE_FK_PK As Integer, ByVal IT2CC_CDF_CC_CODE_FK_PK As String, ByVal IT2CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2CC_FIT_CODE_FK_PK, Integer)
            If (IT2CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT2CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (IT2CC_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IT2CC_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2CC_FIT_CODE_FK_PK As Integer, ByVal IT2CC_CDF_CC_CODE_FK_PK As String, ByVal IT2CC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_IT2CC_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CC_CDF_CC_CODE_FK_PK As String, ByVal Original_IT2CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2CC_FIT_CODE_FK_PK, Integer)
            If (IT2CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IT2CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (IT2CC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IT2CC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2CC_FIT_CODE_FK_PK, Integer)
            If (Original_IT2CC_CDF_CC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IT2CC_CDF_CC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IT2CC_CDF_CC_CODE_FK_PK, String)
            End If
            If (Original_IT2CC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IT2CC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2CC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_IT2CC_FIT_CODE_FK_PK As Integer, ByVal Original_IT2CC_CDF_CC_CODE_FK_PK As String, ByVal Original_IT2CC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_IT2CC_FIT_CODE_FK_PK, Original_IT2CC_CDF_CC_CODE_FK_PK, IT2CC_NUMORD, Original_IT2CC_FIT_CODE_FK_PK, Original_IT2CC_CDF_CC_CODE_FK_PK, Original_IT2CC_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT2SAC_TERME2SUBACTIVETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2SAC_TERME2SUBACTIVE"
            tableMapping.ColumnMappings.Add("IT2SAC_FIT_CODE_FK_PK", "IT2SAC_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2SAC_SAC_CODE_FK_PK", "IT2SAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2SAC_TERME2SUBACTIVE] WHERE (([IT2SAC_FIT_CODE_FK_PK] "& _ 
                "= @Original_IT2SAC_FIT_CODE_FK_PK) AND ([IT2SAC_SAC_CODE_FK_PK] = @Original_IT2S"& _ 
                "AC_SAC_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2SAC_TERME2SUBACTIVE] ([IT2SAC_FIT_CODE_FK_PK], [IT2SA"& _ 
                "C_SAC_CODE_FK_PK]) VALUES (@IT2SAC_FIT_CODE_FK_PK, @IT2SAC_SAC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT IT2SAC_FIT_CODE_FK_PK, IT2SAC_SAC_CODE_FK_PK FROM THERIAQUE.IT2SAC_TERME2SUB"& _ 
                "ACTIVE WHERE (IT2SAC_FIT_CODE_FK_PK = @IT2SAC_FIT_CODE_FK_PK) AND (IT2SAC_SAC_CO"& _ 
                "DE_FK_PK = @IT2SAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2SAC_TERME2SUBACTIVE] SET [IT2SAC_FIT_CODE_FK_PK] = @IT2SAC"& _ 
                "_FIT_CODE_FK_PK, [IT2SAC_SAC_CODE_FK_PK] = @IT2SAC_SAC_CODE_FK_PK WHERE (([IT2SA"& _ 
                "C_FIT_CODE_FK_PK] = @Original_IT2SAC_FIT_CODE_FK_PK) AND ([IT2SAC_SAC_CODE_FK_PK"& _ 
                "] = @Original_IT2SAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT2SAC_FIT_CODE_FK_PK, IT2SAC_SAC"& _ 
                "_CODE_FK_PK FROM THERIAQUE.IT2SAC_TERME2SUBACTIVE WHERE (IT2SAC_FIT_CODE_FK_PK ="& _ 
                " @IT2SAC_FIT_CODE_FK_PK) AND (IT2SAC_SAC_CODE_FK_PK = @IT2SAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2SAC_FIT_CODE_FK_PK, IT2SAC_SAC_CODE_FK_PK FROM THERIAQUE.IT2SAC_TERME2S" & _
                "UBACTIVE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2SAC_FIT_CODE_FK_PK, IT2SAC_SAC_CODE_FK_PK FROM THERIAQUE.IT2SAC_TERME2S" & _
                "UBACTIVE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2SAC_FIT_CODE_FK_PK = @IT2SAC_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAC_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAC_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable = New dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable, ByVal IT2SAC_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2SAC_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2SAC_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2SAC_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable = New dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SAC_TERME2SUBACTIVEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2SAC_TERME2SUBACTIVE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2SAC_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2SAC_FIT_CODE_FK_PK As Integer, ByVal IT2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2SAC_FIT_CODE_FK_PK As Integer, ByVal IT2SAC_SAC_CODE_FK_PK As Integer, ByVal Original_IT2SAC_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2SAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT2SAC_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2SAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT2SAC_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT2SAC_FIT_CODE_FK_PK, Original_IT2SAC_SAC_CODE_FK_PK, Original_IT2SAC_FIT_CODE_FK_PK, Original_IT2SAC_SAC_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT2SAU_TERME2SUBAUXTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2SAU_TERME2SUBAUX"
            tableMapping.ColumnMappings.Add("IT2SAU_FIT_CODE_FK_PK", "IT2SAU_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2SAU_SAU_CODE_FK_PK", "IT2SAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2SAU_TERME2SUBAUX] WHERE (([IT2SAU_FIT_CODE_FK_PK] = @" & _
                "Original_IT2SAU_FIT_CODE_FK_PK) AND ([IT2SAU_SAU_CODE_FK_PK] = @Original_IT2SAU_" & _
                "SAU_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2SAU_TERME2SUBAUX] ([IT2SAU_FIT_CODE_FK_PK], [IT2SAU_S" & _
                "AU_CODE_FK_PK]) VALUES (@IT2SAU_FIT_CODE_FK_PK, @IT2SAU_SAU_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" & _
                " IT2SAU_FIT_CODE_FK_PK, IT2SAU_SAU_CODE_FK_PK FROM THERIAQUE.IT2SAU_TERME2SUBAUX" & _
                " WHERE (IT2SAU_FIT_CODE_FK_PK = @IT2SAU_FIT_CODE_FK_PK) AND (IT2SAU_SAU_CODE_FK_" & _
                "PK = @IT2SAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2SAU_TERME2SUBAUX] SET [IT2SAU_FIT_CODE_FK_PK] = @IT2SAU_FI" & _
                "T_CODE_FK_PK, [IT2SAU_SAU_CODE_FK_PK] = @IT2SAU_SAU_CODE_FK_PK WHERE (([IT2SAU_F" & _
                "IT_CODE_FK_PK] = @Original_IT2SAU_FIT_CODE_FK_PK) AND ([IT2SAU_SAU_CODE_FK_PK] =" & _
                " @Original_IT2SAU_SAU_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT2SAU_FIT_CODE_FK_PK, IT2SAU_SAU_CO" & _
                "DE_FK_PK FROM THERIAQUE.IT2SAU_TERME2SUBAUX WHERE (IT2SAU_FIT_CODE_FK_PK = @IT2S" & _
                "AU_FIT_CODE_FK_PK) AND (IT2SAU_SAU_CODE_FK_PK = @IT2SAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2SAU_FIT_CODE_FK_PK, IT2SAU_SAU_CODE_FK_PK FROM THERIAQUE.IT2SAU_TERME2S" & _
                "UBAUX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2SAU_FIT_CODE_FK_PK, IT2SAU_SAU_CODE_FK_PK FROM THERIAQUE.IT2SAU_TERME2S" & _
                "UBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2SAU_FIT_CODE_FK_PK = @IT2SAU_FIT_CODE_FK_PK" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SAU_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SAU_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable, ByVal IT2SAU_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2SAU_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2SAU_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2SAU_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable = New dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SAU_TERME2SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2SAU_TERME2SUBAUX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2SAU_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2SAU_FIT_CODE_FK_PK As Integer, ByVal IT2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2SAU_FIT_CODE_FK_PK As Integer, ByVal IT2SAU_SAU_CODE_FK_PK As Integer, ByVal Original_IT2SAU_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2SAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT2SAU_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2SAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT2SAU_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SAU_SAU_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT2SAU_FIT_CODE_FK_PK, Original_IT2SAU_SAU_CODE_FK_PK, Original_IT2SAU_FIT_CODE_FK_PK, Original_IT2SAU_SAU_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IT2PR_TERME2PRODUITTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2PR_TERME2PRODUIT"
            tableMapping.ColumnMappings.Add("IT2PR_FIT_CODE_FK_PK", "IT2PR_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2PR_PR_CODE_FK_PK", "IT2PR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2PR_TERME2PRODUIT] WHERE (([IT2PR_FIT_CODE_FK_PK] = @O"& _ 
                "riginal_IT2PR_FIT_CODE_FK_PK) AND ([IT2PR_PR_CODE_FK_PK] = @Original_IT2PR_PR_CO"& _ 
                "DE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2PR_TERME2PRODUIT] ([IT2PR_FIT_CODE_FK_PK], [IT2PR_PR_"& _ 
                "CODE_FK_PK]) VALUES (@IT2PR_FIT_CODE_FK_PK, @IT2PR_PR_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT2PR"& _ 
                "_FIT_CODE_FK_PK, IT2PR_PR_CODE_FK_PK FROM THERIAQUE.IT2PR_TERME2PRODUIT WHERE (I"& _ 
                "T2PR_FIT_CODE_FK_PK = @IT2PR_FIT_CODE_FK_PK) AND (IT2PR_PR_CODE_FK_PK = @IT2PR_P"& _ 
                "R_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2PR_TERME2PRODUIT] SET [IT2PR_FIT_CODE_FK_PK] = @IT2PR_FIT_"& _ 
                "CODE_FK_PK, [IT2PR_PR_CODE_FK_PK] = @IT2PR_PR_CODE_FK_PK WHERE (([IT2PR_FIT_CODE"& _ 
                "_FK_PK] = @Original_IT2PR_FIT_CODE_FK_PK) AND ([IT2PR_PR_CODE_FK_PK] = @Original"& _ 
                "_IT2PR_PR_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IT2PR_FIT_CODE_FK_PK, IT2PR_PR_CODE_FK_PK FROM T"& _ 
                "HERIAQUE.IT2PR_TERME2PRODUIT WHERE (IT2PR_FIT_CODE_FK_PK = @IT2PR_FIT_CODE_FK_PK"& _ 
                ") AND (IT2PR_PR_CODE_FK_PK = @IT2PR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2PR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2PR_FIT_CODE_FK_PK, IT2PR_PR_CODE_FK_PK FROM THERIAQUE.IT2PR_TERME2PRODU" & _
                "IT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2PR_FIT_CODE_FK_PK, IT2PR_PR_CODE_FK_PK FROM THERIAQUE.IT2PR_TERME2PRODU" & _
                "IT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2PR_FIT_CODE_FK_PK = @IT2PR_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2PR_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2PR_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable = New dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable, ByVal IT2PR_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2PR_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2PR_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2PR_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable = New dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2PR_TERME2PRODUITDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2PR_TERME2PRODUIT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2PR_FIT_CODE_FK_PK As Integer, ByVal Original_IT2PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2PR_FIT_CODE_FK_PK As Integer, ByVal IT2PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2PR_FIT_CODE_FK_PK As Integer, ByVal IT2PR_PR_CODE_FK_PK As Integer, ByVal Original_IT2PR_FIT_CODE_FK_PK As Integer, ByVal Original_IT2PR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2PR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT2PR_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2PR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT2PR_FIT_CODE_FK_PK As Integer, ByVal Original_IT2PR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT2PR_FIT_CODE_FK_PK, Original_IT2PR_PR_CODE_FK_PK, Original_IT2PR_FIT_CODE_FK_PK, Original_IT2PR_PR_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class IT2SP_TERME2SPECIALITETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IT2SP_TERME2SPECIALITE"
            tableMapping.ColumnMappings.Add("IT2SP_FIT_CODE_FK_PK", "IT2SP_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("IT2SP_SP_CODE_FK_PK", "IT2SP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[IT2SP_TERME2SPECIALITE] WHERE (([IT2SP_FIT_CODE_FK_PK] =" & _
                " @Original_IT2SP_FIT_CODE_FK_PK) AND ([IT2SP_SP_CODE_FK_PK] = @Original_IT2SP_SP" & _
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[IT2SP_TERME2SPECIALITE] ([IT2SP_FIT_CODE_FK_PK], [IT2SP_" & _
                "SP_CODE_FK_PK]) VALUES (@IT2SP_FIT_CODE_FK_PK, @IT2SP_SP_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT" & _
                "2SP_FIT_CODE_FK_PK, IT2SP_SP_CODE_FK_PK FROM THERIAQUE.IT2SP_TERME2SPECIALITE WH" & _
                "ERE (IT2SP_FIT_CODE_FK_PK = @IT2SP_FIT_CODE_FK_PK) AND (IT2SP_SP_CODE_FK_PK = @I" & _
                "T2SP_SP_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[IT2SP_TERME2SPECIALITE] SET [IT2SP_FIT_CODE_FK_PK] = @IT2SP_F" & _
                "IT_CODE_FK_PK, [IT2SP_SP_CODE_FK_PK] = @IT2SP_SP_CODE_FK_PK WHERE (([IT2SP_FIT_C" & _
                "ODE_FK_PK] = @Original_IT2SP_FIT_CODE_FK_PK) AND ([IT2SP_SP_CODE_FK_PK] = @Origi" & _
                "nal_IT2SP_SP_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IT2SP_FIT_CODE_FK_PK, IT2SP_SP_CODE_FK_PK FRO" & _
                "M THERIAQUE.IT2SP_TERME2SPECIALITE WHERE (IT2SP_FIT_CODE_FK_PK = @IT2SP_FIT_CODE" & _
                "_FK_PK) AND (IT2SP_SP_CODE_FK_PK = @IT2SP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IT2SP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IT2SP_FIT_CODE_FK_PK, IT2SP_SP_CODE_FK_PK FROM THERIAQUE.IT2SP_TERME2SPECI" & _
                "ALITE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IT2SP_FIT_CODE_FK_PK, IT2SP_SP_CODE_FK_PK FROM THERIAQUE.IT2SP_TERME2SPECI" & _
                "ALITE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE IT2SP_FIT_CODE_FK_PK = @IT2SP_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IT2SP_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IT2SP_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable, ByVal IT2SP_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2SP_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal IT2SP_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IT2SP_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable = New dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.IT2SP_TERME2SPECIALITEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "IT2SP_TERME2SPECIALITE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_IT2SP_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IT2SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IT2SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IT2SP_FIT_CODE_FK_PK As Integer, ByVal IT2SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IT2SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IT2SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal IT2SP_FIT_CODE_FK_PK As Integer, ByVal IT2SP_SP_CODE_FK_PK As Integer, ByVal Original_IT2SP_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IT2SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IT2SP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IT2SP_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IT2SP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_IT2SP_FIT_CODE_FK_PK As Integer, ByVal Original_IT2SP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_IT2SP_FIT_CODE_FK_PK, Original_IT2SP_SP_CODE_FK_PK, Original_IT2SP_FIT_CODE_FK_PK, Original_IT2SP_SP_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FITNA_INTERACTION_NATURETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITNA_INTERACTION_NATURE"
            tableMapping.ColumnMappings.Add("FITNA_FIT_CODE_FK_PK", "FITNA_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITNA_CDF_NAIT_CODE_FK_PK", "FITNA_CDF_NAIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITNA_NUMORD", "FITNA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITNA_INTERACTION_NATURE] WHERE (([FITNA_FIT_CODE_FK_PK]"& _ 
                " = @Original_FITNA_FIT_CODE_FK_PK) AND ([FITNA_CDF_NAIT_CODE_FK_PK] = @Original_"& _ 
                "FITNA_CDF_NAIT_CODE_FK_PK) AND ((@IsNull_FITNA_NUMORD = 1 AND [FITNA_NUMORD] IS "& _ 
                "NULL) OR ([FITNA_NUMORD] = @Original_FITNA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITNA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITNA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITNA_INTERACTION_NATURE] ([FITNA_FIT_CODE_FK_PK], [FITN"& _ 
                "A_CDF_NAIT_CODE_FK_PK], [FITNA_NUMORD]) VALUES (@FITNA_FIT_CODE_FK_PK, @FITNA_CD"& _ 
                "F_NAIT_CODE_FK_PK, @FITNA_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITNA_FIT_CODE_FK_PK, FITNA_CDF_NAIT_"& _ 
                "CODE_FK_PK, FITNA_NUMORD FROM THERIAQUE.FITNA_INTERACTION_NATURE WHERE (FITNA_CD"& _ 
                "F_NAIT_CODE_FK_PK = @FITNA_CDF_NAIT_CODE_FK_PK) AND (FITNA_FIT_CODE_FK_PK = @FIT"& _ 
                "NA_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITNA_INTERACTION_NATURE] SET [FITNA_FIT_CODE_FK_PK] = @FITNA"& _ 
                "_FIT_CODE_FK_PK, [FITNA_CDF_NAIT_CODE_FK_PK] = @FITNA_CDF_NAIT_CODE_FK_PK, [FITN"& _ 
                "A_NUMORD] = @FITNA_NUMORD WHERE (([FITNA_FIT_CODE_FK_PK] = @Original_FITNA_FIT_C"& _ 
                "ODE_FK_PK) AND ([FITNA_CDF_NAIT_CODE_FK_PK] = @Original_FITNA_CDF_NAIT_CODE_FK_P"& _ 
                "K) AND ((@IsNull_FITNA_NUMORD = 1 AND [FITNA_NUMORD] IS NULL) OR ([FITNA_NUMORD]"& _ 
                " = @Original_FITNA_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITNA_FIT_CODE_FK_PK, FITNA_CDF_NAIT_CODE_"& _ 
                "FK_PK, FITNA_NUMORD FROM THERIAQUE.FITNA_INTERACTION_NATURE WHERE (FITNA_CDF_NAI"& _ 
                "T_CODE_FK_PK = @FITNA_CDF_NAIT_CODE_FK_PK) AND (FITNA_FIT_CODE_FK_PK = @FITNA_FI"& _ 
                "T_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITNA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_CDF_NAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITNA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITNA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITNA_FIT_CODE_FK_PK, FITNA_CDF_NAIT_CODE_FK_PK, FITNA_NUMORD FROM THERIAQ" & _
                "UE.FITNA_INTERACTION_NATURE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITNA_FIT_CODE_FK_PK, FITNA_CDF_NAIT_CODE_FK_PK, FITNA_NUMORD FROM THERIAQ" & _
                "UE.FITNA_INTERACTION_NATURE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITNA_FIT_CODE_FK_PK = @FITNA_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITNA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITNA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable = New dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable, ByVal FITNA_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITNA_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITNA_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITNA_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable = New dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITNA_INTERACTION_NATUREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITNA_INTERACTION_NATURE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITNA_FIT_CODE_FK_PK As Integer, ByVal Original_FITNA_CDF_NAIT_CODE_FK_PK As String, ByVal Original_FITNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITNA_FIT_CODE_FK_PK, Integer)
            If (Original_FITNA_CDF_NAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITNA_CDF_NAIT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITNA_CDF_NAIT_CODE_FK_PK, String)
            End If
            If (Original_FITNA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITNA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITNA_FIT_CODE_FK_PK As Integer, ByVal FITNA_CDF_NAIT_CODE_FK_PK As String, ByVal FITNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITNA_FIT_CODE_FK_PK, Integer)
            If (FITNA_CDF_NAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITNA_CDF_NAIT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITNA_CDF_NAIT_CODE_FK_PK, String)
            End If
            If (FITNA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITNA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITNA_FIT_CODE_FK_PK As Integer, ByVal FITNA_CDF_NAIT_CODE_FK_PK As String, ByVal FITNA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITNA_FIT_CODE_FK_PK As Integer, ByVal Original_FITNA_CDF_NAIT_CODE_FK_PK As String, ByVal Original_FITNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITNA_FIT_CODE_FK_PK, Integer)
            If (FITNA_CDF_NAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITNA_CDF_NAIT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITNA_CDF_NAIT_CODE_FK_PK, String)
            End If
            If (FITNA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITNA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITNA_FIT_CODE_FK_PK, Integer)
            If (Original_FITNA_CDF_NAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITNA_CDF_NAIT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITNA_CDF_NAIT_CODE_FK_PK, String)
            End If
            If (Original_FITNA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITNA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITNA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITNA_FIT_CODE_FK_PK As Integer, ByVal Original_FITNA_CDF_NAIT_CODE_FK_PK As String, ByVal Original_FITNA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITNA_FIT_CODE_FK_PK, Original_FITNA_CDF_NAIT_CODE_FK_PK, FITNA_NUMORD, Original_FITNA_FIT_CODE_FK_PK, Original_FITNA_CDF_NAIT_CODE_FK_PK, Original_FITNA_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FITROF_REF_OFFICIELLETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITROF_REF_OFFICIELLE"
            tableMapping.ColumnMappings.Add("FITROF_FIT_CODE_FK_PK", "FITROF_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITROF_CDF_DOC_CODE_FK_PK", "FITROF_CDF_DOC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITROF_NUM_DOC_PK", "FITROF_NUM_DOC_PK")
            tableMapping.ColumnMappings.Add("FITROF_DATE_PK", "FITROF_DATE_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITROF_REF_OFFICIELLE] WHERE (([FITROF_FIT_CODE_FK_PK] =" & _
                " @Original_FITROF_FIT_CODE_FK_PK) AND ([FITROF_CDF_DOC_CODE_FK_PK] = @Original_F" & _
                "ITROF_CDF_DOC_CODE_FK_PK) AND ([FITROF_NUM_DOC_PK] = @Original_FITROF_NUM_DOC_PK" & _
                ") AND ([FITROF_DATE_PK] = @Original_FITROF_DATE_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_NUM_DOC_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_NUM_DOC_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_DATE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITROF_REF_OFFICIELLE] ([FITROF_FIT_CODE_FK_PK], [FITROF" & _
                "_CDF_DOC_CODE_FK_PK], [FITROF_NUM_DOC_PK], [FITROF_DATE_PK]) VALUES (@FITROF_FIT" & _
                "_CODE_FK_PK, @FITROF_CDF_DOC_CODE_FK_PK, @FITROF_NUM_DOC_PK, @FITROF_DATE_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & _
                "SELECT FITROF_FIT_CODE_FK_PK, FITROF_CDF_DOC_CODE_FK_PK, FITROF_NUM_DOC_PK, FITR" & _
                "OF_DATE_PK FROM THERIAQUE.FITROF_REF_OFFICIELLE WHERE (FITROF_CDF_DOC_CODE_FK_PK" & _
                " = @FITROF_CDF_DOC_CODE_FK_PK) AND (FITROF_DATE_PK = @FITROF_DATE_PK) AND (FITRO" & _
                "F_FIT_CODE_FK_PK = @FITROF_FIT_CODE_FK_PK) AND (FITROF_NUM_DOC_PK = @FITROF_NUM_" & _
                "DOC_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_NUM_DOC_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_NUM_DOC_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_DATE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITROF_REF_OFFICIELLE] SET [FITROF_FIT_CODE_FK_PK] = @FITROF_" & _
                "FIT_CODE_FK_PK, [FITROF_CDF_DOC_CODE_FK_PK] = @FITROF_CDF_DOC_CODE_FK_PK, [FITRO" & _
                "F_NUM_DOC_PK] = @FITROF_NUM_DOC_PK, [FITROF_DATE_PK] = @FITROF_DATE_PK WHERE (([" & _
                "FITROF_FIT_CODE_FK_PK] = @Original_FITROF_FIT_CODE_FK_PK) AND ([FITROF_CDF_DOC_C" & _
                "ODE_FK_PK] = @Original_FITROF_CDF_DOC_CODE_FK_PK) AND ([FITROF_NUM_DOC_PK] = @Or" & _
                "iginal_FITROF_NUM_DOC_PK) AND ([FITROF_DATE_PK] = @Original_FITROF_DATE_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S" & _
                "ELECT FITROF_FIT_CODE_FK_PK, FITROF_CDF_DOC_CODE_FK_PK, FITROF_NUM_DOC_PK, FITRO" & _
                "F_DATE_PK FROM THERIAQUE.FITROF_REF_OFFICIELLE WHERE (FITROF_CDF_DOC_CODE_FK_PK " & _
                "= @FITROF_CDF_DOC_CODE_FK_PK) AND (FITROF_DATE_PK = @FITROF_DATE_PK) AND (FITROF" & _
                "_FIT_CODE_FK_PK = @FITROF_FIT_CODE_FK_PK) AND (FITROF_NUM_DOC_PK = @FITROF_NUM_D" & _
                "OC_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_NUM_DOC_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_NUM_DOC_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_DATE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_CDF_DOC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_NUM_DOC_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_NUM_DOC_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITROF_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_DATE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITROF_FIT_CODE_FK_PK, FITROF_CDF_DOC_CODE_FK_PK, FITROF_NUM_DOC_PK, FITRO" & _
                "F_DATE_PK FROM THERIAQUE.FITROF_REF_OFFICIELLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITROF_FIT_CODE_FK_PK, FITROF_CDF_DOC_CODE_FK_PK, FITROF_NUM_DOC_PK, FITRO" & _
                "F_DATE_PK FROM THERIAQUE.FITROF_REF_OFFICIELLE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITROF_FIT_CODE_FK_PK = @F" & _
                "ITROF_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITROF_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITROF_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable = New dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable, ByVal FITROF_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITROF_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITROF_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITROF_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable = New dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITROF_REF_OFFICIELLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITROF_REF_OFFICIELLE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITROF_FIT_CODE_FK_PK As Integer, ByVal Original_FITROF_CDF_DOC_CODE_FK_PK As String, ByVal Original_FITROF_NUM_DOC_PK As Short, ByVal Original_FITROF_DATE_PK As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITROF_FIT_CODE_FK_PK, Integer)
            If (Original_FITROF_CDF_DOC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITROF_CDF_DOC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITROF_CDF_DOC_CODE_FK_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FITROF_NUM_DOC_PK, Short)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITROF_DATE_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITROF_FIT_CODE_FK_PK As Integer, ByVal FITROF_CDF_DOC_CODE_FK_PK As String, ByVal FITROF_NUM_DOC_PK As Short, ByVal FITROF_DATE_PK As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITROF_FIT_CODE_FK_PK, Integer)
            If (FITROF_CDF_DOC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITROF_CDF_DOC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITROF_CDF_DOC_CODE_FK_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITROF_NUM_DOC_PK, Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FITROF_DATE_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITROF_FIT_CODE_FK_PK As Integer, ByVal FITROF_CDF_DOC_CODE_FK_PK As String, ByVal FITROF_NUM_DOC_PK As Short, ByVal FITROF_DATE_PK As Date, ByVal Original_FITROF_FIT_CODE_FK_PK As Integer, ByVal Original_FITROF_CDF_DOC_CODE_FK_PK As String, ByVal Original_FITROF_NUM_DOC_PK As Short, ByVal Original_FITROF_DATE_PK As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITROF_FIT_CODE_FK_PK, Integer)
            If (FITROF_CDF_DOC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITROF_CDF_DOC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITROF_CDF_DOC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITROF_NUM_DOC_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FITROF_DATE_PK, Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITROF_FIT_CODE_FK_PK, Integer)
            If (Original_FITROF_CDF_DOC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITROF_CDF_DOC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FITROF_CDF_DOC_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITROF_NUM_DOC_PK, Short)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FITROF_DATE_PK, Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FITROF_FIT_CODE_FK_PK As Integer, ByVal Original_FITROF_CDF_DOC_CODE_FK_PK As String, ByVal Original_FITROF_NUM_DOC_PK As Short, ByVal Original_FITROF_DATE_PK As Date) As Integer
            Return Me.Update(Original_FITROF_FIT_CODE_FK_PK, Original_FITROF_CDF_DOC_CODE_FK_PK, Original_FITROF_NUM_DOC_PK, Original_FITROF_DATE_PK, Original_FITROF_FIT_CODE_FK_PK, Original_FITROF_CDF_DOC_CODE_FK_PK, Original_FITROF_NUM_DOC_PK, Original_FITROF_DATE_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FITSE_INTERACTION_SENSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITSE_INTERACTION_SENS"
            tableMapping.ColumnMappings.Add("FITSE_FIT_CODE_FK_PK", "FITSE_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITSE_CDF_SEIT_CODE_FK_PK", "FITSE_CDF_SEIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITSE_NUMORD", "FITSE_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITSE_INTERACTION_SENS] WHERE (([FITSE_FIT_CODE_FK_PK] ="& _ 
                " @Original_FITSE_FIT_CODE_FK_PK) AND ([FITSE_CDF_SEIT_CODE_FK_PK] = @Original_FI"& _ 
                "TSE_CDF_SEIT_CODE_FK_PK) AND ((@IsNull_FITSE_NUMORD = 1 AND [FITSE_NUMORD] IS NU"& _ 
                "LL) OR ([FITSE_NUMORD] = @Original_FITSE_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITSE_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITSE_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITSE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITSE_INTERACTION_SENS] ([FITSE_FIT_CODE_FK_PK], [FITSE_"& _ 
                "CDF_SEIT_CODE_FK_PK], [FITSE_NUMORD]) VALUES (@FITSE_FIT_CODE_FK_PK, @FITSE_CDF_"& _ 
                "SEIT_CODE_FK_PK, @FITSE_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITSE_FIT_CODE_FK_PK, FITSE_CDF_SEIT_CO"& _ 
                "DE_FK_PK, FITSE_NUMORD FROM THERIAQUE.FITSE_INTERACTION_SENS WHERE (FITSE_CDF_SE"& _ 
                "IT_CODE_FK_PK = @FITSE_CDF_SEIT_CODE_FK_PK) AND (FITSE_FIT_CODE_FK_PK = @FITSE_F"& _ 
                "IT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITSE_INTERACTION_SENS] SET [FITSE_FIT_CODE_FK_PK] = @FITSE_F"& _ 
                "IT_CODE_FK_PK, [FITSE_CDF_SEIT_CODE_FK_PK] = @FITSE_CDF_SEIT_CODE_FK_PK, [FITSE_"& _ 
                "NUMORD] = @FITSE_NUMORD WHERE (([FITSE_FIT_CODE_FK_PK] = @Original_FITSE_FIT_COD"& _ 
                "E_FK_PK) AND ([FITSE_CDF_SEIT_CODE_FK_PK] = @Original_FITSE_CDF_SEIT_CODE_FK_PK)"& _ 
                " AND ((@IsNull_FITSE_NUMORD = 1 AND [FITSE_NUMORD] IS NULL) OR ([FITSE_NUMORD] ="& _ 
                " @Original_FITSE_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITSE_FIT_CODE_FK_PK, FITSE_CDF_SEIT_CODE_FK"& _ 
                "_PK, FITSE_NUMORD FROM THERIAQUE.FITSE_INTERACTION_SENS WHERE (FITSE_CDF_SEIT_CO"& _ 
                "DE_FK_PK = @FITSE_CDF_SEIT_CODE_FK_PK) AND (FITSE_FIT_CODE_FK_PK = @FITSE_FIT_CO"& _ 
                "DE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITSE_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_CDF_SEIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITSE_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITSE_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITSE_FIT_CODE_FK_PK, FITSE_CDF_SEIT_CODE_FK_PK, FITSE_NUMORD FROM THERIAQ" & _
                "UE.FITSE_INTERACTION_SENS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITSE_FIT_CODE_FK_PK, FITSE_CDF_SEIT_CODE_FK_PK, FITSE_NUMORD FROM THERIAQ" & _
                "UE.FITSE_INTERACTION_SENS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITSE_FIT_CODE_FK_PK = @FITSE_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITSE_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITSE_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable = New dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable, ByVal FITSE_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITSE_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITSE_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITSE_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable = New dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITSE_INTERACTION_SENSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITSE_INTERACTION_SENS")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITSE_FIT_CODE_FK_PK As Integer, ByVal Original_FITSE_CDF_SEIT_CODE_FK_PK As String, ByVal Original_FITSE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITSE_FIT_CODE_FK_PK, Integer)
            If (Original_FITSE_CDF_SEIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITSE_CDF_SEIT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITSE_CDF_SEIT_CODE_FK_PK, String)
            End If
            If (Original_FITSE_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITSE_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITSE_FIT_CODE_FK_PK As Integer, ByVal FITSE_CDF_SEIT_CODE_FK_PK As String, ByVal FITSE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITSE_FIT_CODE_FK_PK, Integer)
            If (FITSE_CDF_SEIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITSE_CDF_SEIT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITSE_CDF_SEIT_CODE_FK_PK, String)
            End If
            If (FITSE_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITSE_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITSE_FIT_CODE_FK_PK As Integer, ByVal FITSE_CDF_SEIT_CODE_FK_PK As String, ByVal FITSE_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITSE_FIT_CODE_FK_PK As Integer, ByVal Original_FITSE_CDF_SEIT_CODE_FK_PK As String, ByVal Original_FITSE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITSE_FIT_CODE_FK_PK, Integer)
            If (FITSE_CDF_SEIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITSE_CDF_SEIT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITSE_CDF_SEIT_CODE_FK_PK, String)
            End If
            If (FITSE_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITSE_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITSE_FIT_CODE_FK_PK, Integer)
            If (Original_FITSE_CDF_SEIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITSE_CDF_SEIT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITSE_CDF_SEIT_CODE_FK_PK, String)
            End If
            If (Original_FITSE_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITSE_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITSE_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITSE_FIT_CODE_FK_PK As Integer, ByVal Original_FITSE_CDF_SEIT_CODE_FK_PK As String, ByVal Original_FITSE_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITSE_FIT_CODE_FK_PK, Original_FITSE_CDF_SEIT_CODE_FK_PK, FITSE_NUMORD, Original_FITSE_FIT_CODE_FK_PK, Original_FITSE_CDF_SEIT_CODE_FK_PK, Original_FITSE_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FITTY_TYPEINTERACTIONTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITTY_TYPEINTERACTION"
            tableMapping.ColumnMappings.Add("FITTY_FIT_CODE_FK_PK", "FITTY_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITTY_CDF_TYPE_CODE_FK_PK", "FITTY_CDF_TYPE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITTY_NUMORD", "FITTY_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITTY_TYPEINTERACTION] WHERE (([FITTY_FIT_CODE_FK_PK] = " & _
                "@Original_FITTY_FIT_CODE_FK_PK) AND ([FITTY_CDF_TYPE_CODE_FK_PK] = @Original_FIT" & _
                "TY_CDF_TYPE_CODE_FK_PK) AND ((@IsNull_FITTY_NUMORD = 1 AND [FITTY_NUMORD] IS NUL" & _
                "L) OR ([FITTY_NUMORD] = @Original_FITTY_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTY_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITTY_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITTY_TYPEINTERACTION] ([FITTY_FIT_CODE_FK_PK], [FITTY_C" & _
                "DF_TYPE_CODE_FK_PK], [FITTY_NUMORD]) VALUES (@FITTY_FIT_CODE_FK_PK, @FITTY_CDF_T" & _
                "YPE_CODE_FK_PK, @FITTY_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITTY_FIT_CODE_FK_PK, FITTY_CDF_TYPE_COD" & _
                "E_FK_PK, FITTY_NUMORD FROM THERIAQUE.FITTY_TYPEINTERACTION WHERE (FITTY_CDF_TYPE" & _
                "_CODE_FK_PK = @FITTY_CDF_TYPE_CODE_FK_PK) AND (FITTY_FIT_CODE_FK_PK = @FITTY_FIT" & _
                "_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITTY_TYPEINTERACTION] SET [FITTY_FIT_CODE_FK_PK] = @FITTY_FI" & _
                "T_CODE_FK_PK, [FITTY_CDF_TYPE_CODE_FK_PK] = @FITTY_CDF_TYPE_CODE_FK_PK, [FITTY_N" & _
                "UMORD] = @FITTY_NUMORD WHERE (([FITTY_FIT_CODE_FK_PK] = @Original_FITTY_FIT_CODE" & _
                "_FK_PK) AND ([FITTY_CDF_TYPE_CODE_FK_PK] = @Original_FITTY_CDF_TYPE_CODE_FK_PK) " & _
                "AND ((@IsNull_FITTY_NUMORD = 1 AND [FITTY_NUMORD] IS NULL) OR ([FITTY_NUMORD] = " & _
                "@Original_FITTY_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITTY_FIT_CODE_FK_PK, FITTY_CDF_TYPE_CODE_FK_" & _
                "PK, FITTY_NUMORD FROM THERIAQUE.FITTY_TYPEINTERACTION WHERE (FITTY_CDF_TYPE_CODE" & _
                "_FK_PK = @FITTY_CDF_TYPE_CODE_FK_PK) AND (FITTY_FIT_CODE_FK_PK = @FITTY_FIT_CODE" & _
                "_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTY_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_CDF_TYPE_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITTY_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTY_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITTY_FIT_CODE_FK_PK, FITTY_CDF_TYPE_CODE_FK_PK, FITTY_NUMORD FROM THERIAQ" & _
                "UE.FITTY_TYPEINTERACTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITTY_FIT_CODE_FK_PK, FITTY_CDF_TYPE_CODE_FK_PK, FITTY_NUMORD FROM THERIAQ" & _
                "UE.FITTY_TYPEINTERACTION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITTY_FIT_CODE_FK_PK = @FITTY_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTY_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTY_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable = New dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable, ByVal FITTY_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITTY_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITTY_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITTY_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable = New dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITTY_TYPEINTERACTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITTY_TYPEINTERACTION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITTY_FIT_CODE_FK_PK As Integer, ByVal Original_FITTY_CDF_TYPE_CODE_FK_PK As String, ByVal Original_FITTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITTY_FIT_CODE_FK_PK, Integer)
            If (Original_FITTY_CDF_TYPE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITTY_CDF_TYPE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITTY_CDF_TYPE_CODE_FK_PK, String)
            End If
            If (Original_FITTY_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITTY_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITTY_FIT_CODE_FK_PK As Integer, ByVal FITTY_CDF_TYPE_CODE_FK_PK As String, ByVal FITTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITTY_FIT_CODE_FK_PK, Integer)
            If (FITTY_CDF_TYPE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITTY_CDF_TYPE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITTY_CDF_TYPE_CODE_FK_PK, String)
            End If
            If (FITTY_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITTY_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITTY_FIT_CODE_FK_PK As Integer, ByVal FITTY_CDF_TYPE_CODE_FK_PK As String, ByVal FITTY_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITTY_FIT_CODE_FK_PK As Integer, ByVal Original_FITTY_CDF_TYPE_CODE_FK_PK As String, ByVal Original_FITTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITTY_FIT_CODE_FK_PK, Integer)
            If (FITTY_CDF_TYPE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITTY_CDF_TYPE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITTY_CDF_TYPE_CODE_FK_PK, String)
            End If
            If (FITTY_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITTY_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITTY_FIT_CODE_FK_PK, Integer)
            If (Original_FITTY_CDF_TYPE_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITTY_CDF_TYPE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITTY_CDF_TYPE_CODE_FK_PK, String)
            End If
            If (Original_FITTY_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITTY_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITTY_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITTY_FIT_CODE_FK_PK As Integer, ByVal Original_FITTY_CDF_TYPE_CODE_FK_PK As String, ByVal Original_FITTY_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITTY_FIT_CODE_FK_PK, Original_FITTY_CDF_TYPE_CODE_FK_PK, FITTY_NUMORD, Original_FITTY_FIT_CODE_FK_PK, Original_FITTY_CDF_TYPE_CODE_FK_PK, Original_FITTY_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FITVA_NIVEAU_VALIDATIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITVA_NIVEAU_VALIDATION"
            tableMapping.ColumnMappings.Add("FITVA_FIT_CODE_FK_PK", "FITVA_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITVA_CDF_VAIT_CODE_FK_PK", "FITVA_CDF_VAIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITVA_NUMORD", "FITVA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITVA_NIVEAU_VALIDATION] WHERE (([FITVA_FIT_CODE_FK_PK] "& _ 
                "= @Original_FITVA_FIT_CODE_FK_PK) AND ([FITVA_CDF_VAIT_CODE_FK_PK] = @Original_F"& _ 
                "ITVA_CDF_VAIT_CODE_FK_PK) AND ((@IsNull_FITVA_NUMORD = 1 AND [FITVA_NUMORD] IS N"& _ 
                "ULL) OR ([FITVA_NUMORD] = @Original_FITVA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITVA_NIVEAU_VALIDATION] ([FITVA_FIT_CODE_FK_PK], [FITVA"& _ 
                "_CDF_VAIT_CODE_FK_PK], [FITVA_NUMORD]) VALUES (@FITVA_FIT_CODE_FK_PK, @FITVA_CDF"& _ 
                "_VAIT_CODE_FK_PK, @FITVA_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITVA_FIT_CODE_FK_PK, FITVA_CDF_VAIT_C"& _ 
                "ODE_FK_PK, FITVA_NUMORD FROM THERIAQUE.FITVA_NIVEAU_VALIDATION WHERE (FITVA_CDF_"& _ 
                "VAIT_CODE_FK_PK = @FITVA_CDF_VAIT_CODE_FK_PK) AND (FITVA_FIT_CODE_FK_PK = @FITVA"& _ 
                "_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITVA_NIVEAU_VALIDATION] SET [FITVA_FIT_CODE_FK_PK] = @FITVA_"& _ 
                "FIT_CODE_FK_PK, [FITVA_CDF_VAIT_CODE_FK_PK] = @FITVA_CDF_VAIT_CODE_FK_PK, [FITVA"& _ 
                "_NUMORD] = @FITVA_NUMORD WHERE (([FITVA_FIT_CODE_FK_PK] = @Original_FITVA_FIT_CO"& _ 
                "DE_FK_PK) AND ([FITVA_CDF_VAIT_CODE_FK_PK] = @Original_FITVA_CDF_VAIT_CODE_FK_PK"& _ 
                ") AND ((@IsNull_FITVA_NUMORD = 1 AND [FITVA_NUMORD] IS NULL) OR ([FITVA_NUMORD] "& _ 
                "= @Original_FITVA_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITVA_FIT_CODE_FK_PK, FITVA_CDF_VAIT_CODE_F"& _ 
                "K_PK, FITVA_NUMORD FROM THERIAQUE.FITVA_NIVEAU_VALIDATION WHERE (FITVA_CDF_VAIT_"& _ 
                "CODE_FK_PK = @FITVA_CDF_VAIT_CODE_FK_PK) AND (FITVA_FIT_CODE_FK_PK = @FITVA_FIT_"& _ 
                "CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_CDF_VAIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITVA_FIT_CODE_FK_PK, FITVA_CDF_VAIT_CODE_FK_PK, FITVA_NUMORD FROM THERIAQ" & _
                "UE.FITVA_NIVEAU_VALIDATION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITVA_FIT_CODE_FK_PK, FITVA_CDF_VAIT_CODE_FK_PK, FITVA_NUMORD FROM THERIAQ" & _
                "UE.FITVA_NIVEAU_VALIDATION" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITVA_FIT_CODE_FK_PK = @FITVA_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVA_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVA_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable = New dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable, ByVal FITVA_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITVA_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITVA_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITVA_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable = New dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVA_NIVEAU_VALIDATIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITVA_NIVEAU_VALIDATION")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITVA_FIT_CODE_FK_PK As Integer, ByVal Original_FITVA_CDF_VAIT_CODE_FK_PK As String, ByVal Original_FITVA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITVA_FIT_CODE_FK_PK, Integer)
            If (Original_FITVA_CDF_VAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITVA_CDF_VAIT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITVA_CDF_VAIT_CODE_FK_PK, String)
            End If
            If (Original_FITVA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITVA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITVA_FIT_CODE_FK_PK As Integer, ByVal FITVA_CDF_VAIT_CODE_FK_PK As String, ByVal FITVA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITVA_FIT_CODE_FK_PK, Integer)
            If (FITVA_CDF_VAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITVA_CDF_VAIT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITVA_CDF_VAIT_CODE_FK_PK, String)
            End If
            If (FITVA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITVA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITVA_FIT_CODE_FK_PK As Integer, ByVal FITVA_CDF_VAIT_CODE_FK_PK As String, ByVal FITVA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITVA_FIT_CODE_FK_PK As Integer, ByVal Original_FITVA_CDF_VAIT_CODE_FK_PK As String, ByVal Original_FITVA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITVA_FIT_CODE_FK_PK, Integer)
            If (FITVA_CDF_VAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITVA_CDF_VAIT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITVA_CDF_VAIT_CODE_FK_PK, String)
            End If
            If (FITVA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITVA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITVA_FIT_CODE_FK_PK, Integer)
            If (Original_FITVA_CDF_VAIT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITVA_CDF_VAIT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITVA_CDF_VAIT_CODE_FK_PK, String)
            End If
            If (Original_FITVA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITVA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITVA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITVA_FIT_CODE_FK_PK As Integer, ByVal Original_FITVA_CDF_VAIT_CODE_FK_PK As String, ByVal Original_FITVA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITVA_FIT_CODE_FK_PK, Original_FITVA_CDF_VAIT_CODE_FK_PK, FITVA_NUMORD, Original_FITVA_FIT_CODE_FK_PK, Original_FITVA_CDF_VAIT_CODE_FK_PK, Original_FITVA_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FITVD1_INTERACTION_VOIE_DOSETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITVD1_INTERACTION_VOIE_DOSE"
            tableMapping.ColumnMappings.Add("FITVD1_FIT_CODE_FK_PK", "FITVD1_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITVD1_NUMSEQ_PK", "FITVD1_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("FITVD1_CDF_VO_CODE1_FK", "FITVD1_CDF_VO_CODE1_FK")
            tableMapping.ColumnMappings.Add("FITVD1_CDF_PP_CODE1_FK", "FITVD1_CDF_PP_CODE1_FK")
            tableMapping.ColumnMappings.Add("FITVD1_DOSE1", "FITVD1_DOSE1")
            tableMapping.ColumnMappings.Add("FITVD1_QUALIFICATIF_DOSE1", "FITVD1_QUALIFICATIF_DOSE1")
            tableMapping.ColumnMappings.Add("FITVD1_NUMORD", "FITVD1_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITVD1_INTERACTION_VOIE_DOSE] WHERE (([FITVD1_FIT_CODE_F" & _
                "K_PK] = @Original_FITVD1_FIT_CODE_FK_PK) AND ([FITVD1_NUMSEQ_PK] = @Original_FIT" & _
                "VD1_NUMSEQ_PK) AND ((@IsNull_FITVD1_CDF_VO_CODE1_FK = 1 AND [FITVD1_CDF_VO_CODE1" & _
                "_FK] IS NULL) OR ([FITVD1_CDF_VO_CODE1_FK] = @Original_FITVD1_CDF_VO_CODE1_FK)) " & _
                "AND ((@IsNull_FITVD1_CDF_PP_CODE1_FK = 1 AND [FITVD1_CDF_PP_CODE1_FK] IS NULL) O" & _
                "R ([FITVD1_CDF_PP_CODE1_FK] = @Original_FITVD1_CDF_PP_CODE1_FK)) AND ((@IsNull_F" & _
                "ITVD1_DOSE1 = 1 AND [FITVD1_DOSE1] IS NULL) OR ([FITVD1_DOSE1] = @Original_FITVD" & _
                "1_DOSE1)) AND ((@IsNull_FITVD1_QUALIFICATIF_DOSE1 = 1 AND [FITVD1_QUALIFICATIF_D" & _
                "OSE1] IS NULL) OR ([FITVD1_QUALIFICATIF_DOSE1] = @Original_FITVD1_QUALIFICATIF_D" & _
                "OSE1)) AND ((@IsNull_FITVD1_NUMORD = 1 AND [FITVD1_NUMORD] IS NULL) OR ([FITVD1_" & _
                "NUMORD] = @Original_FITVD1_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_CDF_VO_CODE1_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_VO_CODE1_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_CDF_VO_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_VO_CODE1_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_CDF_PP_CODE1_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_PP_CODE1_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_CDF_PP_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_PP_CODE1_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_DOSE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_DOSE1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_DOSE1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD1_DOSE1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITVD1_INTERACTION_VOIE_DOSE] ([FITVD1_FIT_CODE_FK_PK], " & _
                "[FITVD1_NUMSEQ_PK], [FITVD1_CDF_VO_CODE1_FK], [FITVD1_CDF_PP_CODE1_FK], [FITVD1_" & _
                "DOSE1], [FITVD1_QUALIFICATIF_DOSE1], [FITVD1_NUMORD]) VALUES (@FITVD1_FIT_CODE_F" & _
                "K_PK, @FITVD1_NUMSEQ_PK, @FITVD1_CDF_VO_CODE1_FK, @FITVD1_CDF_PP_CODE1_FK, @FITV" & _
                "D1_DOSE1, @FITVD1_QUALIFICATIF_DOSE1, @FITVD1_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITVD1_FIT_CODE_F" & _
                "K_PK, FITVD1_NUMSEQ_PK, FITVD1_CDF_VO_CODE1_FK, FITVD1_CDF_PP_CODE1_FK, FITVD1_D" & _
                "OSE1, FITVD1_QUALIFICATIF_DOSE1, FITVD1_NUMORD FROM THERIAQUE.FITVD1_INTERACTION" & _
                "_VOIE_DOSE WHERE (FITVD1_FIT_CODE_FK_PK = @FITVD1_FIT_CODE_FK_PK) AND (FITVD1_NU" & _
                "MSEQ_PK = @FITVD1_NUMSEQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_CDF_VO_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_VO_CODE1_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_CDF_PP_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_PP_CODE1_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_DOSE1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD1_DOSE1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITVD1_INTERACTION_VOIE_DOSE] SET [FITVD1_FIT_CODE_FK_PK] = @" & _
                "FITVD1_FIT_CODE_FK_PK, [FITVD1_NUMSEQ_PK] = @FITVD1_NUMSEQ_PK, [FITVD1_CDF_VO_CO" & _
                "DE1_FK] = @FITVD1_CDF_VO_CODE1_FK, [FITVD1_CDF_PP_CODE1_FK] = @FITVD1_CDF_PP_COD" & _
                "E1_FK, [FITVD1_DOSE1] = @FITVD1_DOSE1, [FITVD1_QUALIFICATIF_DOSE1] = @FITVD1_QUA" & _
                "LIFICATIF_DOSE1, [FITVD1_NUMORD] = @FITVD1_NUMORD WHERE (([FITVD1_FIT_CODE_FK_PK" & _
                "] = @Original_FITVD1_FIT_CODE_FK_PK) AND ([FITVD1_NUMSEQ_PK] = @Original_FITVD1_" & _
                "NUMSEQ_PK) AND ((@IsNull_FITVD1_CDF_VO_CODE1_FK = 1 AND [FITVD1_CDF_VO_CODE1_FK]" & _
                " IS NULL) OR ([FITVD1_CDF_VO_CODE1_FK] = @Original_FITVD1_CDF_VO_CODE1_FK)) AND " & _
                "((@IsNull_FITVD1_CDF_PP_CODE1_FK = 1 AND [FITVD1_CDF_PP_CODE1_FK] IS NULL) OR ([" & _
                "FITVD1_CDF_PP_CODE1_FK] = @Original_FITVD1_CDF_PP_CODE1_FK)) AND ((@IsNull_FITVD" & _
                "1_DOSE1 = 1 AND [FITVD1_DOSE1] IS NULL) OR ([FITVD1_DOSE1] = @Original_FITVD1_DO" & _
                "SE1)) AND ((@IsNull_FITVD1_QUALIFICATIF_DOSE1 = 1 AND [FITVD1_QUALIFICATIF_DOSE1" & _
                "] IS NULL) OR ([FITVD1_QUALIFICATIF_DOSE1] = @Original_FITVD1_QUALIFICATIF_DOSE1" & _
                ")) AND ((@IsNull_FITVD1_NUMORD = 1 AND [FITVD1_NUMORD] IS NULL) OR ([FITVD1_NUMO" & _
                "RD] = @Original_FITVD1_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITVD1_FIT_CODE_FK_PK, FITVD1_NUMSEQ_P" & _
                "K, FITVD1_CDF_VO_CODE1_FK, FITVD1_CDF_PP_CODE1_FK, FITVD1_DOSE1, FITVD1_QUALIFIC" & _
                "ATIF_DOSE1, FITVD1_NUMORD FROM THERIAQUE.FITVD1_INTERACTION_VOIE_DOSE WHERE (FIT" & _
                "VD1_FIT_CODE_FK_PK = @FITVD1_FIT_CODE_FK_PK) AND (FITVD1_NUMSEQ_PK = @FITVD1_NUM" & _
                "SEQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_CDF_VO_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_VO_CODE1_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_CDF_PP_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_PP_CODE1_FK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_DOSE1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD1_DOSE1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_CDF_VO_CODE1_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_VO_CODE1_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_CDF_VO_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_VO_CODE1_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_CDF_PP_CODE1_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_PP_CODE1_FK", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_CDF_PP_CODE1_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_CDF_PP_CODE1_FK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_DOSE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_DOSE1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_DOSE1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD1_DOSE1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_QUALIFICATIF_DOSE1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD1_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD1_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITVD1_FIT_CODE_FK_PK, FITVD1_NUMSEQ_PK, FITVD1_CDF_VO_CODE1_FK, FITVD1_CD" & _
                "F_PP_CODE1_FK, FITVD1_DOSE1, FITVD1_QUALIFICATIF_DOSE1, FITVD1_NUMORD FROM THERI" & _
                "AQUE.FITVD1_INTERACTION_VOIE_DOSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITVD1_FIT_CODE_FK_PK, FITVD1_NUMSEQ_PK, FITVD1_CDF_VO_CODE1_FK, FITVD1_CD" & _
                "F_PP_CODE1_FK, FITVD1_DOSE1, FITVD1_QUALIFICATIF_DOSE1, FITVD1_NUMORD FROM THERI" & _
                "AQUE.FITVD1_INTERACTION_VOIE_DOSE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITVD1_FIT_CODE_FK_PK = @FITVD1_FIT_COD" & _
                "E_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD1_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD1_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable = New dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable, ByVal FITVD1_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITVD1_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITVD1_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITVD1_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable = New dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVD1_INTERACTION_VOIE_DOSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITVD1_INTERACTION_VOIE_DOSE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITVD1_FIT_CODE_FK_PK As Integer, ByVal Original_FITVD1_NUMSEQ_PK As Short, ByVal Original_FITVD1_CDF_VO_CODE1_FK As String, ByVal Original_FITVD1_CDF_PP_CODE1_FK As String, ByVal Original_FITVD1_DOSE1 As Global.System.Nullable(Of Decimal), ByVal Original_FITVD1_QUALIFICATIF_DOSE1 As String, ByVal Original_FITVD1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITVD1_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITVD1_NUMSEQ_PK, Short)
            If (Original_FITVD1_CDF_VO_CODE1_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITVD1_CDF_VO_CODE1_FK, String)
            End If
            If (Original_FITVD1_CDF_PP_CODE1_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FITVD1_CDF_PP_CODE1_FK, String)
            End If
            If (Original_FITVD1_DOSE1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FITVD1_DOSE1.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_FITVD1_QUALIFICATIF_DOSE1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_FITVD1_QUALIFICATIF_DOSE1, String)
            End If
            If (Original_FITVD1_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_FITVD1_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITVD1_FIT_CODE_FK_PK As Integer, ByVal FITVD1_NUMSEQ_PK As Short, ByVal FITVD1_CDF_VO_CODE1_FK As String, ByVal FITVD1_CDF_PP_CODE1_FK As String, ByVal FITVD1_DOSE1 As Global.System.Nullable(Of Decimal), ByVal FITVD1_QUALIFICATIF_DOSE1 As String, ByVal FITVD1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITVD1_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITVD1_NUMSEQ_PK, Short)
            If (FITVD1_CDF_VO_CODE1_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITVD1_CDF_VO_CODE1_FK, String)
            End If
            If (FITVD1_CDF_PP_CODE1_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FITVD1_CDF_PP_CODE1_FK, String)
            End If
            If (FITVD1_DOSE1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FITVD1_DOSE1.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FITVD1_QUALIFICATIF_DOSE1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FITVD1_QUALIFICATIF_DOSE1, String)
            End If
            If (FITVD1_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FITVD1_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITVD1_FIT_CODE_FK_PK As Integer, ByVal FITVD1_NUMSEQ_PK As Short, ByVal FITVD1_CDF_VO_CODE1_FK As String, ByVal FITVD1_CDF_PP_CODE1_FK As String, ByVal FITVD1_DOSE1 As Global.System.Nullable(Of Decimal), ByVal FITVD1_QUALIFICATIF_DOSE1 As String, ByVal FITVD1_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITVD1_FIT_CODE_FK_PK As Integer, ByVal Original_FITVD1_NUMSEQ_PK As Short, ByVal Original_FITVD1_CDF_VO_CODE1_FK As String, ByVal Original_FITVD1_CDF_PP_CODE1_FK As String, ByVal Original_FITVD1_DOSE1 As Global.System.Nullable(Of Decimal), ByVal Original_FITVD1_QUALIFICATIF_DOSE1 As String, ByVal Original_FITVD1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITVD1_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITVD1_NUMSEQ_PK, Short)
            If (FITVD1_CDF_VO_CODE1_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITVD1_CDF_VO_CODE1_FK, String)
            End If
            If (FITVD1_CDF_PP_CODE1_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FITVD1_CDF_PP_CODE1_FK, String)
            End If
            If (FITVD1_DOSE1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FITVD1_DOSE1.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FITVD1_QUALIFICATIF_DOSE1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FITVD1_QUALIFICATIF_DOSE1, String)
            End If
            If (FITVD1_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FITVD1_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FITVD1_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FITVD1_NUMSEQ_PK, Short)
            If (Original_FITVD1_CDF_VO_CODE1_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FITVD1_CDF_VO_CODE1_FK, String)
            End If
            If (Original_FITVD1_CDF_PP_CODE1_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FITVD1_CDF_PP_CODE1_FK, String)
            End If
            If (Original_FITVD1_DOSE1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FITVD1_DOSE1.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_FITVD1_QUALIFICATIF_DOSE1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_FITVD1_QUALIFICATIF_DOSE1, String)
            End If
            If (Original_FITVD1_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_FITVD1_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITVD1_CDF_VO_CODE1_FK As String, ByVal FITVD1_CDF_PP_CODE1_FK As String, ByVal FITVD1_DOSE1 As Global.System.Nullable(Of Decimal), ByVal FITVD1_QUALIFICATIF_DOSE1 As String, ByVal FITVD1_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITVD1_FIT_CODE_FK_PK As Integer, ByVal Original_FITVD1_NUMSEQ_PK As Short, ByVal Original_FITVD1_CDF_VO_CODE1_FK As String, ByVal Original_FITVD1_CDF_PP_CODE1_FK As String, ByVal Original_FITVD1_DOSE1 As Global.System.Nullable(Of Decimal), ByVal Original_FITVD1_QUALIFICATIF_DOSE1 As String, ByVal Original_FITVD1_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITVD1_FIT_CODE_FK_PK, Original_FITVD1_NUMSEQ_PK, FITVD1_CDF_VO_CODE1_FK, FITVD1_CDF_PP_CODE1_FK, FITVD1_DOSE1, FITVD1_QUALIFICATIF_DOSE1, FITVD1_NUMORD, Original_FITVD1_FIT_CODE_FK_PK, Original_FITVD1_NUMSEQ_PK, Original_FITVD1_CDF_VO_CODE1_FK, Original_FITVD1_CDF_PP_CODE1_FK, Original_FITVD1_DOSE1, Original_FITVD1_QUALIFICATIF_DOSE1, Original_FITVD1_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FITVD2_INTERACTION_VOIE_DOSETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITVD2_INTERACTION_VOIE_DOSE"
            tableMapping.ColumnMappings.Add("FITVD2_FIT_CODE_FK_PK", "FITVD2_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITVD2_NUMSEQ_PK", "FITVD2_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("FITVD2_CDF_VO_CODE2_FK", "FITVD2_CDF_VO_CODE2_FK")
            tableMapping.ColumnMappings.Add("FITVD2_CDF_PP_CODE2_FK", "FITVD2_CDF_PP_CODE2_FK")
            tableMapping.ColumnMappings.Add("FITVD2_DOSE2", "FITVD2_DOSE2")
            tableMapping.ColumnMappings.Add("FITVD2_QUALIFICATIF_DOSE2", "FITVD2_QUALIFICATIF_DOSE2")
            tableMapping.ColumnMappings.Add("FITVD2_NUMORD", "FITVD2_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITVD2_INTERACTION_VOIE_DOSE] WHERE (([FITVD2_FIT_CODE_F"& _ 
                "K_PK] = @Original_FITVD2_FIT_CODE_FK_PK) AND ([FITVD2_NUMSEQ_PK] = @Original_FIT"& _ 
                "VD2_NUMSEQ_PK) AND ((@IsNull_FITVD2_CDF_VO_CODE2_FK = 1 AND [FITVD2_CDF_VO_CODE2"& _ 
                "_FK] IS NULL) OR ([FITVD2_CDF_VO_CODE2_FK] = @Original_FITVD2_CDF_VO_CODE2_FK)) "& _ 
                "AND ((@IsNull_FITVD2_CDF_PP_CODE2_FK = 1 AND [FITVD2_CDF_PP_CODE2_FK] IS NULL) O"& _ 
                "R ([FITVD2_CDF_PP_CODE2_FK] = @Original_FITVD2_CDF_PP_CODE2_FK)) AND ((@IsNull_F"& _ 
                "ITVD2_DOSE2 = 1 AND [FITVD2_DOSE2] IS NULL) OR ([FITVD2_DOSE2] = @Original_FITVD"& _ 
                "2_DOSE2)) AND ((@IsNull_FITVD2_QUALIFICATIF_DOSE2 = 1 AND [FITVD2_QUALIFICATIF_D"& _ 
                "OSE2] IS NULL) OR ([FITVD2_QUALIFICATIF_DOSE2] = @Original_FITVD2_QUALIFICATIF_D"& _ 
                "OSE2)) AND ((@IsNull_FITVD2_NUMORD = 1 AND [FITVD2_NUMORD] IS NULL) OR ([FITVD2_"& _ 
                "NUMORD] = @Original_FITVD2_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_CDF_VO_CODE2_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_VO_CODE2_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_CDF_VO_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_VO_CODE2_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_CDF_PP_CODE2_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_PP_CODE2_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_CDF_PP_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_PP_CODE2_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_DOSE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_DOSE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_DOSE2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD2_DOSE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITVD2_INTERACTION_VOIE_DOSE] ([FITVD2_FIT_CODE_FK_PK], "& _ 
                "[FITVD2_NUMSEQ_PK], [FITVD2_CDF_VO_CODE2_FK], [FITVD2_CDF_PP_CODE2_FK], [FITVD2_"& _ 
                "DOSE2], [FITVD2_QUALIFICATIF_DOSE2], [FITVD2_NUMORD]) VALUES (@FITVD2_FIT_CODE_F"& _ 
                "K_PK, @FITVD2_NUMSEQ_PK, @FITVD2_CDF_VO_CODE2_FK, @FITVD2_CDF_PP_CODE2_FK, @FITV"& _ 
                "D2_DOSE2, @FITVD2_QUALIFICATIF_DOSE2, @FITVD2_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITVD2_FIT_CODE_F"& _ 
                "K_PK, FITVD2_NUMSEQ_PK, FITVD2_CDF_VO_CODE2_FK, FITVD2_CDF_PP_CODE2_FK, FITVD2_D"& _ 
                "OSE2, FITVD2_QUALIFICATIF_DOSE2, FITVD2_NUMORD FROM THERIAQUE.FITVD2_INTERACTION"& _ 
                "_VOIE_DOSE WHERE (FITVD2_FIT_CODE_FK_PK = @FITVD2_FIT_CODE_FK_PK) AND (FITVD2_NU"& _ 
                "MSEQ_PK = @FITVD2_NUMSEQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_CDF_VO_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_VO_CODE2_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_CDF_PP_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_PP_CODE2_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_DOSE2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD2_DOSE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITVD2_INTERACTION_VOIE_DOSE] SET [FITVD2_FIT_CODE_FK_PK] = @"& _ 
                "FITVD2_FIT_CODE_FK_PK, [FITVD2_NUMSEQ_PK] = @FITVD2_NUMSEQ_PK, [FITVD2_CDF_VO_CO"& _ 
                "DE2_FK] = @FITVD2_CDF_VO_CODE2_FK, [FITVD2_CDF_PP_CODE2_FK] = @FITVD2_CDF_PP_COD"& _ 
                "E2_FK, [FITVD2_DOSE2] = @FITVD2_DOSE2, [FITVD2_QUALIFICATIF_DOSE2] = @FITVD2_QUA"& _ 
                "LIFICATIF_DOSE2, [FITVD2_NUMORD] = @FITVD2_NUMORD WHERE (([FITVD2_FIT_CODE_FK_PK"& _ 
                "] = @Original_FITVD2_FIT_CODE_FK_PK) AND ([FITVD2_NUMSEQ_PK] = @Original_FITVD2_"& _ 
                "NUMSEQ_PK) AND ((@IsNull_FITVD2_CDF_VO_CODE2_FK = 1 AND [FITVD2_CDF_VO_CODE2_FK]"& _ 
                " IS NULL) OR ([FITVD2_CDF_VO_CODE2_FK] = @Original_FITVD2_CDF_VO_CODE2_FK)) AND "& _ 
                "((@IsNull_FITVD2_CDF_PP_CODE2_FK = 1 AND [FITVD2_CDF_PP_CODE2_FK] IS NULL) OR (["& _ 
                "FITVD2_CDF_PP_CODE2_FK] = @Original_FITVD2_CDF_PP_CODE2_FK)) AND ((@IsNull_FITVD"& _ 
                "2_DOSE2 = 1 AND [FITVD2_DOSE2] IS NULL) OR ([FITVD2_DOSE2] = @Original_FITVD2_DO"& _ 
                "SE2)) AND ((@IsNull_FITVD2_QUALIFICATIF_DOSE2 = 1 AND [FITVD2_QUALIFICATIF_DOSE2"& _ 
                "] IS NULL) OR ([FITVD2_QUALIFICATIF_DOSE2] = @Original_FITVD2_QUALIFICATIF_DOSE2"& _ 
                ")) AND ((@IsNull_FITVD2_NUMORD = 1 AND [FITVD2_NUMORD] IS NULL) OR ([FITVD2_NUMO"& _ 
                "RD] = @Original_FITVD2_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITVD2_FIT_CODE_FK_PK, FITVD2_NUMSEQ_P"& _ 
                "K, FITVD2_CDF_VO_CODE2_FK, FITVD2_CDF_PP_CODE2_FK, FITVD2_DOSE2, FITVD2_QUALIFIC"& _ 
                "ATIF_DOSE2, FITVD2_NUMORD FROM THERIAQUE.FITVD2_INTERACTION_VOIE_DOSE WHERE (FIT"& _ 
                "VD2_FIT_CODE_FK_PK = @FITVD2_FIT_CODE_FK_PK) AND (FITVD2_NUMSEQ_PK = @FITVD2_NUM"& _ 
                "SEQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_CDF_VO_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_VO_CODE2_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_CDF_PP_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_PP_CODE2_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_DOSE2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD2_DOSE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_CDF_VO_CODE2_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_VO_CODE2_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_CDF_VO_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_VO_CODE2_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_CDF_PP_CODE2_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_PP_CODE2_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_CDF_PP_CODE2_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_CDF_PP_CODE2_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_DOSE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_DOSE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_DOSE2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 3, "FITVD2_DOSE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_QUALIFICATIF_DOSE2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITVD2_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITVD2_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITVD2_FIT_CODE_FK_PK, FITVD2_NUMSEQ_PK, FITVD2_CDF_VO_CODE2_FK, FITVD2_CD" & _
                "F_PP_CODE2_FK, FITVD2_DOSE2, FITVD2_QUALIFICATIF_DOSE2, FITVD2_NUMORD FROM THERI" & _
                "AQUE.FITVD2_INTERACTION_VOIE_DOSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITVD2_FIT_CODE_FK_PK, FITVD2_NUMSEQ_PK, FITVD2_CDF_VO_CODE2_FK, FITVD2_CD" & _
                "F_PP_CODE2_FK, FITVD2_DOSE2, FITVD2_QUALIFICATIF_DOSE2, FITVD2_NUMORD FROM THERI" & _
                "AQUE.FITVD2_INTERACTION_VOIE_DOSE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITVD2_FIT_CODE_FK_PK = @FITVD2_FIT_COD" & _
                "E_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITVD2_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITVD2_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable = New dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable, ByVal FITVD2_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITVD2_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITVD2_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITVD2_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable = New dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITVD2_INTERACTION_VOIE_DOSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITVD2_INTERACTION_VOIE_DOSE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITVD2_FIT_CODE_FK_PK As Integer, ByVal Original_FITVD2_NUMSEQ_PK As Short, ByVal Original_FITVD2_CDF_VO_CODE2_FK As String, ByVal Original_FITVD2_CDF_PP_CODE2_FK As String, ByVal Original_FITVD2_DOSE2 As Global.System.Nullable(Of Decimal), ByVal Original_FITVD2_QUALIFICATIF_DOSE2 As String, ByVal Original_FITVD2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITVD2_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITVD2_NUMSEQ_PK, Short)
            If (Original_FITVD2_CDF_VO_CODE2_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITVD2_CDF_VO_CODE2_FK, String)
            End If
            If (Original_FITVD2_CDF_PP_CODE2_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FITVD2_CDF_PP_CODE2_FK, String)
            End If
            If (Original_FITVD2_DOSE2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FITVD2_DOSE2.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_FITVD2_QUALIFICATIF_DOSE2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_FITVD2_QUALIFICATIF_DOSE2, String)
            End If
            If (Original_FITVD2_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_FITVD2_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITVD2_FIT_CODE_FK_PK As Integer, ByVal FITVD2_NUMSEQ_PK As Short, ByVal FITVD2_CDF_VO_CODE2_FK As String, ByVal FITVD2_CDF_PP_CODE2_FK As String, ByVal FITVD2_DOSE2 As Global.System.Nullable(Of Decimal), ByVal FITVD2_QUALIFICATIF_DOSE2 As String, ByVal FITVD2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITVD2_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITVD2_NUMSEQ_PK, Short)
            If (FITVD2_CDF_VO_CODE2_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITVD2_CDF_VO_CODE2_FK, String)
            End If
            If (FITVD2_CDF_PP_CODE2_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FITVD2_CDF_PP_CODE2_FK, String)
            End If
            If (FITVD2_DOSE2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FITVD2_DOSE2.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FITVD2_QUALIFICATIF_DOSE2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FITVD2_QUALIFICATIF_DOSE2, String)
            End If
            If (FITVD2_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FITVD2_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITVD2_FIT_CODE_FK_PK As Integer, ByVal FITVD2_NUMSEQ_PK As Short, ByVal FITVD2_CDF_VO_CODE2_FK As String, ByVal FITVD2_CDF_PP_CODE2_FK As String, ByVal FITVD2_DOSE2 As Global.System.Nullable(Of Decimal), ByVal FITVD2_QUALIFICATIF_DOSE2 As String, ByVal FITVD2_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITVD2_FIT_CODE_FK_PK As Integer, ByVal Original_FITVD2_NUMSEQ_PK As Short, ByVal Original_FITVD2_CDF_VO_CODE2_FK As String, ByVal Original_FITVD2_CDF_PP_CODE2_FK As String, ByVal Original_FITVD2_DOSE2 As Global.System.Nullable(Of Decimal), ByVal Original_FITVD2_QUALIFICATIF_DOSE2 As String, ByVal Original_FITVD2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITVD2_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITVD2_NUMSEQ_PK, Short)
            If (FITVD2_CDF_VO_CODE2_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITVD2_CDF_VO_CODE2_FK, String)
            End If
            If (FITVD2_CDF_PP_CODE2_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FITVD2_CDF_PP_CODE2_FK, String)
            End If
            If (FITVD2_DOSE2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FITVD2_DOSE2.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FITVD2_QUALIFICATIF_DOSE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FITVD2_QUALIFICATIF_DOSE2, String)
            End If
            If (FITVD2_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FITVD2_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FITVD2_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FITVD2_NUMSEQ_PK, Short)
            If (Original_FITVD2_CDF_VO_CODE2_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FITVD2_CDF_VO_CODE2_FK, String)
            End If
            If (Original_FITVD2_CDF_PP_CODE2_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_FITVD2_CDF_PP_CODE2_FK, String)
            End If
            If (Original_FITVD2_DOSE2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FITVD2_DOSE2.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_FITVD2_QUALIFICATIF_DOSE2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_FITVD2_QUALIFICATIF_DOSE2, String)
            End If
            If (Original_FITVD2_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_FITVD2_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITVD2_CDF_VO_CODE2_FK As String, ByVal FITVD2_CDF_PP_CODE2_FK As String, ByVal FITVD2_DOSE2 As Global.System.Nullable(Of Decimal), ByVal FITVD2_QUALIFICATIF_DOSE2 As String, ByVal FITVD2_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITVD2_FIT_CODE_FK_PK As Integer, ByVal Original_FITVD2_NUMSEQ_PK As Short, ByVal Original_FITVD2_CDF_VO_CODE2_FK As String, ByVal Original_FITVD2_CDF_PP_CODE2_FK As String, ByVal Original_FITVD2_DOSE2 As Global.System.Nullable(Of Decimal), ByVal Original_FITVD2_QUALIFICATIF_DOSE2 As String, ByVal Original_FITVD2_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITVD2_FIT_CODE_FK_PK, Original_FITVD2_NUMSEQ_PK, FITVD2_CDF_VO_CODE2_FK, FITVD2_CDF_PP_CODE2_FK, FITVD2_DOSE2, FITVD2_QUALIFICATIF_DOSE2, FITVD2_NUMORD, Original_FITVD2_FIT_CODE_FK_PK, Original_FITVD2_NUMSEQ_PK, Original_FITVD2_CDF_VO_CODE2_FK, Original_FITVD2_CDF_PP_CODE2_FK, Original_FITVD2_DOSE2, Original_FITVD2_QUALIFICATIF_DOSE2, Original_FITVD2_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FITTER_TERRAINFAVORISANTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITTER_TERRAINFAVORISANT"
            tableMapping.ColumnMappings.Add("FITTER_FIT_CODE_FK_PK", "FITTER_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITTER_CDF_TER_CODE_FK_PK", "FITTER_CDF_TER_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITTER_NUMORD", "FITTER_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITTER_TERRAINFAVORISANT] WHERE (([FITTER_FIT_CODE_FK_PK" & _
                "] = @Original_FITTER_FIT_CODE_FK_PK) AND ([FITTER_CDF_TER_CODE_FK_PK] = @Origina" & _
                "l_FITTER_CDF_TER_CODE_FK_PK) AND ((@IsNull_FITTER_NUMORD = 1 AND [FITTER_NUMORD]" & _
                " IS NULL) OR ([FITTER_NUMORD] = @Original_FITTER_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTER_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITTER_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTER_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITTER_TERRAINFAVORISANT] ([FITTER_FIT_CODE_FK_PK], [FIT" & _
                "TER_CDF_TER_CODE_FK_PK], [FITTER_NUMORD]) VALUES (@FITTER_FIT_CODE_FK_PK, @FITTE" & _
                "R_CDF_TER_CODE_FK_PK, @FITTER_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITTER_FIT_CODE_FK_PK, FITTER_CDF" & _
                "_TER_CODE_FK_PK, FITTER_NUMORD FROM THERIAQUE.FITTER_TERRAINFAVORISANT WHERE (FI" & _
                "TTER_CDF_TER_CODE_FK_PK = @FITTER_CDF_TER_CODE_FK_PK) AND (FITTER_FIT_CODE_FK_PK" & _
                " = @FITTER_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITTER_TERRAINFAVORISANT] SET [FITTER_FIT_CODE_FK_PK] = @FITT" & _
                "ER_FIT_CODE_FK_PK, [FITTER_CDF_TER_CODE_FK_PK] = @FITTER_CDF_TER_CODE_FK_PK, [FI" & _
                "TTER_NUMORD] = @FITTER_NUMORD WHERE (([FITTER_FIT_CODE_FK_PK] = @Original_FITTER" & _
                "_FIT_CODE_FK_PK) AND ([FITTER_CDF_TER_CODE_FK_PK] = @Original_FITTER_CDF_TER_COD" & _
                "E_FK_PK) AND ((@IsNull_FITTER_NUMORD = 1 AND [FITTER_NUMORD] IS NULL) OR ([FITTE" & _
                "R_NUMORD] = @Original_FITTER_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITTER_FIT_CODE_FK_PK, FITTER_CD" & _
                "F_TER_CODE_FK_PK, FITTER_NUMORD FROM THERIAQUE.FITTER_TERRAINFAVORISANT WHERE (F" & _
                "ITTER_CDF_TER_CODE_FK_PK = @FITTER_CDF_TER_CODE_FK_PK) AND (FITTER_FIT_CODE_FK_P" & _
                "K = @FITTER_FIT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTER_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_CDF_TER_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITTER_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITTER_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITTER_FIT_CODE_FK_PK, FITTER_CDF_TER_CODE_FK_PK, FITTER_NUMORD FROM THERI" & _
                "AQUE.FITTER_TERRAINFAVORISANT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITTER_FIT_CODE_FK_PK, FITTER_CDF_TER_CODE_FK_PK, FITTER_NUMORD FROM THERI" & _
                "AQUE.FITTER_TERRAINFAVORISANT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITTER_FIT_CODE_FK_PK = @FITTER_FIT_CODE_FK" & _
                "_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITTER_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITTER_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable = New dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable, ByVal FITTER_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITTER_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITTER_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITTER_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable = New dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITTER_TERRAINFAVORISANTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITTER_TERRAINFAVORISANT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITTER_FIT_CODE_FK_PK As Integer, ByVal Original_FITTER_CDF_TER_CODE_FK_PK As String, ByVal Original_FITTER_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITTER_FIT_CODE_FK_PK, Integer)
            If (Original_FITTER_CDF_TER_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITTER_CDF_TER_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITTER_CDF_TER_CODE_FK_PK, String)
            End If
            If (Original_FITTER_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITTER_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITTER_FIT_CODE_FK_PK As Integer, ByVal FITTER_CDF_TER_CODE_FK_PK As String, ByVal FITTER_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITTER_FIT_CODE_FK_PK, Integer)
            If (FITTER_CDF_TER_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITTER_CDF_TER_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITTER_CDF_TER_CODE_FK_PK, String)
            End If
            If (FITTER_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITTER_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITTER_FIT_CODE_FK_PK As Integer, ByVal FITTER_CDF_TER_CODE_FK_PK As String, ByVal FITTER_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITTER_FIT_CODE_FK_PK As Integer, ByVal Original_FITTER_CDF_TER_CODE_FK_PK As String, ByVal Original_FITTER_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITTER_FIT_CODE_FK_PK, Integer)
            If (FITTER_CDF_TER_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITTER_CDF_TER_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITTER_CDF_TER_CODE_FK_PK, String)
            End If
            If (FITTER_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITTER_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITTER_FIT_CODE_FK_PK, Integer)
            If (Original_FITTER_CDF_TER_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITTER_CDF_TER_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITTER_CDF_TER_CODE_FK_PK, String)
            End If
            If (Original_FITTER_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITTER_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITTER_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITTER_FIT_CODE_FK_PK As Integer, ByVal Original_FITTER_CDF_TER_CODE_FK_PK As String, ByVal Original_FITTER_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITTER_FIT_CODE_FK_PK, Original_FITTER_CDF_TER_CODE_FK_PK, FITTER_NUMORD, Original_FITTER_FIT_CODE_FK_PK, Original_FITTER_CDF_TER_CODE_FK_PK, Original_FITTER_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FITCH_CRITERECHOIXTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITCH_CRITERECHOIX"
            tableMapping.ColumnMappings.Add("FITCH_FIT_CODE_FK_PK", "FITCH_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITCH_CH_CODE_FK_PK", "FITCH_CH_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITCH_NUMORD", "FITCH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITCH_CRITERECHOIX] WHERE (([FITCH_FIT_CODE_FK_PK] = @Or"& _ 
                "iginal_FITCH_FIT_CODE_FK_PK) AND ([FITCH_CH_CODE_FK_PK] = @Original_FITCH_CH_COD"& _ 
                "E_FK_PK) AND ((@IsNull_FITCH_NUMORD = 1 AND [FITCH_NUMORD] IS NULL) OR ([FITCH_N"& _ 
                "UMORD] = @Original_FITCH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITCH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITCH_CRITERECHOIX] ([FITCH_FIT_CODE_FK_PK], [FITCH_CH_C"& _ 
                "ODE_FK_PK], [FITCH_NUMORD]) VALUES (@FITCH_FIT_CODE_FK_PK, @FITCH_CH_CODE_FK_PK,"& _ 
                " @FITCH_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITCH_FIT_CODE_FK_PK, FITCH_CH_CODE_FK_PK, FITCH_NUMORD"& _ 
                " FROM THERIAQUE.FITCH_CRITERECHOIX WHERE (FITCH_CH_CODE_FK_PK = @FITCH_CH_CODE_F"& _ 
                "K_PK) AND (FITCH_FIT_CODE_FK_PK = @FITCH_FIT_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITCH_CRITERECHOIX] SET [FITCH_FIT_CODE_FK_PK] = @FITCH_FIT_C"& _ 
                "ODE_FK_PK, [FITCH_CH_CODE_FK_PK] = @FITCH_CH_CODE_FK_PK, [FITCH_NUMORD] = @FITCH"& _ 
                "_NUMORD WHERE (([FITCH_FIT_CODE_FK_PK] = @Original_FITCH_FIT_CODE_FK_PK) AND ([F"& _ 
                "ITCH_CH_CODE_FK_PK] = @Original_FITCH_CH_CODE_FK_PK) AND ((@IsNull_FITCH_NUMORD "& _ 
                "= 1 AND [FITCH_NUMORD] IS NULL) OR ([FITCH_NUMORD] = @Original_FITCH_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FITCH_FIT_CODE_FK_PK, FITCH_CH_CODE_FK_PK, FITCH_NUMORD FROM THERIAQUE.F"& _ 
                "ITCH_CRITERECHOIX WHERE (FITCH_CH_CODE_FK_PK = @FITCH_CH_CODE_FK_PK) AND (FITCH_"& _ 
                "FIT_CODE_FK_PK = @FITCH_FIT_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCH_CH_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_CH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITCH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITCH_FIT_CODE_FK_PK, FITCH_CH_CODE_FK_PK, FITCH_NUMORD FROM THERIAQUE.FIT" & _
                "CH_CRITERECHOIX"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITCH_FIT_CODE_FK_PK, FITCH_CH_CODE_FK_PK, FITCH_NUMORD FROM THERIAQUE.FIT" & _
                "CH_CRITERECHOIX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITCH_FIT_CODE_FK_PK = @FITCH_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCH_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCH_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable = New dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable, ByVal FITCH_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITCH_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITCH_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITCH_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable = New dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITCH_CRITERECHOIXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITCH_CRITERECHOIX")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITCH_FIT_CODE_FK_PK As Integer, ByVal Original_FITCH_CH_CODE_FK_PK As Integer, ByVal Original_FITCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITCH_FIT_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITCH_CH_CODE_FK_PK, Integer)
            If (Original_FITCH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITCH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITCH_FIT_CODE_FK_PK As Integer, ByVal FITCH_CH_CODE_FK_PK As Integer, ByVal FITCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITCH_FIT_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITCH_CH_CODE_FK_PK, Integer)
            If (FITCH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITCH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITCH_FIT_CODE_FK_PK As Integer, ByVal FITCH_CH_CODE_FK_PK As Integer, ByVal FITCH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITCH_FIT_CODE_FK_PK As Integer, ByVal Original_FITCH_CH_CODE_FK_PK As Integer, ByVal Original_FITCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITCH_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITCH_CH_CODE_FK_PK, Integer)
            If (FITCH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITCH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITCH_FIT_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITCH_CH_CODE_FK_PK, Integer)
            If (Original_FITCH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITCH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITCH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITCH_FIT_CODE_FK_PK As Integer, ByVal Original_FITCH_CH_CODE_FK_PK As Integer, ByVal Original_FITCH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITCH_FIT_CODE_FK_PK, Original_FITCH_CH_CODE_FK_PK, FITCH_NUMORD, Original_FITCH_FIT_CODE_FK_PK, Original_FITCH_CH_CODE_FK_PK, Original_FITCH_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FITCT_COMMENTAIRE_TERRAINTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FITCT_COMMENTAIRE_TERRAIN"
            tableMapping.ColumnMappings.Add("FITCT_FIT_CODE_FK_PK", "FITCT_FIT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITCT_CDF_CT_CODE_FK_PK", "FITCT_CDF_CT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FITCT_NUMORD", "FITCT_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FITCT_COMMENTAIRE_TERRAIN] WHERE (([FITCT_FIT_CODE_FK_PK" & _
                "] = @Original_FITCT_FIT_CODE_FK_PK) AND ([FITCT_CDF_CT_CODE_FK_PK] = @Original_F" & _
                "ITCT_CDF_CT_CODE_FK_PK) AND ((@IsNull_FITCT_NUMORD = 1 AND [FITCT_NUMORD] IS NUL" & _
                "L) OR ([FITCT_NUMORD] = @Original_FITCT_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCT_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITCT_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FITCT_COMMENTAIRE_TERRAIN] ([FITCT_FIT_CODE_FK_PK], [FIT" & _
                "CT_CDF_CT_CODE_FK_PK], [FITCT_NUMORD]) VALUES (@FITCT_FIT_CODE_FK_PK, @FITCT_CDF" & _
                "_CT_CODE_FK_PK, @FITCT_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITCT_FIT_CODE_FK_PK, FITCT_CDF_CT_CODE_" & _
                "FK_PK, FITCT_NUMORD FROM THERIAQUE.FITCT_COMMENTAIRE_TERRAIN WHERE (FITCT_CDF_CT" & _
                "_CODE_FK_PK = @FITCT_CDF_CT_CODE_FK_PK) AND (FITCT_FIT_CODE_FK_PK = @FITCT_FIT_C" & _
                "ODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FITCT_COMMENTAIRE_TERRAIN] SET [FITCT_FIT_CODE_FK_PK] = @FITC" & _
                "T_FIT_CODE_FK_PK, [FITCT_CDF_CT_CODE_FK_PK] = @FITCT_CDF_CT_CODE_FK_PK, [FITCT_N" & _
                "UMORD] = @FITCT_NUMORD WHERE (([FITCT_FIT_CODE_FK_PK] = @Original_FITCT_FIT_CODE" & _
                "_FK_PK) AND ([FITCT_CDF_CT_CODE_FK_PK] = @Original_FITCT_CDF_CT_CODE_FK_PK) AND " & _
                "((@IsNull_FITCT_NUMORD = 1 AND [FITCT_NUMORD] IS NULL) OR ([FITCT_NUMORD] = @Ori" & _
                "ginal_FITCT_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FITCT_FIT_CODE_FK_PK, FITCT_CDF_CT_CODE_FK_PK, FI" & _
                "TCT_NUMORD FROM THERIAQUE.FITCT_COMMENTAIRE_TERRAIN WHERE (FITCT_CDF_CT_CODE_FK_" & _
                "PK = @FITCT_CDF_CT_CODE_FK_PK) AND (FITCT_FIT_CODE_FK_PK = @FITCT_FIT_CODE_FK_PK" & _
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCT_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_CDF_CT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FITCT_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FITCT_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FITCT_FIT_CODE_FK_PK, FITCT_CDF_CT_CODE_FK_PK, FITCT_NUMORD FROM THERIAQUE" & _
                ".FITCT_COMMENTAIRE_TERRAIN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FITCT_FIT_CODE_FK_PK, FITCT_CDF_CT_CODE_FK_PK, FITCT_NUMORD FROM THERIAQUE" & _
                ".FITCT_COMMENTAIRE_TERRAIN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FITCT_FIT_CODE_FK_PK = @FITCT_FIT_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FITCT_FIT_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FITCT_FIT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable = New dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable, ByVal FITCT_FIT_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITCT_FIT_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FITCT_FIT_CODE_FK_PK As Integer) As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FITCT_FIT_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable = New dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_AnalyseOrdonance.FITCT_COMMENTAIRE_TERRAINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_AnalyseOrdonance) As Integer
            Return Me.Adapter.Update(dataSet, "FITCT_COMMENTAIRE_TERRAIN")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FITCT_FIT_CODE_FK_PK As Integer, ByVal Original_FITCT_CDF_CT_CODE_FK_PK As String, ByVal Original_FITCT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FITCT_FIT_CODE_FK_PK, Integer)
            If (Original_FITCT_CDF_CT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITCT_CDF_CT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FITCT_CDF_CT_CODE_FK_PK, String)
            End If
            If (Original_FITCT_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FITCT_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FITCT_FIT_CODE_FK_PK As Integer, ByVal FITCT_CDF_CT_CODE_FK_PK As String, ByVal FITCT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FITCT_FIT_CODE_FK_PK, Integer)
            If (FITCT_CDF_CT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITCT_CDF_CT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FITCT_CDF_CT_CODE_FK_PK, String)
            End If
            If (FITCT_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FITCT_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITCT_FIT_CODE_FK_PK As Integer, ByVal FITCT_CDF_CT_CODE_FK_PK As String, ByVal FITCT_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITCT_FIT_CODE_FK_PK As Integer, ByVal Original_FITCT_CDF_CT_CODE_FK_PK As String, ByVal Original_FITCT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FITCT_FIT_CODE_FK_PK, Integer)
            If (FITCT_CDF_CT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FITCT_CDF_CT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FITCT_CDF_CT_CODE_FK_PK, String)
            End If
            If (FITCT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FITCT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FITCT_FIT_CODE_FK_PK, Integer)
            If (Original_FITCT_CDF_CT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FITCT_CDF_CT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FITCT_CDF_CT_CODE_FK_PK, String)
            End If
            If (Original_FITCT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FITCT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FITCT_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FITCT_FIT_CODE_FK_PK As Integer, ByVal Original_FITCT_CDF_CT_CODE_FK_PK As String, ByVal Original_FITCT_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FITCT_FIT_CODE_FK_PK, Original_FITCT_CDF_CT_CODE_FK_PK, FITCT_NUMORD, Original_FITCT_FIT_CODE_FK_PK, Original_FITCT_CDF_CT_CODE_FK_PK, Original_FITCT_NUMORD)
        End Function
    End Class
End Namespace
