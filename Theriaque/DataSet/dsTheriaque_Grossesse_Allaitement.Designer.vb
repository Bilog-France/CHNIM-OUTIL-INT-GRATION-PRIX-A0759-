'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.8000
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Grossesse_Allaitement"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Grossesse_Allaitement
    Inherits Global.System.Data.DataSet
    
    Private tableFGA_FICHEGRAL As FGA_FICHEGRALDataTable
    
    Private tableFGACPH_GRALCLPH As FGACPH_GRALCLPHDataTable
    
    Private tableFGACCH_GRALCLCH As FGACCH_GRALCLCHDataTable
    
    Private tableFGAPR_GRALPROD As FGAPR_GRALPRODDataTable
    
    Private tableFGASAC_GRALSUBAC As FGASAC_GRALSUBACDataTable
    
    Private tableFGASAU_GRALSUBAU As FGASAU_GRALSUBAUDataTable
    
    Private tableFGASP_GRALSPE As FGASP_GRALSPEDataTable
    
    Private tableFGAOA_OBSERVATION_ANIMALE As FGAOA_OBSERVATION_ANIMALEDataTable
    
    Private tableFGACFA_CIRCONSTFAVORIS_ANIMALE As FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
    
    Private tableFGATX1_FGA_TXOBSERVANI As FGATX1_FGA_TXOBSERVANIDataTable
    
    Private tableFGARIA_RISQUE_ANIMALE As FGARIA_RISQUE_ANIMALEDataTable
    
    Private tableFGAPC_PERIODECRITIQUE_FGRAL As FGAPC_PERIODECRITIQUE_FGRALDataTable
    
    Private tableFGAOH_OBSERVATION_HUMAINE As FGAOH_OBSERVATION_HUMAINEDataTable
    
    Private tableFGACFH_CIRCONSTFAVORIS_HUMAINE As FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
    
    Private tableFGATX3_FGA_TXOBSERVHUM As FGATX3_FGA_TXOBSERVHUMDataTable
    
    Private tableFGARIH_RISQUE_HUMAINE As FGARIH_RISQUE_HUMAINEDataTable
    
    Private tableFGARIG_RISQUE_GROSSESSE As FGARIG_RISQUE_GROSSESSEDataTable
    
    Private tableFGATX7_FGA_TXRECOMMANDAT As FGATX7_FGA_TXRECOMMANDATDataTable
    
    Private tableFGACF_CATFEMMEENCEINTE As FGACF_CATFEMMEENCEINTEDataTable
    
    Private tableFGACN_CATNOUVEAUNE As FGACN_CATNOUVEAUNEDataTable
    
    Private tableFGATX4_FGA_TXCONDATENIRCF As FGATX4_FGA_TXCONDATENIRCFDataTable
    
    Private tableFGATX5_FGA_TXCONDATENIRCN As FGATX5_FGA_TXCONDATENIRCNDataTable
    
    Private tableFGATX9_FGA_TXRECOMMANDAT As FGATX9_FGA_TXRECOMMANDATDataTable
    
    Private tableFGARIFAP_RISQUEFEMMEENAGE As FGARIFAP_RISQUEFEMMEENAGEDataTable
    
    Private tableFGACFAP_CATFEMMEENAGE As FGACFAP_CATFEMMEENAGEDataTable
    
    Private tableFGATX10_FGA_TXRECOMMANDAT As FGATX10_FGA_TXRECOMMANDATDataTable
    
    Private tableFGAON_OBSERVATION_NOUVEAUNE As FGAON_OBSERVATION_NOUVEAUNEDataTable
    
    Private tableFGACFN_CIRCONSFAVORIS_NOUVEAUN As FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
    
    Private tableFGATX2_FGA_TXOBSERVNOUVNE As FGATX2_FGA_TXOBSERVNOUVNEDataTable
    
    Private tableFGARIL_RISQUE_ALLAITEMENT As FGARIL_RISQUE_ALLAITEMENTDataTable
    
    Private tableFGATX8_FGA_TXRECOMMANDAT As FGATX8_FGA_TXRECOMMANDATDataTable
    
    Private tableFGACA_CATALLAITEMENT As FGACA_CATALLAITEMENTDataTable
    
    Private tableFGATX6_FGA_TXCONDATENIRCA As FGATX6_FGA_TXCONDATENIRCADataTable
    
    Private tableFGAAFS_FGA_AFSSAPS As FGAAFS_FGA_AFSSAPSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FGA_FICHEGRAL")) Is Nothing) Then
                MyBase.Tables.Add(New FGA_FICHEGRALDataTable(ds.Tables("FGA_FICHEGRAL")))
            End If
            If (Not (ds.Tables("FGACPH_GRALCLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FGACPH_GRALCLPHDataTable(ds.Tables("FGACPH_GRALCLPH")))
            End If
            If (Not (ds.Tables("FGACCH_GRALCLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FGACCH_GRALCLCHDataTable(ds.Tables("FGACCH_GRALCLCH")))
            End If
            If (Not (ds.Tables("FGAPR_GRALPROD")) Is Nothing) Then
                MyBase.Tables.Add(New FGAPR_GRALPRODDataTable(ds.Tables("FGAPR_GRALPROD")))
            End If
            If (Not (ds.Tables("FGASAC_GRALSUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FGASAC_GRALSUBACDataTable(ds.Tables("FGASAC_GRALSUBAC")))
            End If
            If (Not (ds.Tables("FGASAU_GRALSUBAU")) Is Nothing) Then
                MyBase.Tables.Add(New FGASAU_GRALSUBAUDataTable(ds.Tables("FGASAU_GRALSUBAU")))
            End If
            If (Not (ds.Tables("FGASP_GRALSPE")) Is Nothing) Then
                MyBase.Tables.Add(New FGASP_GRALSPEDataTable(ds.Tables("FGASP_GRALSPE")))
            End If
            If (Not (ds.Tables("FGAOA_OBSERVATION_ANIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New FGAOA_OBSERVATION_ANIMALEDataTable(ds.Tables("FGAOA_OBSERVATION_ANIMALE")))
            End If
            If (Not (ds.Tables("FGACFA_CIRCONSTFAVORIS_ANIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable(ds.Tables("FGACFA_CIRCONSTFAVORIS_ANIMALE")))
            End If
            If (Not (ds.Tables("FGATX1_FGA_TXOBSERVANI")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX1_FGA_TXOBSERVANIDataTable(ds.Tables("FGATX1_FGA_TXOBSERVANI")))
            End If
            If (Not (ds.Tables("FGARIA_RISQUE_ANIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIA_RISQUE_ANIMALEDataTable(ds.Tables("FGARIA_RISQUE_ANIMALE")))
            End If
            If (Not (ds.Tables("FGAPC_PERIODECRITIQUE_FGRAL")) Is Nothing) Then
                MyBase.Tables.Add(New FGAPC_PERIODECRITIQUE_FGRALDataTable(ds.Tables("FGAPC_PERIODECRITIQUE_FGRAL")))
            End If
            If (Not (ds.Tables("FGAOH_OBSERVATION_HUMAINE")) Is Nothing) Then
                MyBase.Tables.Add(New FGAOH_OBSERVATION_HUMAINEDataTable(ds.Tables("FGAOH_OBSERVATION_HUMAINE")))
            End If
            If (Not (ds.Tables("FGACFH_CIRCONSTFAVORIS_HUMAINE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable(ds.Tables("FGACFH_CIRCONSTFAVORIS_HUMAINE")))
            End If
            If (Not (ds.Tables("FGATX3_FGA_TXOBSERVHUM")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX3_FGA_TXOBSERVHUMDataTable(ds.Tables("FGATX3_FGA_TXOBSERVHUM")))
            End If
            If (Not (ds.Tables("FGARIH_RISQUE_HUMAINE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIH_RISQUE_HUMAINEDataTable(ds.Tables("FGARIH_RISQUE_HUMAINE")))
            End If
            If (Not (ds.Tables("FGARIG_RISQUE_GROSSESSE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIG_RISQUE_GROSSESSEDataTable(ds.Tables("FGARIG_RISQUE_GROSSESSE")))
            End If
            If (Not (ds.Tables("FGATX7_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX7_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX7_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGACF_CATFEMMEENCEINTE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACF_CATFEMMEENCEINTEDataTable(ds.Tables("FGACF_CATFEMMEENCEINTE")))
            End If
            If (Not (ds.Tables("FGACN_CATNOUVEAUNE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACN_CATNOUVEAUNEDataTable(ds.Tables("FGACN_CATNOUVEAUNE")))
            End If
            If (Not (ds.Tables("FGATX4_FGA_TXCONDATENIRCF")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX4_FGA_TXCONDATENIRCFDataTable(ds.Tables("FGATX4_FGA_TXCONDATENIRCF")))
            End If
            If (Not (ds.Tables("FGATX5_FGA_TXCONDATENIRCN")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX5_FGA_TXCONDATENIRCNDataTable(ds.Tables("FGATX5_FGA_TXCONDATENIRCN")))
            End If
            If (Not (ds.Tables("FGATX9_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX9_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX9_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGARIFAP_RISQUEFEMMEENAGE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIFAP_RISQUEFEMMEENAGEDataTable(ds.Tables("FGARIFAP_RISQUEFEMMEENAGE")))
            End If
            If (Not (ds.Tables("FGACFAP_CATFEMMEENAGE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFAP_CATFEMMEENAGEDataTable(ds.Tables("FGACFAP_CATFEMMEENAGE")))
            End If
            If (Not (ds.Tables("FGATX10_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX10_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX10_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGAON_OBSERVATION_NOUVEAUNE")) Is Nothing) Then
                MyBase.Tables.Add(New FGAON_OBSERVATION_NOUVEAUNEDataTable(ds.Tables("FGAON_OBSERVATION_NOUVEAUNE")))
            End If
            If (Not (ds.Tables("FGACFN_CIRCONSFAVORIS_NOUVEAUN")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable(ds.Tables("FGACFN_CIRCONSFAVORIS_NOUVEAUN")))
            End If
            If (Not (ds.Tables("FGATX2_FGA_TXOBSERVNOUVNE")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX2_FGA_TXOBSERVNOUVNEDataTable(ds.Tables("FGATX2_FGA_TXOBSERVNOUVNE")))
            End If
            If (Not (ds.Tables("FGARIL_RISQUE_ALLAITEMENT")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIL_RISQUE_ALLAITEMENTDataTable(ds.Tables("FGARIL_RISQUE_ALLAITEMENT")))
            End If
            If (Not (ds.Tables("FGATX8_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX8_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX8_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGACA_CATALLAITEMENT")) Is Nothing) Then
                MyBase.Tables.Add(New FGACA_CATALLAITEMENTDataTable(ds.Tables("FGACA_CATALLAITEMENT")))
            End If
            If (Not (ds.Tables("FGATX6_FGA_TXCONDATENIRCA")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX6_FGA_TXCONDATENIRCADataTable(ds.Tables("FGATX6_FGA_TXCONDATENIRCA")))
            End If
            If (Not (ds.Tables("FGAAFS_FGA_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FGAAFS_FGA_AFSSAPSDataTable(ds.Tables("FGAAFS_FGA_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGA_FICHEGRAL() As FGA_FICHEGRALDataTable
        Get
            Return Me.tableFGA_FICHEGRAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACPH_GRALCLPH() As FGACPH_GRALCLPHDataTable
        Get
            Return Me.tableFGACPH_GRALCLPH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACCH_GRALCLCH() As FGACCH_GRALCLCHDataTable
        Get
            Return Me.tableFGACCH_GRALCLCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGAPR_GRALPROD() As FGAPR_GRALPRODDataTable
        Get
            Return Me.tableFGAPR_GRALPROD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGASAC_GRALSUBAC() As FGASAC_GRALSUBACDataTable
        Get
            Return Me.tableFGASAC_GRALSUBAC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGASAU_GRALSUBAU() As FGASAU_GRALSUBAUDataTable
        Get
            Return Me.tableFGASAU_GRALSUBAU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGASP_GRALSPE() As FGASP_GRALSPEDataTable
        Get
            Return Me.tableFGASP_GRALSPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGAOA_OBSERVATION_ANIMALE() As FGAOA_OBSERVATION_ANIMALEDataTable
        Get
            Return Me.tableFGAOA_OBSERVATION_ANIMALE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACFA_CIRCONSTFAVORIS_ANIMALE() As FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
        Get
            Return Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX1_FGA_TXOBSERVANI() As FGATX1_FGA_TXOBSERVANIDataTable
        Get
            Return Me.tableFGATX1_FGA_TXOBSERVANI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGARIA_RISQUE_ANIMALE() As FGARIA_RISQUE_ANIMALEDataTable
        Get
            Return Me.tableFGARIA_RISQUE_ANIMALE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGAPC_PERIODECRITIQUE_FGRAL() As FGAPC_PERIODECRITIQUE_FGRALDataTable
        Get
            Return Me.tableFGAPC_PERIODECRITIQUE_FGRAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGAOH_OBSERVATION_HUMAINE() As FGAOH_OBSERVATION_HUMAINEDataTable
        Get
            Return Me.tableFGAOH_OBSERVATION_HUMAINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACFH_CIRCONSTFAVORIS_HUMAINE() As FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
        Get
            Return Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX3_FGA_TXOBSERVHUM() As FGATX3_FGA_TXOBSERVHUMDataTable
        Get
            Return Me.tableFGATX3_FGA_TXOBSERVHUM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGARIH_RISQUE_HUMAINE() As FGARIH_RISQUE_HUMAINEDataTable
        Get
            Return Me.tableFGARIH_RISQUE_HUMAINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGARIG_RISQUE_GROSSESSE() As FGARIG_RISQUE_GROSSESSEDataTable
        Get
            Return Me.tableFGARIG_RISQUE_GROSSESSE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX7_FGA_TXRECOMMANDAT() As FGATX7_FGA_TXRECOMMANDATDataTable
        Get
            Return Me.tableFGATX7_FGA_TXRECOMMANDAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACF_CATFEMMEENCEINTE() As FGACF_CATFEMMEENCEINTEDataTable
        Get
            Return Me.tableFGACF_CATFEMMEENCEINTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACN_CATNOUVEAUNE() As FGACN_CATNOUVEAUNEDataTable
        Get
            Return Me.tableFGACN_CATNOUVEAUNE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX4_FGA_TXCONDATENIRCF() As FGATX4_FGA_TXCONDATENIRCFDataTable
        Get
            Return Me.tableFGATX4_FGA_TXCONDATENIRCF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX5_FGA_TXCONDATENIRCN() As FGATX5_FGA_TXCONDATENIRCNDataTable
        Get
            Return Me.tableFGATX5_FGA_TXCONDATENIRCN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX9_FGA_TXRECOMMANDAT() As FGATX9_FGA_TXRECOMMANDATDataTable
        Get
            Return Me.tableFGATX9_FGA_TXRECOMMANDAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGARIFAP_RISQUEFEMMEENAGE() As FGARIFAP_RISQUEFEMMEENAGEDataTable
        Get
            Return Me.tableFGARIFAP_RISQUEFEMMEENAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACFAP_CATFEMMEENAGE() As FGACFAP_CATFEMMEENAGEDataTable
        Get
            Return Me.tableFGACFAP_CATFEMMEENAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX10_FGA_TXRECOMMANDAT() As FGATX10_FGA_TXRECOMMANDATDataTable
        Get
            Return Me.tableFGATX10_FGA_TXRECOMMANDAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGAON_OBSERVATION_NOUVEAUNE() As FGAON_OBSERVATION_NOUVEAUNEDataTable
        Get
            Return Me.tableFGAON_OBSERVATION_NOUVEAUNE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACFN_CIRCONSFAVORIS_NOUVEAUN() As FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
        Get
            Return Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX2_FGA_TXOBSERVNOUVNE() As FGATX2_FGA_TXOBSERVNOUVNEDataTable
        Get
            Return Me.tableFGATX2_FGA_TXOBSERVNOUVNE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGARIL_RISQUE_ALLAITEMENT() As FGARIL_RISQUE_ALLAITEMENTDataTable
        Get
            Return Me.tableFGARIL_RISQUE_ALLAITEMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX8_FGA_TXRECOMMANDAT() As FGATX8_FGA_TXRECOMMANDATDataTable
        Get
            Return Me.tableFGATX8_FGA_TXRECOMMANDAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGACA_CATALLAITEMENT() As FGACA_CATALLAITEMENTDataTable
        Get
            Return Me.tableFGACA_CATALLAITEMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGATX6_FGA_TXCONDATENIRCA() As FGATX6_FGA_TXCONDATENIRCADataTable
        Get
            Return Me.tableFGATX6_FGA_TXCONDATENIRCA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FGAAFS_FGA_AFSSAPS() As FGAAFS_FGA_AFSSAPSDataTable
        Get
            Return Me.tableFGAAFS_FGA_AFSSAPS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsTheriaque_Grossesse_Allaitement = CType(MyBase.Clone,dsTheriaque_Grossesse_Allaitement)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FGA_FICHEGRAL")) Is Nothing) Then
                MyBase.Tables.Add(New FGA_FICHEGRALDataTable(ds.Tables("FGA_FICHEGRAL")))
            End If
            If (Not (ds.Tables("FGACPH_GRALCLPH")) Is Nothing) Then
                MyBase.Tables.Add(New FGACPH_GRALCLPHDataTable(ds.Tables("FGACPH_GRALCLPH")))
            End If
            If (Not (ds.Tables("FGACCH_GRALCLCH")) Is Nothing) Then
                MyBase.Tables.Add(New FGACCH_GRALCLCHDataTable(ds.Tables("FGACCH_GRALCLCH")))
            End If
            If (Not (ds.Tables("FGAPR_GRALPROD")) Is Nothing) Then
                MyBase.Tables.Add(New FGAPR_GRALPRODDataTable(ds.Tables("FGAPR_GRALPROD")))
            End If
            If (Not (ds.Tables("FGASAC_GRALSUBAC")) Is Nothing) Then
                MyBase.Tables.Add(New FGASAC_GRALSUBACDataTable(ds.Tables("FGASAC_GRALSUBAC")))
            End If
            If (Not (ds.Tables("FGASAU_GRALSUBAU")) Is Nothing) Then
                MyBase.Tables.Add(New FGASAU_GRALSUBAUDataTable(ds.Tables("FGASAU_GRALSUBAU")))
            End If
            If (Not (ds.Tables("FGASP_GRALSPE")) Is Nothing) Then
                MyBase.Tables.Add(New FGASP_GRALSPEDataTable(ds.Tables("FGASP_GRALSPE")))
            End If
            If (Not (ds.Tables("FGAOA_OBSERVATION_ANIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New FGAOA_OBSERVATION_ANIMALEDataTable(ds.Tables("FGAOA_OBSERVATION_ANIMALE")))
            End If
            If (Not (ds.Tables("FGACFA_CIRCONSTFAVORIS_ANIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable(ds.Tables("FGACFA_CIRCONSTFAVORIS_ANIMALE")))
            End If
            If (Not (ds.Tables("FGATX1_FGA_TXOBSERVANI")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX1_FGA_TXOBSERVANIDataTable(ds.Tables("FGATX1_FGA_TXOBSERVANI")))
            End If
            If (Not (ds.Tables("FGARIA_RISQUE_ANIMALE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIA_RISQUE_ANIMALEDataTable(ds.Tables("FGARIA_RISQUE_ANIMALE")))
            End If
            If (Not (ds.Tables("FGAPC_PERIODECRITIQUE_FGRAL")) Is Nothing) Then
                MyBase.Tables.Add(New FGAPC_PERIODECRITIQUE_FGRALDataTable(ds.Tables("FGAPC_PERIODECRITIQUE_FGRAL")))
            End If
            If (Not (ds.Tables("FGAOH_OBSERVATION_HUMAINE")) Is Nothing) Then
                MyBase.Tables.Add(New FGAOH_OBSERVATION_HUMAINEDataTable(ds.Tables("FGAOH_OBSERVATION_HUMAINE")))
            End If
            If (Not (ds.Tables("FGACFH_CIRCONSTFAVORIS_HUMAINE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable(ds.Tables("FGACFH_CIRCONSTFAVORIS_HUMAINE")))
            End If
            If (Not (ds.Tables("FGATX3_FGA_TXOBSERVHUM")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX3_FGA_TXOBSERVHUMDataTable(ds.Tables("FGATX3_FGA_TXOBSERVHUM")))
            End If
            If (Not (ds.Tables("FGARIH_RISQUE_HUMAINE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIH_RISQUE_HUMAINEDataTable(ds.Tables("FGARIH_RISQUE_HUMAINE")))
            End If
            If (Not (ds.Tables("FGARIG_RISQUE_GROSSESSE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIG_RISQUE_GROSSESSEDataTable(ds.Tables("FGARIG_RISQUE_GROSSESSE")))
            End If
            If (Not (ds.Tables("FGATX7_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX7_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX7_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGACF_CATFEMMEENCEINTE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACF_CATFEMMEENCEINTEDataTable(ds.Tables("FGACF_CATFEMMEENCEINTE")))
            End If
            If (Not (ds.Tables("FGACN_CATNOUVEAUNE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACN_CATNOUVEAUNEDataTable(ds.Tables("FGACN_CATNOUVEAUNE")))
            End If
            If (Not (ds.Tables("FGATX4_FGA_TXCONDATENIRCF")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX4_FGA_TXCONDATENIRCFDataTable(ds.Tables("FGATX4_FGA_TXCONDATENIRCF")))
            End If
            If (Not (ds.Tables("FGATX5_FGA_TXCONDATENIRCN")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX5_FGA_TXCONDATENIRCNDataTable(ds.Tables("FGATX5_FGA_TXCONDATENIRCN")))
            End If
            If (Not (ds.Tables("FGATX9_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX9_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX9_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGARIFAP_RISQUEFEMMEENAGE")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIFAP_RISQUEFEMMEENAGEDataTable(ds.Tables("FGARIFAP_RISQUEFEMMEENAGE")))
            End If
            If (Not (ds.Tables("FGACFAP_CATFEMMEENAGE")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFAP_CATFEMMEENAGEDataTable(ds.Tables("FGACFAP_CATFEMMEENAGE")))
            End If
            If (Not (ds.Tables("FGATX10_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX10_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX10_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGAON_OBSERVATION_NOUVEAUNE")) Is Nothing) Then
                MyBase.Tables.Add(New FGAON_OBSERVATION_NOUVEAUNEDataTable(ds.Tables("FGAON_OBSERVATION_NOUVEAUNE")))
            End If
            If (Not (ds.Tables("FGACFN_CIRCONSFAVORIS_NOUVEAUN")) Is Nothing) Then
                MyBase.Tables.Add(New FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable(ds.Tables("FGACFN_CIRCONSFAVORIS_NOUVEAUN")))
            End If
            If (Not (ds.Tables("FGATX2_FGA_TXOBSERVNOUVNE")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX2_FGA_TXOBSERVNOUVNEDataTable(ds.Tables("FGATX2_FGA_TXOBSERVNOUVNE")))
            End If
            If (Not (ds.Tables("FGARIL_RISQUE_ALLAITEMENT")) Is Nothing) Then
                MyBase.Tables.Add(New FGARIL_RISQUE_ALLAITEMENTDataTable(ds.Tables("FGARIL_RISQUE_ALLAITEMENT")))
            End If
            If (Not (ds.Tables("FGATX8_FGA_TXRECOMMANDAT")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX8_FGA_TXRECOMMANDATDataTable(ds.Tables("FGATX8_FGA_TXRECOMMANDAT")))
            End If
            If (Not (ds.Tables("FGACA_CATALLAITEMENT")) Is Nothing) Then
                MyBase.Tables.Add(New FGACA_CATALLAITEMENTDataTable(ds.Tables("FGACA_CATALLAITEMENT")))
            End If
            If (Not (ds.Tables("FGATX6_FGA_TXCONDATENIRCA")) Is Nothing) Then
                MyBase.Tables.Add(New FGATX6_FGA_TXCONDATENIRCADataTable(ds.Tables("FGATX6_FGA_TXCONDATENIRCA")))
            End If
            If (Not (ds.Tables("FGAAFS_FGA_AFSSAPS")) Is Nothing) Then
                MyBase.Tables.Add(New FGAAFS_FGA_AFSSAPSDataTable(ds.Tables("FGAAFS_FGA_AFSSAPS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFGA_FICHEGRAL = CType(MyBase.Tables("FGA_FICHEGRAL"),FGA_FICHEGRALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGA_FICHEGRAL) Is Nothing) Then
                Me.tableFGA_FICHEGRAL.InitVars
            End If
        End If
        Me.tableFGACPH_GRALCLPH = CType(MyBase.Tables("FGACPH_GRALCLPH"),FGACPH_GRALCLPHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACPH_GRALCLPH) Is Nothing) Then
                Me.tableFGACPH_GRALCLPH.InitVars
            End If
        End If
        Me.tableFGACCH_GRALCLCH = CType(MyBase.Tables("FGACCH_GRALCLCH"),FGACCH_GRALCLCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACCH_GRALCLCH) Is Nothing) Then
                Me.tableFGACCH_GRALCLCH.InitVars
            End If
        End If
        Me.tableFGAPR_GRALPROD = CType(MyBase.Tables("FGAPR_GRALPROD"),FGAPR_GRALPRODDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGAPR_GRALPROD) Is Nothing) Then
                Me.tableFGAPR_GRALPROD.InitVars
            End If
        End If
        Me.tableFGASAC_GRALSUBAC = CType(MyBase.Tables("FGASAC_GRALSUBAC"),FGASAC_GRALSUBACDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGASAC_GRALSUBAC) Is Nothing) Then
                Me.tableFGASAC_GRALSUBAC.InitVars
            End If
        End If
        Me.tableFGASAU_GRALSUBAU = CType(MyBase.Tables("FGASAU_GRALSUBAU"),FGASAU_GRALSUBAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGASAU_GRALSUBAU) Is Nothing) Then
                Me.tableFGASAU_GRALSUBAU.InitVars
            End If
        End If
        Me.tableFGASP_GRALSPE = CType(MyBase.Tables("FGASP_GRALSPE"),FGASP_GRALSPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGASP_GRALSPE) Is Nothing) Then
                Me.tableFGASP_GRALSPE.InitVars
            End If
        End If
        Me.tableFGAOA_OBSERVATION_ANIMALE = CType(MyBase.Tables("FGAOA_OBSERVATION_ANIMALE"),FGAOA_OBSERVATION_ANIMALEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGAOA_OBSERVATION_ANIMALE) Is Nothing) Then
                Me.tableFGAOA_OBSERVATION_ANIMALE.InitVars
            End If
        End If
        Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE = CType(MyBase.Tables("FGACFA_CIRCONSTFAVORIS_ANIMALE"),FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE) Is Nothing) Then
                Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.InitVars
            End If
        End If
        Me.tableFGATX1_FGA_TXOBSERVANI = CType(MyBase.Tables("FGATX1_FGA_TXOBSERVANI"),FGATX1_FGA_TXOBSERVANIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX1_FGA_TXOBSERVANI) Is Nothing) Then
                Me.tableFGATX1_FGA_TXOBSERVANI.InitVars
            End If
        End If
        Me.tableFGARIA_RISQUE_ANIMALE = CType(MyBase.Tables("FGARIA_RISQUE_ANIMALE"),FGARIA_RISQUE_ANIMALEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGARIA_RISQUE_ANIMALE) Is Nothing) Then
                Me.tableFGARIA_RISQUE_ANIMALE.InitVars
            End If
        End If
        Me.tableFGAPC_PERIODECRITIQUE_FGRAL = CType(MyBase.Tables("FGAPC_PERIODECRITIQUE_FGRAL"),FGAPC_PERIODECRITIQUE_FGRALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGAPC_PERIODECRITIQUE_FGRAL) Is Nothing) Then
                Me.tableFGAPC_PERIODECRITIQUE_FGRAL.InitVars
            End If
        End If
        Me.tableFGAOH_OBSERVATION_HUMAINE = CType(MyBase.Tables("FGAOH_OBSERVATION_HUMAINE"),FGAOH_OBSERVATION_HUMAINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGAOH_OBSERVATION_HUMAINE) Is Nothing) Then
                Me.tableFGAOH_OBSERVATION_HUMAINE.InitVars
            End If
        End If
        Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE = CType(MyBase.Tables("FGACFH_CIRCONSTFAVORIS_HUMAINE"),FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE) Is Nothing) Then
                Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.InitVars
            End If
        End If
        Me.tableFGATX3_FGA_TXOBSERVHUM = CType(MyBase.Tables("FGATX3_FGA_TXOBSERVHUM"),FGATX3_FGA_TXOBSERVHUMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX3_FGA_TXOBSERVHUM) Is Nothing) Then
                Me.tableFGATX3_FGA_TXOBSERVHUM.InitVars
            End If
        End If
        Me.tableFGARIH_RISQUE_HUMAINE = CType(MyBase.Tables("FGARIH_RISQUE_HUMAINE"),FGARIH_RISQUE_HUMAINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGARIH_RISQUE_HUMAINE) Is Nothing) Then
                Me.tableFGARIH_RISQUE_HUMAINE.InitVars
            End If
        End If
        Me.tableFGARIG_RISQUE_GROSSESSE = CType(MyBase.Tables("FGARIG_RISQUE_GROSSESSE"),FGARIG_RISQUE_GROSSESSEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGARIG_RISQUE_GROSSESSE) Is Nothing) Then
                Me.tableFGARIG_RISQUE_GROSSESSE.InitVars
            End If
        End If
        Me.tableFGATX7_FGA_TXRECOMMANDAT = CType(MyBase.Tables("FGATX7_FGA_TXRECOMMANDAT"),FGATX7_FGA_TXRECOMMANDATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX7_FGA_TXRECOMMANDAT) Is Nothing) Then
                Me.tableFGATX7_FGA_TXRECOMMANDAT.InitVars
            End If
        End If
        Me.tableFGACF_CATFEMMEENCEINTE = CType(MyBase.Tables("FGACF_CATFEMMEENCEINTE"),FGACF_CATFEMMEENCEINTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACF_CATFEMMEENCEINTE) Is Nothing) Then
                Me.tableFGACF_CATFEMMEENCEINTE.InitVars
            End If
        End If
        Me.tableFGACN_CATNOUVEAUNE = CType(MyBase.Tables("FGACN_CATNOUVEAUNE"),FGACN_CATNOUVEAUNEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACN_CATNOUVEAUNE) Is Nothing) Then
                Me.tableFGACN_CATNOUVEAUNE.InitVars
            End If
        End If
        Me.tableFGATX4_FGA_TXCONDATENIRCF = CType(MyBase.Tables("FGATX4_FGA_TXCONDATENIRCF"),FGATX4_FGA_TXCONDATENIRCFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX4_FGA_TXCONDATENIRCF) Is Nothing) Then
                Me.tableFGATX4_FGA_TXCONDATENIRCF.InitVars
            End If
        End If
        Me.tableFGATX5_FGA_TXCONDATENIRCN = CType(MyBase.Tables("FGATX5_FGA_TXCONDATENIRCN"),FGATX5_FGA_TXCONDATENIRCNDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX5_FGA_TXCONDATENIRCN) Is Nothing) Then
                Me.tableFGATX5_FGA_TXCONDATENIRCN.InitVars
            End If
        End If
        Me.tableFGATX9_FGA_TXRECOMMANDAT = CType(MyBase.Tables("FGATX9_FGA_TXRECOMMANDAT"),FGATX9_FGA_TXRECOMMANDATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX9_FGA_TXRECOMMANDAT) Is Nothing) Then
                Me.tableFGATX9_FGA_TXRECOMMANDAT.InitVars
            End If
        End If
        Me.tableFGARIFAP_RISQUEFEMMEENAGE = CType(MyBase.Tables("FGARIFAP_RISQUEFEMMEENAGE"),FGARIFAP_RISQUEFEMMEENAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGARIFAP_RISQUEFEMMEENAGE) Is Nothing) Then
                Me.tableFGARIFAP_RISQUEFEMMEENAGE.InitVars
            End If
        End If
        Me.tableFGACFAP_CATFEMMEENAGE = CType(MyBase.Tables("FGACFAP_CATFEMMEENAGE"),FGACFAP_CATFEMMEENAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACFAP_CATFEMMEENAGE) Is Nothing) Then
                Me.tableFGACFAP_CATFEMMEENAGE.InitVars
            End If
        End If
        Me.tableFGATX10_FGA_TXRECOMMANDAT = CType(MyBase.Tables("FGATX10_FGA_TXRECOMMANDAT"),FGATX10_FGA_TXRECOMMANDATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX10_FGA_TXRECOMMANDAT) Is Nothing) Then
                Me.tableFGATX10_FGA_TXRECOMMANDAT.InitVars
            End If
        End If
        Me.tableFGAON_OBSERVATION_NOUVEAUNE = CType(MyBase.Tables("FGAON_OBSERVATION_NOUVEAUNE"),FGAON_OBSERVATION_NOUVEAUNEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGAON_OBSERVATION_NOUVEAUNE) Is Nothing) Then
                Me.tableFGAON_OBSERVATION_NOUVEAUNE.InitVars
            End If
        End If
        Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN = CType(MyBase.Tables("FGACFN_CIRCONSFAVORIS_NOUVEAUN"),FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN) Is Nothing) Then
                Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.InitVars
            End If
        End If
        Me.tableFGATX2_FGA_TXOBSERVNOUVNE = CType(MyBase.Tables("FGATX2_FGA_TXOBSERVNOUVNE"),FGATX2_FGA_TXOBSERVNOUVNEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX2_FGA_TXOBSERVNOUVNE) Is Nothing) Then
                Me.tableFGATX2_FGA_TXOBSERVNOUVNE.InitVars
            End If
        End If
        Me.tableFGARIL_RISQUE_ALLAITEMENT = CType(MyBase.Tables("FGARIL_RISQUE_ALLAITEMENT"),FGARIL_RISQUE_ALLAITEMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGARIL_RISQUE_ALLAITEMENT) Is Nothing) Then
                Me.tableFGARIL_RISQUE_ALLAITEMENT.InitVars
            End If
        End If
        Me.tableFGATX8_FGA_TXRECOMMANDAT = CType(MyBase.Tables("FGATX8_FGA_TXRECOMMANDAT"),FGATX8_FGA_TXRECOMMANDATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX8_FGA_TXRECOMMANDAT) Is Nothing) Then
                Me.tableFGATX8_FGA_TXRECOMMANDAT.InitVars
            End If
        End If
        Me.tableFGACA_CATALLAITEMENT = CType(MyBase.Tables("FGACA_CATALLAITEMENT"),FGACA_CATALLAITEMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGACA_CATALLAITEMENT) Is Nothing) Then
                Me.tableFGACA_CATALLAITEMENT.InitVars
            End If
        End If
        Me.tableFGATX6_FGA_TXCONDATENIRCA = CType(MyBase.Tables("FGATX6_FGA_TXCONDATENIRCA"),FGATX6_FGA_TXCONDATENIRCADataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGATX6_FGA_TXCONDATENIRCA) Is Nothing) Then
                Me.tableFGATX6_FGA_TXCONDATENIRCA.InitVars
            End If
        End If
        Me.tableFGAAFS_FGA_AFSSAPS = CType(MyBase.Tables("FGAAFS_FGA_AFSSAPS"),FGAAFS_FGA_AFSSAPSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFGAAFS_FGA_AFSSAPS) Is Nothing) Then
                Me.tableFGAAFS_FGA_AFSSAPS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Grossesse_Allaitement"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Grossesse_Allaitement.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFGA_FICHEGRAL = New FGA_FICHEGRALDataTable
        MyBase.Tables.Add(Me.tableFGA_FICHEGRAL)
        Me.tableFGACPH_GRALCLPH = New FGACPH_GRALCLPHDataTable
        MyBase.Tables.Add(Me.tableFGACPH_GRALCLPH)
        Me.tableFGACCH_GRALCLCH = New FGACCH_GRALCLCHDataTable
        MyBase.Tables.Add(Me.tableFGACCH_GRALCLCH)
        Me.tableFGAPR_GRALPROD = New FGAPR_GRALPRODDataTable
        MyBase.Tables.Add(Me.tableFGAPR_GRALPROD)
        Me.tableFGASAC_GRALSUBAC = New FGASAC_GRALSUBACDataTable
        MyBase.Tables.Add(Me.tableFGASAC_GRALSUBAC)
        Me.tableFGASAU_GRALSUBAU = New FGASAU_GRALSUBAUDataTable
        MyBase.Tables.Add(Me.tableFGASAU_GRALSUBAU)
        Me.tableFGASP_GRALSPE = New FGASP_GRALSPEDataTable
        MyBase.Tables.Add(Me.tableFGASP_GRALSPE)
        Me.tableFGAOA_OBSERVATION_ANIMALE = New FGAOA_OBSERVATION_ANIMALEDataTable
        MyBase.Tables.Add(Me.tableFGAOA_OBSERVATION_ANIMALE)
        Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE = New FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
        MyBase.Tables.Add(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE)
        Me.tableFGATX1_FGA_TXOBSERVANI = New FGATX1_FGA_TXOBSERVANIDataTable
        MyBase.Tables.Add(Me.tableFGATX1_FGA_TXOBSERVANI)
        Me.tableFGARIA_RISQUE_ANIMALE = New FGARIA_RISQUE_ANIMALEDataTable
        MyBase.Tables.Add(Me.tableFGARIA_RISQUE_ANIMALE)
        Me.tableFGAPC_PERIODECRITIQUE_FGRAL = New FGAPC_PERIODECRITIQUE_FGRALDataTable
        MyBase.Tables.Add(Me.tableFGAPC_PERIODECRITIQUE_FGRAL)
        Me.tableFGAOH_OBSERVATION_HUMAINE = New FGAOH_OBSERVATION_HUMAINEDataTable
        MyBase.Tables.Add(Me.tableFGAOH_OBSERVATION_HUMAINE)
        Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE = New FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
        MyBase.Tables.Add(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE)
        Me.tableFGATX3_FGA_TXOBSERVHUM = New FGATX3_FGA_TXOBSERVHUMDataTable
        MyBase.Tables.Add(Me.tableFGATX3_FGA_TXOBSERVHUM)
        Me.tableFGARIH_RISQUE_HUMAINE = New FGARIH_RISQUE_HUMAINEDataTable
        MyBase.Tables.Add(Me.tableFGARIH_RISQUE_HUMAINE)
        Me.tableFGARIG_RISQUE_GROSSESSE = New FGARIG_RISQUE_GROSSESSEDataTable
        MyBase.Tables.Add(Me.tableFGARIG_RISQUE_GROSSESSE)
        Me.tableFGATX7_FGA_TXRECOMMANDAT = New FGATX7_FGA_TXRECOMMANDATDataTable
        MyBase.Tables.Add(Me.tableFGATX7_FGA_TXRECOMMANDAT)
        Me.tableFGACF_CATFEMMEENCEINTE = New FGACF_CATFEMMEENCEINTEDataTable
        MyBase.Tables.Add(Me.tableFGACF_CATFEMMEENCEINTE)
        Me.tableFGACN_CATNOUVEAUNE = New FGACN_CATNOUVEAUNEDataTable
        MyBase.Tables.Add(Me.tableFGACN_CATNOUVEAUNE)
        Me.tableFGATX4_FGA_TXCONDATENIRCF = New FGATX4_FGA_TXCONDATENIRCFDataTable
        MyBase.Tables.Add(Me.tableFGATX4_FGA_TXCONDATENIRCF)
        Me.tableFGATX5_FGA_TXCONDATENIRCN = New FGATX5_FGA_TXCONDATENIRCNDataTable
        MyBase.Tables.Add(Me.tableFGATX5_FGA_TXCONDATENIRCN)
        Me.tableFGATX9_FGA_TXRECOMMANDAT = New FGATX9_FGA_TXRECOMMANDATDataTable
        MyBase.Tables.Add(Me.tableFGATX9_FGA_TXRECOMMANDAT)
        Me.tableFGARIFAP_RISQUEFEMMEENAGE = New FGARIFAP_RISQUEFEMMEENAGEDataTable
        MyBase.Tables.Add(Me.tableFGARIFAP_RISQUEFEMMEENAGE)
        Me.tableFGACFAP_CATFEMMEENAGE = New FGACFAP_CATFEMMEENAGEDataTable
        MyBase.Tables.Add(Me.tableFGACFAP_CATFEMMEENAGE)
        Me.tableFGATX10_FGA_TXRECOMMANDAT = New FGATX10_FGA_TXRECOMMANDATDataTable
        MyBase.Tables.Add(Me.tableFGATX10_FGA_TXRECOMMANDAT)
        Me.tableFGAON_OBSERVATION_NOUVEAUNE = New FGAON_OBSERVATION_NOUVEAUNEDataTable
        MyBase.Tables.Add(Me.tableFGAON_OBSERVATION_NOUVEAUNE)
        Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN = New FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
        MyBase.Tables.Add(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN)
        Me.tableFGATX2_FGA_TXOBSERVNOUVNE = New FGATX2_FGA_TXOBSERVNOUVNEDataTable
        MyBase.Tables.Add(Me.tableFGATX2_FGA_TXOBSERVNOUVNE)
        Me.tableFGARIL_RISQUE_ALLAITEMENT = New FGARIL_RISQUE_ALLAITEMENTDataTable
        MyBase.Tables.Add(Me.tableFGARIL_RISQUE_ALLAITEMENT)
        Me.tableFGATX8_FGA_TXRECOMMANDAT = New FGATX8_FGA_TXRECOMMANDATDataTable
        MyBase.Tables.Add(Me.tableFGATX8_FGA_TXRECOMMANDAT)
        Me.tableFGACA_CATALLAITEMENT = New FGACA_CATALLAITEMENTDataTable
        MyBase.Tables.Add(Me.tableFGACA_CATALLAITEMENT)
        Me.tableFGATX6_FGA_TXCONDATENIRCA = New FGATX6_FGA_TXCONDATENIRCADataTable
        MyBase.Tables.Add(Me.tableFGATX6_FGA_TXCONDATENIRCA)
        Me.tableFGAAFS_FGA_AFSSAPS = New FGAAFS_FGA_AFSSAPSDataTable
        MyBase.Tables.Add(Me.tableFGAAFS_FGA_AFSSAPS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGA_FICHEGRAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACPH_GRALCLPH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACCH_GRALCLCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGAPR_GRALPROD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGASAC_GRALSUBAC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGASAU_GRALSUBAU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGASP_GRALSPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGAOA_OBSERVATION_ANIMALE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACFA_CIRCONSTFAVORIS_ANIMALE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX1_FGA_TXOBSERVANI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGARIA_RISQUE_ANIMALE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGAPC_PERIODECRITIQUE_FGRAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGAOH_OBSERVATION_HUMAINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACFH_CIRCONSTFAVORIS_HUMAINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX3_FGA_TXOBSERVHUM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGARIH_RISQUE_HUMAINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGARIG_RISQUE_GROSSESSE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX7_FGA_TXRECOMMANDAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACF_CATFEMMEENCEINTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACN_CATNOUVEAUNE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX4_FGA_TXCONDATENIRCF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX5_FGA_TXCONDATENIRCN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX9_FGA_TXRECOMMANDAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGARIFAP_RISQUEFEMMEENAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACFAP_CATFEMMEENAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX10_FGA_TXRECOMMANDAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGAON_OBSERVATION_NOUVEAUNE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACFN_CIRCONSFAVORIS_NOUVEAUN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX2_FGA_TXOBSERVNOUVNE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGARIL_RISQUE_ALLAITEMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX8_FGA_TXRECOMMANDAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGACA_CATALLAITEMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGATX6_FGA_TXCONDATENIRCA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFGAAFS_FGA_AFSSAPS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FGA_FICHEGRALRowChangeEventHandler(ByVal sender As Object, ByVal e As FGA_FICHEGRALRowChangeEvent)
    
    Public Delegate Sub FGACPH_GRALCLPHRowChangeEventHandler(ByVal sender As Object, ByVal e As FGACPH_GRALCLPHRowChangeEvent)
    
    Public Delegate Sub FGACCH_GRALCLCHRowChangeEventHandler(ByVal sender As Object, ByVal e As FGACCH_GRALCLCHRowChangeEvent)
    
    Public Delegate Sub FGAPR_GRALPRODRowChangeEventHandler(ByVal sender As Object, ByVal e As FGAPR_GRALPRODRowChangeEvent)
    
    Public Delegate Sub FGASAC_GRALSUBACRowChangeEventHandler(ByVal sender As Object, ByVal e As FGASAC_GRALSUBACRowChangeEvent)
    
    Public Delegate Sub FGASAU_GRALSUBAURowChangeEventHandler(ByVal sender As Object, ByVal e As FGASAU_GRALSUBAURowChangeEvent)
    
    Public Delegate Sub FGASP_GRALSPERowChangeEventHandler(ByVal sender As Object, ByVal e As FGASP_GRALSPERowChangeEvent)
    
    Public Delegate Sub FGAOA_OBSERVATION_ANIMALERowChangeEventHandler(ByVal sender As Object, ByVal e As FGAOA_OBSERVATION_ANIMALERowChangeEvent)
    
    Public Delegate Sub FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEventHandler(ByVal sender As Object, ByVal e As FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEvent)
    
    Public Delegate Sub FGATX1_FGA_TXOBSERVANIRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX1_FGA_TXOBSERVANIRowChangeEvent)
    
    Public Delegate Sub FGARIA_RISQUE_ANIMALERowChangeEventHandler(ByVal sender As Object, ByVal e As FGARIA_RISQUE_ANIMALERowChangeEvent)
    
    Public Delegate Sub FGAPC_PERIODECRITIQUE_FGRALRowChangeEventHandler(ByVal sender As Object, ByVal e As FGAPC_PERIODECRITIQUE_FGRALRowChangeEvent)
    
    Public Delegate Sub FGAOH_OBSERVATION_HUMAINERowChangeEventHandler(ByVal sender As Object, ByVal e As FGAOH_OBSERVATION_HUMAINERowChangeEvent)
    
    Public Delegate Sub FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEventHandler(ByVal sender As Object, ByVal e As FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEvent)
    
    Public Delegate Sub FGATX3_FGA_TXOBSERVHUMRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX3_FGA_TXOBSERVHUMRowChangeEvent)
    
    Public Delegate Sub FGARIH_RISQUE_HUMAINERowChangeEventHandler(ByVal sender As Object, ByVal e As FGARIH_RISQUE_HUMAINERowChangeEvent)
    
    Public Delegate Sub FGARIG_RISQUE_GROSSESSERowChangeEventHandler(ByVal sender As Object, ByVal e As FGARIG_RISQUE_GROSSESSERowChangeEvent)
    
    Public Delegate Sub FGATX7_FGA_TXRECOMMANDATRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX7_FGA_TXRECOMMANDATRowChangeEvent)
    
    Public Delegate Sub FGACF_CATFEMMEENCEINTERowChangeEventHandler(ByVal sender As Object, ByVal e As FGACF_CATFEMMEENCEINTERowChangeEvent)
    
    Public Delegate Sub FGACN_CATNOUVEAUNERowChangeEventHandler(ByVal sender As Object, ByVal e As FGACN_CATNOUVEAUNERowChangeEvent)
    
    Public Delegate Sub FGATX4_FGA_TXCONDATENIRCFRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX4_FGA_TXCONDATENIRCFRowChangeEvent)
    
    Public Delegate Sub FGATX5_FGA_TXCONDATENIRCNRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX5_FGA_TXCONDATENIRCNRowChangeEvent)
    
    Public Delegate Sub FGATX9_FGA_TXRECOMMANDATRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX9_FGA_TXRECOMMANDATRowChangeEvent)
    
    Public Delegate Sub FGARIFAP_RISQUEFEMMEENAGERowChangeEventHandler(ByVal sender As Object, ByVal e As FGARIFAP_RISQUEFEMMEENAGERowChangeEvent)
    
    Public Delegate Sub FGACFAP_CATFEMMEENAGERowChangeEventHandler(ByVal sender As Object, ByVal e As FGACFAP_CATFEMMEENAGERowChangeEvent)
    
    Public Delegate Sub FGATX10_FGA_TXRECOMMANDATRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX10_FGA_TXRECOMMANDATRowChangeEvent)
    
    Public Delegate Sub FGAON_OBSERVATION_NOUVEAUNERowChangeEventHandler(ByVal sender As Object, ByVal e As FGAON_OBSERVATION_NOUVEAUNERowChangeEvent)
    
    Public Delegate Sub FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEventHandler(ByVal sender As Object, ByVal e As FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEvent)
    
    Public Delegate Sub FGATX2_FGA_TXOBSERVNOUVNERowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX2_FGA_TXOBSERVNOUVNERowChangeEvent)
    
    Public Delegate Sub FGARIL_RISQUE_ALLAITEMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As FGARIL_RISQUE_ALLAITEMENTRowChangeEvent)
    
    Public Delegate Sub FGATX8_FGA_TXRECOMMANDATRowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX8_FGA_TXRECOMMANDATRowChangeEvent)
    
    Public Delegate Sub FGACA_CATALLAITEMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As FGACA_CATALLAITEMENTRowChangeEvent)
    
    Public Delegate Sub FGATX6_FGA_TXCONDATENIRCARowChangeEventHandler(ByVal sender As Object, ByVal e As FGATX6_FGA_TXCONDATENIRCARowChangeEvent)
    
    Public Delegate Sub FGAAFS_FGA_AFSSAPSRowChangeEventHandler(ByVal sender As Object, ByVal e As FGAAFS_FGA_AFSSAPSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGA_FICHEGRALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGA_CODE_SQ_PK As Global.System.Data.DataColumn
        
        Private columnFGA_TYPEEFFET As Global.System.Data.DataColumn
        
        Private columnFGA_PASSAGELAIT As Global.System.Data.DataColumn
        
        Private columnFGA_FIXATIONPROTEIQUE As Global.System.Data.DataColumn
        
        Private columnFGA_FIXATIONPROTEIQUE_MINI As Global.System.Data.DataColumn
        
        Private columnFGA_FIXATIONPROTEIQUE_MAXI As Global.System.Data.DataColumn
        
        Private columnFGA_PLASMALAIT As Global.System.Data.DataColumn
        
        Private columnFGA_PLASMALAIT_MINI As Global.System.Data.DataColumn
        
        Private columnFGA_PLASMALAIT_MAXI As Global.System.Data.DataColumn
        
        Private columnFGA_CONCENTRATION As Global.System.Data.DataColumn
        
        Private columnFGA_CONCENTRATION_MINI As Global.System.Data.DataColumn
        
        Private columnFGA_CONCENTRATION_MAXI As Global.System.Data.DataColumn
        
        Private columnFGA_CDF_UC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFGA_DATECR As Global.System.Data.DataColumn
        
        Private columnFGA_DATEMJ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGA_FICHEGRAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_CODE_SQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_CODE_SQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_TYPEEFFETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_TYPEEFFET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_PASSAGELAITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_PASSAGELAIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_FIXATIONPROTEIQUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_FIXATIONPROTEIQUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_FIXATIONPROTEIQUE_MINIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_FIXATIONPROTEIQUE_MINI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_FIXATIONPROTEIQUE_MAXIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_FIXATIONPROTEIQUE_MAXI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_PLASMALAITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_PLASMALAIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_PLASMALAIT_MINIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_PLASMALAIT_MINI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_PLASMALAIT_MAXIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_PLASMALAIT_MAXI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_CONCENTRATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_CONCENTRATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_CONCENTRATION_MINIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_CONCENTRATION_MINI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_CONCENTRATION_MAXIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_CONCENTRATION_MAXI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_CDF_UC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_CDF_UC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_DATECRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_DATECR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGA_DATEMJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGA_DATEMJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGA_FICHEGRALRow
            Get
                Return CType(Me.Rows(index),FGA_FICHEGRALRow)
            End Get
        End Property
        
        Public Event FGA_FICHEGRALRowChanging As FGA_FICHEGRALRowChangeEventHandler
        
        Public Event FGA_FICHEGRALRowChanged As FGA_FICHEGRALRowChangeEventHandler
        
        Public Event FGA_FICHEGRALRowDeleting As FGA_FICHEGRALRowChangeEventHandler
        
        Public Event FGA_FICHEGRALRowDeleted As FGA_FICHEGRALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGA_FICHEGRALRow(ByVal row As FGA_FICHEGRALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGA_FICHEGRALRow(ByVal FGA_CODE_SQ_PK As Integer, ByVal FGA_TYPEEFFET As String, ByVal FGA_PASSAGELAIT As String, ByVal FGA_FIXATIONPROTEIQUE As String, ByVal FGA_FIXATIONPROTEIQUE_MINI As Decimal, ByVal FGA_FIXATIONPROTEIQUE_MAXI As Decimal, ByVal FGA_PLASMALAIT As String, ByVal FGA_PLASMALAIT_MINI As Decimal, ByVal FGA_PLASMALAIT_MAXI As Decimal, ByVal FGA_CONCENTRATION As String, ByVal FGA_CONCENTRATION_MINI As Decimal, ByVal FGA_CONCENTRATION_MAXI As Decimal, ByVal FGA_CDF_UC_CODE_FK As String, ByVal FGA_DATECR As Date, ByVal FGA_DATEMJ As Date) As FGA_FICHEGRALRow
            Dim rowFGA_FICHEGRALRow As FGA_FICHEGRALRow = CType(Me.NewRow,FGA_FICHEGRALRow)
            Dim columnValuesArray() As Object = New Object() {FGA_CODE_SQ_PK, FGA_TYPEEFFET, FGA_PASSAGELAIT, FGA_FIXATIONPROTEIQUE, FGA_FIXATIONPROTEIQUE_MINI, FGA_FIXATIONPROTEIQUE_MAXI, FGA_PLASMALAIT, FGA_PLASMALAIT_MINI, FGA_PLASMALAIT_MAXI, FGA_CONCENTRATION, FGA_CONCENTRATION_MINI, FGA_CONCENTRATION_MAXI, FGA_CDF_UC_CODE_FK, FGA_DATECR, FGA_DATEMJ}
            rowFGA_FICHEGRALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGA_FICHEGRALRow)
            Return rowFGA_FICHEGRALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGA_CODE_SQ_PK(ByVal FGA_CODE_SQ_PK As Integer) As FGA_FICHEGRALRow
            Return CType(Me.Rows.Find(New Object() {FGA_CODE_SQ_PK}),FGA_FICHEGRALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGA_FICHEGRALDataTable = CType(MyBase.Clone,FGA_FICHEGRALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGA_FICHEGRALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGA_CODE_SQ_PK = MyBase.Columns("FGA_CODE_SQ_PK")
            Me.columnFGA_TYPEEFFET = MyBase.Columns("FGA_TYPEEFFET")
            Me.columnFGA_PASSAGELAIT = MyBase.Columns("FGA_PASSAGELAIT")
            Me.columnFGA_FIXATIONPROTEIQUE = MyBase.Columns("FGA_FIXATIONPROTEIQUE")
            Me.columnFGA_FIXATIONPROTEIQUE_MINI = MyBase.Columns("FGA_FIXATIONPROTEIQUE_MINI")
            Me.columnFGA_FIXATIONPROTEIQUE_MAXI = MyBase.Columns("FGA_FIXATIONPROTEIQUE_MAXI")
            Me.columnFGA_PLASMALAIT = MyBase.Columns("FGA_PLASMALAIT")
            Me.columnFGA_PLASMALAIT_MINI = MyBase.Columns("FGA_PLASMALAIT_MINI")
            Me.columnFGA_PLASMALAIT_MAXI = MyBase.Columns("FGA_PLASMALAIT_MAXI")
            Me.columnFGA_CONCENTRATION = MyBase.Columns("FGA_CONCENTRATION")
            Me.columnFGA_CONCENTRATION_MINI = MyBase.Columns("FGA_CONCENTRATION_MINI")
            Me.columnFGA_CONCENTRATION_MAXI = MyBase.Columns("FGA_CONCENTRATION_MAXI")
            Me.columnFGA_CDF_UC_CODE_FK = MyBase.Columns("FGA_CDF_UC_CODE_FK")
            Me.columnFGA_DATECR = MyBase.Columns("FGA_DATECR")
            Me.columnFGA_DATEMJ = MyBase.Columns("FGA_DATEMJ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGA_CODE_SQ_PK = New Global.System.Data.DataColumn("FGA_CODE_SQ_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_CODE_SQ_PK)
            Me.columnFGA_TYPEEFFET = New Global.System.Data.DataColumn("FGA_TYPEEFFET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_TYPEEFFET)
            Me.columnFGA_PASSAGELAIT = New Global.System.Data.DataColumn("FGA_PASSAGELAIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_PASSAGELAIT)
            Me.columnFGA_FIXATIONPROTEIQUE = New Global.System.Data.DataColumn("FGA_FIXATIONPROTEIQUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_FIXATIONPROTEIQUE)
            Me.columnFGA_FIXATIONPROTEIQUE_MINI = New Global.System.Data.DataColumn("FGA_FIXATIONPROTEIQUE_MINI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_FIXATIONPROTEIQUE_MINI)
            Me.columnFGA_FIXATIONPROTEIQUE_MAXI = New Global.System.Data.DataColumn("FGA_FIXATIONPROTEIQUE_MAXI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_FIXATIONPROTEIQUE_MAXI)
            Me.columnFGA_PLASMALAIT = New Global.System.Data.DataColumn("FGA_PLASMALAIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_PLASMALAIT)
            Me.columnFGA_PLASMALAIT_MINI = New Global.System.Data.DataColumn("FGA_PLASMALAIT_MINI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_PLASMALAIT_MINI)
            Me.columnFGA_PLASMALAIT_MAXI = New Global.System.Data.DataColumn("FGA_PLASMALAIT_MAXI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_PLASMALAIT_MAXI)
            Me.columnFGA_CONCENTRATION = New Global.System.Data.DataColumn("FGA_CONCENTRATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_CONCENTRATION)
            Me.columnFGA_CONCENTRATION_MINI = New Global.System.Data.DataColumn("FGA_CONCENTRATION_MINI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_CONCENTRATION_MINI)
            Me.columnFGA_CONCENTRATION_MAXI = New Global.System.Data.DataColumn("FGA_CONCENTRATION_MAXI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_CONCENTRATION_MAXI)
            Me.columnFGA_CDF_UC_CODE_FK = New Global.System.Data.DataColumn("FGA_CDF_UC_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_CDF_UC_CODE_FK)
            Me.columnFGA_DATECR = New Global.System.Data.DataColumn("FGA_DATECR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_DATECR)
            Me.columnFGA_DATEMJ = New Global.System.Data.DataColumn("FGA_DATEMJ", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGA_DATEMJ)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGA_CODE_SQ_PK}, true))
            Me.columnFGA_CODE_SQ_PK.AllowDBNull = false
            Me.columnFGA_CODE_SQ_PK.Unique = true
            Me.columnFGA_TYPEEFFET.MaxLength = 1
            Me.columnFGA_PASSAGELAIT.MaxLength = 1
            Me.columnFGA_FIXATIONPROTEIQUE.MaxLength = 1
            Me.columnFGA_PLASMALAIT.MaxLength = 1
            Me.columnFGA_CONCENTRATION.MaxLength = 1
            Me.columnFGA_CDF_UC_CODE_FK.MaxLength = 10
            Me.columnFGA_DATECR.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGA_FICHEGRALRow() As FGA_FICHEGRALRow
            Return CType(Me.NewRow,FGA_FICHEGRALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGA_FICHEGRALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGA_FICHEGRALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGA_FICHEGRALRowChangedEvent) Is Nothing) Then
                RaiseEvent FGA_FICHEGRALRowChanged(Me, New FGA_FICHEGRALRowChangeEvent(CType(e.Row,FGA_FICHEGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGA_FICHEGRALRowChangingEvent) Is Nothing) Then
                RaiseEvent FGA_FICHEGRALRowChanging(Me, New FGA_FICHEGRALRowChangeEvent(CType(e.Row,FGA_FICHEGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGA_FICHEGRALRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGA_FICHEGRALRowDeleted(Me, New FGA_FICHEGRALRowChangeEvent(CType(e.Row,FGA_FICHEGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGA_FICHEGRALRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGA_FICHEGRALRowDeleting(Me, New FGA_FICHEGRALRowChangeEvent(CType(e.Row,FGA_FICHEGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGA_FICHEGRALRow(ByVal row As FGA_FICHEGRALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGA_FICHEGRALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACPH_GRALCLPHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACPH_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACPH_CPH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACPH_GRALCLPH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACPH_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACPH_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACPH_CPH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACPH_CPH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACPH_GRALCLPHRow
            Get
                Return CType(Me.Rows(index),FGACPH_GRALCLPHRow)
            End Get
        End Property
        
        Public Event FGACPH_GRALCLPHRowChanging As FGACPH_GRALCLPHRowChangeEventHandler
        
        Public Event FGACPH_GRALCLPHRowChanged As FGACPH_GRALCLPHRowChangeEventHandler
        
        Public Event FGACPH_GRALCLPHRowDeleting As FGACPH_GRALCLPHRowChangeEventHandler
        
        Public Event FGACPH_GRALCLPHRowDeleted As FGACPH_GRALCLPHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACPH_GRALCLPHRow(ByVal row As FGACPH_GRALCLPHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACPH_GRALCLPHRow(ByVal FGACPH_FGA_CODE_FK_PK As Integer, ByVal FGACPH_CPH_CODE_FK_PK As String) As FGACPH_GRALCLPHRow
            Dim rowFGACPH_GRALCLPHRow As FGACPH_GRALCLPHRow = CType(Me.NewRow,FGACPH_GRALCLPHRow)
            Dim columnValuesArray() As Object = New Object() {FGACPH_FGA_CODE_FK_PK, FGACPH_CPH_CODE_FK_PK}
            rowFGACPH_GRALCLPHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACPH_GRALCLPHRow)
            Return rowFGACPH_GRALCLPHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACPH_FGA_CODE_FK_PKFGACPH_CPH_CODE_FK_PK(ByVal FGACPH_FGA_CODE_FK_PK As Integer, ByVal FGACPH_CPH_CODE_FK_PK As String) As FGACPH_GRALCLPHRow
            Return CType(Me.Rows.Find(New Object() {FGACPH_FGA_CODE_FK_PK, FGACPH_CPH_CODE_FK_PK}),FGACPH_GRALCLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACPH_GRALCLPHDataTable = CType(MyBase.Clone,FGACPH_GRALCLPHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACPH_GRALCLPHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACPH_FGA_CODE_FK_PK = MyBase.Columns("FGACPH_FGA_CODE_FK_PK")
            Me.columnFGACPH_CPH_CODE_FK_PK = MyBase.Columns("FGACPH_CPH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACPH_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACPH_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACPH_FGA_CODE_FK_PK)
            Me.columnFGACPH_CPH_CODE_FK_PK = New Global.System.Data.DataColumn("FGACPH_CPH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACPH_CPH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACPH_FGA_CODE_FK_PK, Me.columnFGACPH_CPH_CODE_FK_PK}, true))
            Me.columnFGACPH_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACPH_CPH_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACPH_CPH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACPH_GRALCLPHRow() As FGACPH_GRALCLPHRow
            Return CType(Me.NewRow,FGACPH_GRALCLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACPH_GRALCLPHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACPH_GRALCLPHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACPH_GRALCLPHRowChangedEvent) Is Nothing) Then
                RaiseEvent FGACPH_GRALCLPHRowChanged(Me, New FGACPH_GRALCLPHRowChangeEvent(CType(e.Row,FGACPH_GRALCLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACPH_GRALCLPHRowChangingEvent) Is Nothing) Then
                RaiseEvent FGACPH_GRALCLPHRowChanging(Me, New FGACPH_GRALCLPHRowChangeEvent(CType(e.Row,FGACPH_GRALCLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACPH_GRALCLPHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACPH_GRALCLPHRowDeleted(Me, New FGACPH_GRALCLPHRowChangeEvent(CType(e.Row,FGACPH_GRALCLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACPH_GRALCLPHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACPH_GRALCLPHRowDeleting(Me, New FGACPH_GRALCLPHRowChangeEvent(CType(e.Row,FGACPH_GRALCLPHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACPH_GRALCLPHRow(ByVal row As FGACPH_GRALCLPHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACPH_GRALCLPHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACCH_GRALCLCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACCH_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACCH_CCH_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACCH_GRALCLCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACCH_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACCH_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACCH_CCH_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACCH_GRALCLCHRow
            Get
                Return CType(Me.Rows(index),FGACCH_GRALCLCHRow)
            End Get
        End Property
        
        Public Event FGACCH_GRALCLCHRowChanging As FGACCH_GRALCLCHRowChangeEventHandler
        
        Public Event FGACCH_GRALCLCHRowChanged As FGACCH_GRALCLCHRowChangeEventHandler
        
        Public Event FGACCH_GRALCLCHRowDeleting As FGACCH_GRALCLCHRowChangeEventHandler
        
        Public Event FGACCH_GRALCLCHRowDeleted As FGACCH_GRALCLCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACCH_GRALCLCHRow(ByVal row As FGACCH_GRALCLCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACCH_GRALCLCHRow(ByVal FGACCH_FGA_CODE_FK_PK As Integer, ByVal FGACCH_CCH_CODE_FK_PK As String) As FGACCH_GRALCLCHRow
            Dim rowFGACCH_GRALCLCHRow As FGACCH_GRALCLCHRow = CType(Me.NewRow,FGACCH_GRALCLCHRow)
            Dim columnValuesArray() As Object = New Object() {FGACCH_FGA_CODE_FK_PK, FGACCH_CCH_CODE_FK_PK}
            rowFGACCH_GRALCLCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACCH_GRALCLCHRow)
            Return rowFGACCH_GRALCLCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACCH_FGA_CODE_FK_PKFGACCH_CCH_CODE_FK_PK(ByVal FGACCH_FGA_CODE_FK_PK As Integer, ByVal FGACCH_CCH_CODE_FK_PK As String) As FGACCH_GRALCLCHRow
            Return CType(Me.Rows.Find(New Object() {FGACCH_FGA_CODE_FK_PK, FGACCH_CCH_CODE_FK_PK}),FGACCH_GRALCLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACCH_GRALCLCHDataTable = CType(MyBase.Clone,FGACCH_GRALCLCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACCH_GRALCLCHDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACCH_FGA_CODE_FK_PK = MyBase.Columns("FGACCH_FGA_CODE_FK_PK")
            Me.columnFGACCH_CCH_CODE_FK_PK = MyBase.Columns("FGACCH_CCH_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACCH_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACCH_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACCH_FGA_CODE_FK_PK)
            Me.columnFGACCH_CCH_CODE_FK_PK = New Global.System.Data.DataColumn("FGACCH_CCH_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACCH_FGA_CODE_FK_PK, Me.columnFGACCH_CCH_CODE_FK_PK}, true))
            Me.columnFGACCH_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACCH_GRALCLCHRow() As FGACCH_GRALCLCHRow
            Return CType(Me.NewRow,FGACCH_GRALCLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACCH_GRALCLCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACCH_GRALCLCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACCH_GRALCLCHRowChangedEvent) Is Nothing) Then
                RaiseEvent FGACCH_GRALCLCHRowChanged(Me, New FGACCH_GRALCLCHRowChangeEvent(CType(e.Row,FGACCH_GRALCLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACCH_GRALCLCHRowChangingEvent) Is Nothing) Then
                RaiseEvent FGACCH_GRALCLCHRowChanging(Me, New FGACCH_GRALCLCHRowChangeEvent(CType(e.Row,FGACCH_GRALCLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACCH_GRALCLCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACCH_GRALCLCHRowDeleted(Me, New FGACCH_GRALCLCHRowChangeEvent(CType(e.Row,FGACCH_GRALCLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACCH_GRALCLCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACCH_GRALCLCHRowDeleting(Me, New FGACCH_GRALCLCHRowChangeEvent(CType(e.Row,FGACCH_GRALCLCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACCH_GRALCLCHRow(ByVal row As FGACCH_GRALCLCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACCH_GRALCLCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGAPR_GRALPRODDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGAPR_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAPR_PR_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGAPR_GRALPROD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAPR_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAPR_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAPR_PR_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAPR_PR_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGAPR_GRALPRODRow
            Get
                Return CType(Me.Rows(index),FGAPR_GRALPRODRow)
            End Get
        End Property
        
        Public Event FGAPR_GRALPRODRowChanging As FGAPR_GRALPRODRowChangeEventHandler
        
        Public Event FGAPR_GRALPRODRowChanged As FGAPR_GRALPRODRowChangeEventHandler
        
        Public Event FGAPR_GRALPRODRowDeleting As FGAPR_GRALPRODRowChangeEventHandler
        
        Public Event FGAPR_GRALPRODRowDeleted As FGAPR_GRALPRODRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGAPR_GRALPRODRow(ByVal row As FGAPR_GRALPRODRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGAPR_GRALPRODRow(ByVal FGAPR_FGA_CODE_FK_PK As Integer, ByVal FGAPR_PR_CODE_FK_PK As Integer) As FGAPR_GRALPRODRow
            Dim rowFGAPR_GRALPRODRow As FGAPR_GRALPRODRow = CType(Me.NewRow,FGAPR_GRALPRODRow)
            Dim columnValuesArray() As Object = New Object() {FGAPR_FGA_CODE_FK_PK, FGAPR_PR_CODE_FK_PK}
            rowFGAPR_GRALPRODRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGAPR_GRALPRODRow)
            Return rowFGAPR_GRALPRODRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGAPR_FGA_CODE_FK_PKFGAPR_PR_CODE_FK_PK(ByVal FGAPR_FGA_CODE_FK_PK As Integer, ByVal FGAPR_PR_CODE_FK_PK As Integer) As FGAPR_GRALPRODRow
            Return CType(Me.Rows.Find(New Object() {FGAPR_FGA_CODE_FK_PK, FGAPR_PR_CODE_FK_PK}),FGAPR_GRALPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGAPR_GRALPRODDataTable = CType(MyBase.Clone,FGAPR_GRALPRODDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGAPR_GRALPRODDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGAPR_FGA_CODE_FK_PK = MyBase.Columns("FGAPR_FGA_CODE_FK_PK")
            Me.columnFGAPR_PR_CODE_FK_PK = MyBase.Columns("FGAPR_PR_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGAPR_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGAPR_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAPR_FGA_CODE_FK_PK)
            Me.columnFGAPR_PR_CODE_FK_PK = New Global.System.Data.DataColumn("FGAPR_PR_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAPR_PR_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGAPR_FGA_CODE_FK_PK, Me.columnFGAPR_PR_CODE_FK_PK}, true))
            Me.columnFGAPR_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAPR_PR_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGAPR_GRALPRODRow() As FGAPR_GRALPRODRow
            Return CType(Me.NewRow,FGAPR_GRALPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGAPR_GRALPRODRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGAPR_GRALPRODRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGAPR_GRALPRODRowChangedEvent) Is Nothing) Then
                RaiseEvent FGAPR_GRALPRODRowChanged(Me, New FGAPR_GRALPRODRowChangeEvent(CType(e.Row,FGAPR_GRALPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGAPR_GRALPRODRowChangingEvent) Is Nothing) Then
                RaiseEvent FGAPR_GRALPRODRowChanging(Me, New FGAPR_GRALPRODRowChangeEvent(CType(e.Row,FGAPR_GRALPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGAPR_GRALPRODRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGAPR_GRALPRODRowDeleted(Me, New FGAPR_GRALPRODRowChangeEvent(CType(e.Row,FGAPR_GRALPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGAPR_GRALPRODRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGAPR_GRALPRODRowDeleting(Me, New FGAPR_GRALPRODRowChangeEvent(CType(e.Row,FGAPR_GRALPRODRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGAPR_GRALPRODRow(ByVal row As FGAPR_GRALPRODRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGAPR_GRALPRODDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGASAC_GRALSUBACDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGASAC_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGASAC_SAC_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGASAC_GRALSUBAC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGASAC_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGASAC_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGASAC_SAC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGASAC_SAC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGASAC_GRALSUBACRow
            Get
                Return CType(Me.Rows(index),FGASAC_GRALSUBACRow)
            End Get
        End Property
        
        Public Event FGASAC_GRALSUBACRowChanging As FGASAC_GRALSUBACRowChangeEventHandler
        
        Public Event FGASAC_GRALSUBACRowChanged As FGASAC_GRALSUBACRowChangeEventHandler
        
        Public Event FGASAC_GRALSUBACRowDeleting As FGASAC_GRALSUBACRowChangeEventHandler
        
        Public Event FGASAC_GRALSUBACRowDeleted As FGASAC_GRALSUBACRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGASAC_GRALSUBACRow(ByVal row As FGASAC_GRALSUBACRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGASAC_GRALSUBACRow(ByVal FGASAC_FGA_CODE_FK_PK As Integer, ByVal FGASAC_SAC_CODE_FK_PK As Integer) As FGASAC_GRALSUBACRow
            Dim rowFGASAC_GRALSUBACRow As FGASAC_GRALSUBACRow = CType(Me.NewRow,FGASAC_GRALSUBACRow)
            Dim columnValuesArray() As Object = New Object() {FGASAC_FGA_CODE_FK_PK, FGASAC_SAC_CODE_FK_PK}
            rowFGASAC_GRALSUBACRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGASAC_GRALSUBACRow)
            Return rowFGASAC_GRALSUBACRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGASAC_FGA_CODE_FK_PKFGASAC_SAC_CODE_FK_PK(ByVal FGASAC_FGA_CODE_FK_PK As Integer, ByVal FGASAC_SAC_CODE_FK_PK As Integer) As FGASAC_GRALSUBACRow
            Return CType(Me.Rows.Find(New Object() {FGASAC_FGA_CODE_FK_PK, FGASAC_SAC_CODE_FK_PK}),FGASAC_GRALSUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGASAC_GRALSUBACDataTable = CType(MyBase.Clone,FGASAC_GRALSUBACDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGASAC_GRALSUBACDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGASAC_FGA_CODE_FK_PK = MyBase.Columns("FGASAC_FGA_CODE_FK_PK")
            Me.columnFGASAC_SAC_CODE_FK_PK = MyBase.Columns("FGASAC_SAC_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGASAC_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGASAC_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGASAC_FGA_CODE_FK_PK)
            Me.columnFGASAC_SAC_CODE_FK_PK = New Global.System.Data.DataColumn("FGASAC_SAC_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGASAC_SAC_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGASAC_FGA_CODE_FK_PK, Me.columnFGASAC_SAC_CODE_FK_PK}, true))
            Me.columnFGASAC_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGASAC_SAC_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGASAC_GRALSUBACRow() As FGASAC_GRALSUBACRow
            Return CType(Me.NewRow,FGASAC_GRALSUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGASAC_GRALSUBACRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGASAC_GRALSUBACRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGASAC_GRALSUBACRowChangedEvent) Is Nothing) Then
                RaiseEvent FGASAC_GRALSUBACRowChanged(Me, New FGASAC_GRALSUBACRowChangeEvent(CType(e.Row,FGASAC_GRALSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGASAC_GRALSUBACRowChangingEvent) Is Nothing) Then
                RaiseEvent FGASAC_GRALSUBACRowChanging(Me, New FGASAC_GRALSUBACRowChangeEvent(CType(e.Row,FGASAC_GRALSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGASAC_GRALSUBACRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGASAC_GRALSUBACRowDeleted(Me, New FGASAC_GRALSUBACRowChangeEvent(CType(e.Row,FGASAC_GRALSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGASAC_GRALSUBACRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGASAC_GRALSUBACRowDeleting(Me, New FGASAC_GRALSUBACRowChangeEvent(CType(e.Row,FGASAC_GRALSUBACRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGASAC_GRALSUBACRow(ByVal row As FGASAC_GRALSUBACRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGASAC_GRALSUBACDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGASAU_GRALSUBAUDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGASAU_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGASAU_SAU_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGASAU_GRALSUBAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGASAU_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGASAU_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGASAU_SAU_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGASAU_SAU_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGASAU_GRALSUBAURow
            Get
                Return CType(Me.Rows(index),FGASAU_GRALSUBAURow)
            End Get
        End Property
        
        Public Event FGASAU_GRALSUBAURowChanging As FGASAU_GRALSUBAURowChangeEventHandler
        
        Public Event FGASAU_GRALSUBAURowChanged As FGASAU_GRALSUBAURowChangeEventHandler
        
        Public Event FGASAU_GRALSUBAURowDeleting As FGASAU_GRALSUBAURowChangeEventHandler
        
        Public Event FGASAU_GRALSUBAURowDeleted As FGASAU_GRALSUBAURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGASAU_GRALSUBAURow(ByVal row As FGASAU_GRALSUBAURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGASAU_GRALSUBAURow(ByVal FGASAU_FGA_CODE_FK_PK As Integer, ByVal FGASAU_SAU_CODE_FK_PK As Integer) As FGASAU_GRALSUBAURow
            Dim rowFGASAU_GRALSUBAURow As FGASAU_GRALSUBAURow = CType(Me.NewRow,FGASAU_GRALSUBAURow)
            Dim columnValuesArray() As Object = New Object() {FGASAU_FGA_CODE_FK_PK, FGASAU_SAU_CODE_FK_PK}
            rowFGASAU_GRALSUBAURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGASAU_GRALSUBAURow)
            Return rowFGASAU_GRALSUBAURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGASAU_FGA_CODE_FK_PKFGASAU_SAU_CODE_FK_PK(ByVal FGASAU_FGA_CODE_FK_PK As Integer, ByVal FGASAU_SAU_CODE_FK_PK As Integer) As FGASAU_GRALSUBAURow
            Return CType(Me.Rows.Find(New Object() {FGASAU_FGA_CODE_FK_PK, FGASAU_SAU_CODE_FK_PK}),FGASAU_GRALSUBAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGASAU_GRALSUBAUDataTable = CType(MyBase.Clone,FGASAU_GRALSUBAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGASAU_GRALSUBAUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGASAU_FGA_CODE_FK_PK = MyBase.Columns("FGASAU_FGA_CODE_FK_PK")
            Me.columnFGASAU_SAU_CODE_FK_PK = MyBase.Columns("FGASAU_SAU_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGASAU_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGASAU_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGASAU_FGA_CODE_FK_PK)
            Me.columnFGASAU_SAU_CODE_FK_PK = New Global.System.Data.DataColumn("FGASAU_SAU_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGASAU_SAU_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGASAU_FGA_CODE_FK_PK, Me.columnFGASAU_SAU_CODE_FK_PK}, true))
            Me.columnFGASAU_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGASAU_SAU_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGASAU_GRALSUBAURow() As FGASAU_GRALSUBAURow
            Return CType(Me.NewRow,FGASAU_GRALSUBAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGASAU_GRALSUBAURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGASAU_GRALSUBAURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGASAU_GRALSUBAURowChangedEvent) Is Nothing) Then
                RaiseEvent FGASAU_GRALSUBAURowChanged(Me, New FGASAU_GRALSUBAURowChangeEvent(CType(e.Row,FGASAU_GRALSUBAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGASAU_GRALSUBAURowChangingEvent) Is Nothing) Then
                RaiseEvent FGASAU_GRALSUBAURowChanging(Me, New FGASAU_GRALSUBAURowChangeEvent(CType(e.Row,FGASAU_GRALSUBAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGASAU_GRALSUBAURowDeletedEvent) Is Nothing) Then
                RaiseEvent FGASAU_GRALSUBAURowDeleted(Me, New FGASAU_GRALSUBAURowChangeEvent(CType(e.Row,FGASAU_GRALSUBAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGASAU_GRALSUBAURowDeletingEvent) Is Nothing) Then
                RaiseEvent FGASAU_GRALSUBAURowDeleting(Me, New FGASAU_GRALSUBAURowChangeEvent(CType(e.Row,FGASAU_GRALSUBAURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGASAU_GRALSUBAURow(ByVal row As FGASAU_GRALSUBAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGASAU_GRALSUBAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGASP_GRALSPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGASP_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGASP_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGASP_GRALSPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGASP_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGASP_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGASP_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGASP_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGASP_GRALSPERow
            Get
                Return CType(Me.Rows(index),FGASP_GRALSPERow)
            End Get
        End Property
        
        Public Event FGASP_GRALSPERowChanging As FGASP_GRALSPERowChangeEventHandler
        
        Public Event FGASP_GRALSPERowChanged As FGASP_GRALSPERowChangeEventHandler
        
        Public Event FGASP_GRALSPERowDeleting As FGASP_GRALSPERowChangeEventHandler
        
        Public Event FGASP_GRALSPERowDeleted As FGASP_GRALSPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGASP_GRALSPERow(ByVal row As FGASP_GRALSPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGASP_GRALSPERow(ByVal FGASP_FGA_CODE_FK_PK As Integer, ByVal FGASP_SP_CODE_FK_PK As Integer) As FGASP_GRALSPERow
            Dim rowFGASP_GRALSPERow As FGASP_GRALSPERow = CType(Me.NewRow,FGASP_GRALSPERow)
            Dim columnValuesArray() As Object = New Object() {FGASP_FGA_CODE_FK_PK, FGASP_SP_CODE_FK_PK}
            rowFGASP_GRALSPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGASP_GRALSPERow)
            Return rowFGASP_GRALSPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGASP_FGA_CODE_FK_PKFGASP_SP_CODE_FK_PK(ByVal FGASP_FGA_CODE_FK_PK As Integer, ByVal FGASP_SP_CODE_FK_PK As Integer) As FGASP_GRALSPERow
            Return CType(Me.Rows.Find(New Object() {FGASP_FGA_CODE_FK_PK, FGASP_SP_CODE_FK_PK}),FGASP_GRALSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGASP_GRALSPEDataTable = CType(MyBase.Clone,FGASP_GRALSPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGASP_GRALSPEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGASP_FGA_CODE_FK_PK = MyBase.Columns("FGASP_FGA_CODE_FK_PK")
            Me.columnFGASP_SP_CODE_FK_PK = MyBase.Columns("FGASP_SP_CODE_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGASP_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGASP_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGASP_FGA_CODE_FK_PK)
            Me.columnFGASP_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FGASP_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGASP_SP_CODE_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGASP_FGA_CODE_FK_PK, Me.columnFGASP_SP_CODE_FK_PK}, true))
            Me.columnFGASP_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGASP_SP_CODE_FK_PK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGASP_GRALSPERow() As FGASP_GRALSPERow
            Return CType(Me.NewRow,FGASP_GRALSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGASP_GRALSPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGASP_GRALSPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGASP_GRALSPERowChangedEvent) Is Nothing) Then
                RaiseEvent FGASP_GRALSPERowChanged(Me, New FGASP_GRALSPERowChangeEvent(CType(e.Row,FGASP_GRALSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGASP_GRALSPERowChangingEvent) Is Nothing) Then
                RaiseEvent FGASP_GRALSPERowChanging(Me, New FGASP_GRALSPERowChangeEvent(CType(e.Row,FGASP_GRALSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGASP_GRALSPERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGASP_GRALSPERowDeleted(Me, New FGASP_GRALSPERowChangeEvent(CType(e.Row,FGASP_GRALSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGASP_GRALSPERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGASP_GRALSPERowDeleting(Me, New FGASP_GRALSPERowChangeEvent(CType(e.Row,FGASP_GRALSPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGASP_GRALSPERow(ByVal row As FGASP_GRALSPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGASP_GRALSPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGAOA_OBSERVATION_ANIMALEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGAOA_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAOA_CDF_OBS_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAOA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGAOA_OBSERVATION_ANIMALE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAOA_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAOA_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAOA_CDF_OBS_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAOA_CDF_OBS_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAOA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAOA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGAOA_OBSERVATION_ANIMALERow
            Get
                Return CType(Me.Rows(index),FGAOA_OBSERVATION_ANIMALERow)
            End Get
        End Property
        
        Public Event FGAOA_OBSERVATION_ANIMALERowChanging As FGAOA_OBSERVATION_ANIMALERowChangeEventHandler
        
        Public Event FGAOA_OBSERVATION_ANIMALERowChanged As FGAOA_OBSERVATION_ANIMALERowChangeEventHandler
        
        Public Event FGAOA_OBSERVATION_ANIMALERowDeleting As FGAOA_OBSERVATION_ANIMALERowChangeEventHandler
        
        Public Event FGAOA_OBSERVATION_ANIMALERowDeleted As FGAOA_OBSERVATION_ANIMALERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGAOA_OBSERVATION_ANIMALERow(ByVal row As FGAOA_OBSERVATION_ANIMALERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGAOA_OBSERVATION_ANIMALERow(ByVal FGAOA_FGA_CODE_FK_PK As Integer, ByVal FGAOA_CDF_OBS_CODE_FK_PK As String, ByVal FGAOA_NUMORD As Short) As FGAOA_OBSERVATION_ANIMALERow
            Dim rowFGAOA_OBSERVATION_ANIMALERow As FGAOA_OBSERVATION_ANIMALERow = CType(Me.NewRow,FGAOA_OBSERVATION_ANIMALERow)
            Dim columnValuesArray() As Object = New Object() {FGAOA_FGA_CODE_FK_PK, FGAOA_CDF_OBS_CODE_FK_PK, FGAOA_NUMORD}
            rowFGAOA_OBSERVATION_ANIMALERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGAOA_OBSERVATION_ANIMALERow)
            Return rowFGAOA_OBSERVATION_ANIMALERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGAOA_FGA_CODE_FK_PKFGAOA_CDF_OBS_CODE_FK_PK(ByVal FGAOA_FGA_CODE_FK_PK As Integer, ByVal FGAOA_CDF_OBS_CODE_FK_PK As String) As FGAOA_OBSERVATION_ANIMALERow
            Return CType(Me.Rows.Find(New Object() {FGAOA_FGA_CODE_FK_PK, FGAOA_CDF_OBS_CODE_FK_PK}),FGAOA_OBSERVATION_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGAOA_OBSERVATION_ANIMALEDataTable = CType(MyBase.Clone,FGAOA_OBSERVATION_ANIMALEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGAOA_OBSERVATION_ANIMALEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGAOA_FGA_CODE_FK_PK = MyBase.Columns("FGAOA_FGA_CODE_FK_PK")
            Me.columnFGAOA_CDF_OBS_CODE_FK_PK = MyBase.Columns("FGAOA_CDF_OBS_CODE_FK_PK")
            Me.columnFGAOA_NUMORD = MyBase.Columns("FGAOA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGAOA_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGAOA_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAOA_FGA_CODE_FK_PK)
            Me.columnFGAOA_CDF_OBS_CODE_FK_PK = New Global.System.Data.DataColumn("FGAOA_CDF_OBS_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAOA_CDF_OBS_CODE_FK_PK)
            Me.columnFGAOA_NUMORD = New Global.System.Data.DataColumn("FGAOA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAOA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGAOA_FGA_CODE_FK_PK, Me.columnFGAOA_CDF_OBS_CODE_FK_PK}, true))
            Me.columnFGAOA_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAOA_CDF_OBS_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAOA_CDF_OBS_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGAOA_OBSERVATION_ANIMALERow() As FGAOA_OBSERVATION_ANIMALERow
            Return CType(Me.NewRow,FGAOA_OBSERVATION_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGAOA_OBSERVATION_ANIMALERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGAOA_OBSERVATION_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGAOA_OBSERVATION_ANIMALERowChangedEvent) Is Nothing) Then
                RaiseEvent FGAOA_OBSERVATION_ANIMALERowChanged(Me, New FGAOA_OBSERVATION_ANIMALERowChangeEvent(CType(e.Row,FGAOA_OBSERVATION_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGAOA_OBSERVATION_ANIMALERowChangingEvent) Is Nothing) Then
                RaiseEvent FGAOA_OBSERVATION_ANIMALERowChanging(Me, New FGAOA_OBSERVATION_ANIMALERowChangeEvent(CType(e.Row,FGAOA_OBSERVATION_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGAOA_OBSERVATION_ANIMALERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGAOA_OBSERVATION_ANIMALERowDeleted(Me, New FGAOA_OBSERVATION_ANIMALERowChangeEvent(CType(e.Row,FGAOA_OBSERVATION_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGAOA_OBSERVATION_ANIMALERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGAOA_OBSERVATION_ANIMALERowDeleting(Me, New FGAOA_OBSERVATION_ANIMALERowChangeEvent(CType(e.Row,FGAOA_OBSERVATION_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGAOA_OBSERVATION_ANIMALERow(ByVal row As FGAOA_OBSERVATION_ANIMALERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGAOA_OBSERVATION_ANIMALEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACFA_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFA_CDF_CF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACFA_CIRCONSTFAVORIS_ANIMALE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFA_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFA_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFA_CDF_CF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFA_CDF_CF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACFA_CIRCONSTFAVORIS_ANIMALERow
            Get
                Return CType(Me.Rows(index),FGACFA_CIRCONSTFAVORIS_ANIMALERow)
            End Get
        End Property
        
        Public Event FGACFA_CIRCONSTFAVORIS_ANIMALERowChanging As FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEventHandler
        
        Public Event FGACFA_CIRCONSTFAVORIS_ANIMALERowChanged As FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEventHandler
        
        Public Event FGACFA_CIRCONSTFAVORIS_ANIMALERowDeleting As FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEventHandler
        
        Public Event FGACFA_CIRCONSTFAVORIS_ANIMALERowDeleted As FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACFA_CIRCONSTFAVORIS_ANIMALERow(ByVal row As FGACFA_CIRCONSTFAVORIS_ANIMALERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACFA_CIRCONSTFAVORIS_ANIMALERow(ByVal FGACFA_FGA_CODE_FK_PK As Integer, ByVal FGACFA_CDF_CF_CODE_FK_PK As String, ByVal FGACFA_NUMORD As Short) As FGACFA_CIRCONSTFAVORIS_ANIMALERow
            Dim rowFGACFA_CIRCONSTFAVORIS_ANIMALERow As FGACFA_CIRCONSTFAVORIS_ANIMALERow = CType(Me.NewRow,FGACFA_CIRCONSTFAVORIS_ANIMALERow)
            Dim columnValuesArray() As Object = New Object() {FGACFA_FGA_CODE_FK_PK, FGACFA_CDF_CF_CODE_FK_PK, FGACFA_NUMORD}
            rowFGACFA_CIRCONSTFAVORIS_ANIMALERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACFA_CIRCONSTFAVORIS_ANIMALERow)
            Return rowFGACFA_CIRCONSTFAVORIS_ANIMALERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACFA_FGA_CODE_FK_PKFGACFA_CDF_CF_CODE_FK_PK(ByVal FGACFA_FGA_CODE_FK_PK As Integer, ByVal FGACFA_CDF_CF_CODE_FK_PK As String) As FGACFA_CIRCONSTFAVORIS_ANIMALERow
            Return CType(Me.Rows.Find(New Object() {FGACFA_FGA_CODE_FK_PK, FGACFA_CDF_CF_CODE_FK_PK}),FGACFA_CIRCONSTFAVORIS_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable = CType(MyBase.Clone,FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACFA_FGA_CODE_FK_PK = MyBase.Columns("FGACFA_FGA_CODE_FK_PK")
            Me.columnFGACFA_CDF_CF_CODE_FK_PK = MyBase.Columns("FGACFA_CDF_CF_CODE_FK_PK")
            Me.columnFGACFA_NUMORD = MyBase.Columns("FGACFA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACFA_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFA_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFA_FGA_CODE_FK_PK)
            Me.columnFGACFA_CDF_CF_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFA_CDF_CF_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFA_CDF_CF_CODE_FK_PK)
            Me.columnFGACFA_NUMORD = New Global.System.Data.DataColumn("FGACFA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACFA_FGA_CODE_FK_PK, Me.columnFGACFA_CDF_CF_CODE_FK_PK}, true))
            Me.columnFGACFA_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFA_CDF_CF_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFA_CDF_CF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACFA_CIRCONSTFAVORIS_ANIMALERow() As FGACFA_CIRCONSTFAVORIS_ANIMALERow
            Return CType(Me.NewRow,FGACFA_CIRCONSTFAVORIS_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACFA_CIRCONSTFAVORIS_ANIMALERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACFA_CIRCONSTFAVORIS_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACFA_CIRCONSTFAVORIS_ANIMALERowChangedEvent) Is Nothing) Then
                RaiseEvent FGACFA_CIRCONSTFAVORIS_ANIMALERowChanged(Me, New FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEvent(CType(e.Row,FGACFA_CIRCONSTFAVORIS_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACFA_CIRCONSTFAVORIS_ANIMALERowChangingEvent) Is Nothing) Then
                RaiseEvent FGACFA_CIRCONSTFAVORIS_ANIMALERowChanging(Me, New FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEvent(CType(e.Row,FGACFA_CIRCONSTFAVORIS_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACFA_CIRCONSTFAVORIS_ANIMALERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACFA_CIRCONSTFAVORIS_ANIMALERowDeleted(Me, New FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEvent(CType(e.Row,FGACFA_CIRCONSTFAVORIS_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACFA_CIRCONSTFAVORIS_ANIMALERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACFA_CIRCONSTFAVORIS_ANIMALERowDeleting(Me, New FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEvent(CType(e.Row,FGACFA_CIRCONSTFAVORIS_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACFA_CIRCONSTFAVORIS_ANIMALERow(ByVal row As FGACFA_CIRCONSTFAVORIS_ANIMALERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX1_FGA_TXOBSERVANIDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX1_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX1_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX1_FGA_TXOBSERVANI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX1_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX1_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX1_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX1_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX1_FGA_TXOBSERVANIRow
            Get
                Return CType(Me.Rows(index),FGATX1_FGA_TXOBSERVANIRow)
            End Get
        End Property
        
        Public Event FGATX1_FGA_TXOBSERVANIRowChanging As FGATX1_FGA_TXOBSERVANIRowChangeEventHandler
        
        Public Event FGATX1_FGA_TXOBSERVANIRowChanged As FGATX1_FGA_TXOBSERVANIRowChangeEventHandler
        
        Public Event FGATX1_FGA_TXOBSERVANIRowDeleting As FGATX1_FGA_TXOBSERVANIRowChangeEventHandler
        
        Public Event FGATX1_FGA_TXOBSERVANIRowDeleted As FGATX1_FGA_TXOBSERVANIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX1_FGA_TXOBSERVANIRow(ByVal row As FGATX1_FGA_TXOBSERVANIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX1_FGA_TXOBSERVANIRow(ByVal FGATX1_FGA_CODE_FK_PK As Integer, ByVal FGATX1_TEXTE As String) As FGATX1_FGA_TXOBSERVANIRow
            Dim rowFGATX1_FGA_TXOBSERVANIRow As FGATX1_FGA_TXOBSERVANIRow = CType(Me.NewRow,FGATX1_FGA_TXOBSERVANIRow)
            Dim columnValuesArray() As Object = New Object() {FGATX1_FGA_CODE_FK_PK, FGATX1_TEXTE}
            rowFGATX1_FGA_TXOBSERVANIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX1_FGA_TXOBSERVANIRow)
            Return rowFGATX1_FGA_TXOBSERVANIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX1_FGA_CODE_FK_PK(ByVal FGATX1_FGA_CODE_FK_PK As Integer) As FGATX1_FGA_TXOBSERVANIRow
            Return CType(Me.Rows.Find(New Object() {FGATX1_FGA_CODE_FK_PK}),FGATX1_FGA_TXOBSERVANIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX1_FGA_TXOBSERVANIDataTable = CType(MyBase.Clone,FGATX1_FGA_TXOBSERVANIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX1_FGA_TXOBSERVANIDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX1_FGA_CODE_FK_PK = MyBase.Columns("FGATX1_FGA_CODE_FK_PK")
            Me.columnFGATX1_TEXTE = MyBase.Columns("FGATX1_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX1_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX1_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX1_FGA_CODE_FK_PK)
            Me.columnFGATX1_TEXTE = New Global.System.Data.DataColumn("FGATX1_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX1_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX1_FGA_CODE_FK_PK}, true))
            Me.columnFGATX1_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX1_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX1_TEXTE.AllowDBNull = false
            Me.columnFGATX1_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX1_FGA_TXOBSERVANIRow() As FGATX1_FGA_TXOBSERVANIRow
            Return CType(Me.NewRow,FGATX1_FGA_TXOBSERVANIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX1_FGA_TXOBSERVANIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX1_FGA_TXOBSERVANIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX1_FGA_TXOBSERVANIRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX1_FGA_TXOBSERVANIRowChanged(Me, New FGATX1_FGA_TXOBSERVANIRowChangeEvent(CType(e.Row,FGATX1_FGA_TXOBSERVANIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX1_FGA_TXOBSERVANIRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX1_FGA_TXOBSERVANIRowChanging(Me, New FGATX1_FGA_TXOBSERVANIRowChangeEvent(CType(e.Row,FGATX1_FGA_TXOBSERVANIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX1_FGA_TXOBSERVANIRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX1_FGA_TXOBSERVANIRowDeleted(Me, New FGATX1_FGA_TXOBSERVANIRowChangeEvent(CType(e.Row,FGATX1_FGA_TXOBSERVANIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX1_FGA_TXOBSERVANIRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX1_FGA_TXOBSERVANIRowDeleting(Me, New FGATX1_FGA_TXOBSERVANIRowChangeEvent(CType(e.Row,FGATX1_FGA_TXOBSERVANIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX1_FGA_TXOBSERVANIRow(ByVal row As FGATX1_FGA_TXOBSERVANIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX1_FGA_TXOBSERVANIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGARIA_RISQUE_ANIMALEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGARIA_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIA_CDF_RI_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGARIA_RISQUE_ANIMALE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIA_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIA_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIA_CDF_RI_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIA_CDF_RI_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGARIA_RISQUE_ANIMALERow
            Get
                Return CType(Me.Rows(index),FGARIA_RISQUE_ANIMALERow)
            End Get
        End Property
        
        Public Event FGARIA_RISQUE_ANIMALERowChanging As FGARIA_RISQUE_ANIMALERowChangeEventHandler
        
        Public Event FGARIA_RISQUE_ANIMALERowChanged As FGARIA_RISQUE_ANIMALERowChangeEventHandler
        
        Public Event FGARIA_RISQUE_ANIMALERowDeleting As FGARIA_RISQUE_ANIMALERowChangeEventHandler
        
        Public Event FGARIA_RISQUE_ANIMALERowDeleted As FGARIA_RISQUE_ANIMALERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGARIA_RISQUE_ANIMALERow(ByVal row As FGARIA_RISQUE_ANIMALERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGARIA_RISQUE_ANIMALERow(ByVal FGARIA_FGA_CODE_FK_PK As Integer, ByVal FGARIA_CDF_RI_CODE_FK_PK As String, ByVal FGARIA_NUMORD As Short) As FGARIA_RISQUE_ANIMALERow
            Dim rowFGARIA_RISQUE_ANIMALERow As FGARIA_RISQUE_ANIMALERow = CType(Me.NewRow,FGARIA_RISQUE_ANIMALERow)
            Dim columnValuesArray() As Object = New Object() {FGARIA_FGA_CODE_FK_PK, FGARIA_CDF_RI_CODE_FK_PK, FGARIA_NUMORD}
            rowFGARIA_RISQUE_ANIMALERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGARIA_RISQUE_ANIMALERow)
            Return rowFGARIA_RISQUE_ANIMALERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGARIA_FGA_CODE_FK_PKFGARIA_CDF_RI_CODE_FK_PK(ByVal FGARIA_FGA_CODE_FK_PK As Integer, ByVal FGARIA_CDF_RI_CODE_FK_PK As String) As FGARIA_RISQUE_ANIMALERow
            Return CType(Me.Rows.Find(New Object() {FGARIA_FGA_CODE_FK_PK, FGARIA_CDF_RI_CODE_FK_PK}),FGARIA_RISQUE_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGARIA_RISQUE_ANIMALEDataTable = CType(MyBase.Clone,FGARIA_RISQUE_ANIMALEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGARIA_RISQUE_ANIMALEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGARIA_FGA_CODE_FK_PK = MyBase.Columns("FGARIA_FGA_CODE_FK_PK")
            Me.columnFGARIA_CDF_RI_CODE_FK_PK = MyBase.Columns("FGARIA_CDF_RI_CODE_FK_PK")
            Me.columnFGARIA_NUMORD = MyBase.Columns("FGARIA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGARIA_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIA_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIA_FGA_CODE_FK_PK)
            Me.columnFGARIA_CDF_RI_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIA_CDF_RI_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIA_CDF_RI_CODE_FK_PK)
            Me.columnFGARIA_NUMORD = New Global.System.Data.DataColumn("FGARIA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGARIA_FGA_CODE_FK_PK, Me.columnFGARIA_CDF_RI_CODE_FK_PK}, true))
            Me.columnFGARIA_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIA_CDF_RI_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIA_CDF_RI_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGARIA_RISQUE_ANIMALERow() As FGARIA_RISQUE_ANIMALERow
            Return CType(Me.NewRow,FGARIA_RISQUE_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGARIA_RISQUE_ANIMALERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGARIA_RISQUE_ANIMALERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGARIA_RISQUE_ANIMALERowChangedEvent) Is Nothing) Then
                RaiseEvent FGARIA_RISQUE_ANIMALERowChanged(Me, New FGARIA_RISQUE_ANIMALERowChangeEvent(CType(e.Row,FGARIA_RISQUE_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGARIA_RISQUE_ANIMALERowChangingEvent) Is Nothing) Then
                RaiseEvent FGARIA_RISQUE_ANIMALERowChanging(Me, New FGARIA_RISQUE_ANIMALERowChangeEvent(CType(e.Row,FGARIA_RISQUE_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGARIA_RISQUE_ANIMALERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGARIA_RISQUE_ANIMALERowDeleted(Me, New FGARIA_RISQUE_ANIMALERowChangeEvent(CType(e.Row,FGARIA_RISQUE_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGARIA_RISQUE_ANIMALERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGARIA_RISQUE_ANIMALERowDeleting(Me, New FGARIA_RISQUE_ANIMALERowChangeEvent(CType(e.Row,FGARIA_RISQUE_ANIMALERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGARIA_RISQUE_ANIMALERow(ByVal row As FGARIA_RISQUE_ANIMALERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGARIA_RISQUE_ANIMALEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGAPC_PERIODECRITIQUE_FGRALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGAPC_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAPC_CDF_PC_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAPC_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGAPC_PERIODECRITIQUE_FGRAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAPC_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAPC_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAPC_CDF_PC_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAPC_CDF_PC_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAPC_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAPC_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGAPC_PERIODECRITIQUE_FGRALRow
            Get
                Return CType(Me.Rows(index),FGAPC_PERIODECRITIQUE_FGRALRow)
            End Get
        End Property
        
        Public Event FGAPC_PERIODECRITIQUE_FGRALRowChanging As FGAPC_PERIODECRITIQUE_FGRALRowChangeEventHandler
        
        Public Event FGAPC_PERIODECRITIQUE_FGRALRowChanged As FGAPC_PERIODECRITIQUE_FGRALRowChangeEventHandler
        
        Public Event FGAPC_PERIODECRITIQUE_FGRALRowDeleting As FGAPC_PERIODECRITIQUE_FGRALRowChangeEventHandler
        
        Public Event FGAPC_PERIODECRITIQUE_FGRALRowDeleted As FGAPC_PERIODECRITIQUE_FGRALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGAPC_PERIODECRITIQUE_FGRALRow(ByVal row As FGAPC_PERIODECRITIQUE_FGRALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGAPC_PERIODECRITIQUE_FGRALRow(ByVal FGAPC_FGA_CODE_FK_PK As Integer, ByVal FGAPC_CDF_PC_CODE_FK_PK As String, ByVal FGAPC_NUMORD As Short) As FGAPC_PERIODECRITIQUE_FGRALRow
            Dim rowFGAPC_PERIODECRITIQUE_FGRALRow As FGAPC_PERIODECRITIQUE_FGRALRow = CType(Me.NewRow,FGAPC_PERIODECRITIQUE_FGRALRow)
            Dim columnValuesArray() As Object = New Object() {FGAPC_FGA_CODE_FK_PK, FGAPC_CDF_PC_CODE_FK_PK, FGAPC_NUMORD}
            rowFGAPC_PERIODECRITIQUE_FGRALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGAPC_PERIODECRITIQUE_FGRALRow)
            Return rowFGAPC_PERIODECRITIQUE_FGRALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGAPC_FGA_CODE_FK_PKFGAPC_CDF_PC_CODE_FK_PK(ByVal FGAPC_FGA_CODE_FK_PK As Integer, ByVal FGAPC_CDF_PC_CODE_FK_PK As String) As FGAPC_PERIODECRITIQUE_FGRALRow
            Return CType(Me.Rows.Find(New Object() {FGAPC_FGA_CODE_FK_PK, FGAPC_CDF_PC_CODE_FK_PK}),FGAPC_PERIODECRITIQUE_FGRALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGAPC_PERIODECRITIQUE_FGRALDataTable = CType(MyBase.Clone,FGAPC_PERIODECRITIQUE_FGRALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGAPC_PERIODECRITIQUE_FGRALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGAPC_FGA_CODE_FK_PK = MyBase.Columns("FGAPC_FGA_CODE_FK_PK")
            Me.columnFGAPC_CDF_PC_CODE_FK_PK = MyBase.Columns("FGAPC_CDF_PC_CODE_FK_PK")
            Me.columnFGAPC_NUMORD = MyBase.Columns("FGAPC_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGAPC_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGAPC_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAPC_FGA_CODE_FK_PK)
            Me.columnFGAPC_CDF_PC_CODE_FK_PK = New Global.System.Data.DataColumn("FGAPC_CDF_PC_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAPC_CDF_PC_CODE_FK_PK)
            Me.columnFGAPC_NUMORD = New Global.System.Data.DataColumn("FGAPC_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAPC_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGAPC_FGA_CODE_FK_PK, Me.columnFGAPC_CDF_PC_CODE_FK_PK}, true))
            Me.columnFGAPC_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAPC_CDF_PC_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAPC_CDF_PC_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGAPC_PERIODECRITIQUE_FGRALRow() As FGAPC_PERIODECRITIQUE_FGRALRow
            Return CType(Me.NewRow,FGAPC_PERIODECRITIQUE_FGRALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGAPC_PERIODECRITIQUE_FGRALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGAPC_PERIODECRITIQUE_FGRALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGAPC_PERIODECRITIQUE_FGRALRowChangedEvent) Is Nothing) Then
                RaiseEvent FGAPC_PERIODECRITIQUE_FGRALRowChanged(Me, New FGAPC_PERIODECRITIQUE_FGRALRowChangeEvent(CType(e.Row,FGAPC_PERIODECRITIQUE_FGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGAPC_PERIODECRITIQUE_FGRALRowChangingEvent) Is Nothing) Then
                RaiseEvent FGAPC_PERIODECRITIQUE_FGRALRowChanging(Me, New FGAPC_PERIODECRITIQUE_FGRALRowChangeEvent(CType(e.Row,FGAPC_PERIODECRITIQUE_FGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGAPC_PERIODECRITIQUE_FGRALRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGAPC_PERIODECRITIQUE_FGRALRowDeleted(Me, New FGAPC_PERIODECRITIQUE_FGRALRowChangeEvent(CType(e.Row,FGAPC_PERIODECRITIQUE_FGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGAPC_PERIODECRITIQUE_FGRALRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGAPC_PERIODECRITIQUE_FGRALRowDeleting(Me, New FGAPC_PERIODECRITIQUE_FGRALRowChangeEvent(CType(e.Row,FGAPC_PERIODECRITIQUE_FGRALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGAPC_PERIODECRITIQUE_FGRALRow(ByVal row As FGAPC_PERIODECRITIQUE_FGRALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGAPC_PERIODECRITIQUE_FGRALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGAOH_OBSERVATION_HUMAINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGAOH_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAOH_CDF_OBS_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAOH_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGAOH_OBSERVATION_HUMAINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAOH_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAOH_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAOH_CDF_OBS_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAOH_CDF_OBS_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAOH_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAOH_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGAOH_OBSERVATION_HUMAINERow
            Get
                Return CType(Me.Rows(index),FGAOH_OBSERVATION_HUMAINERow)
            End Get
        End Property
        
        Public Event FGAOH_OBSERVATION_HUMAINERowChanging As FGAOH_OBSERVATION_HUMAINERowChangeEventHandler
        
        Public Event FGAOH_OBSERVATION_HUMAINERowChanged As FGAOH_OBSERVATION_HUMAINERowChangeEventHandler
        
        Public Event FGAOH_OBSERVATION_HUMAINERowDeleting As FGAOH_OBSERVATION_HUMAINERowChangeEventHandler
        
        Public Event FGAOH_OBSERVATION_HUMAINERowDeleted As FGAOH_OBSERVATION_HUMAINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGAOH_OBSERVATION_HUMAINERow(ByVal row As FGAOH_OBSERVATION_HUMAINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGAOH_OBSERVATION_HUMAINERow(ByVal FGAOH_FGA_CODE_FK_PK As Integer, ByVal FGAOH_CDF_OBS_CODE_FK_PK As String, ByVal FGAOH_NUMORD As Short) As FGAOH_OBSERVATION_HUMAINERow
            Dim rowFGAOH_OBSERVATION_HUMAINERow As FGAOH_OBSERVATION_HUMAINERow = CType(Me.NewRow,FGAOH_OBSERVATION_HUMAINERow)
            Dim columnValuesArray() As Object = New Object() {FGAOH_FGA_CODE_FK_PK, FGAOH_CDF_OBS_CODE_FK_PK, FGAOH_NUMORD}
            rowFGAOH_OBSERVATION_HUMAINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGAOH_OBSERVATION_HUMAINERow)
            Return rowFGAOH_OBSERVATION_HUMAINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGAOH_FGA_CODE_FK_PKFGAOH_CDF_OBS_CODE_FK_PK(ByVal FGAOH_FGA_CODE_FK_PK As Integer, ByVal FGAOH_CDF_OBS_CODE_FK_PK As String) As FGAOH_OBSERVATION_HUMAINERow
            Return CType(Me.Rows.Find(New Object() {FGAOH_FGA_CODE_FK_PK, FGAOH_CDF_OBS_CODE_FK_PK}),FGAOH_OBSERVATION_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGAOH_OBSERVATION_HUMAINEDataTable = CType(MyBase.Clone,FGAOH_OBSERVATION_HUMAINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGAOH_OBSERVATION_HUMAINEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGAOH_FGA_CODE_FK_PK = MyBase.Columns("FGAOH_FGA_CODE_FK_PK")
            Me.columnFGAOH_CDF_OBS_CODE_FK_PK = MyBase.Columns("FGAOH_CDF_OBS_CODE_FK_PK")
            Me.columnFGAOH_NUMORD = MyBase.Columns("FGAOH_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGAOH_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGAOH_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAOH_FGA_CODE_FK_PK)
            Me.columnFGAOH_CDF_OBS_CODE_FK_PK = New Global.System.Data.DataColumn("FGAOH_CDF_OBS_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAOH_CDF_OBS_CODE_FK_PK)
            Me.columnFGAOH_NUMORD = New Global.System.Data.DataColumn("FGAOH_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAOH_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGAOH_FGA_CODE_FK_PK, Me.columnFGAOH_CDF_OBS_CODE_FK_PK}, true))
            Me.columnFGAOH_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAOH_CDF_OBS_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAOH_CDF_OBS_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGAOH_OBSERVATION_HUMAINERow() As FGAOH_OBSERVATION_HUMAINERow
            Return CType(Me.NewRow,FGAOH_OBSERVATION_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGAOH_OBSERVATION_HUMAINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGAOH_OBSERVATION_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGAOH_OBSERVATION_HUMAINERowChangedEvent) Is Nothing) Then
                RaiseEvent FGAOH_OBSERVATION_HUMAINERowChanged(Me, New FGAOH_OBSERVATION_HUMAINERowChangeEvent(CType(e.Row,FGAOH_OBSERVATION_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGAOH_OBSERVATION_HUMAINERowChangingEvent) Is Nothing) Then
                RaiseEvent FGAOH_OBSERVATION_HUMAINERowChanging(Me, New FGAOH_OBSERVATION_HUMAINERowChangeEvent(CType(e.Row,FGAOH_OBSERVATION_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGAOH_OBSERVATION_HUMAINERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGAOH_OBSERVATION_HUMAINERowDeleted(Me, New FGAOH_OBSERVATION_HUMAINERowChangeEvent(CType(e.Row,FGAOH_OBSERVATION_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGAOH_OBSERVATION_HUMAINERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGAOH_OBSERVATION_HUMAINERowDeleting(Me, New FGAOH_OBSERVATION_HUMAINERowChangeEvent(CType(e.Row,FGAOH_OBSERVATION_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGAOH_OBSERVATION_HUMAINERow(ByVal row As FGAOH_OBSERVATION_HUMAINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGAOH_OBSERVATION_HUMAINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACFH_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFH_CDF_CF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFH_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACFH_CIRCONSTFAVORIS_HUMAINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFH_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFH_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFH_CDF_CF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFH_CDF_CF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFH_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFH_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACFH_CIRCONSTFAVORIS_HUMAINERow
            Get
                Return CType(Me.Rows(index),FGACFH_CIRCONSTFAVORIS_HUMAINERow)
            End Get
        End Property
        
        Public Event FGACFH_CIRCONSTFAVORIS_HUMAINERowChanging As FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEventHandler
        
        Public Event FGACFH_CIRCONSTFAVORIS_HUMAINERowChanged As FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEventHandler
        
        Public Event FGACFH_CIRCONSTFAVORIS_HUMAINERowDeleting As FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEventHandler
        
        Public Event FGACFH_CIRCONSTFAVORIS_HUMAINERowDeleted As FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACFH_CIRCONSTFAVORIS_HUMAINERow(ByVal row As FGACFH_CIRCONSTFAVORIS_HUMAINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACFH_CIRCONSTFAVORIS_HUMAINERow(ByVal FGACFH_FGA_CODE_FK_PK As Integer, ByVal FGACFH_CDF_CF_CODE_FK_PK As String, ByVal FGACFH_NUMORD As Short) As FGACFH_CIRCONSTFAVORIS_HUMAINERow
            Dim rowFGACFH_CIRCONSTFAVORIS_HUMAINERow As FGACFH_CIRCONSTFAVORIS_HUMAINERow = CType(Me.NewRow,FGACFH_CIRCONSTFAVORIS_HUMAINERow)
            Dim columnValuesArray() As Object = New Object() {FGACFH_FGA_CODE_FK_PK, FGACFH_CDF_CF_CODE_FK_PK, FGACFH_NUMORD}
            rowFGACFH_CIRCONSTFAVORIS_HUMAINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACFH_CIRCONSTFAVORIS_HUMAINERow)
            Return rowFGACFH_CIRCONSTFAVORIS_HUMAINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACFH_FGA_CODE_FK_PKFGACFH_CDF_CF_CODE_FK_PK(ByVal FGACFH_FGA_CODE_FK_PK As Integer, ByVal FGACFH_CDF_CF_CODE_FK_PK As String) As FGACFH_CIRCONSTFAVORIS_HUMAINERow
            Return CType(Me.Rows.Find(New Object() {FGACFH_FGA_CODE_FK_PK, FGACFH_CDF_CF_CODE_FK_PK}),FGACFH_CIRCONSTFAVORIS_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable = CType(MyBase.Clone,FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACFH_FGA_CODE_FK_PK = MyBase.Columns("FGACFH_FGA_CODE_FK_PK")
            Me.columnFGACFH_CDF_CF_CODE_FK_PK = MyBase.Columns("FGACFH_CDF_CF_CODE_FK_PK")
            Me.columnFGACFH_NUMORD = MyBase.Columns("FGACFH_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACFH_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFH_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFH_FGA_CODE_FK_PK)
            Me.columnFGACFH_CDF_CF_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFH_CDF_CF_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFH_CDF_CF_CODE_FK_PK)
            Me.columnFGACFH_NUMORD = New Global.System.Data.DataColumn("FGACFH_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFH_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACFH_FGA_CODE_FK_PK, Me.columnFGACFH_CDF_CF_CODE_FK_PK}, true))
            Me.columnFGACFH_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFH_CDF_CF_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFH_CDF_CF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACFH_CIRCONSTFAVORIS_HUMAINERow() As FGACFH_CIRCONSTFAVORIS_HUMAINERow
            Return CType(Me.NewRow,FGACFH_CIRCONSTFAVORIS_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACFH_CIRCONSTFAVORIS_HUMAINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACFH_CIRCONSTFAVORIS_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACFH_CIRCONSTFAVORIS_HUMAINERowChangedEvent) Is Nothing) Then
                RaiseEvent FGACFH_CIRCONSTFAVORIS_HUMAINERowChanged(Me, New FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEvent(CType(e.Row,FGACFH_CIRCONSTFAVORIS_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACFH_CIRCONSTFAVORIS_HUMAINERowChangingEvent) Is Nothing) Then
                RaiseEvent FGACFH_CIRCONSTFAVORIS_HUMAINERowChanging(Me, New FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEvent(CType(e.Row,FGACFH_CIRCONSTFAVORIS_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACFH_CIRCONSTFAVORIS_HUMAINERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACFH_CIRCONSTFAVORIS_HUMAINERowDeleted(Me, New FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEvent(CType(e.Row,FGACFH_CIRCONSTFAVORIS_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACFH_CIRCONSTFAVORIS_HUMAINERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACFH_CIRCONSTFAVORIS_HUMAINERowDeleting(Me, New FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEvent(CType(e.Row,FGACFH_CIRCONSTFAVORIS_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACFH_CIRCONSTFAVORIS_HUMAINERow(ByVal row As FGACFH_CIRCONSTFAVORIS_HUMAINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX3_FGA_TXOBSERVHUMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX3_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX3_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX3_FGA_TXOBSERVHUM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX3_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX3_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX3_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX3_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX3_FGA_TXOBSERVHUMRow
            Get
                Return CType(Me.Rows(index),FGATX3_FGA_TXOBSERVHUMRow)
            End Get
        End Property
        
        Public Event FGATX3_FGA_TXOBSERVHUMRowChanging As FGATX3_FGA_TXOBSERVHUMRowChangeEventHandler
        
        Public Event FGATX3_FGA_TXOBSERVHUMRowChanged As FGATX3_FGA_TXOBSERVHUMRowChangeEventHandler
        
        Public Event FGATX3_FGA_TXOBSERVHUMRowDeleting As FGATX3_FGA_TXOBSERVHUMRowChangeEventHandler
        
        Public Event FGATX3_FGA_TXOBSERVHUMRowDeleted As FGATX3_FGA_TXOBSERVHUMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX3_FGA_TXOBSERVHUMRow(ByVal row As FGATX3_FGA_TXOBSERVHUMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX3_FGA_TXOBSERVHUMRow(ByVal FGATX3_FGA_CODE_FK_PK As Integer, ByVal FGATX3_TEXTE As String) As FGATX3_FGA_TXOBSERVHUMRow
            Dim rowFGATX3_FGA_TXOBSERVHUMRow As FGATX3_FGA_TXOBSERVHUMRow = CType(Me.NewRow,FGATX3_FGA_TXOBSERVHUMRow)
            Dim columnValuesArray() As Object = New Object() {FGATX3_FGA_CODE_FK_PK, FGATX3_TEXTE}
            rowFGATX3_FGA_TXOBSERVHUMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX3_FGA_TXOBSERVHUMRow)
            Return rowFGATX3_FGA_TXOBSERVHUMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX3_FGA_CODE_FK_PK(ByVal FGATX3_FGA_CODE_FK_PK As Integer) As FGATX3_FGA_TXOBSERVHUMRow
            Return CType(Me.Rows.Find(New Object() {FGATX3_FGA_CODE_FK_PK}),FGATX3_FGA_TXOBSERVHUMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX3_FGA_TXOBSERVHUMDataTable = CType(MyBase.Clone,FGATX3_FGA_TXOBSERVHUMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX3_FGA_TXOBSERVHUMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX3_FGA_CODE_FK_PK = MyBase.Columns("FGATX3_FGA_CODE_FK_PK")
            Me.columnFGATX3_TEXTE = MyBase.Columns("FGATX3_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX3_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX3_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX3_FGA_CODE_FK_PK)
            Me.columnFGATX3_TEXTE = New Global.System.Data.DataColumn("FGATX3_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX3_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX3_FGA_CODE_FK_PK}, true))
            Me.columnFGATX3_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX3_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX3_TEXTE.AllowDBNull = false
            Me.columnFGATX3_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX3_FGA_TXOBSERVHUMRow() As FGATX3_FGA_TXOBSERVHUMRow
            Return CType(Me.NewRow,FGATX3_FGA_TXOBSERVHUMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX3_FGA_TXOBSERVHUMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX3_FGA_TXOBSERVHUMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX3_FGA_TXOBSERVHUMRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX3_FGA_TXOBSERVHUMRowChanged(Me, New FGATX3_FGA_TXOBSERVHUMRowChangeEvent(CType(e.Row,FGATX3_FGA_TXOBSERVHUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX3_FGA_TXOBSERVHUMRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX3_FGA_TXOBSERVHUMRowChanging(Me, New FGATX3_FGA_TXOBSERVHUMRowChangeEvent(CType(e.Row,FGATX3_FGA_TXOBSERVHUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX3_FGA_TXOBSERVHUMRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX3_FGA_TXOBSERVHUMRowDeleted(Me, New FGATX3_FGA_TXOBSERVHUMRowChangeEvent(CType(e.Row,FGATX3_FGA_TXOBSERVHUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX3_FGA_TXOBSERVHUMRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX3_FGA_TXOBSERVHUMRowDeleting(Me, New FGATX3_FGA_TXOBSERVHUMRowChangeEvent(CType(e.Row,FGATX3_FGA_TXOBSERVHUMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX3_FGA_TXOBSERVHUMRow(ByVal row As FGATX3_FGA_TXOBSERVHUMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX3_FGA_TXOBSERVHUMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGARIH_RISQUE_HUMAINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGARIH_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIH_CDF_RI_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIH_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGARIH_RISQUE_HUMAINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIH_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIH_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIH_CDF_RI_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIH_CDF_RI_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIH_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIH_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGARIH_RISQUE_HUMAINERow
            Get
                Return CType(Me.Rows(index),FGARIH_RISQUE_HUMAINERow)
            End Get
        End Property
        
        Public Event FGARIH_RISQUE_HUMAINERowChanging As FGARIH_RISQUE_HUMAINERowChangeEventHandler
        
        Public Event FGARIH_RISQUE_HUMAINERowChanged As FGARIH_RISQUE_HUMAINERowChangeEventHandler
        
        Public Event FGARIH_RISQUE_HUMAINERowDeleting As FGARIH_RISQUE_HUMAINERowChangeEventHandler
        
        Public Event FGARIH_RISQUE_HUMAINERowDeleted As FGARIH_RISQUE_HUMAINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGARIH_RISQUE_HUMAINERow(ByVal row As FGARIH_RISQUE_HUMAINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGARIH_RISQUE_HUMAINERow(ByVal FGARIH_FGA_CODE_FK_PK As Integer, ByVal FGARIH_CDF_RI_CODE_FK_PK As String, ByVal FGARIH_NUMORD As Short) As FGARIH_RISQUE_HUMAINERow
            Dim rowFGARIH_RISQUE_HUMAINERow As FGARIH_RISQUE_HUMAINERow = CType(Me.NewRow,FGARIH_RISQUE_HUMAINERow)
            Dim columnValuesArray() As Object = New Object() {FGARIH_FGA_CODE_FK_PK, FGARIH_CDF_RI_CODE_FK_PK, FGARIH_NUMORD}
            rowFGARIH_RISQUE_HUMAINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGARIH_RISQUE_HUMAINERow)
            Return rowFGARIH_RISQUE_HUMAINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGARIH_FGA_CODE_FK_PKFGARIH_CDF_RI_CODE_FK_PK(ByVal FGARIH_FGA_CODE_FK_PK As Integer, ByVal FGARIH_CDF_RI_CODE_FK_PK As String) As FGARIH_RISQUE_HUMAINERow
            Return CType(Me.Rows.Find(New Object() {FGARIH_FGA_CODE_FK_PK, FGARIH_CDF_RI_CODE_FK_PK}),FGARIH_RISQUE_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGARIH_RISQUE_HUMAINEDataTable = CType(MyBase.Clone,FGARIH_RISQUE_HUMAINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGARIH_RISQUE_HUMAINEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGARIH_FGA_CODE_FK_PK = MyBase.Columns("FGARIH_FGA_CODE_FK_PK")
            Me.columnFGARIH_CDF_RI_CODE_FK_PK = MyBase.Columns("FGARIH_CDF_RI_CODE_FK_PK")
            Me.columnFGARIH_NUMORD = MyBase.Columns("FGARIH_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGARIH_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIH_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIH_FGA_CODE_FK_PK)
            Me.columnFGARIH_CDF_RI_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIH_CDF_RI_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIH_CDF_RI_CODE_FK_PK)
            Me.columnFGARIH_NUMORD = New Global.System.Data.DataColumn("FGARIH_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIH_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGARIH_FGA_CODE_FK_PK, Me.columnFGARIH_CDF_RI_CODE_FK_PK}, true))
            Me.columnFGARIH_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIH_CDF_RI_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIH_CDF_RI_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGARIH_RISQUE_HUMAINERow() As FGARIH_RISQUE_HUMAINERow
            Return CType(Me.NewRow,FGARIH_RISQUE_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGARIH_RISQUE_HUMAINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGARIH_RISQUE_HUMAINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGARIH_RISQUE_HUMAINERowChangedEvent) Is Nothing) Then
                RaiseEvent FGARIH_RISQUE_HUMAINERowChanged(Me, New FGARIH_RISQUE_HUMAINERowChangeEvent(CType(e.Row,FGARIH_RISQUE_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGARIH_RISQUE_HUMAINERowChangingEvent) Is Nothing) Then
                RaiseEvent FGARIH_RISQUE_HUMAINERowChanging(Me, New FGARIH_RISQUE_HUMAINERowChangeEvent(CType(e.Row,FGARIH_RISQUE_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGARIH_RISQUE_HUMAINERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGARIH_RISQUE_HUMAINERowDeleted(Me, New FGARIH_RISQUE_HUMAINERowChangeEvent(CType(e.Row,FGARIH_RISQUE_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGARIH_RISQUE_HUMAINERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGARIH_RISQUE_HUMAINERowDeleting(Me, New FGARIH_RISQUE_HUMAINERowChangeEvent(CType(e.Row,FGARIH_RISQUE_HUMAINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGARIH_RISQUE_HUMAINERow(ByVal row As FGARIH_RISQUE_HUMAINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGARIH_RISQUE_HUMAINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGARIG_RISQUE_GROSSESSEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGARIG_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIG_NUMSEQ_PK As Global.System.Data.DataColumn
        
        Private columnFGARIG_CDF_RI_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFGARIG_CDF_TC_CODE_FK As Global.System.Data.DataColumn
        
        Private columnFGARIG_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGARIG_RISQUE_GROSSESSE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIG_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIG_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIG_NUMSEQ_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIG_NUMSEQ_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIG_CDF_RI_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIG_CDF_RI_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIG_CDF_TC_CODE_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIG_CDF_TC_CODE_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIG_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIG_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGARIG_RISQUE_GROSSESSERow
            Get
                Return CType(Me.Rows(index),FGARIG_RISQUE_GROSSESSERow)
            End Get
        End Property
        
        Public Event FGARIG_RISQUE_GROSSESSERowChanging As FGARIG_RISQUE_GROSSESSERowChangeEventHandler
        
        Public Event FGARIG_RISQUE_GROSSESSERowChanged As FGARIG_RISQUE_GROSSESSERowChangeEventHandler
        
        Public Event FGARIG_RISQUE_GROSSESSERowDeleting As FGARIG_RISQUE_GROSSESSERowChangeEventHandler
        
        Public Event FGARIG_RISQUE_GROSSESSERowDeleted As FGARIG_RISQUE_GROSSESSERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGARIG_RISQUE_GROSSESSERow(ByVal row As FGARIG_RISQUE_GROSSESSERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGARIG_RISQUE_GROSSESSERow(ByVal FGARIG_FGA_CODE_FK_PK As Integer, ByVal FGARIG_NUMSEQ_PK As Short, ByVal FGARIG_CDF_RI_CODE_FK As String, ByVal FGARIG_CDF_TC_CODE_FK As String, ByVal FGARIG_NUMORD As Short) As FGARIG_RISQUE_GROSSESSERow
            Dim rowFGARIG_RISQUE_GROSSESSERow As FGARIG_RISQUE_GROSSESSERow = CType(Me.NewRow,FGARIG_RISQUE_GROSSESSERow)
            Dim columnValuesArray() As Object = New Object() {FGARIG_FGA_CODE_FK_PK, FGARIG_NUMSEQ_PK, FGARIG_CDF_RI_CODE_FK, FGARIG_CDF_TC_CODE_FK, FGARIG_NUMORD}
            rowFGARIG_RISQUE_GROSSESSERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGARIG_RISQUE_GROSSESSERow)
            Return rowFGARIG_RISQUE_GROSSESSERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGARIG_FGA_CODE_FK_PKFGARIG_NUMSEQ_PK(ByVal FGARIG_FGA_CODE_FK_PK As Integer, ByVal FGARIG_NUMSEQ_PK As Short) As FGARIG_RISQUE_GROSSESSERow
            Return CType(Me.Rows.Find(New Object() {FGARIG_FGA_CODE_FK_PK, FGARIG_NUMSEQ_PK}),FGARIG_RISQUE_GROSSESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGARIG_RISQUE_GROSSESSEDataTable = CType(MyBase.Clone,FGARIG_RISQUE_GROSSESSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGARIG_RISQUE_GROSSESSEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGARIG_FGA_CODE_FK_PK = MyBase.Columns("FGARIG_FGA_CODE_FK_PK")
            Me.columnFGARIG_NUMSEQ_PK = MyBase.Columns("FGARIG_NUMSEQ_PK")
            Me.columnFGARIG_CDF_RI_CODE_FK = MyBase.Columns("FGARIG_CDF_RI_CODE_FK")
            Me.columnFGARIG_CDF_TC_CODE_FK = MyBase.Columns("FGARIG_CDF_TC_CODE_FK")
            Me.columnFGARIG_NUMORD = MyBase.Columns("FGARIG_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGARIG_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIG_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIG_FGA_CODE_FK_PK)
            Me.columnFGARIG_NUMSEQ_PK = New Global.System.Data.DataColumn("FGARIG_NUMSEQ_PK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIG_NUMSEQ_PK)
            Me.columnFGARIG_CDF_RI_CODE_FK = New Global.System.Data.DataColumn("FGARIG_CDF_RI_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIG_CDF_RI_CODE_FK)
            Me.columnFGARIG_CDF_TC_CODE_FK = New Global.System.Data.DataColumn("FGARIG_CDF_TC_CODE_FK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIG_CDF_TC_CODE_FK)
            Me.columnFGARIG_NUMORD = New Global.System.Data.DataColumn("FGARIG_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIG_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGARIG_FGA_CODE_FK_PK, Me.columnFGARIG_NUMSEQ_PK}, true))
            Me.columnFGARIG_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIG_NUMSEQ_PK.AllowDBNull = false
            Me.columnFGARIG_CDF_RI_CODE_FK.AllowDBNull = false
            Me.columnFGARIG_CDF_RI_CODE_FK.MaxLength = 10
            Me.columnFGARIG_CDF_TC_CODE_FK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGARIG_RISQUE_GROSSESSERow() As FGARIG_RISQUE_GROSSESSERow
            Return CType(Me.NewRow,FGARIG_RISQUE_GROSSESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGARIG_RISQUE_GROSSESSERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGARIG_RISQUE_GROSSESSERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGARIG_RISQUE_GROSSESSERowChangedEvent) Is Nothing) Then
                RaiseEvent FGARIG_RISQUE_GROSSESSERowChanged(Me, New FGARIG_RISQUE_GROSSESSERowChangeEvent(CType(e.Row,FGARIG_RISQUE_GROSSESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGARIG_RISQUE_GROSSESSERowChangingEvent) Is Nothing) Then
                RaiseEvent FGARIG_RISQUE_GROSSESSERowChanging(Me, New FGARIG_RISQUE_GROSSESSERowChangeEvent(CType(e.Row,FGARIG_RISQUE_GROSSESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGARIG_RISQUE_GROSSESSERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGARIG_RISQUE_GROSSESSERowDeleted(Me, New FGARIG_RISQUE_GROSSESSERowChangeEvent(CType(e.Row,FGARIG_RISQUE_GROSSESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGARIG_RISQUE_GROSSESSERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGARIG_RISQUE_GROSSESSERowDeleting(Me, New FGARIG_RISQUE_GROSSESSERowChangeEvent(CType(e.Row,FGARIG_RISQUE_GROSSESSERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGARIG_RISQUE_GROSSESSERow(ByVal row As FGARIG_RISQUE_GROSSESSERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGARIG_RISQUE_GROSSESSEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX7_FGA_TXRECOMMANDATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX7_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX7_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX7_FGA_TXRECOMMANDAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX7_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX7_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX7_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX7_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX7_FGA_TXRECOMMANDATRow
            Get
                Return CType(Me.Rows(index),FGATX7_FGA_TXRECOMMANDATRow)
            End Get
        End Property
        
        Public Event FGATX7_FGA_TXRECOMMANDATRowChanging As FGATX7_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX7_FGA_TXRECOMMANDATRowChanged As FGATX7_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX7_FGA_TXRECOMMANDATRowDeleting As FGATX7_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX7_FGA_TXRECOMMANDATRowDeleted As FGATX7_FGA_TXRECOMMANDATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX7_FGA_TXRECOMMANDATRow(ByVal row As FGATX7_FGA_TXRECOMMANDATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX7_FGA_TXRECOMMANDATRow(ByVal FGATX7_FGA_CODE_FK_PK As Integer, ByVal FGATX7_TEXTE As String) As FGATX7_FGA_TXRECOMMANDATRow
            Dim rowFGATX7_FGA_TXRECOMMANDATRow As FGATX7_FGA_TXRECOMMANDATRow = CType(Me.NewRow,FGATX7_FGA_TXRECOMMANDATRow)
            Dim columnValuesArray() As Object = New Object() {FGATX7_FGA_CODE_FK_PK, FGATX7_TEXTE}
            rowFGATX7_FGA_TXRECOMMANDATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX7_FGA_TXRECOMMANDATRow)
            Return rowFGATX7_FGA_TXRECOMMANDATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX7_FGA_CODE_FK_PK(ByVal FGATX7_FGA_CODE_FK_PK As Integer) As FGATX7_FGA_TXRECOMMANDATRow
            Return CType(Me.Rows.Find(New Object() {FGATX7_FGA_CODE_FK_PK}),FGATX7_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX7_FGA_TXRECOMMANDATDataTable = CType(MyBase.Clone,FGATX7_FGA_TXRECOMMANDATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX7_FGA_TXRECOMMANDATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX7_FGA_CODE_FK_PK = MyBase.Columns("FGATX7_FGA_CODE_FK_PK")
            Me.columnFGATX7_TEXTE = MyBase.Columns("FGATX7_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX7_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX7_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX7_FGA_CODE_FK_PK)
            Me.columnFGATX7_TEXTE = New Global.System.Data.DataColumn("FGATX7_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX7_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX7_FGA_CODE_FK_PK}, true))
            Me.columnFGATX7_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX7_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX7_TEXTE.AllowDBNull = false
            Me.columnFGATX7_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX7_FGA_TXRECOMMANDATRow() As FGATX7_FGA_TXRECOMMANDATRow
            Return CType(Me.NewRow,FGATX7_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX7_FGA_TXRECOMMANDATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX7_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX7_FGA_TXRECOMMANDATRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX7_FGA_TXRECOMMANDATRowChanged(Me, New FGATX7_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX7_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX7_FGA_TXRECOMMANDATRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX7_FGA_TXRECOMMANDATRowChanging(Me, New FGATX7_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX7_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX7_FGA_TXRECOMMANDATRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX7_FGA_TXRECOMMANDATRowDeleted(Me, New FGATX7_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX7_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX7_FGA_TXRECOMMANDATRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX7_FGA_TXRECOMMANDATRowDeleting(Me, New FGATX7_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX7_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX7_FGA_TXRECOMMANDATRow(ByVal row As FGATX7_FGA_TXRECOMMANDATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX7_FGA_TXRECOMMANDATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACF_CATFEMMEENCEINTEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACF_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACF_CDF_CAT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACF_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACF_CATFEMMEENCEINTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACF_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACF_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACF_CDF_CAT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACF_CDF_CAT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACF_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACF_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACF_CATFEMMEENCEINTERow
            Get
                Return CType(Me.Rows(index),FGACF_CATFEMMEENCEINTERow)
            End Get
        End Property
        
        Public Event FGACF_CATFEMMEENCEINTERowChanging As FGACF_CATFEMMEENCEINTERowChangeEventHandler
        
        Public Event FGACF_CATFEMMEENCEINTERowChanged As FGACF_CATFEMMEENCEINTERowChangeEventHandler
        
        Public Event FGACF_CATFEMMEENCEINTERowDeleting As FGACF_CATFEMMEENCEINTERowChangeEventHandler
        
        Public Event FGACF_CATFEMMEENCEINTERowDeleted As FGACF_CATFEMMEENCEINTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACF_CATFEMMEENCEINTERow(ByVal row As FGACF_CATFEMMEENCEINTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACF_CATFEMMEENCEINTERow(ByVal FGACF_FGA_CODE_FK_PK As Integer, ByVal FGACF_CDF_CAT_CODE_FK_PK As String, ByVal FGACF_NUMORD As Short) As FGACF_CATFEMMEENCEINTERow
            Dim rowFGACF_CATFEMMEENCEINTERow As FGACF_CATFEMMEENCEINTERow = CType(Me.NewRow,FGACF_CATFEMMEENCEINTERow)
            Dim columnValuesArray() As Object = New Object() {FGACF_FGA_CODE_FK_PK, FGACF_CDF_CAT_CODE_FK_PK, FGACF_NUMORD}
            rowFGACF_CATFEMMEENCEINTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACF_CATFEMMEENCEINTERow)
            Return rowFGACF_CATFEMMEENCEINTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACF_FGA_CODE_FK_PKFGACF_CDF_CAT_CODE_FK_PK(ByVal FGACF_FGA_CODE_FK_PK As Integer, ByVal FGACF_CDF_CAT_CODE_FK_PK As String) As FGACF_CATFEMMEENCEINTERow
            Return CType(Me.Rows.Find(New Object() {FGACF_FGA_CODE_FK_PK, FGACF_CDF_CAT_CODE_FK_PK}),FGACF_CATFEMMEENCEINTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACF_CATFEMMEENCEINTEDataTable = CType(MyBase.Clone,FGACF_CATFEMMEENCEINTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACF_CATFEMMEENCEINTEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACF_FGA_CODE_FK_PK = MyBase.Columns("FGACF_FGA_CODE_FK_PK")
            Me.columnFGACF_CDF_CAT_CODE_FK_PK = MyBase.Columns("FGACF_CDF_CAT_CODE_FK_PK")
            Me.columnFGACF_NUMORD = MyBase.Columns("FGACF_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACF_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACF_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACF_FGA_CODE_FK_PK)
            Me.columnFGACF_CDF_CAT_CODE_FK_PK = New Global.System.Data.DataColumn("FGACF_CDF_CAT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACF_CDF_CAT_CODE_FK_PK)
            Me.columnFGACF_NUMORD = New Global.System.Data.DataColumn("FGACF_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACF_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACF_FGA_CODE_FK_PK, Me.columnFGACF_CDF_CAT_CODE_FK_PK}, true))
            Me.columnFGACF_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACF_CDF_CAT_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACF_CDF_CAT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACF_CATFEMMEENCEINTERow() As FGACF_CATFEMMEENCEINTERow
            Return CType(Me.NewRow,FGACF_CATFEMMEENCEINTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACF_CATFEMMEENCEINTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACF_CATFEMMEENCEINTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACF_CATFEMMEENCEINTERowChangedEvent) Is Nothing) Then
                RaiseEvent FGACF_CATFEMMEENCEINTERowChanged(Me, New FGACF_CATFEMMEENCEINTERowChangeEvent(CType(e.Row,FGACF_CATFEMMEENCEINTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACF_CATFEMMEENCEINTERowChangingEvent) Is Nothing) Then
                RaiseEvent FGACF_CATFEMMEENCEINTERowChanging(Me, New FGACF_CATFEMMEENCEINTERowChangeEvent(CType(e.Row,FGACF_CATFEMMEENCEINTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACF_CATFEMMEENCEINTERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACF_CATFEMMEENCEINTERowDeleted(Me, New FGACF_CATFEMMEENCEINTERowChangeEvent(CType(e.Row,FGACF_CATFEMMEENCEINTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACF_CATFEMMEENCEINTERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACF_CATFEMMEENCEINTERowDeleting(Me, New FGACF_CATFEMMEENCEINTERowChangeEvent(CType(e.Row,FGACF_CATFEMMEENCEINTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACF_CATFEMMEENCEINTERow(ByVal row As FGACF_CATFEMMEENCEINTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACF_CATFEMMEENCEINTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACN_CATNOUVEAUNEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACN_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACN_CDF_CAT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACN_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACN_CATNOUVEAUNE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACN_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACN_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACN_CDF_CAT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACN_CDF_CAT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACN_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACN_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACN_CATNOUVEAUNERow
            Get
                Return CType(Me.Rows(index),FGACN_CATNOUVEAUNERow)
            End Get
        End Property
        
        Public Event FGACN_CATNOUVEAUNERowChanging As FGACN_CATNOUVEAUNERowChangeEventHandler
        
        Public Event FGACN_CATNOUVEAUNERowChanged As FGACN_CATNOUVEAUNERowChangeEventHandler
        
        Public Event FGACN_CATNOUVEAUNERowDeleting As FGACN_CATNOUVEAUNERowChangeEventHandler
        
        Public Event FGACN_CATNOUVEAUNERowDeleted As FGACN_CATNOUVEAUNERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACN_CATNOUVEAUNERow(ByVal row As FGACN_CATNOUVEAUNERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACN_CATNOUVEAUNERow(ByVal FGACN_FGA_CODE_FK_PK As Integer, ByVal FGACN_CDF_CAT_CODE_FK_PK As String, ByVal FGACN_NUMORD As Short) As FGACN_CATNOUVEAUNERow
            Dim rowFGACN_CATNOUVEAUNERow As FGACN_CATNOUVEAUNERow = CType(Me.NewRow,FGACN_CATNOUVEAUNERow)
            Dim columnValuesArray() As Object = New Object() {FGACN_FGA_CODE_FK_PK, FGACN_CDF_CAT_CODE_FK_PK, FGACN_NUMORD}
            rowFGACN_CATNOUVEAUNERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACN_CATNOUVEAUNERow)
            Return rowFGACN_CATNOUVEAUNERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACN_FGA_CODE_FK_PKFGACN_CDF_CAT_CODE_FK_PK(ByVal FGACN_FGA_CODE_FK_PK As Integer, ByVal FGACN_CDF_CAT_CODE_FK_PK As String) As FGACN_CATNOUVEAUNERow
            Return CType(Me.Rows.Find(New Object() {FGACN_FGA_CODE_FK_PK, FGACN_CDF_CAT_CODE_FK_PK}),FGACN_CATNOUVEAUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACN_CATNOUVEAUNEDataTable = CType(MyBase.Clone,FGACN_CATNOUVEAUNEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACN_CATNOUVEAUNEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACN_FGA_CODE_FK_PK = MyBase.Columns("FGACN_FGA_CODE_FK_PK")
            Me.columnFGACN_CDF_CAT_CODE_FK_PK = MyBase.Columns("FGACN_CDF_CAT_CODE_FK_PK")
            Me.columnFGACN_NUMORD = MyBase.Columns("FGACN_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACN_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACN_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACN_FGA_CODE_FK_PK)
            Me.columnFGACN_CDF_CAT_CODE_FK_PK = New Global.System.Data.DataColumn("FGACN_CDF_CAT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACN_CDF_CAT_CODE_FK_PK)
            Me.columnFGACN_NUMORD = New Global.System.Data.DataColumn("FGACN_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACN_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACN_FGA_CODE_FK_PK, Me.columnFGACN_CDF_CAT_CODE_FK_PK}, true))
            Me.columnFGACN_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACN_CDF_CAT_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACN_CDF_CAT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACN_CATNOUVEAUNERow() As FGACN_CATNOUVEAUNERow
            Return CType(Me.NewRow,FGACN_CATNOUVEAUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACN_CATNOUVEAUNERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACN_CATNOUVEAUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACN_CATNOUVEAUNERowChangedEvent) Is Nothing) Then
                RaiseEvent FGACN_CATNOUVEAUNERowChanged(Me, New FGACN_CATNOUVEAUNERowChangeEvent(CType(e.Row,FGACN_CATNOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACN_CATNOUVEAUNERowChangingEvent) Is Nothing) Then
                RaiseEvent FGACN_CATNOUVEAUNERowChanging(Me, New FGACN_CATNOUVEAUNERowChangeEvent(CType(e.Row,FGACN_CATNOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACN_CATNOUVEAUNERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACN_CATNOUVEAUNERowDeleted(Me, New FGACN_CATNOUVEAUNERowChangeEvent(CType(e.Row,FGACN_CATNOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACN_CATNOUVEAUNERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACN_CATNOUVEAUNERowDeleting(Me, New FGACN_CATNOUVEAUNERowChangeEvent(CType(e.Row,FGACN_CATNOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACN_CATNOUVEAUNERow(ByVal row As FGACN_CATNOUVEAUNERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACN_CATNOUVEAUNEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX4_FGA_TXCONDATENIRCFDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX4_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX4_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX4_FGA_TXCONDATENIRCF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX4_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX4_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX4_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX4_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX4_FGA_TXCONDATENIRCFRow
            Get
                Return CType(Me.Rows(index),FGATX4_FGA_TXCONDATENIRCFRow)
            End Get
        End Property
        
        Public Event FGATX4_FGA_TXCONDATENIRCFRowChanging As FGATX4_FGA_TXCONDATENIRCFRowChangeEventHandler
        
        Public Event FGATX4_FGA_TXCONDATENIRCFRowChanged As FGATX4_FGA_TXCONDATENIRCFRowChangeEventHandler
        
        Public Event FGATX4_FGA_TXCONDATENIRCFRowDeleting As FGATX4_FGA_TXCONDATENIRCFRowChangeEventHandler
        
        Public Event FGATX4_FGA_TXCONDATENIRCFRowDeleted As FGATX4_FGA_TXCONDATENIRCFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX4_FGA_TXCONDATENIRCFRow(ByVal row As FGATX4_FGA_TXCONDATENIRCFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX4_FGA_TXCONDATENIRCFRow(ByVal FGATX4_FGA_CODE_FK_PK As Integer, ByVal FGATX4_TEXTE As String) As FGATX4_FGA_TXCONDATENIRCFRow
            Dim rowFGATX4_FGA_TXCONDATENIRCFRow As FGATX4_FGA_TXCONDATENIRCFRow = CType(Me.NewRow,FGATX4_FGA_TXCONDATENIRCFRow)
            Dim columnValuesArray() As Object = New Object() {FGATX4_FGA_CODE_FK_PK, FGATX4_TEXTE}
            rowFGATX4_FGA_TXCONDATENIRCFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX4_FGA_TXCONDATENIRCFRow)
            Return rowFGATX4_FGA_TXCONDATENIRCFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX4_FGA_CODE_FK_PK(ByVal FGATX4_FGA_CODE_FK_PK As Integer) As FGATX4_FGA_TXCONDATENIRCFRow
            Return CType(Me.Rows.Find(New Object() {FGATX4_FGA_CODE_FK_PK}),FGATX4_FGA_TXCONDATENIRCFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX4_FGA_TXCONDATENIRCFDataTable = CType(MyBase.Clone,FGATX4_FGA_TXCONDATENIRCFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX4_FGA_TXCONDATENIRCFDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX4_FGA_CODE_FK_PK = MyBase.Columns("FGATX4_FGA_CODE_FK_PK")
            Me.columnFGATX4_TEXTE = MyBase.Columns("FGATX4_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX4_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX4_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX4_FGA_CODE_FK_PK)
            Me.columnFGATX4_TEXTE = New Global.System.Data.DataColumn("FGATX4_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX4_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX4_FGA_CODE_FK_PK}, true))
            Me.columnFGATX4_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX4_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX4_TEXTE.AllowDBNull = false
            Me.columnFGATX4_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX4_FGA_TXCONDATENIRCFRow() As FGATX4_FGA_TXCONDATENIRCFRow
            Return CType(Me.NewRow,FGATX4_FGA_TXCONDATENIRCFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX4_FGA_TXCONDATENIRCFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX4_FGA_TXCONDATENIRCFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX4_FGA_TXCONDATENIRCFRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX4_FGA_TXCONDATENIRCFRowChanged(Me, New FGATX4_FGA_TXCONDATENIRCFRowChangeEvent(CType(e.Row,FGATX4_FGA_TXCONDATENIRCFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX4_FGA_TXCONDATENIRCFRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX4_FGA_TXCONDATENIRCFRowChanging(Me, New FGATX4_FGA_TXCONDATENIRCFRowChangeEvent(CType(e.Row,FGATX4_FGA_TXCONDATENIRCFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX4_FGA_TXCONDATENIRCFRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX4_FGA_TXCONDATENIRCFRowDeleted(Me, New FGATX4_FGA_TXCONDATENIRCFRowChangeEvent(CType(e.Row,FGATX4_FGA_TXCONDATENIRCFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX4_FGA_TXCONDATENIRCFRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX4_FGA_TXCONDATENIRCFRowDeleting(Me, New FGATX4_FGA_TXCONDATENIRCFRowChangeEvent(CType(e.Row,FGATX4_FGA_TXCONDATENIRCFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX4_FGA_TXCONDATENIRCFRow(ByVal row As FGATX4_FGA_TXCONDATENIRCFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX4_FGA_TXCONDATENIRCFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX5_FGA_TXCONDATENIRCNDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX5_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX5_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX5_FGA_TXCONDATENIRCN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX5_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX5_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX5_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX5_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX5_FGA_TXCONDATENIRCNRow
            Get
                Return CType(Me.Rows(index),FGATX5_FGA_TXCONDATENIRCNRow)
            End Get
        End Property
        
        Public Event FGATX5_FGA_TXCONDATENIRCNRowChanging As FGATX5_FGA_TXCONDATENIRCNRowChangeEventHandler
        
        Public Event FGATX5_FGA_TXCONDATENIRCNRowChanged As FGATX5_FGA_TXCONDATENIRCNRowChangeEventHandler
        
        Public Event FGATX5_FGA_TXCONDATENIRCNRowDeleting As FGATX5_FGA_TXCONDATENIRCNRowChangeEventHandler
        
        Public Event FGATX5_FGA_TXCONDATENIRCNRowDeleted As FGATX5_FGA_TXCONDATENIRCNRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX5_FGA_TXCONDATENIRCNRow(ByVal row As FGATX5_FGA_TXCONDATENIRCNRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX5_FGA_TXCONDATENIRCNRow(ByVal FGATX5_FGA_CODE_FK_PK As Integer, ByVal FGATX5_TEXTE As String) As FGATX5_FGA_TXCONDATENIRCNRow
            Dim rowFGATX5_FGA_TXCONDATENIRCNRow As FGATX5_FGA_TXCONDATENIRCNRow = CType(Me.NewRow,FGATX5_FGA_TXCONDATENIRCNRow)
            Dim columnValuesArray() As Object = New Object() {FGATX5_FGA_CODE_FK_PK, FGATX5_TEXTE}
            rowFGATX5_FGA_TXCONDATENIRCNRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX5_FGA_TXCONDATENIRCNRow)
            Return rowFGATX5_FGA_TXCONDATENIRCNRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX5_FGA_CODE_FK_PK(ByVal FGATX5_FGA_CODE_FK_PK As Integer) As FGATX5_FGA_TXCONDATENIRCNRow
            Return CType(Me.Rows.Find(New Object() {FGATX5_FGA_CODE_FK_PK}),FGATX5_FGA_TXCONDATENIRCNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX5_FGA_TXCONDATENIRCNDataTable = CType(MyBase.Clone,FGATX5_FGA_TXCONDATENIRCNDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX5_FGA_TXCONDATENIRCNDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX5_FGA_CODE_FK_PK = MyBase.Columns("FGATX5_FGA_CODE_FK_PK")
            Me.columnFGATX5_TEXTE = MyBase.Columns("FGATX5_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX5_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX5_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX5_FGA_CODE_FK_PK)
            Me.columnFGATX5_TEXTE = New Global.System.Data.DataColumn("FGATX5_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX5_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX5_FGA_CODE_FK_PK}, true))
            Me.columnFGATX5_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX5_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX5_TEXTE.AllowDBNull = false
            Me.columnFGATX5_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX5_FGA_TXCONDATENIRCNRow() As FGATX5_FGA_TXCONDATENIRCNRow
            Return CType(Me.NewRow,FGATX5_FGA_TXCONDATENIRCNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX5_FGA_TXCONDATENIRCNRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX5_FGA_TXCONDATENIRCNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX5_FGA_TXCONDATENIRCNRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX5_FGA_TXCONDATENIRCNRowChanged(Me, New FGATX5_FGA_TXCONDATENIRCNRowChangeEvent(CType(e.Row,FGATX5_FGA_TXCONDATENIRCNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX5_FGA_TXCONDATENIRCNRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX5_FGA_TXCONDATENIRCNRowChanging(Me, New FGATX5_FGA_TXCONDATENIRCNRowChangeEvent(CType(e.Row,FGATX5_FGA_TXCONDATENIRCNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX5_FGA_TXCONDATENIRCNRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX5_FGA_TXCONDATENIRCNRowDeleted(Me, New FGATX5_FGA_TXCONDATENIRCNRowChangeEvent(CType(e.Row,FGATX5_FGA_TXCONDATENIRCNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX5_FGA_TXCONDATENIRCNRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX5_FGA_TXCONDATENIRCNRowDeleting(Me, New FGATX5_FGA_TXCONDATENIRCNRowChangeEvent(CType(e.Row,FGATX5_FGA_TXCONDATENIRCNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX5_FGA_TXCONDATENIRCNRow(ByVal row As FGATX5_FGA_TXCONDATENIRCNRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX5_FGA_TXCONDATENIRCNDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX9_FGA_TXRECOMMANDATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX9_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX9_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX9_FGA_TXRECOMMANDAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX9_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX9_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX9_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX9_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX9_FGA_TXRECOMMANDATRow
            Get
                Return CType(Me.Rows(index),FGATX9_FGA_TXRECOMMANDATRow)
            End Get
        End Property
        
        Public Event FGATX9_FGA_TXRECOMMANDATRowChanging As FGATX9_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX9_FGA_TXRECOMMANDATRowChanged As FGATX9_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX9_FGA_TXRECOMMANDATRowDeleting As FGATX9_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX9_FGA_TXRECOMMANDATRowDeleted As FGATX9_FGA_TXRECOMMANDATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX9_FGA_TXRECOMMANDATRow(ByVal row As FGATX9_FGA_TXRECOMMANDATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX9_FGA_TXRECOMMANDATRow(ByVal FGATX9_FGA_CODE_FK_PK As Integer, ByVal FGATX9_TEXTE As String) As FGATX9_FGA_TXRECOMMANDATRow
            Dim rowFGATX9_FGA_TXRECOMMANDATRow As FGATX9_FGA_TXRECOMMANDATRow = CType(Me.NewRow,FGATX9_FGA_TXRECOMMANDATRow)
            Dim columnValuesArray() As Object = New Object() {FGATX9_FGA_CODE_FK_PK, FGATX9_TEXTE}
            rowFGATX9_FGA_TXRECOMMANDATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX9_FGA_TXRECOMMANDATRow)
            Return rowFGATX9_FGA_TXRECOMMANDATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX9_FGA_CODE_FK_PK(ByVal FGATX9_FGA_CODE_FK_PK As Integer) As FGATX9_FGA_TXRECOMMANDATRow
            Return CType(Me.Rows.Find(New Object() {FGATX9_FGA_CODE_FK_PK}),FGATX9_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX9_FGA_TXRECOMMANDATDataTable = CType(MyBase.Clone,FGATX9_FGA_TXRECOMMANDATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX9_FGA_TXRECOMMANDATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX9_FGA_CODE_FK_PK = MyBase.Columns("FGATX9_FGA_CODE_FK_PK")
            Me.columnFGATX9_TEXTE = MyBase.Columns("FGATX9_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX9_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX9_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX9_FGA_CODE_FK_PK)
            Me.columnFGATX9_TEXTE = New Global.System.Data.DataColumn("FGATX9_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX9_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX9_FGA_CODE_FK_PK}, true))
            Me.columnFGATX9_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX9_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX9_TEXTE.AllowDBNull = false
            Me.columnFGATX9_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX9_FGA_TXRECOMMANDATRow() As FGATX9_FGA_TXRECOMMANDATRow
            Return CType(Me.NewRow,FGATX9_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX9_FGA_TXRECOMMANDATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX9_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX9_FGA_TXRECOMMANDATRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX9_FGA_TXRECOMMANDATRowChanged(Me, New FGATX9_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX9_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX9_FGA_TXRECOMMANDATRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX9_FGA_TXRECOMMANDATRowChanging(Me, New FGATX9_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX9_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX9_FGA_TXRECOMMANDATRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX9_FGA_TXRECOMMANDATRowDeleted(Me, New FGATX9_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX9_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX9_FGA_TXRECOMMANDATRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX9_FGA_TXRECOMMANDATRowDeleting(Me, New FGATX9_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX9_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX9_FGA_TXRECOMMANDATRow(ByVal row As FGATX9_FGA_TXRECOMMANDATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX9_FGA_TXRECOMMANDATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGARIFAP_RISQUEFEMMEENAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGARIFAP_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIFAP_CDF_RI_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIFAP_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGARIFAP_RISQUEFEMMEENAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIFAP_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIFAP_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIFAP_CDF_RI_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIFAP_CDF_RI_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIFAP_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIFAP_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGARIFAP_RISQUEFEMMEENAGERow
            Get
                Return CType(Me.Rows(index),FGARIFAP_RISQUEFEMMEENAGERow)
            End Get
        End Property
        
        Public Event FGARIFAP_RISQUEFEMMEENAGERowChanging As FGARIFAP_RISQUEFEMMEENAGERowChangeEventHandler
        
        Public Event FGARIFAP_RISQUEFEMMEENAGERowChanged As FGARIFAP_RISQUEFEMMEENAGERowChangeEventHandler
        
        Public Event FGARIFAP_RISQUEFEMMEENAGERowDeleting As FGARIFAP_RISQUEFEMMEENAGERowChangeEventHandler
        
        Public Event FGARIFAP_RISQUEFEMMEENAGERowDeleted As FGARIFAP_RISQUEFEMMEENAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGARIFAP_RISQUEFEMMEENAGERow(ByVal row As FGARIFAP_RISQUEFEMMEENAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGARIFAP_RISQUEFEMMEENAGERow(ByVal FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal FGARIFAP_CDF_RI_CODE_FK_PK As String, ByVal FGARIFAP_NUMORD As Short) As FGARIFAP_RISQUEFEMMEENAGERow
            Dim rowFGARIFAP_RISQUEFEMMEENAGERow As FGARIFAP_RISQUEFEMMEENAGERow = CType(Me.NewRow,FGARIFAP_RISQUEFEMMEENAGERow)
            Dim columnValuesArray() As Object = New Object() {FGARIFAP_FGA_CODE_FK_PK, FGARIFAP_CDF_RI_CODE_FK_PK, FGARIFAP_NUMORD}
            rowFGARIFAP_RISQUEFEMMEENAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGARIFAP_RISQUEFEMMEENAGERow)
            Return rowFGARIFAP_RISQUEFEMMEENAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGARIFAP_FGA_CODE_FK_PKFGARIFAP_CDF_RI_CODE_FK_PK(ByVal FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal FGARIFAP_CDF_RI_CODE_FK_PK As String) As FGARIFAP_RISQUEFEMMEENAGERow
            Return CType(Me.Rows.Find(New Object() {FGARIFAP_FGA_CODE_FK_PK, FGARIFAP_CDF_RI_CODE_FK_PK}),FGARIFAP_RISQUEFEMMEENAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGARIFAP_RISQUEFEMMEENAGEDataTable = CType(MyBase.Clone,FGARIFAP_RISQUEFEMMEENAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGARIFAP_RISQUEFEMMEENAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGARIFAP_FGA_CODE_FK_PK = MyBase.Columns("FGARIFAP_FGA_CODE_FK_PK")
            Me.columnFGARIFAP_CDF_RI_CODE_FK_PK = MyBase.Columns("FGARIFAP_CDF_RI_CODE_FK_PK")
            Me.columnFGARIFAP_NUMORD = MyBase.Columns("FGARIFAP_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGARIFAP_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIFAP_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIFAP_FGA_CODE_FK_PK)
            Me.columnFGARIFAP_CDF_RI_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIFAP_CDF_RI_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIFAP_CDF_RI_CODE_FK_PK)
            Me.columnFGARIFAP_NUMORD = New Global.System.Data.DataColumn("FGARIFAP_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIFAP_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGARIFAP_FGA_CODE_FK_PK, Me.columnFGARIFAP_CDF_RI_CODE_FK_PK}, true))
            Me.columnFGARIFAP_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIFAP_CDF_RI_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIFAP_CDF_RI_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGARIFAP_RISQUEFEMMEENAGERow() As FGARIFAP_RISQUEFEMMEENAGERow
            Return CType(Me.NewRow,FGARIFAP_RISQUEFEMMEENAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGARIFAP_RISQUEFEMMEENAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGARIFAP_RISQUEFEMMEENAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGARIFAP_RISQUEFEMMEENAGERowChangedEvent) Is Nothing) Then
                RaiseEvent FGARIFAP_RISQUEFEMMEENAGERowChanged(Me, New FGARIFAP_RISQUEFEMMEENAGERowChangeEvent(CType(e.Row,FGARIFAP_RISQUEFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGARIFAP_RISQUEFEMMEENAGERowChangingEvent) Is Nothing) Then
                RaiseEvent FGARIFAP_RISQUEFEMMEENAGERowChanging(Me, New FGARIFAP_RISQUEFEMMEENAGERowChangeEvent(CType(e.Row,FGARIFAP_RISQUEFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGARIFAP_RISQUEFEMMEENAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGARIFAP_RISQUEFEMMEENAGERowDeleted(Me, New FGARIFAP_RISQUEFEMMEENAGERowChangeEvent(CType(e.Row,FGARIFAP_RISQUEFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGARIFAP_RISQUEFEMMEENAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGARIFAP_RISQUEFEMMEENAGERowDeleting(Me, New FGARIFAP_RISQUEFEMMEENAGERowChangeEvent(CType(e.Row,FGARIFAP_RISQUEFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGARIFAP_RISQUEFEMMEENAGERow(ByVal row As FGARIFAP_RISQUEFEMMEENAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGARIFAP_RISQUEFEMMEENAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACFAP_CATFEMMEENAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACFAP_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFAP_CDF_CAT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFAP_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACFAP_CATFEMMEENAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFAP_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFAP_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFAP_CDF_CAT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFAP_CDF_CAT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFAP_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFAP_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACFAP_CATFEMMEENAGERow
            Get
                Return CType(Me.Rows(index),FGACFAP_CATFEMMEENAGERow)
            End Get
        End Property
        
        Public Event FGACFAP_CATFEMMEENAGERowChanging As FGACFAP_CATFEMMEENAGERowChangeEventHandler
        
        Public Event FGACFAP_CATFEMMEENAGERowChanged As FGACFAP_CATFEMMEENAGERowChangeEventHandler
        
        Public Event FGACFAP_CATFEMMEENAGERowDeleting As FGACFAP_CATFEMMEENAGERowChangeEventHandler
        
        Public Event FGACFAP_CATFEMMEENAGERowDeleted As FGACFAP_CATFEMMEENAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACFAP_CATFEMMEENAGERow(ByVal row As FGACFAP_CATFEMMEENAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACFAP_CATFEMMEENAGERow(ByVal FGACFAP_FGA_CODE_FK_PK As Integer, ByVal FGACFAP_CDF_CAT_CODE_FK_PK As String, ByVal FGACFAP_NUMORD As Short) As FGACFAP_CATFEMMEENAGERow
            Dim rowFGACFAP_CATFEMMEENAGERow As FGACFAP_CATFEMMEENAGERow = CType(Me.NewRow,FGACFAP_CATFEMMEENAGERow)
            Dim columnValuesArray() As Object = New Object() {FGACFAP_FGA_CODE_FK_PK, FGACFAP_CDF_CAT_CODE_FK_PK, FGACFAP_NUMORD}
            rowFGACFAP_CATFEMMEENAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACFAP_CATFEMMEENAGERow)
            Return rowFGACFAP_CATFEMMEENAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACFAP_FGA_CODE_FK_PKFGACFAP_CDF_CAT_CODE_FK_PK(ByVal FGACFAP_FGA_CODE_FK_PK As Integer, ByVal FGACFAP_CDF_CAT_CODE_FK_PK As String) As FGACFAP_CATFEMMEENAGERow
            Return CType(Me.Rows.Find(New Object() {FGACFAP_FGA_CODE_FK_PK, FGACFAP_CDF_CAT_CODE_FK_PK}),FGACFAP_CATFEMMEENAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACFAP_CATFEMMEENAGEDataTable = CType(MyBase.Clone,FGACFAP_CATFEMMEENAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACFAP_CATFEMMEENAGEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACFAP_FGA_CODE_FK_PK = MyBase.Columns("FGACFAP_FGA_CODE_FK_PK")
            Me.columnFGACFAP_CDF_CAT_CODE_FK_PK = MyBase.Columns("FGACFAP_CDF_CAT_CODE_FK_PK")
            Me.columnFGACFAP_NUMORD = MyBase.Columns("FGACFAP_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACFAP_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFAP_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFAP_FGA_CODE_FK_PK)
            Me.columnFGACFAP_CDF_CAT_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFAP_CDF_CAT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFAP_CDF_CAT_CODE_FK_PK)
            Me.columnFGACFAP_NUMORD = New Global.System.Data.DataColumn("FGACFAP_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFAP_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACFAP_FGA_CODE_FK_PK, Me.columnFGACFAP_CDF_CAT_CODE_FK_PK}, true))
            Me.columnFGACFAP_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFAP_CDF_CAT_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFAP_CDF_CAT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACFAP_CATFEMMEENAGERow() As FGACFAP_CATFEMMEENAGERow
            Return CType(Me.NewRow,FGACFAP_CATFEMMEENAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACFAP_CATFEMMEENAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACFAP_CATFEMMEENAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACFAP_CATFEMMEENAGERowChangedEvent) Is Nothing) Then
                RaiseEvent FGACFAP_CATFEMMEENAGERowChanged(Me, New FGACFAP_CATFEMMEENAGERowChangeEvent(CType(e.Row,FGACFAP_CATFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACFAP_CATFEMMEENAGERowChangingEvent) Is Nothing) Then
                RaiseEvent FGACFAP_CATFEMMEENAGERowChanging(Me, New FGACFAP_CATFEMMEENAGERowChangeEvent(CType(e.Row,FGACFAP_CATFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACFAP_CATFEMMEENAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACFAP_CATFEMMEENAGERowDeleted(Me, New FGACFAP_CATFEMMEENAGERowChangeEvent(CType(e.Row,FGACFAP_CATFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACFAP_CATFEMMEENAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACFAP_CATFEMMEENAGERowDeleting(Me, New FGACFAP_CATFEMMEENAGERowChangeEvent(CType(e.Row,FGACFAP_CATFEMMEENAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACFAP_CATFEMMEENAGERow(ByVal row As FGACFAP_CATFEMMEENAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACFAP_CATFEMMEENAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX10_FGA_TXRECOMMANDATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX10_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX10_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX10_FGA_TXRECOMMANDAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX10_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX10_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX10_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX10_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX10_FGA_TXRECOMMANDATRow
            Get
                Return CType(Me.Rows(index),FGATX10_FGA_TXRECOMMANDATRow)
            End Get
        End Property
        
        Public Event FGATX10_FGA_TXRECOMMANDATRowChanging As FGATX10_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX10_FGA_TXRECOMMANDATRowChanged As FGATX10_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX10_FGA_TXRECOMMANDATRowDeleting As FGATX10_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX10_FGA_TXRECOMMANDATRowDeleted As FGATX10_FGA_TXRECOMMANDATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX10_FGA_TXRECOMMANDATRow(ByVal row As FGATX10_FGA_TXRECOMMANDATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX10_FGA_TXRECOMMANDATRow(ByVal FGATX10_FGA_CODE_FK_PK As Integer, ByVal FGATX10_TEXTE As String) As FGATX10_FGA_TXRECOMMANDATRow
            Dim rowFGATX10_FGA_TXRECOMMANDATRow As FGATX10_FGA_TXRECOMMANDATRow = CType(Me.NewRow,FGATX10_FGA_TXRECOMMANDATRow)
            Dim columnValuesArray() As Object = New Object() {FGATX10_FGA_CODE_FK_PK, FGATX10_TEXTE}
            rowFGATX10_FGA_TXRECOMMANDATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX10_FGA_TXRECOMMANDATRow)
            Return rowFGATX10_FGA_TXRECOMMANDATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX10_FGA_CODE_FK_PK(ByVal FGATX10_FGA_CODE_FK_PK As Integer) As FGATX10_FGA_TXRECOMMANDATRow
            Return CType(Me.Rows.Find(New Object() {FGATX10_FGA_CODE_FK_PK}),FGATX10_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX10_FGA_TXRECOMMANDATDataTable = CType(MyBase.Clone,FGATX10_FGA_TXRECOMMANDATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX10_FGA_TXRECOMMANDATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX10_FGA_CODE_FK_PK = MyBase.Columns("FGATX10_FGA_CODE_FK_PK")
            Me.columnFGATX10_TEXTE = MyBase.Columns("FGATX10_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX10_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX10_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX10_FGA_CODE_FK_PK)
            Me.columnFGATX10_TEXTE = New Global.System.Data.DataColumn("FGATX10_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX10_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX10_FGA_CODE_FK_PK}, true))
            Me.columnFGATX10_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX10_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX10_TEXTE.AllowDBNull = false
            Me.columnFGATX10_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX10_FGA_TXRECOMMANDATRow() As FGATX10_FGA_TXRECOMMANDATRow
            Return CType(Me.NewRow,FGATX10_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX10_FGA_TXRECOMMANDATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX10_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX10_FGA_TXRECOMMANDATRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX10_FGA_TXRECOMMANDATRowChanged(Me, New FGATX10_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX10_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX10_FGA_TXRECOMMANDATRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX10_FGA_TXRECOMMANDATRowChanging(Me, New FGATX10_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX10_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX10_FGA_TXRECOMMANDATRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX10_FGA_TXRECOMMANDATRowDeleted(Me, New FGATX10_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX10_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX10_FGA_TXRECOMMANDATRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX10_FGA_TXRECOMMANDATRowDeleting(Me, New FGATX10_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX10_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX10_FGA_TXRECOMMANDATRow(ByVal row As FGATX10_FGA_TXRECOMMANDATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX10_FGA_TXRECOMMANDATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGAON_OBSERVATION_NOUVEAUNEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGAON_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAON_CDF_OBS_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAON_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGAON_OBSERVATION_NOUVEAUNE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAON_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAON_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAON_CDF_OBS_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAON_CDF_OBS_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAON_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAON_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGAON_OBSERVATION_NOUVEAUNERow
            Get
                Return CType(Me.Rows(index),FGAON_OBSERVATION_NOUVEAUNERow)
            End Get
        End Property
        
        Public Event FGAON_OBSERVATION_NOUVEAUNERowChanging As FGAON_OBSERVATION_NOUVEAUNERowChangeEventHandler
        
        Public Event FGAON_OBSERVATION_NOUVEAUNERowChanged As FGAON_OBSERVATION_NOUVEAUNERowChangeEventHandler
        
        Public Event FGAON_OBSERVATION_NOUVEAUNERowDeleting As FGAON_OBSERVATION_NOUVEAUNERowChangeEventHandler
        
        Public Event FGAON_OBSERVATION_NOUVEAUNERowDeleted As FGAON_OBSERVATION_NOUVEAUNERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGAON_OBSERVATION_NOUVEAUNERow(ByVal row As FGAON_OBSERVATION_NOUVEAUNERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGAON_OBSERVATION_NOUVEAUNERow(ByVal FGAON_FGA_CODE_FK_PK As Integer, ByVal FGAON_CDF_OBS_CODE_FK_PK As String, ByVal FGAON_NUMORD As Short) As FGAON_OBSERVATION_NOUVEAUNERow
            Dim rowFGAON_OBSERVATION_NOUVEAUNERow As FGAON_OBSERVATION_NOUVEAUNERow = CType(Me.NewRow,FGAON_OBSERVATION_NOUVEAUNERow)
            Dim columnValuesArray() As Object = New Object() {FGAON_FGA_CODE_FK_PK, FGAON_CDF_OBS_CODE_FK_PK, FGAON_NUMORD}
            rowFGAON_OBSERVATION_NOUVEAUNERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGAON_OBSERVATION_NOUVEAUNERow)
            Return rowFGAON_OBSERVATION_NOUVEAUNERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGAON_FGA_CODE_FK_PKFGAON_CDF_OBS_CODE_FK_PK(ByVal FGAON_FGA_CODE_FK_PK As Integer, ByVal FGAON_CDF_OBS_CODE_FK_PK As String) As FGAON_OBSERVATION_NOUVEAUNERow
            Return CType(Me.Rows.Find(New Object() {FGAON_FGA_CODE_FK_PK, FGAON_CDF_OBS_CODE_FK_PK}),FGAON_OBSERVATION_NOUVEAUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGAON_OBSERVATION_NOUVEAUNEDataTable = CType(MyBase.Clone,FGAON_OBSERVATION_NOUVEAUNEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGAON_OBSERVATION_NOUVEAUNEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGAON_FGA_CODE_FK_PK = MyBase.Columns("FGAON_FGA_CODE_FK_PK")
            Me.columnFGAON_CDF_OBS_CODE_FK_PK = MyBase.Columns("FGAON_CDF_OBS_CODE_FK_PK")
            Me.columnFGAON_NUMORD = MyBase.Columns("FGAON_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGAON_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGAON_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAON_FGA_CODE_FK_PK)
            Me.columnFGAON_CDF_OBS_CODE_FK_PK = New Global.System.Data.DataColumn("FGAON_CDF_OBS_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAON_CDF_OBS_CODE_FK_PK)
            Me.columnFGAON_NUMORD = New Global.System.Data.DataColumn("FGAON_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAON_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGAON_FGA_CODE_FK_PK, Me.columnFGAON_CDF_OBS_CODE_FK_PK}, true))
            Me.columnFGAON_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAON_CDF_OBS_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAON_CDF_OBS_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGAON_OBSERVATION_NOUVEAUNERow() As FGAON_OBSERVATION_NOUVEAUNERow
            Return CType(Me.NewRow,FGAON_OBSERVATION_NOUVEAUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGAON_OBSERVATION_NOUVEAUNERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGAON_OBSERVATION_NOUVEAUNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGAON_OBSERVATION_NOUVEAUNERowChangedEvent) Is Nothing) Then
                RaiseEvent FGAON_OBSERVATION_NOUVEAUNERowChanged(Me, New FGAON_OBSERVATION_NOUVEAUNERowChangeEvent(CType(e.Row,FGAON_OBSERVATION_NOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGAON_OBSERVATION_NOUVEAUNERowChangingEvent) Is Nothing) Then
                RaiseEvent FGAON_OBSERVATION_NOUVEAUNERowChanging(Me, New FGAON_OBSERVATION_NOUVEAUNERowChangeEvent(CType(e.Row,FGAON_OBSERVATION_NOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGAON_OBSERVATION_NOUVEAUNERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGAON_OBSERVATION_NOUVEAUNERowDeleted(Me, New FGAON_OBSERVATION_NOUVEAUNERowChangeEvent(CType(e.Row,FGAON_OBSERVATION_NOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGAON_OBSERVATION_NOUVEAUNERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGAON_OBSERVATION_NOUVEAUNERowDeleting(Me, New FGAON_OBSERVATION_NOUVEAUNERowChangeEvent(CType(e.Row,FGAON_OBSERVATION_NOUVEAUNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGAON_OBSERVATION_NOUVEAUNERow(ByVal row As FGAON_OBSERVATION_NOUVEAUNERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGAON_OBSERVATION_NOUVEAUNEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACFN_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFN_CDF_CF_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACFN_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACFN_CIRCONSFAVORIS_NOUVEAUN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFN_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFN_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFN_CDF_CF_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFN_CDF_CF_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACFN_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACFN_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
            Get
                Return CType(Me.Rows(index),FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
            End Get
        End Property
        
        Public Event FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChanging As FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEventHandler
        
        Public Event FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChanged As FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEventHandler
        
        Public Event FGACFN_CIRCONSFAVORIS_NOUVEAUNRowDeleting As FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEventHandler
        
        Public Event FGACFN_CIRCONSFAVORIS_NOUVEAUNRowDeleted As FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACFN_CIRCONSFAVORIS_NOUVEAUNRow(ByVal row As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACFN_CIRCONSFAVORIS_NOUVEAUNRow(ByVal FGACFN_FGA_CODE_FK_PK As Integer, ByVal FGACFN_CDF_CF_CODE_FK_PK As String, ByVal FGACFN_NUMORD As Short) As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
            Dim rowFGACFN_CIRCONSFAVORIS_NOUVEAUNRow As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow = CType(Me.NewRow,FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
            Dim columnValuesArray() As Object = New Object() {FGACFN_FGA_CODE_FK_PK, FGACFN_CDF_CF_CODE_FK_PK, FGACFN_NUMORD}
            rowFGACFN_CIRCONSFAVORIS_NOUVEAUNRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
            Return rowFGACFN_CIRCONSFAVORIS_NOUVEAUNRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACFN_FGA_CODE_FK_PKFGACFN_CDF_CF_CODE_FK_PK(ByVal FGACFN_FGA_CODE_FK_PK As Integer, ByVal FGACFN_CDF_CF_CODE_FK_PK As String) As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
            Return CType(Me.Rows.Find(New Object() {FGACFN_FGA_CODE_FK_PK, FGACFN_CDF_CF_CODE_FK_PK}),FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable = CType(MyBase.Clone,FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACFN_FGA_CODE_FK_PK = MyBase.Columns("FGACFN_FGA_CODE_FK_PK")
            Me.columnFGACFN_CDF_CF_CODE_FK_PK = MyBase.Columns("FGACFN_CDF_CF_CODE_FK_PK")
            Me.columnFGACFN_NUMORD = MyBase.Columns("FGACFN_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACFN_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFN_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFN_FGA_CODE_FK_PK)
            Me.columnFGACFN_CDF_CF_CODE_FK_PK = New Global.System.Data.DataColumn("FGACFN_CDF_CF_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFN_CDF_CF_CODE_FK_PK)
            Me.columnFGACFN_NUMORD = New Global.System.Data.DataColumn("FGACFN_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACFN_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACFN_FGA_CODE_FK_PK, Me.columnFGACFN_CDF_CF_CODE_FK_PK}, true))
            Me.columnFGACFN_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFN_CDF_CF_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACFN_CDF_CF_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACFN_CIRCONSFAVORIS_NOUVEAUNRow() As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
            Return CType(Me.NewRow,FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACFN_CIRCONSFAVORIS_NOUVEAUNRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangedEvent) Is Nothing) Then
                RaiseEvent FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChanged(Me, New FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEvent(CType(e.Row,FGACFN_CIRCONSFAVORIS_NOUVEAUNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangingEvent) Is Nothing) Then
                RaiseEvent FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChanging(Me, New FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEvent(CType(e.Row,FGACFN_CIRCONSFAVORIS_NOUVEAUNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACFN_CIRCONSFAVORIS_NOUVEAUNRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACFN_CIRCONSFAVORIS_NOUVEAUNRowDeleted(Me, New FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEvent(CType(e.Row,FGACFN_CIRCONSFAVORIS_NOUVEAUNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACFN_CIRCONSFAVORIS_NOUVEAUNRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACFN_CIRCONSFAVORIS_NOUVEAUNRowDeleting(Me, New FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEvent(CType(e.Row,FGACFN_CIRCONSFAVORIS_NOUVEAUNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACFN_CIRCONSFAVORIS_NOUVEAUNRow(ByVal row As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX2_FGA_TXOBSERVNOUVNEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX2_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX2_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX2_FGA_TXOBSERVNOUVNE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX2_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX2_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX2_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX2_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX2_FGA_TXOBSERVNOUVNERow
            Get
                Return CType(Me.Rows(index),FGATX2_FGA_TXOBSERVNOUVNERow)
            End Get
        End Property
        
        Public Event FGATX2_FGA_TXOBSERVNOUVNERowChanging As FGATX2_FGA_TXOBSERVNOUVNERowChangeEventHandler
        
        Public Event FGATX2_FGA_TXOBSERVNOUVNERowChanged As FGATX2_FGA_TXOBSERVNOUVNERowChangeEventHandler
        
        Public Event FGATX2_FGA_TXOBSERVNOUVNERowDeleting As FGATX2_FGA_TXOBSERVNOUVNERowChangeEventHandler
        
        Public Event FGATX2_FGA_TXOBSERVNOUVNERowDeleted As FGATX2_FGA_TXOBSERVNOUVNERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX2_FGA_TXOBSERVNOUVNERow(ByVal row As FGATX2_FGA_TXOBSERVNOUVNERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX2_FGA_TXOBSERVNOUVNERow(ByVal FGATX2_FGA_CODE_FK_PK As Integer, ByVal FGATX2_TEXTE As String) As FGATX2_FGA_TXOBSERVNOUVNERow
            Dim rowFGATX2_FGA_TXOBSERVNOUVNERow As FGATX2_FGA_TXOBSERVNOUVNERow = CType(Me.NewRow,FGATX2_FGA_TXOBSERVNOUVNERow)
            Dim columnValuesArray() As Object = New Object() {FGATX2_FGA_CODE_FK_PK, FGATX2_TEXTE}
            rowFGATX2_FGA_TXOBSERVNOUVNERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX2_FGA_TXOBSERVNOUVNERow)
            Return rowFGATX2_FGA_TXOBSERVNOUVNERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX2_FGA_CODE_FK_PK(ByVal FGATX2_FGA_CODE_FK_PK As Integer) As FGATX2_FGA_TXOBSERVNOUVNERow
            Return CType(Me.Rows.Find(New Object() {FGATX2_FGA_CODE_FK_PK}),FGATX2_FGA_TXOBSERVNOUVNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX2_FGA_TXOBSERVNOUVNEDataTable = CType(MyBase.Clone,FGATX2_FGA_TXOBSERVNOUVNEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX2_FGA_TXOBSERVNOUVNEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX2_FGA_CODE_FK_PK = MyBase.Columns("FGATX2_FGA_CODE_FK_PK")
            Me.columnFGATX2_TEXTE = MyBase.Columns("FGATX2_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX2_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX2_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX2_FGA_CODE_FK_PK)
            Me.columnFGATX2_TEXTE = New Global.System.Data.DataColumn("FGATX2_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX2_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX2_FGA_CODE_FK_PK}, true))
            Me.columnFGATX2_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX2_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX2_TEXTE.AllowDBNull = false
            Me.columnFGATX2_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX2_FGA_TXOBSERVNOUVNERow() As FGATX2_FGA_TXOBSERVNOUVNERow
            Return CType(Me.NewRow,FGATX2_FGA_TXOBSERVNOUVNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX2_FGA_TXOBSERVNOUVNERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX2_FGA_TXOBSERVNOUVNERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX2_FGA_TXOBSERVNOUVNERowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX2_FGA_TXOBSERVNOUVNERowChanged(Me, New FGATX2_FGA_TXOBSERVNOUVNERowChangeEvent(CType(e.Row,FGATX2_FGA_TXOBSERVNOUVNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX2_FGA_TXOBSERVNOUVNERowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX2_FGA_TXOBSERVNOUVNERowChanging(Me, New FGATX2_FGA_TXOBSERVNOUVNERowChangeEvent(CType(e.Row,FGATX2_FGA_TXOBSERVNOUVNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX2_FGA_TXOBSERVNOUVNERowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX2_FGA_TXOBSERVNOUVNERowDeleted(Me, New FGATX2_FGA_TXOBSERVNOUVNERowChangeEvent(CType(e.Row,FGATX2_FGA_TXOBSERVNOUVNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX2_FGA_TXOBSERVNOUVNERowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX2_FGA_TXOBSERVNOUVNERowDeleting(Me, New FGATX2_FGA_TXOBSERVNOUVNERowChangeEvent(CType(e.Row,FGATX2_FGA_TXOBSERVNOUVNERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX2_FGA_TXOBSERVNOUVNERow(ByVal row As FGATX2_FGA_TXOBSERVNOUVNERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX2_FGA_TXOBSERVNOUVNEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGARIL_RISQUE_ALLAITEMENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGARIL_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIL_CDF_RI_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGARIL_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGARIL_RISQUE_ALLAITEMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIL_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIL_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIL_CDF_RI_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIL_CDF_RI_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGARIL_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGARIL_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGARIL_RISQUE_ALLAITEMENTRow
            Get
                Return CType(Me.Rows(index),FGARIL_RISQUE_ALLAITEMENTRow)
            End Get
        End Property
        
        Public Event FGARIL_RISQUE_ALLAITEMENTRowChanging As FGARIL_RISQUE_ALLAITEMENTRowChangeEventHandler
        
        Public Event FGARIL_RISQUE_ALLAITEMENTRowChanged As FGARIL_RISQUE_ALLAITEMENTRowChangeEventHandler
        
        Public Event FGARIL_RISQUE_ALLAITEMENTRowDeleting As FGARIL_RISQUE_ALLAITEMENTRowChangeEventHandler
        
        Public Event FGARIL_RISQUE_ALLAITEMENTRowDeleted As FGARIL_RISQUE_ALLAITEMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGARIL_RISQUE_ALLAITEMENTRow(ByVal row As FGARIL_RISQUE_ALLAITEMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGARIL_RISQUE_ALLAITEMENTRow(ByVal FGARIL_FGA_CODE_FK_PK As Integer, ByVal FGARIL_CDF_RI_CODE_FK_PK As String, ByVal FGARIL_NUMORD As Short) As FGARIL_RISQUE_ALLAITEMENTRow
            Dim rowFGARIL_RISQUE_ALLAITEMENTRow As FGARIL_RISQUE_ALLAITEMENTRow = CType(Me.NewRow,FGARIL_RISQUE_ALLAITEMENTRow)
            Dim columnValuesArray() As Object = New Object() {FGARIL_FGA_CODE_FK_PK, FGARIL_CDF_RI_CODE_FK_PK, FGARIL_NUMORD}
            rowFGARIL_RISQUE_ALLAITEMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGARIL_RISQUE_ALLAITEMENTRow)
            Return rowFGARIL_RISQUE_ALLAITEMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGARIL_FGA_CODE_FK_PKFGARIL_CDF_RI_CODE_FK_PK(ByVal FGARIL_FGA_CODE_FK_PK As Integer, ByVal FGARIL_CDF_RI_CODE_FK_PK As String) As FGARIL_RISQUE_ALLAITEMENTRow
            Return CType(Me.Rows.Find(New Object() {FGARIL_FGA_CODE_FK_PK, FGARIL_CDF_RI_CODE_FK_PK}),FGARIL_RISQUE_ALLAITEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGARIL_RISQUE_ALLAITEMENTDataTable = CType(MyBase.Clone,FGARIL_RISQUE_ALLAITEMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGARIL_RISQUE_ALLAITEMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGARIL_FGA_CODE_FK_PK = MyBase.Columns("FGARIL_FGA_CODE_FK_PK")
            Me.columnFGARIL_CDF_RI_CODE_FK_PK = MyBase.Columns("FGARIL_CDF_RI_CODE_FK_PK")
            Me.columnFGARIL_NUMORD = MyBase.Columns("FGARIL_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGARIL_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIL_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIL_FGA_CODE_FK_PK)
            Me.columnFGARIL_CDF_RI_CODE_FK_PK = New Global.System.Data.DataColumn("FGARIL_CDF_RI_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIL_CDF_RI_CODE_FK_PK)
            Me.columnFGARIL_NUMORD = New Global.System.Data.DataColumn("FGARIL_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGARIL_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGARIL_FGA_CODE_FK_PK, Me.columnFGARIL_CDF_RI_CODE_FK_PK}, true))
            Me.columnFGARIL_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIL_CDF_RI_CODE_FK_PK.AllowDBNull = false
            Me.columnFGARIL_CDF_RI_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGARIL_RISQUE_ALLAITEMENTRow() As FGARIL_RISQUE_ALLAITEMENTRow
            Return CType(Me.NewRow,FGARIL_RISQUE_ALLAITEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGARIL_RISQUE_ALLAITEMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGARIL_RISQUE_ALLAITEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGARIL_RISQUE_ALLAITEMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent FGARIL_RISQUE_ALLAITEMENTRowChanged(Me, New FGARIL_RISQUE_ALLAITEMENTRowChangeEvent(CType(e.Row,FGARIL_RISQUE_ALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGARIL_RISQUE_ALLAITEMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent FGARIL_RISQUE_ALLAITEMENTRowChanging(Me, New FGARIL_RISQUE_ALLAITEMENTRowChangeEvent(CType(e.Row,FGARIL_RISQUE_ALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGARIL_RISQUE_ALLAITEMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGARIL_RISQUE_ALLAITEMENTRowDeleted(Me, New FGARIL_RISQUE_ALLAITEMENTRowChangeEvent(CType(e.Row,FGARIL_RISQUE_ALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGARIL_RISQUE_ALLAITEMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGARIL_RISQUE_ALLAITEMENTRowDeleting(Me, New FGARIL_RISQUE_ALLAITEMENTRowChangeEvent(CType(e.Row,FGARIL_RISQUE_ALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGARIL_RISQUE_ALLAITEMENTRow(ByVal row As FGARIL_RISQUE_ALLAITEMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGARIL_RISQUE_ALLAITEMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX8_FGA_TXRECOMMANDATDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX8_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX8_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX8_FGA_TXRECOMMANDAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX8_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX8_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX8_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX8_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX8_FGA_TXRECOMMANDATRow
            Get
                Return CType(Me.Rows(index),FGATX8_FGA_TXRECOMMANDATRow)
            End Get
        End Property
        
        Public Event FGATX8_FGA_TXRECOMMANDATRowChanging As FGATX8_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX8_FGA_TXRECOMMANDATRowChanged As FGATX8_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX8_FGA_TXRECOMMANDATRowDeleting As FGATX8_FGA_TXRECOMMANDATRowChangeEventHandler
        
        Public Event FGATX8_FGA_TXRECOMMANDATRowDeleted As FGATX8_FGA_TXRECOMMANDATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX8_FGA_TXRECOMMANDATRow(ByVal row As FGATX8_FGA_TXRECOMMANDATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX8_FGA_TXRECOMMANDATRow(ByVal FGATX8_FGA_CODE_FK_PK As Integer, ByVal FGATX8_TEXTE As String) As FGATX8_FGA_TXRECOMMANDATRow
            Dim rowFGATX8_FGA_TXRECOMMANDATRow As FGATX8_FGA_TXRECOMMANDATRow = CType(Me.NewRow,FGATX8_FGA_TXRECOMMANDATRow)
            Dim columnValuesArray() As Object = New Object() {FGATX8_FGA_CODE_FK_PK, FGATX8_TEXTE}
            rowFGATX8_FGA_TXRECOMMANDATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX8_FGA_TXRECOMMANDATRow)
            Return rowFGATX8_FGA_TXRECOMMANDATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX8_FGA_CODE_FK_PK(ByVal FGATX8_FGA_CODE_FK_PK As Integer) As FGATX8_FGA_TXRECOMMANDATRow
            Return CType(Me.Rows.Find(New Object() {FGATX8_FGA_CODE_FK_PK}),FGATX8_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX8_FGA_TXRECOMMANDATDataTable = CType(MyBase.Clone,FGATX8_FGA_TXRECOMMANDATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX8_FGA_TXRECOMMANDATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX8_FGA_CODE_FK_PK = MyBase.Columns("FGATX8_FGA_CODE_FK_PK")
            Me.columnFGATX8_TEXTE = MyBase.Columns("FGATX8_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX8_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX8_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX8_FGA_CODE_FK_PK)
            Me.columnFGATX8_TEXTE = New Global.System.Data.DataColumn("FGATX8_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX8_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX8_FGA_CODE_FK_PK}, true))
            Me.columnFGATX8_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX8_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX8_TEXTE.AllowDBNull = false
            Me.columnFGATX8_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX8_FGA_TXRECOMMANDATRow() As FGATX8_FGA_TXRECOMMANDATRow
            Return CType(Me.NewRow,FGATX8_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX8_FGA_TXRECOMMANDATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX8_FGA_TXRECOMMANDATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX8_FGA_TXRECOMMANDATRowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX8_FGA_TXRECOMMANDATRowChanged(Me, New FGATX8_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX8_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX8_FGA_TXRECOMMANDATRowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX8_FGA_TXRECOMMANDATRowChanging(Me, New FGATX8_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX8_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX8_FGA_TXRECOMMANDATRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX8_FGA_TXRECOMMANDATRowDeleted(Me, New FGATX8_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX8_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX8_FGA_TXRECOMMANDATRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX8_FGA_TXRECOMMANDATRowDeleting(Me, New FGATX8_FGA_TXRECOMMANDATRowChangeEvent(CType(e.Row,FGATX8_FGA_TXRECOMMANDATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX8_FGA_TXRECOMMANDATRow(ByVal row As FGATX8_FGA_TXRECOMMANDATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX8_FGA_TXRECOMMANDATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGACA_CATALLAITEMENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGACA_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACA_CDF_CAT_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGACA_NUMORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGACA_CATALLAITEMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACA_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACA_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACA_CDF_CAT_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACA_CDF_CAT_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGACA_NUMORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGACA_NUMORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGACA_CATALLAITEMENTRow
            Get
                Return CType(Me.Rows(index),FGACA_CATALLAITEMENTRow)
            End Get
        End Property
        
        Public Event FGACA_CATALLAITEMENTRowChanging As FGACA_CATALLAITEMENTRowChangeEventHandler
        
        Public Event FGACA_CATALLAITEMENTRowChanged As FGACA_CATALLAITEMENTRowChangeEventHandler
        
        Public Event FGACA_CATALLAITEMENTRowDeleting As FGACA_CATALLAITEMENTRowChangeEventHandler
        
        Public Event FGACA_CATALLAITEMENTRowDeleted As FGACA_CATALLAITEMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGACA_CATALLAITEMENTRow(ByVal row As FGACA_CATALLAITEMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGACA_CATALLAITEMENTRow(ByVal FGACA_FGA_CODE_FK_PK As Integer, ByVal FGACA_CDF_CAT_CODE_FK_PK As String, ByVal FGACA_NUMORD As Short) As FGACA_CATALLAITEMENTRow
            Dim rowFGACA_CATALLAITEMENTRow As FGACA_CATALLAITEMENTRow = CType(Me.NewRow,FGACA_CATALLAITEMENTRow)
            Dim columnValuesArray() As Object = New Object() {FGACA_FGA_CODE_FK_PK, FGACA_CDF_CAT_CODE_FK_PK, FGACA_NUMORD}
            rowFGACA_CATALLAITEMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGACA_CATALLAITEMENTRow)
            Return rowFGACA_CATALLAITEMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGACA_FGA_CODE_FK_PKFGACA_CDF_CAT_CODE_FK_PK(ByVal FGACA_FGA_CODE_FK_PK As Integer, ByVal FGACA_CDF_CAT_CODE_FK_PK As String) As FGACA_CATALLAITEMENTRow
            Return CType(Me.Rows.Find(New Object() {FGACA_FGA_CODE_FK_PK, FGACA_CDF_CAT_CODE_FK_PK}),FGACA_CATALLAITEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGACA_CATALLAITEMENTDataTable = CType(MyBase.Clone,FGACA_CATALLAITEMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGACA_CATALLAITEMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGACA_FGA_CODE_FK_PK = MyBase.Columns("FGACA_FGA_CODE_FK_PK")
            Me.columnFGACA_CDF_CAT_CODE_FK_PK = MyBase.Columns("FGACA_CDF_CAT_CODE_FK_PK")
            Me.columnFGACA_NUMORD = MyBase.Columns("FGACA_NUMORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGACA_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGACA_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACA_FGA_CODE_FK_PK)
            Me.columnFGACA_CDF_CAT_CODE_FK_PK = New Global.System.Data.DataColumn("FGACA_CDF_CAT_CODE_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACA_CDF_CAT_CODE_FK_PK)
            Me.columnFGACA_NUMORD = New Global.System.Data.DataColumn("FGACA_NUMORD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGACA_NUMORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGACA_FGA_CODE_FK_PK, Me.columnFGACA_CDF_CAT_CODE_FK_PK}, true))
            Me.columnFGACA_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACA_CDF_CAT_CODE_FK_PK.AllowDBNull = false
            Me.columnFGACA_CDF_CAT_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGACA_CATALLAITEMENTRow() As FGACA_CATALLAITEMENTRow
            Return CType(Me.NewRow,FGACA_CATALLAITEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGACA_CATALLAITEMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGACA_CATALLAITEMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGACA_CATALLAITEMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent FGACA_CATALLAITEMENTRowChanged(Me, New FGACA_CATALLAITEMENTRowChangeEvent(CType(e.Row,FGACA_CATALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGACA_CATALLAITEMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent FGACA_CATALLAITEMENTRowChanging(Me, New FGACA_CATALLAITEMENTRowChangeEvent(CType(e.Row,FGACA_CATALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGACA_CATALLAITEMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGACA_CATALLAITEMENTRowDeleted(Me, New FGACA_CATALLAITEMENTRowChangeEvent(CType(e.Row,FGACA_CATALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGACA_CATALLAITEMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGACA_CATALLAITEMENTRowDeleting(Me, New FGACA_CATALLAITEMENTRowChangeEvent(CType(e.Row,FGACA_CATALLAITEMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGACA_CATALLAITEMENTRow(ByVal row As FGACA_CATALLAITEMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGACA_CATALLAITEMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGATX6_FGA_TXCONDATENIRCADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGATX6_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGATX6_TEXTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGATX6_FGA_TXCONDATENIRCA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX6_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX6_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGATX6_TEXTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGATX6_TEXTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGATX6_FGA_TXCONDATENIRCARow
            Get
                Return CType(Me.Rows(index),FGATX6_FGA_TXCONDATENIRCARow)
            End Get
        End Property
        
        Public Event FGATX6_FGA_TXCONDATENIRCARowChanging As FGATX6_FGA_TXCONDATENIRCARowChangeEventHandler
        
        Public Event FGATX6_FGA_TXCONDATENIRCARowChanged As FGATX6_FGA_TXCONDATENIRCARowChangeEventHandler
        
        Public Event FGATX6_FGA_TXCONDATENIRCARowDeleting As FGATX6_FGA_TXCONDATENIRCARowChangeEventHandler
        
        Public Event FGATX6_FGA_TXCONDATENIRCARowDeleted As FGATX6_FGA_TXCONDATENIRCARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGATX6_FGA_TXCONDATENIRCARow(ByVal row As FGATX6_FGA_TXCONDATENIRCARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGATX6_FGA_TXCONDATENIRCARow(ByVal FGATX6_FGA_CODE_FK_PK As Integer, ByVal FGATX6_TEXTE As String) As FGATX6_FGA_TXCONDATENIRCARow
            Dim rowFGATX6_FGA_TXCONDATENIRCARow As FGATX6_FGA_TXCONDATENIRCARow = CType(Me.NewRow,FGATX6_FGA_TXCONDATENIRCARow)
            Dim columnValuesArray() As Object = New Object() {FGATX6_FGA_CODE_FK_PK, FGATX6_TEXTE}
            rowFGATX6_FGA_TXCONDATENIRCARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGATX6_FGA_TXCONDATENIRCARow)
            Return rowFGATX6_FGA_TXCONDATENIRCARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGATX6_FGA_CODE_FK_PK(ByVal FGATX6_FGA_CODE_FK_PK As Integer) As FGATX6_FGA_TXCONDATENIRCARow
            Return CType(Me.Rows.Find(New Object() {FGATX6_FGA_CODE_FK_PK}),FGATX6_FGA_TXCONDATENIRCARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGATX6_FGA_TXCONDATENIRCADataTable = CType(MyBase.Clone,FGATX6_FGA_TXCONDATENIRCADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGATX6_FGA_TXCONDATENIRCADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGATX6_FGA_CODE_FK_PK = MyBase.Columns("FGATX6_FGA_CODE_FK_PK")
            Me.columnFGATX6_TEXTE = MyBase.Columns("FGATX6_TEXTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGATX6_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGATX6_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX6_FGA_CODE_FK_PK)
            Me.columnFGATX6_TEXTE = New Global.System.Data.DataColumn("FGATX6_TEXTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGATX6_TEXTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGATX6_FGA_CODE_FK_PK}, true))
            Me.columnFGATX6_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGATX6_FGA_CODE_FK_PK.Unique = true
            Me.columnFGATX6_TEXTE.AllowDBNull = false
            Me.columnFGATX6_TEXTE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGATX6_FGA_TXCONDATENIRCARow() As FGATX6_FGA_TXCONDATENIRCARow
            Return CType(Me.NewRow,FGATX6_FGA_TXCONDATENIRCARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGATX6_FGA_TXCONDATENIRCARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGATX6_FGA_TXCONDATENIRCARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGATX6_FGA_TXCONDATENIRCARowChangedEvent) Is Nothing) Then
                RaiseEvent FGATX6_FGA_TXCONDATENIRCARowChanged(Me, New FGATX6_FGA_TXCONDATENIRCARowChangeEvent(CType(e.Row,FGATX6_FGA_TXCONDATENIRCARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGATX6_FGA_TXCONDATENIRCARowChangingEvent) Is Nothing) Then
                RaiseEvent FGATX6_FGA_TXCONDATENIRCARowChanging(Me, New FGATX6_FGA_TXCONDATENIRCARowChangeEvent(CType(e.Row,FGATX6_FGA_TXCONDATENIRCARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGATX6_FGA_TXCONDATENIRCARowDeletedEvent) Is Nothing) Then
                RaiseEvent FGATX6_FGA_TXCONDATENIRCARowDeleted(Me, New FGATX6_FGA_TXCONDATENIRCARowChangeEvent(CType(e.Row,FGATX6_FGA_TXCONDATENIRCARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGATX6_FGA_TXCONDATENIRCARowDeletingEvent) Is Nothing) Then
                RaiseEvent FGATX6_FGA_TXCONDATENIRCARowDeleting(Me, New FGATX6_FGA_TXCONDATENIRCARowChangeEvent(CType(e.Row,FGATX6_FGA_TXCONDATENIRCARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGATX6_FGA_TXCONDATENIRCARow(ByVal row As FGATX6_FGA_TXCONDATENIRCARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGATX6_FGA_TXCONDATENIRCADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FGAAFS_FGA_AFSSAPSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFGAAFS_FGA_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAAFS_SP_CODE_FK_PK As Global.System.Data.DataColumn
        
        Private columnFGAAFS_DATE_PK As Global.System.Data.DataColumn
        
        Private columnFGAAFS_TYPEGRAL_PK As Global.System.Data.DataColumn
        
        Private columnFGAAFS_CDF_DOCUMENT_FK_PK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FGAAFS_FGA_AFSSAPS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAAFS_FGA_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAAFS_FGA_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAAFS_SP_CODE_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAAFS_SP_CODE_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAAFS_DATE_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAAFS_DATE_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAAFS_TYPEGRAL_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAAFS_TYPEGRAL_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FGAAFS_CDF_DOCUMENT_FK_PKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFGAAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FGAAFS_FGA_AFSSAPSRow
            Get
                Return CType(Me.Rows(index),FGAAFS_FGA_AFSSAPSRow)
            End Get
        End Property
        
        Public Event FGAAFS_FGA_AFSSAPSRowChanging As FGAAFS_FGA_AFSSAPSRowChangeEventHandler
        
        Public Event FGAAFS_FGA_AFSSAPSRowChanged As FGAAFS_FGA_AFSSAPSRowChangeEventHandler
        
        Public Event FGAAFS_FGA_AFSSAPSRowDeleting As FGAAFS_FGA_AFSSAPSRowChangeEventHandler
        
        Public Event FGAAFS_FGA_AFSSAPSRowDeleted As FGAAFS_FGA_AFSSAPSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFGAAFS_FGA_AFSSAPSRow(ByVal row As FGAAFS_FGA_AFSSAPSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFGAAFS_FGA_AFSSAPSRow(ByVal FGAAFS_FGA_CODE_FK_PK As Integer, ByVal FGAAFS_SP_CODE_FK_PK As Integer, ByVal FGAAFS_DATE_PK As Date, ByVal FGAAFS_TYPEGRAL_PK As String, ByVal FGAAFS_CDF_DOCUMENT_FK_PK As String) As FGAAFS_FGA_AFSSAPSRow
            Dim rowFGAAFS_FGA_AFSSAPSRow As FGAAFS_FGA_AFSSAPSRow = CType(Me.NewRow,FGAAFS_FGA_AFSSAPSRow)
            Dim columnValuesArray() As Object = New Object() {FGAAFS_FGA_CODE_FK_PK, FGAAFS_SP_CODE_FK_PK, FGAAFS_DATE_PK, FGAAFS_TYPEGRAL_PK, FGAAFS_CDF_DOCUMENT_FK_PK}
            rowFGAAFS_FGA_AFSSAPSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFGAAFS_FGA_AFSSAPSRow)
            Return rowFGAAFS_FGA_AFSSAPSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFGAAFS_FGA_CODE_FK_PKFGAAFS_SP_CODE_FK_PKFGAAFS_DATE_PKFGAAFS_TYPEGRAL_PKFGAAFS_CDF_DOCUMENT_FK_PK(ByVal FGAAFS_FGA_CODE_FK_PK As Integer, ByVal FGAAFS_SP_CODE_FK_PK As Integer, ByVal FGAAFS_DATE_PK As Date, ByVal FGAAFS_TYPEGRAL_PK As String, ByVal FGAAFS_CDF_DOCUMENT_FK_PK As String) As FGAAFS_FGA_AFSSAPSRow
            Return CType(Me.Rows.Find(New Object() {FGAAFS_FGA_CODE_FK_PK, FGAAFS_SP_CODE_FK_PK, FGAAFS_DATE_PK, FGAAFS_TYPEGRAL_PK, FGAAFS_CDF_DOCUMENT_FK_PK}),FGAAFS_FGA_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FGAAFS_FGA_AFSSAPSDataTable = CType(MyBase.Clone,FGAAFS_FGA_AFSSAPSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FGAAFS_FGA_AFSSAPSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFGAAFS_FGA_CODE_FK_PK = MyBase.Columns("FGAAFS_FGA_CODE_FK_PK")
            Me.columnFGAAFS_SP_CODE_FK_PK = MyBase.Columns("FGAAFS_SP_CODE_FK_PK")
            Me.columnFGAAFS_DATE_PK = MyBase.Columns("FGAAFS_DATE_PK")
            Me.columnFGAAFS_TYPEGRAL_PK = MyBase.Columns("FGAAFS_TYPEGRAL_PK")
            Me.columnFGAAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("FGAAFS_CDF_DOCUMENT_FK_PK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFGAAFS_FGA_CODE_FK_PK = New Global.System.Data.DataColumn("FGAAFS_FGA_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAAFS_FGA_CODE_FK_PK)
            Me.columnFGAAFS_SP_CODE_FK_PK = New Global.System.Data.DataColumn("FGAAFS_SP_CODE_FK_PK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAAFS_SP_CODE_FK_PK)
            Me.columnFGAAFS_DATE_PK = New Global.System.Data.DataColumn("FGAAFS_DATE_PK", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAAFS_DATE_PK)
            Me.columnFGAAFS_TYPEGRAL_PK = New Global.System.Data.DataColumn("FGAAFS_TYPEGRAL_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAAFS_TYPEGRAL_PK)
            Me.columnFGAAFS_CDF_DOCUMENT_FK_PK = New Global.System.Data.DataColumn("FGAAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFGAAFS_CDF_DOCUMENT_FK_PK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFGAAFS_FGA_CODE_FK_PK, Me.columnFGAAFS_SP_CODE_FK_PK, Me.columnFGAAFS_DATE_PK, Me.columnFGAAFS_TYPEGRAL_PK, Me.columnFGAAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnFGAAFS_FGA_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAAFS_SP_CODE_FK_PK.AllowDBNull = false
            Me.columnFGAAFS_DATE_PK.AllowDBNull = false
            Me.columnFGAAFS_TYPEGRAL_PK.AllowDBNull = false
            Me.columnFGAAFS_TYPEGRAL_PK.MaxLength = 2
            Me.columnFGAAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnFGAAFS_CDF_DOCUMENT_FK_PK.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFGAAFS_FGA_AFSSAPSRow() As FGAAFS_FGA_AFSSAPSRow
            Return CType(Me.NewRow,FGAAFS_FGA_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FGAAFS_FGA_AFSSAPSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FGAAFS_FGA_AFSSAPSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FGAAFS_FGA_AFSSAPSRowChangedEvent) Is Nothing) Then
                RaiseEvent FGAAFS_FGA_AFSSAPSRowChanged(Me, New FGAAFS_FGA_AFSSAPSRowChangeEvent(CType(e.Row,FGAAFS_FGA_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FGAAFS_FGA_AFSSAPSRowChangingEvent) Is Nothing) Then
                RaiseEvent FGAAFS_FGA_AFSSAPSRowChanging(Me, New FGAAFS_FGA_AFSSAPSRowChangeEvent(CType(e.Row,FGAAFS_FGA_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FGAAFS_FGA_AFSSAPSRowDeletedEvent) Is Nothing) Then
                RaiseEvent FGAAFS_FGA_AFSSAPSRowDeleted(Me, New FGAAFS_FGA_AFSSAPSRowChangeEvent(CType(e.Row,FGAAFS_FGA_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FGAAFS_FGA_AFSSAPSRowDeletingEvent) Is Nothing) Then
                RaiseEvent FGAAFS_FGA_AFSSAPSRowDeleting(Me, New FGAAFS_FGA_AFSSAPSRowChangeEvent(CType(e.Row,FGAAFS_FGA_AFSSAPSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFGAAFS_FGA_AFSSAPSRow(ByVal row As FGAAFS_FGA_AFSSAPSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Grossesse_Allaitement = New dsTheriaque_Grossesse_Allaitement
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FGAAFS_FGA_AFSSAPSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGA_FICHEGRALRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGA_FICHEGRAL As FGA_FICHEGRALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGA_FICHEGRAL = CType(Me.Table,FGA_FICHEGRALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_TYPEEFFET() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_TYPEEFFETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_TYPEEFFET' dans la table 'FGA_FICHEGRAL' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_TYPEEFFETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_PASSAGELAIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_PASSAGELAITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_PASSAGELAIT' dans la table 'FGA_FICHEGRAL' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_PASSAGELAITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_FIXATIONPROTEIQUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_FIXATIONPROTEIQUE' dans la table 'FGA_FICHEGRAL' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_FIXATIONPROTEIQUE_MINI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MINIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_FIXATIONPROTEIQUE_MINI' dans la table 'FGA_FICHEGR"& _ 
                            "AL' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MINIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_FIXATIONPROTEIQUE_MAXI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MAXIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_FIXATIONPROTEIQUE_MAXI' dans la table 'FGA_FICHEGR"& _ 
                            "AL' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MAXIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_PLASMALAIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_PLASMALAIT' dans la table 'FGA_FICHEGRAL' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_PLASMALAIT_MINI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MINIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_PLASMALAIT_MINI' dans la table 'FGA_FICHEGRAL' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MINIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_PLASMALAIT_MAXI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MAXIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_PLASMALAIT_MAXI' dans la table 'FGA_FICHEGRAL' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MAXIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_CONCENTRATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_CONCENTRATION' dans la table 'FGA_FICHEGRAL' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_CONCENTRATION_MINI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MINIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_CONCENTRATION_MINI' dans la table 'FGA_FICHEGRAL' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MINIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_CONCENTRATION_MAXI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MAXIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_CONCENTRATION_MAXI' dans la table 'FGA_FICHEGRAL' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MAXIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_CDF_UC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_CDF_UC_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_CDF_UC_CODE_FK' dans la table 'FGA_FICHEGRAL' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_CDF_UC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_DATECR() As Date
            Get
                Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_DATECRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGA_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFGA_FICHEGRAL.FGA_DATEMJColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGA_DATEMJ' dans la table 'FGA_FICHEGRAL' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGA_FICHEGRAL.FGA_DATEMJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_TYPEEFFETNull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_TYPEEFFETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_TYPEEFFETNull()
            Me(Me.tableFGA_FICHEGRAL.FGA_TYPEEFFETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_PASSAGELAITNull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_PASSAGELAITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_PASSAGELAITNull()
            Me(Me.tableFGA_FICHEGRAL.FGA_PASSAGELAITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_FIXATIONPROTEIQUENull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_FIXATIONPROTEIQUENull()
            Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_FIXATIONPROTEIQUE_MININull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MINIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_FIXATIONPROTEIQUE_MININull()
            Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MINIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_FIXATIONPROTEIQUE_MAXINull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MAXIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_FIXATIONPROTEIQUE_MAXINull()
            Me(Me.tableFGA_FICHEGRAL.FGA_FIXATIONPROTEIQUE_MAXIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_PLASMALAITNull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_PLASMALAITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_PLASMALAITNull()
            Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_PLASMALAIT_MININull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MINIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_PLASMALAIT_MININull()
            Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MINIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_PLASMALAIT_MAXINull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MAXIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_PLASMALAIT_MAXINull()
            Me(Me.tableFGA_FICHEGRAL.FGA_PLASMALAIT_MAXIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_CONCENTRATIONNull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_CONCENTRATIONNull()
            Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_CONCENTRATION_MININull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MINIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_CONCENTRATION_MININull()
            Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MINIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_CONCENTRATION_MAXINull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MAXIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_CONCENTRATION_MAXINull()
            Me(Me.tableFGA_FICHEGRAL.FGA_CONCENTRATION_MAXIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_CDF_UC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_CDF_UC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_CDF_UC_CODE_FKNull()
            Me(Me.tableFGA_FICHEGRAL.FGA_CDF_UC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGA_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableFGA_FICHEGRAL.FGA_DATEMJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGA_DATEMJNull()
            Me(Me.tableFGA_FICHEGRAL.FGA_DATEMJColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACPH_GRALCLPHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACPH_GRALCLPH As FGACPH_GRALCLPHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACPH_GRALCLPH = CType(Me.Table,FGACPH_GRALCLPHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACPH_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACPH_GRALCLPH.FGACPH_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACPH_GRALCLPH.FGACPH_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACPH_CPH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACPH_GRALCLPH.FGACPH_CPH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACPH_GRALCLPH.FGACPH_CPH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACCH_GRALCLCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACCH_GRALCLCH As FGACCH_GRALCLCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACCH_GRALCLCH = CType(Me.Table,FGACCH_GRALCLCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACCH_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACCH_GRALCLCH.FGACCH_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACCH_GRALCLCH.FGACCH_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACCH_GRALCLCH.FGACCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACCH_GRALCLCH.FGACCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGAPR_GRALPRODRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGAPR_GRALPROD As FGAPR_GRALPRODDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGAPR_GRALPROD = CType(Me.Table,FGAPR_GRALPRODDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAPR_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAPR_GRALPROD.FGAPR_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAPR_GRALPROD.FGAPR_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAPR_PR_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAPR_GRALPROD.FGAPR_PR_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAPR_GRALPROD.FGAPR_PR_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGASAC_GRALSUBACRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGASAC_GRALSUBAC As FGASAC_GRALSUBACDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGASAC_GRALSUBAC = CType(Me.Table,FGASAC_GRALSUBACDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGASAC_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGASAC_GRALSUBAC.FGASAC_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGASAC_GRALSUBAC.FGASAC_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGASAC_SAC_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGASAC_GRALSUBAC.FGASAC_SAC_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGASAC_GRALSUBAC.FGASAC_SAC_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGASAU_GRALSUBAURow
        Inherits Global.System.Data.DataRow
        
        Private tableFGASAU_GRALSUBAU As FGASAU_GRALSUBAUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGASAU_GRALSUBAU = CType(Me.Table,FGASAU_GRALSUBAUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGASAU_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGASAU_GRALSUBAU.FGASAU_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGASAU_GRALSUBAU.FGASAU_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGASAU_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGASAU_GRALSUBAU.FGASAU_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGASAU_GRALSUBAU.FGASAU_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGASP_GRALSPERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGASP_GRALSPE As FGASP_GRALSPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGASP_GRALSPE = CType(Me.Table,FGASP_GRALSPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGASP_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGASP_GRALSPE.FGASP_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGASP_GRALSPE.FGASP_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGASP_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGASP_GRALSPE.FGASP_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGASP_GRALSPE.FGASP_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGAOA_OBSERVATION_ANIMALERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGAOA_OBSERVATION_ANIMALE As FGAOA_OBSERVATION_ANIMALEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGAOA_OBSERVATION_ANIMALE = CType(Me.Table,FGAOA_OBSERVATION_ANIMALEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAOA_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAOA_CDF_OBS_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_CDF_OBS_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_CDF_OBS_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAOA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGAOA_NUMORD' dans la table 'FGAOA_OBSERVATION_ANIMALE"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGAOA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGAOA_NUMORDNull()
            Me(Me.tableFGAOA_OBSERVATION_ANIMALE.FGAOA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACFA_CIRCONSTFAVORIS_ANIMALERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACFA_CIRCONSTFAVORIS_ANIMALE As FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE = CType(Me.Table,FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFA_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFA_CDF_CF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_CDF_CF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_CDF_CF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACFA_NUMORD' dans la table 'FGACFA_CIRCONSTFAVORIS_A"& _ 
                            "NIMALE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACFA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACFA_NUMORDNull()
            Me(Me.tableFGACFA_CIRCONSTFAVORIS_ANIMALE.FGACFA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX1_FGA_TXOBSERVANIRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX1_FGA_TXOBSERVANI As FGATX1_FGA_TXOBSERVANIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX1_FGA_TXOBSERVANI = CType(Me.Table,FGATX1_FGA_TXOBSERVANIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX1_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX1_FGA_TXOBSERVANI.FGATX1_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX1_FGA_TXOBSERVANI.FGATX1_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX1_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX1_FGA_TXOBSERVANI.FGATX1_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX1_FGA_TXOBSERVANI.FGATX1_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGARIA_RISQUE_ANIMALERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGARIA_RISQUE_ANIMALE As FGARIA_RISQUE_ANIMALEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGARIA_RISQUE_ANIMALE = CType(Me.Table,FGARIA_RISQUE_ANIMALEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIA_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIA_CDF_RI_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_CDF_RI_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_CDF_RI_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGARIA_NUMORD' dans la table 'FGARIA_RISQUE_ANIMALE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGARIA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGARIA_NUMORDNull()
            Me(Me.tableFGARIA_RISQUE_ANIMALE.FGARIA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGAPC_PERIODECRITIQUE_FGRALRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGAPC_PERIODECRITIQUE_FGRAL As FGAPC_PERIODECRITIQUE_FGRALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGAPC_PERIODECRITIQUE_FGRAL = CType(Me.Table,FGAPC_PERIODECRITIQUE_FGRALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAPC_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAPC_CDF_PC_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_CDF_PC_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_CDF_PC_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAPC_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGAPC_NUMORD' dans la table 'FGAPC_PERIODECRITIQUE_FGR"& _ 
                            "AL' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGAPC_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGAPC_NUMORDNull()
            Me(Me.tableFGAPC_PERIODECRITIQUE_FGRAL.FGAPC_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGAOH_OBSERVATION_HUMAINERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGAOH_OBSERVATION_HUMAINE As FGAOH_OBSERVATION_HUMAINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGAOH_OBSERVATION_HUMAINE = CType(Me.Table,FGAOH_OBSERVATION_HUMAINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAOH_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAOH_CDF_OBS_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_CDF_OBS_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_CDF_OBS_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAOH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGAOH_NUMORD' dans la table 'FGAOH_OBSERVATION_HUMAINE"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGAOH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGAOH_NUMORDNull()
            Me(Me.tableFGAOH_OBSERVATION_HUMAINE.FGAOH_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACFH_CIRCONSTFAVORIS_HUMAINERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACFH_CIRCONSTFAVORIS_HUMAINE As FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE = CType(Me.Table,FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFH_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFH_CDF_CF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_CDF_CF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_CDF_CF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACFH_NUMORD' dans la table 'FGACFH_CIRCONSTFAVORIS_H"& _ 
                            "UMAINE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACFH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACFH_NUMORDNull()
            Me(Me.tableFGACFH_CIRCONSTFAVORIS_HUMAINE.FGACFH_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX3_FGA_TXOBSERVHUMRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX3_FGA_TXOBSERVHUM As FGATX3_FGA_TXOBSERVHUMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX3_FGA_TXOBSERVHUM = CType(Me.Table,FGATX3_FGA_TXOBSERVHUMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX3_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX3_FGA_TXOBSERVHUM.FGATX3_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX3_FGA_TXOBSERVHUM.FGATX3_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX3_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX3_FGA_TXOBSERVHUM.FGATX3_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX3_FGA_TXOBSERVHUM.FGATX3_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGARIH_RISQUE_HUMAINERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGARIH_RISQUE_HUMAINE As FGARIH_RISQUE_HUMAINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGARIH_RISQUE_HUMAINE = CType(Me.Table,FGARIH_RISQUE_HUMAINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIH_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIH_CDF_RI_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_CDF_RI_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_CDF_RI_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIH_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGARIH_NUMORD' dans la table 'FGARIH_RISQUE_HUMAINE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGARIH_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGARIH_NUMORDNull()
            Me(Me.tableFGARIH_RISQUE_HUMAINE.FGARIH_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGARIG_RISQUE_GROSSESSERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGARIG_RISQUE_GROSSESSE As FGARIG_RISQUE_GROSSESSEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGARIG_RISQUE_GROSSESSE = CType(Me.Table,FGARIG_RISQUE_GROSSESSEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIG_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIG_NUMSEQ_PK() As Short
            Get
                Return CType(Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_NUMSEQ_PKColumn),Short)
            End Get
            Set
                Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_NUMSEQ_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIG_CDF_RI_CODE_FK() As String
            Get
                Return CType(Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_CDF_RI_CODE_FKColumn),String)
            End Get
            Set
                Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_CDF_RI_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIG_CDF_TC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_CDF_TC_CODE_FKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGARIG_CDF_TC_CODE_FK' dans la table 'FGARIG_RISQUE_GR"& _ 
                            "OSSESSE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_CDF_TC_CODE_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIG_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGARIG_NUMORD' dans la table 'FGARIG_RISQUE_GROSSESSE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGARIG_CDF_TC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_CDF_TC_CODE_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGARIG_CDF_TC_CODE_FKNull()
            Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_CDF_TC_CODE_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGARIG_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGARIG_NUMORDNull()
            Me(Me.tableFGARIG_RISQUE_GROSSESSE.FGARIG_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX7_FGA_TXRECOMMANDATRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX7_FGA_TXRECOMMANDAT As FGATX7_FGA_TXRECOMMANDATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX7_FGA_TXRECOMMANDAT = CType(Me.Table,FGATX7_FGA_TXRECOMMANDATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX7_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX7_FGA_TXRECOMMANDAT.FGATX7_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX7_FGA_TXRECOMMANDAT.FGATX7_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX7_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX7_FGA_TXRECOMMANDAT.FGATX7_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX7_FGA_TXRECOMMANDAT.FGATX7_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACF_CATFEMMEENCEINTERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACF_CATFEMMEENCEINTE As FGACF_CATFEMMEENCEINTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACF_CATFEMMEENCEINTE = CType(Me.Table,FGACF_CATFEMMEENCEINTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACF_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACF_CDF_CAT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_CDF_CAT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_CDF_CAT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACF_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACF_NUMORD' dans la table 'FGACF_CATFEMMEENCEINTE' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACF_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACF_NUMORDNull()
            Me(Me.tableFGACF_CATFEMMEENCEINTE.FGACF_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACN_CATNOUVEAUNERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACN_CATNOUVEAUNE As FGACN_CATNOUVEAUNEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACN_CATNOUVEAUNE = CType(Me.Table,FGACN_CATNOUVEAUNEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACN_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACN_CDF_CAT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_CDF_CAT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_CDF_CAT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACN_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACN_NUMORD' dans la table 'FGACN_CATNOUVEAUNE' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACN_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACN_CATNOUVEAUNE.FGACN_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACN_NUMORDNull()
            Me(Me.tableFGACN_CATNOUVEAUNE.FGACN_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX4_FGA_TXCONDATENIRCFRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX4_FGA_TXCONDATENIRCF As FGATX4_FGA_TXCONDATENIRCFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX4_FGA_TXCONDATENIRCF = CType(Me.Table,FGATX4_FGA_TXCONDATENIRCFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX4_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX4_FGA_TXCONDATENIRCF.FGATX4_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX4_FGA_TXCONDATENIRCF.FGATX4_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX4_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX4_FGA_TXCONDATENIRCF.FGATX4_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX4_FGA_TXCONDATENIRCF.FGATX4_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX5_FGA_TXCONDATENIRCNRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX5_FGA_TXCONDATENIRCN As FGATX5_FGA_TXCONDATENIRCNDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX5_FGA_TXCONDATENIRCN = CType(Me.Table,FGATX5_FGA_TXCONDATENIRCNDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX5_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX5_FGA_TXCONDATENIRCN.FGATX5_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX5_FGA_TXCONDATENIRCN.FGATX5_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX5_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX5_FGA_TXCONDATENIRCN.FGATX5_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX5_FGA_TXCONDATENIRCN.FGATX5_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX9_FGA_TXRECOMMANDATRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX9_FGA_TXRECOMMANDAT As FGATX9_FGA_TXRECOMMANDATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX9_FGA_TXRECOMMANDAT = CType(Me.Table,FGATX9_FGA_TXRECOMMANDATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX9_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX9_FGA_TXRECOMMANDAT.FGATX9_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX9_FGA_TXRECOMMANDAT.FGATX9_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX9_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX9_FGA_TXRECOMMANDAT.FGATX9_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX9_FGA_TXRECOMMANDAT.FGATX9_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGARIFAP_RISQUEFEMMEENAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGARIFAP_RISQUEFEMMEENAGE As FGARIFAP_RISQUEFEMMEENAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGARIFAP_RISQUEFEMMEENAGE = CType(Me.Table,FGARIFAP_RISQUEFEMMEENAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIFAP_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIFAP_CDF_RI_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_CDF_RI_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_CDF_RI_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIFAP_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGARIFAP_NUMORD' dans la table 'FGARIFAP_RISQUEFEMMEEN"& _ 
                            "AGE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGARIFAP_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGARIFAP_NUMORDNull()
            Me(Me.tableFGARIFAP_RISQUEFEMMEENAGE.FGARIFAP_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACFAP_CATFEMMEENAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACFAP_CATFEMMEENAGE As FGACFAP_CATFEMMEENAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACFAP_CATFEMMEENAGE = CType(Me.Table,FGACFAP_CATFEMMEENAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFAP_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFAP_CDF_CAT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_CDF_CAT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_CDF_CAT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFAP_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACFAP_NUMORD' dans la table 'FGACFAP_CATFEMMEENAGE' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACFAP_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACFAP_NUMORDNull()
            Me(Me.tableFGACFAP_CATFEMMEENAGE.FGACFAP_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX10_FGA_TXRECOMMANDATRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX10_FGA_TXRECOMMANDAT As FGATX10_FGA_TXRECOMMANDATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX10_FGA_TXRECOMMANDAT = CType(Me.Table,FGATX10_FGA_TXRECOMMANDATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX10_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX10_FGA_TXRECOMMANDAT.FGATX10_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX10_FGA_TXRECOMMANDAT.FGATX10_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX10_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX10_FGA_TXRECOMMANDAT.FGATX10_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX10_FGA_TXRECOMMANDAT.FGATX10_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGAON_OBSERVATION_NOUVEAUNERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGAON_OBSERVATION_NOUVEAUNE As FGAON_OBSERVATION_NOUVEAUNEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGAON_OBSERVATION_NOUVEAUNE = CType(Me.Table,FGAON_OBSERVATION_NOUVEAUNEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAON_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAON_CDF_OBS_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_CDF_OBS_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_CDF_OBS_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAON_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGAON_NUMORD' dans la table 'FGAON_OBSERVATION_NOUVEAU"& _ 
                            "NE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGAON_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGAON_NUMORDNull()
            Me(Me.tableFGAON_OBSERVATION_NOUVEAUNE.FGAON_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACFN_CIRCONSFAVORIS_NOUVEAUN As FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN = CType(Me.Table,FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFN_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFN_CDF_CF_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_CDF_CF_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_CDF_CF_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACFN_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACFN_NUMORD' dans la table 'FGACFN_CIRCONSFAVORIS_NO"& _ 
                            "UVEAUN' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACFN_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACFN_NUMORDNull()
            Me(Me.tableFGACFN_CIRCONSFAVORIS_NOUVEAUN.FGACFN_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX2_FGA_TXOBSERVNOUVNERow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX2_FGA_TXOBSERVNOUVNE As FGATX2_FGA_TXOBSERVNOUVNEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX2_FGA_TXOBSERVNOUVNE = CType(Me.Table,FGATX2_FGA_TXOBSERVNOUVNEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX2_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX2_FGA_TXOBSERVNOUVNE.FGATX2_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX2_FGA_TXOBSERVNOUVNE.FGATX2_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX2_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX2_FGA_TXOBSERVNOUVNE.FGATX2_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX2_FGA_TXOBSERVNOUVNE.FGATX2_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGARIL_RISQUE_ALLAITEMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGARIL_RISQUE_ALLAITEMENT As FGARIL_RISQUE_ALLAITEMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGARIL_RISQUE_ALLAITEMENT = CType(Me.Table,FGARIL_RISQUE_ALLAITEMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIL_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIL_CDF_RI_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_CDF_RI_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_CDF_RI_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGARIL_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGARIL_NUMORD' dans la table 'FGARIL_RISQUE_ALLAITEMEN"& _ 
                            "T' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGARIL_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGARIL_NUMORDNull()
            Me(Me.tableFGARIL_RISQUE_ALLAITEMENT.FGARIL_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX8_FGA_TXRECOMMANDATRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX8_FGA_TXRECOMMANDAT As FGATX8_FGA_TXRECOMMANDATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX8_FGA_TXRECOMMANDAT = CType(Me.Table,FGATX8_FGA_TXRECOMMANDATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX8_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX8_FGA_TXRECOMMANDAT.FGATX8_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX8_FGA_TXRECOMMANDAT.FGATX8_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX8_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX8_FGA_TXRECOMMANDAT.FGATX8_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX8_FGA_TXRECOMMANDAT.FGATX8_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGACA_CATALLAITEMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGACA_CATALLAITEMENT As FGACA_CATALLAITEMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGACA_CATALLAITEMENT = CType(Me.Table,FGACA_CATALLAITEMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACA_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGACA_CATALLAITEMENT.FGACA_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGACA_CATALLAITEMENT.FGACA_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACA_CDF_CAT_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGACA_CATALLAITEMENT.FGACA_CDF_CAT_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGACA_CATALLAITEMENT.FGACA_CDF_CAT_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGACA_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFGACA_CATALLAITEMENT.FGACA_NUMORDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'FGACA_NUMORD' dans la table 'FGACA_CATALLAITEMENT' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFGACA_CATALLAITEMENT.FGACA_NUMORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFGACA_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableFGACA_CATALLAITEMENT.FGACA_NUMORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFGACA_NUMORDNull()
            Me(Me.tableFGACA_CATALLAITEMENT.FGACA_NUMORDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGATX6_FGA_TXCONDATENIRCARow
        Inherits Global.System.Data.DataRow
        
        Private tableFGATX6_FGA_TXCONDATENIRCA As FGATX6_FGA_TXCONDATENIRCADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGATX6_FGA_TXCONDATENIRCA = CType(Me.Table,FGATX6_FGA_TXCONDATENIRCADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX6_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGATX6_FGA_TXCONDATENIRCA.FGATX6_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGATX6_FGA_TXCONDATENIRCA.FGATX6_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGATX6_TEXTE() As String
            Get
                Return CType(Me(Me.tableFGATX6_FGA_TXCONDATENIRCA.FGATX6_TEXTEColumn),String)
            End Get
            Set
                Me(Me.tableFGATX6_FGA_TXCONDATENIRCA.FGATX6_TEXTEColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FGAAFS_FGA_AFSSAPSRow
        Inherits Global.System.Data.DataRow
        
        Private tableFGAAFS_FGA_AFSSAPS As FGAAFS_FGA_AFSSAPSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFGAAFS_FGA_AFSSAPS = CType(Me.Table,FGAAFS_FGA_AFSSAPSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAAFS_FGA_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_FGA_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_FGA_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAAFS_SP_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_SP_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_SP_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAAFS_DATE_PK() As Date
            Get
                Return CType(Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_DATE_PKColumn),Date)
            End Get
            Set
                Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_DATE_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAAFS_TYPEGRAL_PK() As String
            Get
                Return CType(Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_TYPEGRAL_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_TYPEGRAL_PKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FGAAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableFGAAFS_FGA_AFSSAPS.FGAAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGA_FICHEGRALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGA_FICHEGRALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGA_FICHEGRALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGA_FICHEGRALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACPH_GRALCLPHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACPH_GRALCLPHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACPH_GRALCLPHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACPH_GRALCLPHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACCH_GRALCLCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACCH_GRALCLCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACCH_GRALCLCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACCH_GRALCLCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGAPR_GRALPRODRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGAPR_GRALPRODRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGAPR_GRALPRODRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGAPR_GRALPRODRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGASAC_GRALSUBACRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGASAC_GRALSUBACRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGASAC_GRALSUBACRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGASAC_GRALSUBACRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGASAU_GRALSUBAURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGASAU_GRALSUBAURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGASAU_GRALSUBAURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGASAU_GRALSUBAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGASP_GRALSPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGASP_GRALSPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGASP_GRALSPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGASP_GRALSPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGAOA_OBSERVATION_ANIMALERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGAOA_OBSERVATION_ANIMALERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGAOA_OBSERVATION_ANIMALERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGAOA_OBSERVATION_ANIMALERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACFA_CIRCONSTFAVORIS_ANIMALERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACFA_CIRCONSTFAVORIS_ANIMALERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACFA_CIRCONSTFAVORIS_ANIMALERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACFA_CIRCONSTFAVORIS_ANIMALERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX1_FGA_TXOBSERVANIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX1_FGA_TXOBSERVANIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX1_FGA_TXOBSERVANIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX1_FGA_TXOBSERVANIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGARIA_RISQUE_ANIMALERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGARIA_RISQUE_ANIMALERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGARIA_RISQUE_ANIMALERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGARIA_RISQUE_ANIMALERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGAPC_PERIODECRITIQUE_FGRALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGAPC_PERIODECRITIQUE_FGRALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGAPC_PERIODECRITIQUE_FGRALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGAPC_PERIODECRITIQUE_FGRALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGAOH_OBSERVATION_HUMAINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGAOH_OBSERVATION_HUMAINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGAOH_OBSERVATION_HUMAINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGAOH_OBSERVATION_HUMAINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACFH_CIRCONSTFAVORIS_HUMAINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACFH_CIRCONSTFAVORIS_HUMAINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACFH_CIRCONSTFAVORIS_HUMAINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACFH_CIRCONSTFAVORIS_HUMAINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX3_FGA_TXOBSERVHUMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX3_FGA_TXOBSERVHUMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX3_FGA_TXOBSERVHUMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX3_FGA_TXOBSERVHUMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGARIH_RISQUE_HUMAINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGARIH_RISQUE_HUMAINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGARIH_RISQUE_HUMAINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGARIH_RISQUE_HUMAINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGARIG_RISQUE_GROSSESSERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGARIG_RISQUE_GROSSESSERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGARIG_RISQUE_GROSSESSERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGARIG_RISQUE_GROSSESSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX7_FGA_TXRECOMMANDATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX7_FGA_TXRECOMMANDATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX7_FGA_TXRECOMMANDATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX7_FGA_TXRECOMMANDATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACF_CATFEMMEENCEINTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACF_CATFEMMEENCEINTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACF_CATFEMMEENCEINTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACF_CATFEMMEENCEINTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACN_CATNOUVEAUNERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACN_CATNOUVEAUNERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACN_CATNOUVEAUNERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACN_CATNOUVEAUNERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX4_FGA_TXCONDATENIRCFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX4_FGA_TXCONDATENIRCFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX4_FGA_TXCONDATENIRCFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX4_FGA_TXCONDATENIRCFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX5_FGA_TXCONDATENIRCNRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX5_FGA_TXCONDATENIRCNRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX5_FGA_TXCONDATENIRCNRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX5_FGA_TXCONDATENIRCNRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX9_FGA_TXRECOMMANDATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX9_FGA_TXRECOMMANDATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX9_FGA_TXRECOMMANDATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX9_FGA_TXRECOMMANDATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGARIFAP_RISQUEFEMMEENAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGARIFAP_RISQUEFEMMEENAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGARIFAP_RISQUEFEMMEENAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGARIFAP_RISQUEFEMMEENAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACFAP_CATFEMMEENAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACFAP_CATFEMMEENAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACFAP_CATFEMMEENAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACFAP_CATFEMMEENAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX10_FGA_TXRECOMMANDATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX10_FGA_TXRECOMMANDATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX10_FGA_TXRECOMMANDATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX10_FGA_TXRECOMMANDATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGAON_OBSERVATION_NOUVEAUNERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGAON_OBSERVATION_NOUVEAUNERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGAON_OBSERVATION_NOUVEAUNERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGAON_OBSERVATION_NOUVEAUNERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACFN_CIRCONSFAVORIS_NOUVEAUNRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACFN_CIRCONSFAVORIS_NOUVEAUNRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX2_FGA_TXOBSERVNOUVNERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX2_FGA_TXOBSERVNOUVNERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX2_FGA_TXOBSERVNOUVNERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX2_FGA_TXOBSERVNOUVNERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGARIL_RISQUE_ALLAITEMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGARIL_RISQUE_ALLAITEMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGARIL_RISQUE_ALLAITEMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGARIL_RISQUE_ALLAITEMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX8_FGA_TXRECOMMANDATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX8_FGA_TXRECOMMANDATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX8_FGA_TXRECOMMANDATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX8_FGA_TXRECOMMANDATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGACA_CATALLAITEMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGACA_CATALLAITEMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGACA_CATALLAITEMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGACA_CATALLAITEMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGATX6_FGA_TXCONDATENIRCARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGATX6_FGA_TXCONDATENIRCARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGATX6_FGA_TXCONDATENIRCARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGATX6_FGA_TXCONDATENIRCARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FGAAFS_FGA_AFSSAPSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FGAAFS_FGA_AFSSAPSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FGAAFS_FGA_AFSSAPSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FGAAFS_FGA_AFSSAPSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_Grossesse_AllaitementTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGA_FICHEGRALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGA_FICHEGRAL"
            tableMapping.ColumnMappings.Add("FGA_CODE_SQ_PK", "FGA_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("FGA_TYPEEFFET", "FGA_TYPEEFFET")
            tableMapping.ColumnMappings.Add("FGA_PASSAGELAIT", "FGA_PASSAGELAIT")
            tableMapping.ColumnMappings.Add("FGA_FIXATIONPROTEIQUE", "FGA_FIXATIONPROTEIQUE")
            tableMapping.ColumnMappings.Add("FGA_FIXATIONPROTEIQUE_MINI", "FGA_FIXATIONPROTEIQUE_MINI")
            tableMapping.ColumnMappings.Add("FGA_FIXATIONPROTEIQUE_MAXI", "FGA_FIXATIONPROTEIQUE_MAXI")
            tableMapping.ColumnMappings.Add("FGA_PLASMALAIT", "FGA_PLASMALAIT")
            tableMapping.ColumnMappings.Add("FGA_PLASMALAIT_MINI", "FGA_PLASMALAIT_MINI")
            tableMapping.ColumnMappings.Add("FGA_PLASMALAIT_MAXI", "FGA_PLASMALAIT_MAXI")
            tableMapping.ColumnMappings.Add("FGA_CONCENTRATION", "FGA_CONCENTRATION")
            tableMapping.ColumnMappings.Add("FGA_CONCENTRATION_MINI", "FGA_CONCENTRATION_MINI")
            tableMapping.ColumnMappings.Add("FGA_CONCENTRATION_MAXI", "FGA_CONCENTRATION_MAXI")
            tableMapping.ColumnMappings.Add("FGA_CDF_UC_CODE_FK", "FGA_CDF_UC_CODE_FK")
            tableMapping.ColumnMappings.Add("FGA_DATECR", "FGA_DATECR")
            tableMapping.ColumnMappings.Add("FGA_DATEMJ", "FGA_DATEMJ")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGA_FICHEGRAL] WHERE (([FGA_CODE_SQ_PK] = @Original_FGA_"& _ 
                "CODE_SQ_PK) AND ((@IsNull_FGA_TYPEEFFET = 1 AND [FGA_TYPEEFFET] IS NULL) OR ([FG"& _ 
                "A_TYPEEFFET] = @Original_FGA_TYPEEFFET)) AND ((@IsNull_FGA_PASSAGELAIT = 1 AND ["& _ 
                "FGA_PASSAGELAIT] IS NULL) OR ([FGA_PASSAGELAIT] = @Original_FGA_PASSAGELAIT)) AN"& _ 
                "D ((@IsNull_FGA_FIXATIONPROTEIQUE = 1 AND [FGA_FIXATIONPROTEIQUE] IS NULL) OR (["& _ 
                "FGA_FIXATIONPROTEIQUE] = @Original_FGA_FIXATIONPROTEIQUE)) AND ((@IsNull_FGA_FIX"& _ 
                "ATIONPROTEIQUE_MINI = 1 AND [FGA_FIXATIONPROTEIQUE_MINI] IS NULL) OR ([FGA_FIXAT"& _ 
                "IONPROTEIQUE_MINI] = @Original_FGA_FIXATIONPROTEIQUE_MINI)) AND ((@IsNull_FGA_FI"& _ 
                "XATIONPROTEIQUE_MAXI = 1 AND [FGA_FIXATIONPROTEIQUE_MAXI] IS NULL) OR ([FGA_FIXA"& _ 
                "TIONPROTEIQUE_MAXI] = @Original_FGA_FIXATIONPROTEIQUE_MAXI)) AND ((@IsNull_FGA_P"& _ 
                "LASMALAIT = 1 AND [FGA_PLASMALAIT] IS NULL) OR ([FGA_PLASMALAIT] = @Original_FGA"& _ 
                "_PLASMALAIT)) AND ((@IsNull_FGA_PLASMALAIT_MINI = 1 AND [FGA_PLASMALAIT_MINI] IS"& _ 
                " NULL) OR ([FGA_PLASMALAIT_MINI] = @Original_FGA_PLASMALAIT_MINI)) AND ((@IsNull"& _ 
                "_FGA_PLASMALAIT_MAXI = 1 AND [FGA_PLASMALAIT_MAXI] IS NULL) OR ([FGA_PLASMALAIT_"& _ 
                "MAXI] = @Original_FGA_PLASMALAIT_MAXI)) AND ((@IsNull_FGA_CONCENTRATION = 1 AND "& _ 
                "[FGA_CONCENTRATION] IS NULL) OR ([FGA_CONCENTRATION] = @Original_FGA_CONCENTRATI"& _ 
                "ON)) AND ((@IsNull_FGA_CONCENTRATION_MINI = 1 AND [FGA_CONCENTRATION_MINI] IS NU"& _ 
                "LL) OR ([FGA_CONCENTRATION_MINI] = @Original_FGA_CONCENTRATION_MINI)) AND ((@IsN"& _ 
                "ull_FGA_CONCENTRATION_MAXI = 1 AND [FGA_CONCENTRATION_MAXI] IS NULL) OR ([FGA_CO"& _ 
                "NCENTRATION_MAXI] = @Original_FGA_CONCENTRATION_MAXI)) AND ((@IsNull_FGA_CDF_UC_"& _ 
                "CODE_FK = 1 AND [FGA_CDF_UC_CODE_FK] IS NULL) OR ([FGA_CDF_UC_CODE_FK] = @Origin"& _ 
                "al_FGA_CDF_UC_CODE_FK)) AND ([FGA_DATECR] = @Original_FGA_DATECR) AND ((@IsNull_"& _ 
                "FGA_DATEMJ = 1 AND [FGA_DATEMJ] IS NULL) OR ([FGA_DATEMJ] = @Original_FGA_DATEMJ"& _ 
                ")))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_TYPEEFFET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_TYPEEFFET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_TYPEEFFET", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_TYPEEFFET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PASSAGELAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PASSAGELAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PASSAGELAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PASSAGELAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_FIXATIONPROTEIQUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_FIXATIONPROTEIQUE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PLASMALAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PLASMALAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PLASMALAIT_MINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT_MINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PLASMALAIT_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PLASMALAIT_MAXI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT_MAXI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PLASMALAIT_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MAXI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CONCENTRATION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CONCENTRATION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CONCENTRATION_MINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION_MINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CONCENTRATION_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CONCENTRATION_MAXI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION_MAXI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CONCENTRATION_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MAXI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CDF_UC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CDF_UC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CDF_UC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CDF_UC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGA_FICHEGRAL] ([FGA_CODE_SQ_PK], [FGA_TYPEEFFET], [FGA_"& _ 
                "PASSAGELAIT], [FGA_FIXATIONPROTEIQUE], [FGA_FIXATIONPROTEIQUE_MINI], [FGA_FIXATI"& _ 
                "ONPROTEIQUE_MAXI], [FGA_PLASMALAIT], [FGA_PLASMALAIT_MINI], [FGA_PLASMALAIT_MAXI"& _ 
                "], [FGA_CONCENTRATION], [FGA_CONCENTRATION_MINI], [FGA_CONCENTRATION_MAXI], [FGA"& _ 
                "_CDF_UC_CODE_FK], [FGA_DATECR], [FGA_DATEMJ]) VALUES (@FGA_CODE_SQ_PK, @FGA_TYPE"& _ 
                "EFFET, @FGA_PASSAGELAIT, @FGA_FIXATIONPROTEIQUE, @FGA_FIXATIONPROTEIQUE_MINI, @F"& _ 
                "GA_FIXATIONPROTEIQUE_MAXI, @FGA_PLASMALAIT, @FGA_PLASMALAIT_MINI, @FGA_PLASMALAI"& _ 
                "T_MAXI, @FGA_CONCENTRATION, @FGA_CONCENTRATION_MINI, @FGA_CONCENTRATION_MAXI, @F"& _ 
                "GA_CDF_UC_CODE_FK, @FGA_DATECR, @FGA_DATEMJ);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGA_CODE_SQ_PK, FGA_TYPEEF"& _ 
                "FET, FGA_PASSAGELAIT, FGA_FIXATIONPROTEIQUE, FGA_FIXATIONPROTEIQUE_MINI, FGA_FIX"& _ 
                "ATIONPROTEIQUE_MAXI, FGA_PLASMALAIT, FGA_PLASMALAIT_MINI, FGA_PLASMALAIT_MAXI, F"& _ 
                "GA_CONCENTRATION, FGA_CONCENTRATION_MINI, FGA_CONCENTRATION_MAXI, FGA_CDF_UC_COD"& _ 
                "E_FK, FGA_DATECR, FGA_DATEMJ FROM THERIAQUE.FGA_FICHEGRAL WHERE (FGA_CODE_SQ_PK "& _ 
                "= @FGA_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_TYPEEFFET", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_TYPEEFFET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PASSAGELAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PASSAGELAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_FIXATIONPROTEIQUE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PLASMALAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PLASMALAIT_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PLASMALAIT_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MAXI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CONCENTRATION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CONCENTRATION_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CONCENTRATION_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MAXI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CDF_UC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CDF_UC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGA_FICHEGRAL] SET [FGA_CODE_SQ_PK] = @FGA_CODE_SQ_PK, [FGA_T"& _ 
                "YPEEFFET] = @FGA_TYPEEFFET, [FGA_PASSAGELAIT] = @FGA_PASSAGELAIT, [FGA_FIXATIONP"& _ 
                "ROTEIQUE] = @FGA_FIXATIONPROTEIQUE, [FGA_FIXATIONPROTEIQUE_MINI] = @FGA_FIXATION"& _ 
                "PROTEIQUE_MINI, [FGA_FIXATIONPROTEIQUE_MAXI] = @FGA_FIXATIONPROTEIQUE_MAXI, [FGA"& _ 
                "_PLASMALAIT] = @FGA_PLASMALAIT, [FGA_PLASMALAIT_MINI] = @FGA_PLASMALAIT_MINI, [F"& _ 
                "GA_PLASMALAIT_MAXI] = @FGA_PLASMALAIT_MAXI, [FGA_CONCENTRATION] = @FGA_CONCENTRA"& _ 
                "TION, [FGA_CONCENTRATION_MINI] = @FGA_CONCENTRATION_MINI, [FGA_CONCENTRATION_MAX"& _ 
                "I] = @FGA_CONCENTRATION_MAXI, [FGA_CDF_UC_CODE_FK] = @FGA_CDF_UC_CODE_FK, [FGA_D"& _ 
                "ATECR] = @FGA_DATECR, [FGA_DATEMJ] = @FGA_DATEMJ WHERE (([FGA_CODE_SQ_PK] = @Ori"& _ 
                "ginal_FGA_CODE_SQ_PK) AND ((@IsNull_FGA_TYPEEFFET = 1 AND [FGA_TYPEEFFET] IS NUL"& _ 
                "L) OR ([FGA_TYPEEFFET] = @Original_FGA_TYPEEFFET)) AND ((@IsNull_FGA_PASSAGELAIT"& _ 
                " = 1 AND [FGA_PASSAGELAIT] IS NULL) OR ([FGA_PASSAGELAIT] = @Original_FGA_PASSAG"& _ 
                "ELAIT)) AND ((@IsNull_FGA_FIXATIONPROTEIQUE = 1 AND [FGA_FIXATIONPROTEIQUE] IS N"& _ 
                "ULL) OR ([FGA_FIXATIONPROTEIQUE] = @Original_FGA_FIXATIONPROTEIQUE)) AND ((@IsNu"& _ 
                "ll_FGA_FIXATIONPROTEIQUE_MINI = 1 AND [FGA_FIXATIONPROTEIQUE_MINI] IS NULL) OR ("& _ 
                "[FGA_FIXATIONPROTEIQUE_MINI] = @Original_FGA_FIXATIONPROTEIQUE_MINI)) AND ((@IsN"& _ 
                "ull_FGA_FIXATIONPROTEIQUE_MAXI = 1 AND [FGA_FIXATIONPROTEIQUE_MAXI] IS NULL) OR "& _ 
                "([FGA_FIXATIONPROTEIQUE_MAXI] = @Original_FGA_FIXATIONPROTEIQUE_MAXI)) AND ((@Is"& _ 
                "Null_FGA_PLASMALAIT = 1 AND [FGA_PLASMALAIT] IS NULL) OR ([FGA_PLASMALAIT] = @Or"& _ 
                "iginal_FGA_PLASMALAIT)) AND ((@IsNull_FGA_PLASMALAIT_MINI = 1 AND [FGA_PLASMALAI"& _ 
                "T_MINI] IS NULL) OR ([FGA_PLASMALAIT_MINI] = @Original_FGA_PLASMALAIT_MINI)) AND"& _ 
                " ((@IsNull_FGA_PLASMALAIT_MAXI = 1 AND [FGA_PLASMALAIT_MAXI] IS NULL) OR ([FGA_P"& _ 
                "LASMALAIT_MAXI] = @Original_FGA_PLASMALAIT_MAXI)) AND ((@IsNull_FGA_CONCENTRATIO"& _ 
                "N = 1 AND [FGA_CONCENTRATION] IS NULL) OR ([FGA_CONCENTRATION] = @Original_FGA_C"& _ 
                "ONCENTRATION)) AND ((@IsNull_FGA_CONCENTRATION_MINI = 1 AND [FGA_CONCENTRATION_M"& _ 
                "INI] IS NULL) OR ([FGA_CONCENTRATION_MINI] = @Original_FGA_CONCENTRATION_MINI)) "& _ 
                "AND ((@IsNull_FGA_CONCENTRATION_MAXI = 1 AND [FGA_CONCENTRATION_MAXI] IS NULL) O"& _ 
                "R ([FGA_CONCENTRATION_MAXI] = @Original_FGA_CONCENTRATION_MAXI)) AND ((@IsNull_F"& _ 
                "GA_CDF_UC_CODE_FK = 1 AND [FGA_CDF_UC_CODE_FK] IS NULL) OR ([FGA_CDF_UC_CODE_FK]"& _ 
                " = @Original_FGA_CDF_UC_CODE_FK)) AND ([FGA_DATECR] = @Original_FGA_DATECR) AND "& _ 
                "((@IsNull_FGA_DATEMJ = 1 AND [FGA_DATEMJ] IS NULL) OR ([FGA_DATEMJ] = @Original_"& _ 
                "FGA_DATEMJ)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGA_CODE_SQ_PK, FGA_TYPEEFFET, FGA_PASSAGELAIT, FGA_FIXAT"& _ 
                "IONPROTEIQUE, FGA_FIXATIONPROTEIQUE_MINI, FGA_FIXATIONPROTEIQUE_MAXI, FGA_PLASMA"& _ 
                "LAIT, FGA_PLASMALAIT_MINI, FGA_PLASMALAIT_MAXI, FGA_CONCENTRATION, FGA_CONCENTRA"& _ 
                "TION_MINI, FGA_CONCENTRATION_MAXI, FGA_CDF_UC_CODE_FK, FGA_DATECR, FGA_DATEMJ FR"& _ 
                "OM THERIAQUE.FGA_FICHEGRAL WHERE (FGA_CODE_SQ_PK = @FGA_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_TYPEEFFET", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_TYPEEFFET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PASSAGELAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PASSAGELAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_FIXATIONPROTEIQUE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PLASMALAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PLASMALAIT_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_PLASMALAIT_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MAXI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CONCENTRATION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CONCENTRATION_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MINI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CONCENTRATION_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MAXI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CDF_UC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CDF_UC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATECR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATEMJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CODE_SQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_TYPEEFFET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_TYPEEFFET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_TYPEEFFET", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_TYPEEFFET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PASSAGELAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PASSAGELAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PASSAGELAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PASSAGELAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_FIXATIONPROTEIQUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_FIXATIONPROTEIQUE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_FIXATIONPROTEIQUE_MAXI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PLASMALAIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PLASMALAIT", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PLASMALAIT_MINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT_MINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PLASMALAIT_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_PLASMALAIT_MAXI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_PLASMALAIT_MAXI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_PLASMALAIT_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_PLASMALAIT_MAXI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CONCENTRATION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CONCENTRATION", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CONCENTRATION_MINI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION_MINI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CONCENTRATION_MINI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MINI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CONCENTRATION_MAXI", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CONCENTRATION_MAXI", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CONCENTRATION_MAXI", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 4, "FGA_CONCENTRATION_MAXI", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_CDF_UC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CDF_UC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_CDF_UC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CDF_UC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_DATECR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATECR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGA_DATEMJ", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATEMJ", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGA_DATEMJ", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_DATEMJ", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGA_CODE_SQ_PK, FGA_TYPEEFFET, FGA_PASSAGELAIT, FGA_FIXATIONPROTEIQUE, FGA" & _
                "_FIXATIONPROTEIQUE_MINI, FGA_FIXATIONPROTEIQUE_MAXI, FGA_PLASMALAIT, FGA_PLASMAL" & _
                "AIT_MINI, FGA_PLASMALAIT_MAXI, FGA_CONCENTRATION, FGA_CONCENTRATION_MINI, FGA_CO" & _
                "NCENTRATION_MAXI, FGA_CDF_UC_CODE_FK, FGA_DATECR, FGA_DATEMJ FROM THERIAQUE.FGA_" & _
                "FICHEGRAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGA_CODE_SQ_PK, FGA_TYPEEFFET, FGA_PASSAGELAIT, FGA_FIXATIONPROTEIQUE, FGA" & _
                "_FIXATIONPROTEIQUE_MINI, FGA_FIXATIONPROTEIQUE_MAXI, FGA_PLASMALAIT, FGA_PLASMAL" & _
                "AIT_MINI, FGA_PLASMALAIT_MAXI, FGA_CONCENTRATION, FGA_CONCENTRATION_MINI, FGA_CO" & _
                "NCENTRATION_MAXI, FGA_CDF_UC_CODE_FK, FGA_DATECR, FGA_DATEMJ FROM THERIAQUE.FGA_" & _
                "FICHEGRAL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGA_CODE_SQ_PK = @FGA_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGA_CODE_SQ_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGA_CODE_SQ_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable = New dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable, ByVal FGA_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGA_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGA_CODE_SQ_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGA_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable = New dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGA_FICHEGRALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGA_FICHEGRAL")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGA_CODE_SQ_PK As Integer, ByVal Original_FGA_TYPEEFFET As String, ByVal Original_FGA_PASSAGELAIT As String, ByVal Original_FGA_FIXATIONPROTEIQUE As String, ByVal Original_FGA_FIXATIONPROTEIQUE_MINI As Global.System.Nullable(Of Decimal), ByVal Original_FGA_FIXATIONPROTEIQUE_MAXI As Global.System.Nullable(Of Decimal), ByVal Original_FGA_PLASMALAIT As String, ByVal Original_FGA_PLASMALAIT_MINI As Global.System.Nullable(Of Decimal), ByVal Original_FGA_PLASMALAIT_MAXI As Global.System.Nullable(Of Decimal), ByVal Original_FGA_CONCENTRATION As String, ByVal Original_FGA_CONCENTRATION_MINI As Global.System.Nullable(Of Decimal), ByVal Original_FGA_CONCENTRATION_MAXI As Global.System.Nullable(Of Decimal), ByVal Original_FGA_CDF_UC_CODE_FK As String, ByVal Original_FGA_DATECR As Date, ByVal Original_FGA_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGA_CODE_SQ_PK, Integer)
            If (Original_FGA_TYPEEFFET Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FGA_TYPEEFFET, String)
            End If
            If (Original_FGA_PASSAGELAIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FGA_PASSAGELAIT, String)
            End If
            If (Original_FGA_FIXATIONPROTEIQUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FGA_FIXATIONPROTEIQUE, String)
            End If
            If (Original_FGA_FIXATIONPROTEIQUE_MINI.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FGA_FIXATIONPROTEIQUE_MINI.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_FIXATIONPROTEIQUE_MAXI.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FGA_FIXATIONPROTEIQUE_MAXI.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_PLASMALAIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FGA_PLASMALAIT, String)
            End If
            If (Original_FGA_PLASMALAIT_MINI.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_FGA_PLASMALAIT_MINI.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_PLASMALAIT_MAXI.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FGA_PLASMALAIT_MAXI.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_CONCENTRATION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_FGA_CONCENTRATION, String)
            End If
            If (Original_FGA_CONCENTRATION_MINI.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_FGA_CONCENTRATION_MINI.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_CONCENTRATION_MAXI.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_FGA_CONCENTRATION_MAXI.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_CDF_UC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_FGA_CDF_UC_CODE_FK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_FGA_DATECR, Date)
            If (Original_FGA_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_FGA_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGA_CODE_SQ_PK As Integer, ByVal FGA_TYPEEFFET As String, ByVal FGA_PASSAGELAIT As String, ByVal FGA_FIXATIONPROTEIQUE As String, ByVal FGA_FIXATIONPROTEIQUE_MINI As Global.System.Nullable(Of Decimal), ByVal FGA_FIXATIONPROTEIQUE_MAXI As Global.System.Nullable(Of Decimal), ByVal FGA_PLASMALAIT As String, ByVal FGA_PLASMALAIT_MINI As Global.System.Nullable(Of Decimal), ByVal FGA_PLASMALAIT_MAXI As Global.System.Nullable(Of Decimal), ByVal FGA_CONCENTRATION As String, ByVal FGA_CONCENTRATION_MINI As Global.System.Nullable(Of Decimal), ByVal FGA_CONCENTRATION_MAXI As Global.System.Nullable(Of Decimal), ByVal FGA_CDF_UC_CODE_FK As String, ByVal FGA_DATECR As Date, ByVal FGA_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGA_CODE_SQ_PK, Integer)
            If (FGA_TYPEEFFET Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGA_TYPEEFFET, String)
            End If
            If (FGA_PASSAGELAIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGA_PASSAGELAIT, String)
            End If
            If (FGA_FIXATIONPROTEIQUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FGA_FIXATIONPROTEIQUE, String)
            End If
            If (FGA_FIXATIONPROTEIQUE_MINI.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FGA_FIXATIONPROTEIQUE_MINI.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FGA_FIXATIONPROTEIQUE_MAXI.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FGA_FIXATIONPROTEIQUE_MAXI.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FGA_PLASMALAIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FGA_PLASMALAIT, String)
            End If
            If (FGA_PLASMALAIT_MINI.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FGA_PLASMALAIT_MINI.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (FGA_PLASMALAIT_MAXI.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(FGA_PLASMALAIT_MAXI.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (FGA_CONCENTRATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FGA_CONCENTRATION, String)
            End If
            If (FGA_CONCENTRATION_MINI.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FGA_CONCENTRATION_MINI.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (FGA_CONCENTRATION_MAXI.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FGA_CONCENTRATION_MAXI.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FGA_CDF_UC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(FGA_CDF_UC_CODE_FK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(FGA_DATECR, Date)
            If (FGA_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(FGA_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal FGA_CODE_SQ_PK As Integer, _
                    ByVal FGA_TYPEEFFET As String, _
                    ByVal FGA_PASSAGELAIT As String, _
                    ByVal FGA_FIXATIONPROTEIQUE As String, _
                    ByVal FGA_FIXATIONPROTEIQUE_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_FIXATIONPROTEIQUE_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_PLASMALAIT As String, _
                    ByVal FGA_PLASMALAIT_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_PLASMALAIT_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_CONCENTRATION As String, _
                    ByVal FGA_CONCENTRATION_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_CONCENTRATION_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_CDF_UC_CODE_FK As String, _
                    ByVal FGA_DATECR As Date, _
                    ByVal FGA_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_FGA_CODE_SQ_PK As Integer, _
                    ByVal Original_FGA_TYPEEFFET As String, _
                    ByVal Original_FGA_PASSAGELAIT As String, _
                    ByVal Original_FGA_FIXATIONPROTEIQUE As String, _
                    ByVal Original_FGA_FIXATIONPROTEIQUE_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_FIXATIONPROTEIQUE_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_PLASMALAIT As String, _
                    ByVal Original_FGA_PLASMALAIT_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_PLASMALAIT_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_CONCENTRATION As String, _
                    ByVal Original_FGA_CONCENTRATION_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_CONCENTRATION_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_CDF_UC_CODE_FK As String, _
                    ByVal Original_FGA_DATECR As Date, _
                    ByVal Original_FGA_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGA_CODE_SQ_PK, Integer)
            If (FGA_TYPEEFFET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGA_TYPEEFFET, String)
            End If
            If (FGA_PASSAGELAIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGA_PASSAGELAIT, String)
            End If
            If (FGA_FIXATIONPROTEIQUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FGA_FIXATIONPROTEIQUE, String)
            End If
            If (FGA_FIXATIONPROTEIQUE_MINI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FGA_FIXATIONPROTEIQUE_MINI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (FGA_FIXATIONPROTEIQUE_MAXI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FGA_FIXATIONPROTEIQUE_MAXI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FGA_PLASMALAIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FGA_PLASMALAIT, String)
            End If
            If (FGA_PLASMALAIT_MINI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FGA_PLASMALAIT_MINI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (FGA_PLASMALAIT_MAXI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(FGA_PLASMALAIT_MAXI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (FGA_CONCENTRATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FGA_CONCENTRATION, String)
            End If
            If (FGA_CONCENTRATION_MINI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(FGA_CONCENTRATION_MINI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (FGA_CONCENTRATION_MAXI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FGA_CONCENTRATION_MAXI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (FGA_CDF_UC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(FGA_CDF_UC_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FGA_DATECR, Date)
            If (FGA_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(FGA_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FGA_CODE_SQ_PK, Integer)
            If (Original_FGA_TYPEEFFET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FGA_TYPEEFFET, String)
            End If
            If (Original_FGA_PASSAGELAIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_FGA_PASSAGELAIT, String)
            End If
            If (Original_FGA_FIXATIONPROTEIQUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FGA_FIXATIONPROTEIQUE, String)
            End If
            If (Original_FGA_FIXATIONPROTEIQUE_MINI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_FGA_FIXATIONPROTEIQUE_MINI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_FIXATIONPROTEIQUE_MAXI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_FGA_FIXATIONPROTEIQUE_MAXI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_PLASMALAIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_FGA_PLASMALAIT, String)
            End If
            If (Original_FGA_PLASMALAIT_MINI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_FGA_PLASMALAIT_MINI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_PLASMALAIT_MAXI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_FGA_PLASMALAIT_MAXI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_CONCENTRATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_FGA_CONCENTRATION, String)
            End If
            If (Original_FGA_CONCENTRATION_MINI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_FGA_CONCENTRATION_MINI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_CONCENTRATION_MAXI.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_FGA_CONCENTRATION_MAXI.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_FGA_CDF_UC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_FGA_CDF_UC_CODE_FK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_FGA_DATECR, Date)
            If (Original_FGA_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_FGA_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal FGA_TYPEEFFET As String, _
                    ByVal FGA_PASSAGELAIT As String, _
                    ByVal FGA_FIXATIONPROTEIQUE As String, _
                    ByVal FGA_FIXATIONPROTEIQUE_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_FIXATIONPROTEIQUE_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_PLASMALAIT As String, _
                    ByVal FGA_PLASMALAIT_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_PLASMALAIT_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_CONCENTRATION As String, _
                    ByVal FGA_CONCENTRATION_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_CONCENTRATION_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal FGA_CDF_UC_CODE_FK As String, _
                    ByVal FGA_DATECR As Date, _
                    ByVal FGA_DATEMJ As Global.System.Nullable(Of Date), _
                    ByVal Original_FGA_CODE_SQ_PK As Integer, _
                    ByVal Original_FGA_TYPEEFFET As String, _
                    ByVal Original_FGA_PASSAGELAIT As String, _
                    ByVal Original_FGA_FIXATIONPROTEIQUE As String, _
                    ByVal Original_FGA_FIXATIONPROTEIQUE_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_FIXATIONPROTEIQUE_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_PLASMALAIT As String, _
                    ByVal Original_FGA_PLASMALAIT_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_PLASMALAIT_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_CONCENTRATION As String, _
                    ByVal Original_FGA_CONCENTRATION_MINI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_CONCENTRATION_MAXI As Global.System.Nullable(Of Decimal), _
                    ByVal Original_FGA_CDF_UC_CODE_FK As String, _
                    ByVal Original_FGA_DATECR As Date, _
                    ByVal Original_FGA_DATEMJ As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_FGA_CODE_SQ_PK, FGA_TYPEEFFET, FGA_PASSAGELAIT, FGA_FIXATIONPROTEIQUE, FGA_FIXATIONPROTEIQUE_MINI, FGA_FIXATIONPROTEIQUE_MAXI, FGA_PLASMALAIT, FGA_PLASMALAIT_MINI, FGA_PLASMALAIT_MAXI, FGA_CONCENTRATION, FGA_CONCENTRATION_MINI, FGA_CONCENTRATION_MAXI, FGA_CDF_UC_CODE_FK, FGA_DATECR, FGA_DATEMJ, Original_FGA_CODE_SQ_PK, Original_FGA_TYPEEFFET, Original_FGA_PASSAGELAIT, Original_FGA_FIXATIONPROTEIQUE, Original_FGA_FIXATIONPROTEIQUE_MINI, Original_FGA_FIXATIONPROTEIQUE_MAXI, Original_FGA_PLASMALAIT, Original_FGA_PLASMALAIT_MINI, Original_FGA_PLASMALAIT_MAXI, Original_FGA_CONCENTRATION, Original_FGA_CONCENTRATION_MINI, Original_FGA_CONCENTRATION_MAXI, Original_FGA_CDF_UC_CODE_FK, Original_FGA_DATECR, Original_FGA_DATEMJ)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGACPH_GRALCLPHTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACPH_GRALCLPH"
            tableMapping.ColumnMappings.Add("FGACPH_FGA_CODE_FK_PK", "FGACPH_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACPH_CPH_CODE_FK_PK", "FGACPH_CPH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACPH_GRALCLPH] WHERE (([FGACPH_FGA_CODE_FK_PK] = @Orig" & _
                "inal_FGACPH_FGA_CODE_FK_PK) AND ([FGACPH_CPH_CODE_FK_PK] = @Original_FGACPH_CPH_" & _
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACPH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACPH_GRALCLPH] ([FGACPH_FGA_CODE_FK_PK], [FGACPH_CPH_C" & _
                "ODE_FK_PK]) VALUES (@FGACPH_FGA_CODE_FK_PK, @FGACPH_CPH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGA" & _
                "CPH_FGA_CODE_FK_PK, FGACPH_CPH_CODE_FK_PK FROM THERIAQUE.FGACPH_GRALCLPH WHERE (" & _
                "FGACPH_CPH_CODE_FK_PK = @FGACPH_CPH_CODE_FK_PK) AND (FGACPH_FGA_CODE_FK_PK = @FG" & _
                "ACPH_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACPH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACPH_GRALCLPH] SET [FGACPH_FGA_CODE_FK_PK] = @FGACPH_FGA_CO" & _
                "DE_FK_PK, [FGACPH_CPH_CODE_FK_PK] = @FGACPH_CPH_CODE_FK_PK WHERE (([FGACPH_FGA_C" & _
                "ODE_FK_PK] = @Original_FGACPH_FGA_CODE_FK_PK) AND ([FGACPH_CPH_CODE_FK_PK] = @Or" & _
                "iginal_FGACPH_CPH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACPH_FGA_CODE_FK_PK, FGACPH_CPH_CODE_F" & _
                "K_PK FROM THERIAQUE.FGACPH_GRALCLPH WHERE (FGACPH_CPH_CODE_FK_PK = @FGACPH_CPH_C" & _
                "ODE_FK_PK) AND (FGACPH_FGA_CODE_FK_PK = @FGACPH_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACPH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACPH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACPH_CPH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_CPH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACPH_FGA_CODE_FK_PK, FGACPH_CPH_CODE_FK_PK FROM THERIAQUE.FGACPH_GRALCLP" & _
                "H"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACPH_FGA_CODE_FK_PK, FGACPH_CPH_CODE_FK_PK FROM THERIAQUE.FGACPH_GRALCLP" & _
                "H" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACPH_FGA_CODE_FK_PK = @FGACPH_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACPH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACPH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable = New dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable, ByVal FGACPH_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACPH_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACPH_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACPH_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable = New dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACPH_GRALCLPHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACPH_GRALCLPH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACPH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACPH_FGA_CODE_FK_PK, Integer)
            If (Original_FGACPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACPH_FGA_CODE_FK_PK As Integer, ByVal FGACPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACPH_FGA_CODE_FK_PK, Integer)
            If (FGACPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACPH_FGA_CODE_FK_PK As Integer, ByVal FGACPH_CPH_CODE_FK_PK As String, ByVal Original_FGACPH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACPH_CPH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACPH_FGA_CODE_FK_PK, Integer)
            If (FGACPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACPH_CPH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGACPH_FGA_CODE_FK_PK, Integer)
            If (Original_FGACPH_CPH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACPH_CPH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACPH_CPH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGACPH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACPH_CPH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FGACPH_FGA_CODE_FK_PK, Original_FGACPH_CPH_CODE_FK_PK, Original_FGACPH_FGA_CODE_FK_PK, Original_FGACPH_CPH_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGACCH_GRALCLCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACCH_GRALCLCH"
            tableMapping.ColumnMappings.Add("FGACCH_FGA_CODE_FK_PK", "FGACCH_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACCH_CCH_CODE_FK_PK", "FGACCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACCH_GRALCLCH] WHERE (([FGACCH_FGA_CODE_FK_PK] = @Orig"& _ 
                "inal_FGACCH_FGA_CODE_FK_PK) AND ([FGACCH_CCH_CODE_FK_PK] = @Original_FGACCH_CCH_"& _ 
                "CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACCH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACCH_GRALCLCH] ([FGACCH_FGA_CODE_FK_PK], [FGACCH_CCH_C"& _ 
                "ODE_FK_PK]) VALUES (@FGACCH_FGA_CODE_FK_PK, @FGACCH_CCH_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGA"& _ 
                "CCH_FGA_CODE_FK_PK, FGACCH_CCH_CODE_FK_PK FROM THERIAQUE.FGACCH_GRALCLCH WHERE ("& _ 
                "FGACCH_CCH_CODE_FK_PK = @FGACCH_CCH_CODE_FK_PK) AND (FGACCH_FGA_CODE_FK_PK = @FG"& _ 
                "ACCH_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACCH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACCH_GRALCLCH] SET [FGACCH_FGA_CODE_FK_PK] = @FGACCH_FGA_CO"& _ 
                "DE_FK_PK, [FGACCH_CCH_CODE_FK_PK] = @FGACCH_CCH_CODE_FK_PK WHERE (([FGACCH_FGA_C"& _ 
                "ODE_FK_PK] = @Original_FGACCH_FGA_CODE_FK_PK) AND ([FGACCH_CCH_CODE_FK_PK] = @Or"& _ 
                "iginal_FGACCH_CCH_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACCH_FGA_CODE_FK_PK, FGACCH_CCH_CODE_F"& _ 
                "K_PK FROM THERIAQUE.FGACCH_GRALCLCH WHERE (FGACCH_CCH_CODE_FK_PK = @FGACCH_CCH_C"& _ 
                "ODE_FK_PK) AND (FGACCH_FGA_CODE_FK_PK = @FGACCH_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACCH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACCH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACCH_CCH_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_CCH_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACCH_FGA_CODE_FK_PK, FGACCH_CCH_CODE_FK_PK FROM THERIAQUE.FGACCH_GRALCLC" & _
                "H"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACCH_FGA_CODE_FK_PK, FGACCH_CCH_CODE_FK_PK FROM THERIAQUE.FGACCH_GRALCLC" & _
                "H" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACCH_FGA_CODE_FK_PK = @FGACCH_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACCH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACCH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable = New dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable, ByVal FGACCH_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACCH_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACCH_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACCH_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable = New dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACCH_GRALCLCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACCH_GRALCLCH")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACCH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACCH_FGA_CODE_FK_PK, Integer)
            If (Original_FGACCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACCH_FGA_CODE_FK_PK As Integer, ByVal FGACCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACCH_FGA_CODE_FK_PK, Integer)
            If (FGACCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACCH_FGA_CODE_FK_PK As Integer, ByVal FGACCH_CCH_CODE_FK_PK As String, ByVal Original_FGACCH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACCH_FGA_CODE_FK_PK, Integer)
            If (FGACCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGACCH_FGA_CODE_FK_PK, Integer)
            If (Original_FGACCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGACCH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACCH_CCH_CODE_FK_PK As String) As Integer
            Return Me.Update(Original_FGACCH_FGA_CODE_FK_PK, Original_FGACCH_CCH_CODE_FK_PK, Original_FGACCH_FGA_CODE_FK_PK, Original_FGACCH_CCH_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGAPR_GRALPRODTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGAPR_GRALPROD"
            tableMapping.ColumnMappings.Add("FGAPR_FGA_CODE_FK_PK", "FGAPR_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAPR_PR_CODE_FK_PK", "FGAPR_PR_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGAPR_GRALPROD] WHERE (([FGAPR_FGA_CODE_FK_PK] = @Origin" & _
                "al_FGAPR_FGA_CODE_FK_PK) AND ([FGAPR_PR_CODE_FK_PK] = @Original_FGAPR_PR_CODE_FK" & _
                "_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPR_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGAPR_GRALPROD] ([FGAPR_FGA_CODE_FK_PK], [FGAPR_PR_CODE_" & _
                "FK_PK]) VALUES (@FGAPR_FGA_CODE_FK_PK, @FGAPR_PR_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAPR_FGA_" & _
                "CODE_FK_PK, FGAPR_PR_CODE_FK_PK FROM THERIAQUE.FGAPR_GRALPROD WHERE (FGAPR_FGA_C" & _
                "ODE_FK_PK = @FGAPR_FGA_CODE_FK_PK) AND (FGAPR_PR_CODE_FK_PK = @FGAPR_PR_CODE_FK_" & _
                "PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPR_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGAPR_GRALPROD] SET [FGAPR_FGA_CODE_FK_PK] = @FGAPR_FGA_CODE_" & _
                "FK_PK, [FGAPR_PR_CODE_FK_PK] = @FGAPR_PR_CODE_FK_PK WHERE (([FGAPR_FGA_CODE_FK_P" & _
                "K] = @Original_FGAPR_FGA_CODE_FK_PK) AND ([FGAPR_PR_CODE_FK_PK] = @Original_FGAP" & _
                "R_PR_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAPR_FGA_CODE_FK_PK, FGAPR_PR_CODE_FK_PK FROM THERIA" & _
                "QUE.FGAPR_GRALPROD WHERE (FGAPR_FGA_CODE_FK_PK = @FGAPR_FGA_CODE_FK_PK) AND (FGA" & _
                "PR_PR_CODE_FK_PK = @FGAPR_PR_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPR_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPR_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPR_PR_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_PR_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGAPR_FGA_CODE_FK_PK, FGAPR_PR_CODE_FK_PK FROM THERIAQUE.FGAPR_GRALPROD"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGAPR_FGA_CODE_FK_PK, FGAPR_PR_CODE_FK_PK FROM THERIAQUE.FGAPR_GRALPROD" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "W" & _
                "HERE FGAPR_FGA_CODE_FK_PK = @FGAPR_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPR_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPR_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable = New dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable, ByVal FGAPR_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAPR_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGAPR_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAPR_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable = New dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAPR_GRALPRODDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGAPR_GRALPROD")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGAPR_FGA_CODE_FK_PK As Integer, ByVal Original_FGAPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGAPR_FGA_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGAPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGAPR_FGA_CODE_FK_PK As Integer, ByVal FGAPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGAPR_FGA_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGAPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAPR_FGA_CODE_FK_PK As Integer, ByVal FGAPR_PR_CODE_FK_PK As Integer, ByVal Original_FGAPR_FGA_CODE_FK_PK As Integer, ByVal Original_FGAPR_PR_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGAPR_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGAPR_PR_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGAPR_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGAPR_PR_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGAPR_FGA_CODE_FK_PK As Integer, ByVal Original_FGAPR_PR_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGAPR_FGA_CODE_FK_PK, Original_FGAPR_PR_CODE_FK_PK, Original_FGAPR_FGA_CODE_FK_PK, Original_FGAPR_PR_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGASAC_GRALSUBACTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGASAC_GRALSUBAC"
            tableMapping.ColumnMappings.Add("FGASAC_FGA_CODE_FK_PK", "FGASAC_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGASAC_SAC_CODE_FK_PK", "FGASAC_SAC_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGASAC_GRALSUBAC] WHERE (([FGASAC_FGA_CODE_FK_PK] = @Ori"& _ 
                "ginal_FGASAC_FGA_CODE_FK_PK) AND ([FGASAC_SAC_CODE_FK_PK] = @Original_FGASAC_SAC"& _ 
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGASAC_GRALSUBAC] ([FGASAC_FGA_CODE_FK_PK], [FGASAC_SAC_"& _ 
                "CODE_FK_PK]) VALUES (@FGASAC_FGA_CODE_FK_PK, @FGASAC_SAC_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FG"& _ 
                "ASAC_FGA_CODE_FK_PK, FGASAC_SAC_CODE_FK_PK FROM THERIAQUE.FGASAC_GRALSUBAC WHERE"& _ 
                " (FGASAC_FGA_CODE_FK_PK = @FGASAC_FGA_CODE_FK_PK) AND (FGASAC_SAC_CODE_FK_PK = @"& _ 
                "FGASAC_SAC_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGASAC_GRALSUBAC] SET [FGASAC_FGA_CODE_FK_PK] = @FGASAC_FGA_C"& _ 
                "ODE_FK_PK, [FGASAC_SAC_CODE_FK_PK] = @FGASAC_SAC_CODE_FK_PK WHERE (([FGASAC_FGA_"& _ 
                "CODE_FK_PK] = @Original_FGASAC_FGA_CODE_FK_PK) AND ([FGASAC_SAC_CODE_FK_PK] = @O"& _ 
                "riginal_FGASAC_SAC_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGASAC_FGA_CODE_FK_PK, FGASAC_SAC_CODE_"& _ 
                "FK_PK FROM THERIAQUE.FGASAC_GRALSUBAC WHERE (FGASAC_FGA_CODE_FK_PK = @FGASAC_FGA"& _ 
                "_CODE_FK_PK) AND (FGASAC_SAC_CODE_FK_PK = @FGASAC_SAC_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAC_SAC_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_SAC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGASAC_FGA_CODE_FK_PK, FGASAC_SAC_CODE_FK_PK FROM THERIAQUE.FGASAC_GRALSUB" & _
                "AC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGASAC_FGA_CODE_FK_PK, FGASAC_SAC_CODE_FK_PK FROM THERIAQUE.FGASAC_GRALSUB" & _
                "AC" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGASAC_FGA_CODE_FK_PK = @FGASAC_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable = New dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable, ByVal FGASAC_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGASAC_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGASAC_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGASAC_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable = New dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASAC_GRALSUBACDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGASAC_GRALSUBAC")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGASAC_FGA_CODE_FK_PK As Integer, ByVal Original_FGASAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGASAC_FGA_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGASAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGASAC_FGA_CODE_FK_PK As Integer, ByVal FGASAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGASAC_FGA_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGASAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGASAC_FGA_CODE_FK_PK As Integer, ByVal FGASAC_SAC_CODE_FK_PK As Integer, ByVal Original_FGASAC_FGA_CODE_FK_PK As Integer, ByVal Original_FGASAC_SAC_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGASAC_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGASAC_SAC_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGASAC_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGASAC_SAC_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGASAC_FGA_CODE_FK_PK As Integer, ByVal Original_FGASAC_SAC_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGASAC_FGA_CODE_FK_PK, Original_FGASAC_SAC_CODE_FK_PK, Original_FGASAC_FGA_CODE_FK_PK, Original_FGASAC_SAC_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGASAU_GRALSUBAUTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGASAU_GRALSUBAU"
            tableMapping.ColumnMappings.Add("FGASAU_FGA_CODE_FK_PK", "FGASAU_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGASAU_SAU_CODE_FK_PK", "FGASAU_SAU_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGASAU_GRALSUBAU] WHERE (([FGASAU_FGA_CODE_FK_PK] = @Ori" & _
                "ginal_FGASAU_FGA_CODE_FK_PK) AND ([FGASAU_SAU_CODE_FK_PK] = @Original_FGASAU_SAU" & _
                "_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAU_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGASAU_GRALSUBAU] ([FGASAU_FGA_CODE_FK_PK], [FGASAU_SAU_" & _
                "CODE_FK_PK]) VALUES (@FGASAU_FGA_CODE_FK_PK, @FGASAU_SAU_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FG" & _
                "ASAU_FGA_CODE_FK_PK, FGASAU_SAU_CODE_FK_PK FROM THERIAQUE.FGASAU_GRALSUBAU WHERE" & _
                " (FGASAU_FGA_CODE_FK_PK = @FGASAU_FGA_CODE_FK_PK) AND (FGASAU_SAU_CODE_FK_PK = @" & _
                "FGASAU_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAU_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGASAU_GRALSUBAU] SET [FGASAU_FGA_CODE_FK_PK] = @FGASAU_FGA_C" & _
                "ODE_FK_PK, [FGASAU_SAU_CODE_FK_PK] = @FGASAU_SAU_CODE_FK_PK WHERE (([FGASAU_FGA_" & _
                "CODE_FK_PK] = @Original_FGASAU_FGA_CODE_FK_PK) AND ([FGASAU_SAU_CODE_FK_PK] = @O" & _
                "riginal_FGASAU_SAU_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGASAU_FGA_CODE_FK_PK, FGASAU_SAU_CODE_" & _
                "FK_PK FROM THERIAQUE.FGASAU_GRALSUBAU WHERE (FGASAU_FGA_CODE_FK_PK = @FGASAU_FGA" & _
                "_CODE_FK_PK) AND (FGASAU_SAU_CODE_FK_PK = @FGASAU_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAU_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAU_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASAU_SAU_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_SAU_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGASAU_FGA_CODE_FK_PK, FGASAU_SAU_CODE_FK_PK FROM THERIAQUE.FGASAU_GRALSUB" & _
                "AU"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGASAU_FGA_CODE_FK_PK, FGASAU_SAU_CODE_FK_PK FROM THERIAQUE.FGASAU_GRALSUB" & _
                "AU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGASAU_FGA_CODE_FK_PK = @FGASAU_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASAU_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASAU_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable = New dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable, ByVal FGASAU_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGASAU_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGASAU_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGASAU_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable = New dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASAU_GRALSUBAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGASAU_GRALSUBAU")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGASAU_FGA_CODE_FK_PK As Integer, ByVal Original_FGASAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGASAU_FGA_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGASAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGASAU_FGA_CODE_FK_PK As Integer, ByVal FGASAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGASAU_FGA_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGASAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGASAU_FGA_CODE_FK_PK As Integer, ByVal FGASAU_SAU_CODE_FK_PK As Integer, ByVal Original_FGASAU_FGA_CODE_FK_PK As Integer, ByVal Original_FGASAU_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGASAU_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGASAU_SAU_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGASAU_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGASAU_SAU_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGASAU_FGA_CODE_FK_PK As Integer, ByVal Original_FGASAU_SAU_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGASAU_FGA_CODE_FK_PK, Original_FGASAU_SAU_CODE_FK_PK, Original_FGASAU_FGA_CODE_FK_PK, Original_FGASAU_SAU_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGASP_GRALSPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGASP_GRALSPE"
            tableMapping.ColumnMappings.Add("FGASP_FGA_CODE_FK_PK", "FGASP_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGASP_SP_CODE_FK_PK", "FGASP_SP_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGASP_GRALSPE] WHERE (([FGASP_FGA_CODE_FK_PK] = @Origina"& _ 
                "l_FGASP_FGA_CODE_FK_PK) AND ([FGASP_SP_CODE_FK_PK] = @Original_FGASP_SP_CODE_FK_"& _ 
                "PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGASP_GRALSPE] ([FGASP_FGA_CODE_FK_PK], [FGASP_SP_CODE_F"& _ 
                "K_PK]) VALUES (@FGASP_FGA_CODE_FK_PK, @FGASP_SP_CODE_FK_PK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGASP_FGA_C"& _ 
                "ODE_FK_PK, FGASP_SP_CODE_FK_PK FROM THERIAQUE.FGASP_GRALSPE WHERE (FGASP_FGA_COD"& _ 
                "E_FK_PK = @FGASP_FGA_CODE_FK_PK) AND (FGASP_SP_CODE_FK_PK = @FGASP_SP_CODE_FK_PK"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGASP_GRALSPE] SET [FGASP_FGA_CODE_FK_PK] = @FGASP_FGA_CODE_F"& _ 
                "K_PK, [FGASP_SP_CODE_FK_PK] = @FGASP_SP_CODE_FK_PK WHERE (([FGASP_FGA_CODE_FK_PK"& _ 
                "] = @Original_FGASP_FGA_CODE_FK_PK) AND ([FGASP_SP_CODE_FK_PK] = @Original_FGASP"& _ 
                "_SP_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGASP_FGA_CODE_FK_PK, FGASP_SP_CODE_FK_PK FROM THERIAQ"& _ 
                "UE.FGASP_GRALSPE WHERE (FGASP_FGA_CODE_FK_PK = @FGASP_FGA_CODE_FK_PK) AND (FGASP"& _ 
                "_SP_CODE_FK_PK = @FGASP_SP_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGASP_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGASP_FGA_CODE_FK_PK, FGASP_SP_CODE_FK_PK FROM THERIAQUE.FGASP_GRALSPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGASP_FGA_CODE_FK_PK, FGASP_SP_CODE_FK_PK FROM THERIAQUE.FGASP_GRALSPE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WH" & _
                "ERE FGASP_FGA_CODE_FK_PK = @FGASP_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGASP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGASP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable = New dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable, ByVal FGASP_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGASP_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGASP_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGASP_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable = New dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGASP_GRALSPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGASP_GRALSPE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGASP_FGA_CODE_FK_PK As Integer, ByVal Original_FGASP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGASP_FGA_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGASP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGASP_FGA_CODE_FK_PK As Integer, ByVal FGASP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGASP_FGA_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGASP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGASP_FGA_CODE_FK_PK As Integer, ByVal FGASP_SP_CODE_FK_PK As Integer, ByVal Original_FGASP_FGA_CODE_FK_PK As Integer, ByVal Original_FGASP_SP_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGASP_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGASP_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGASP_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGASP_SP_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGASP_FGA_CODE_FK_PK As Integer, ByVal Original_FGASP_SP_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGASP_FGA_CODE_FK_PK, Original_FGASP_SP_CODE_FK_PK, Original_FGASP_FGA_CODE_FK_PK, Original_FGASP_SP_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGAOA_OBSERVATION_ANIMALETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGAOA_OBSERVATION_ANIMALE"
            tableMapping.ColumnMappings.Add("FGAOA_FGA_CODE_FK_PK", "FGAOA_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAOA_CDF_OBS_CODE_FK_PK", "FGAOA_CDF_OBS_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAOA_NUMORD", "FGAOA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGAOA_OBSERVATION_ANIMALE] WHERE (([FGAOA_FGA_CODE_FK_PK" & _
                "] = @Original_FGAOA_FGA_CODE_FK_PK) AND ([FGAOA_CDF_OBS_CODE_FK_PK] = @Original_" & _
                "FGAOA_CDF_OBS_CODE_FK_PK) AND ((@IsNull_FGAOA_NUMORD = 1 AND [FGAOA_NUMORD] IS N" & _
                "ULL) OR ([FGAOA_NUMORD] = @Original_FGAOA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAOA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGAOA_OBSERVATION_ANIMALE] ([FGAOA_FGA_CODE_FK_PK], [FGA" & _
                "OA_CDF_OBS_CODE_FK_PK], [FGAOA_NUMORD]) VALUES (@FGAOA_FGA_CODE_FK_PK, @FGAOA_CD" & _
                "F_OBS_CODE_FK_PK, @FGAOA_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAOA_FGA_CODE_FK_PK, FGAOA_CDF_OBS_CO" & _
                "DE_FK_PK, FGAOA_NUMORD FROM THERIAQUE.FGAOA_OBSERVATION_ANIMALE WHERE (FGAOA_CDF" & _
                "_OBS_CODE_FK_PK = @FGAOA_CDF_OBS_CODE_FK_PK) AND (FGAOA_FGA_CODE_FK_PK = @FGAOA_" & _
                "FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGAOA_OBSERVATION_ANIMALE] SET [FGAOA_FGA_CODE_FK_PK] = @FGAO" & _
                "A_FGA_CODE_FK_PK, [FGAOA_CDF_OBS_CODE_FK_PK] = @FGAOA_CDF_OBS_CODE_FK_PK, [FGAOA" & _
                "_NUMORD] = @FGAOA_NUMORD WHERE (([FGAOA_FGA_CODE_FK_PK] = @Original_FGAOA_FGA_CO" & _
                "DE_FK_PK) AND ([FGAOA_CDF_OBS_CODE_FK_PK] = @Original_FGAOA_CDF_OBS_CODE_FK_PK) " & _
                "AND ((@IsNull_FGAOA_NUMORD = 1 AND [FGAOA_NUMORD] IS NULL) OR ([FGAOA_NUMORD] = " & _
                "@Original_FGAOA_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAOA_FGA_CODE_FK_PK, FGAOA_CDF_OBS_CODE_FK_P" & _
                "K, FGAOA_NUMORD FROM THERIAQUE.FGAOA_OBSERVATION_ANIMALE WHERE (FGAOA_CDF_OBS_CO" & _
                "DE_FK_PK = @FGAOA_CDF_OBS_CODE_FK_PK) AND (FGAOA_FGA_CODE_FK_PK = @FGAOA_FGA_COD" & _
                "E_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAOA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGAOA_FGA_CODE_FK_PK, FGAOA_CDF_OBS_CODE_FK_PK, FGAOA_NUMORD FROM THERIAQU" & _
                "E.FGAOA_OBSERVATION_ANIMALE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGAOA_FGA_CODE_FK_PK, FGAOA_CDF_OBS_CODE_FK_PK, FGAOA_NUMORD FROM THERIAQU" & _
                "E.FGAOA_OBSERVATION_ANIMALE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGAOA_FGA_CODE_FK_PK = @FGAOA_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable = New dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable, ByVal FGAOA_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAOA_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGAOA_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAOA_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable = New dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAOA_OBSERVATION_ANIMALEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGAOA_OBSERVATION_ANIMALE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGAOA_FGA_CODE_FK_PK As Integer, ByVal Original_FGAOA_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAOA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGAOA_FGA_CODE_FK_PK, Integer)
            If (Original_FGAOA_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAOA_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGAOA_CDF_OBS_CODE_FK_PK, String)
            End If
            If (Original_FGAOA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGAOA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGAOA_FGA_CODE_FK_PK As Integer, ByVal FGAOA_CDF_OBS_CODE_FK_PK As String, ByVal FGAOA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGAOA_FGA_CODE_FK_PK, Integer)
            If (FGAOA_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAOA_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGAOA_CDF_OBS_CODE_FK_PK, String)
            End If
            If (FGAOA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGAOA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAOA_FGA_CODE_FK_PK As Integer, ByVal FGAOA_CDF_OBS_CODE_FK_PK As String, ByVal FGAOA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAOA_FGA_CODE_FK_PK As Integer, ByVal Original_FGAOA_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAOA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGAOA_FGA_CODE_FK_PK, Integer)
            If (FGAOA_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAOA_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGAOA_CDF_OBS_CODE_FK_PK, String)
            End If
            If (FGAOA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGAOA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGAOA_FGA_CODE_FK_PK, Integer)
            If (Original_FGAOA_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAOA_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGAOA_CDF_OBS_CODE_FK_PK, String)
            End If
            If (Original_FGAOA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGAOA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAOA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAOA_FGA_CODE_FK_PK As Integer, ByVal Original_FGAOA_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAOA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGAOA_FGA_CODE_FK_PK, Original_FGAOA_CDF_OBS_CODE_FK_PK, FGAOA_NUMORD, Original_FGAOA_FGA_CODE_FK_PK, Original_FGAOA_CDF_OBS_CODE_FK_PK, Original_FGAOA_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGACFA_CIRCONSTFAVORIS_ANIMALETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACFA_CIRCONSTFAVORIS_ANIMALE"
            tableMapping.ColumnMappings.Add("FGACFA_FGA_CODE_FK_PK", "FGACFA_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFA_CDF_CF_CODE_FK_PK", "FGACFA_CDF_CF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFA_NUMORD", "FGACFA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACFA_CIRCONSTFAVORIS_ANIMALE] WHERE (([FGACFA_FGA_CODE"& _ 
                "_FK_PK] = @Original_FGACFA_FGA_CODE_FK_PK) AND ([FGACFA_CDF_CF_CODE_FK_PK] = @Or"& _ 
                "iginal_FGACFA_CDF_CF_CODE_FK_PK) AND ((@IsNull_FGACFA_NUMORD = 1 AND [FGACFA_NUM"& _ 
                "ORD] IS NULL) OR ([FGACFA_NUMORD] = @Original_FGACFA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACFA_CIRCONSTFAVORIS_ANIMALE] ([FGACFA_FGA_CODE_FK_PK]"& _ 
                ", [FGACFA_CDF_CF_CODE_FK_PK], [FGACFA_NUMORD]) VALUES (@FGACFA_FGA_CODE_FK_PK, @"& _ 
                "FGACFA_CDF_CF_CODE_FK_PK, @FGACFA_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACFA_FGA_CODE_FK_PK, FGACFA"& _ 
                "_CDF_CF_CODE_FK_PK, FGACFA_NUMORD FROM THERIAQUE.FGACFA_CIRCONSTFAVORIS_ANIMALE "& _ 
                "WHERE (FGACFA_CDF_CF_CODE_FK_PK = @FGACFA_CDF_CF_CODE_FK_PK) AND (FGACFA_FGA_COD"& _ 
                "E_FK_PK = @FGACFA_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACFA_CIRCONSTFAVORIS_ANIMALE] SET [FGACFA_FGA_CODE_FK_PK] ="& _ 
                " @FGACFA_FGA_CODE_FK_PK, [FGACFA_CDF_CF_CODE_FK_PK] = @FGACFA_CDF_CF_CODE_FK_PK,"& _ 
                " [FGACFA_NUMORD] = @FGACFA_NUMORD WHERE (([FGACFA_FGA_CODE_FK_PK] = @Original_FG"& _ 
                "ACFA_FGA_CODE_FK_PK) AND ([FGACFA_CDF_CF_CODE_FK_PK] = @Original_FGACFA_CDF_CF_C"& _ 
                "ODE_FK_PK) AND ((@IsNull_FGACFA_NUMORD = 1 AND [FGACFA_NUMORD] IS NULL) OR ([FGA"& _ 
                "CFA_NUMORD] = @Original_FGACFA_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACFA_FGA_CODE_FK_PK, FGACFA_"& _ 
                "CDF_CF_CODE_FK_PK, FGACFA_NUMORD FROM THERIAQUE.FGACFA_CIRCONSTFAVORIS_ANIMALE W"& _ 
                "HERE (FGACFA_CDF_CF_CODE_FK_PK = @FGACFA_CDF_CF_CODE_FK_PK) AND (FGACFA_FGA_CODE"& _ 
                "_FK_PK = @FGACFA_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACFA_FGA_CODE_FK_PK, FGACFA_CDF_CF_CODE_FK_PK, FGACFA_NUMORD FROM THERIA" & _
                "QUE.FGACFA_CIRCONSTFAVORIS_ANIMALE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACFA_FGA_CODE_FK_PK, FGACFA_CDF_CF_CODE_FK_PK, FGACFA_NUMORD FROM THERIA" & _
                "QUE.FGACFA_CIRCONSTFAVORIS_ANIMALE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACFA_FGA_CODE_FK_PK = @FGACFA_FGA_CO" & _
                "DE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable, ByVal FGACFA_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFA_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACFA_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFA_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFA_CIRCONSTFAVORIS_ANIMALEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACFA_CIRCONSTFAVORIS_ANIMALE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACFA_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFA_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACFA_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFA_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFA_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACFA_CDF_CF_CODE_FK_PK, String)
            End If
            If (Original_FGACFA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACFA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACFA_FGA_CODE_FK_PK As Integer, ByVal FGACFA_CDF_CF_CODE_FK_PK As String, ByVal FGACFA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACFA_FGA_CODE_FK_PK, Integer)
            If (FGACFA_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFA_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACFA_CDF_CF_CODE_FK_PK, String)
            End If
            If (FGACFA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACFA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFA_FGA_CODE_FK_PK As Integer, ByVal FGACFA_CDF_CF_CODE_FK_PK As String, ByVal FGACFA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFA_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFA_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACFA_FGA_CODE_FK_PK, Integer)
            If (FGACFA_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFA_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACFA_CDF_CF_CODE_FK_PK, String)
            End If
            If (FGACFA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACFA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACFA_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFA_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFA_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACFA_CDF_CF_CODE_FK_PK, String)
            End If
            If (Original_FGACFA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACFA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFA_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFA_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACFA_FGA_CODE_FK_PK, Original_FGACFA_CDF_CF_CODE_FK_PK, FGACFA_NUMORD, Original_FGACFA_FGA_CODE_FK_PK, Original_FGACFA_CDF_CF_CODE_FK_PK, Original_FGACFA_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGATX1_FGA_TXOBSERVANITableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX1_FGA_TXOBSERVANI"
            tableMapping.ColumnMappings.Add("FGATX1_FGA_CODE_FK_PK", "FGATX1_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX1_TEXTE", "FGATX1_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX1_FGA_TXOBSERVANI] WHERE (([FGATX1_FGA_CODE_FK_PK] " & _
                "= @Original_FGATX1_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX1_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX1_FGA_TXOBSERVANI] ([FGATX1_FGA_CODE_FK_PK], [FGATX" & _
                "1_TEXTE]) VALUES (@FGATX1_FGA_CODE_FK_PK, @FGATX1_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX1_FGA_COD" & _
                "E_FK_PK, FGATX1_TEXTE FROM THERIAQUE.FGATX1_FGA_TXOBSERVANI WHERE (FGATX1_FGA_CO" & _
                "DE_FK_PK = @FGATX1_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX1_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX1_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX1_FGA_TXOBSERVANI] SET [FGATX1_FGA_CODE_FK_PK] = @FGATX1" & _
                "_FGA_CODE_FK_PK, [FGATX1_TEXTE] = @FGATX1_TEXTE WHERE (([FGATX1_FGA_CODE_FK_PK] " & _
                "= @Original_FGATX1_FGA_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX1_FGA_CODE_FK_PK, FGATX1_TEXTE" & _
                " FROM THERIAQUE.FGATX1_FGA_TXOBSERVANI WHERE (FGATX1_FGA_CODE_FK_PK = @FGATX1_FG" & _
                "A_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX1_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX1_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX1_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX1_FGA_CODE_FK_PK, FGATX1_TEXTE FROM THERIAQUE.FGATX1_FGA_TXOBSERVANI"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX1_FGA_CODE_FK_PK, FGATX1_TEXTE FROM THERIAQUE.FGATX1_FGA_TXOBSERVANI" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX1_FGA_CODE_FK_PK = @FGATX1_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX1_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX1_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable, ByVal FGATX1_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX1_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX1_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX1_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX1_FGA_TXOBSERVANIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX1_FGA_TXOBSERVANI")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX1_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX1_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX1_FGA_CODE_FK_PK As Integer, ByVal FGATX1_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX1_FGA_CODE_FK_PK, Integer)
            If (FGATX1_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX1_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX1_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX1_FGA_CODE_FK_PK As Integer, ByVal FGATX1_TEXTE As String, ByVal Original_FGATX1_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX1_FGA_CODE_FK_PK, Integer)
            If (FGATX1_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX1_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX1_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX1_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX1_TEXTE As String, ByVal Original_FGATX1_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX1_FGA_CODE_FK_PK, FGATX1_TEXTE, Original_FGATX1_FGA_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGARIA_RISQUE_ANIMALETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGARIA_RISQUE_ANIMALE"
            tableMapping.ColumnMappings.Add("FGARIA_FGA_CODE_FK_PK", "FGARIA_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIA_CDF_RI_CODE_FK_PK", "FGARIA_CDF_RI_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIA_NUMORD", "FGARIA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGARIA_RISQUE_ANIMALE] WHERE (([FGARIA_FGA_CODE_FK_PK] ="& _ 
                " @Original_FGARIA_FGA_CODE_FK_PK) AND ([FGARIA_CDF_RI_CODE_FK_PK] = @Original_FG"& _ 
                "ARIA_CDF_RI_CODE_FK_PK) AND ((@IsNull_FGARIA_NUMORD = 1 AND [FGARIA_NUMORD] IS N"& _ 
                "ULL) OR ([FGARIA_NUMORD] = @Original_FGARIA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGARIA_RISQUE_ANIMALE] ([FGARIA_FGA_CODE_FK_PK], [FGARIA"& _ 
                "_CDF_RI_CODE_FK_PK], [FGARIA_NUMORD]) VALUES (@FGARIA_FGA_CODE_FK_PK, @FGARIA_CD"& _ 
                "F_RI_CODE_FK_PK, @FGARIA_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGARIA_FGA_CODE_FK_PK, FGARIA_CDF_RI_C"& _ 
                "ODE_FK_PK, FGARIA_NUMORD FROM THERIAQUE.FGARIA_RISQUE_ANIMALE WHERE (FGARIA_CDF_"& _ 
                "RI_CODE_FK_PK = @FGARIA_CDF_RI_CODE_FK_PK) AND (FGARIA_FGA_CODE_FK_PK = @FGARIA_"& _ 
                "FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGARIA_RISQUE_ANIMALE] SET [FGARIA_FGA_CODE_FK_PK] = @FGARIA_"& _ 
                "FGA_CODE_FK_PK, [FGARIA_CDF_RI_CODE_FK_PK] = @FGARIA_CDF_RI_CODE_FK_PK, [FGARIA_"& _ 
                "NUMORD] = @FGARIA_NUMORD WHERE (([FGARIA_FGA_CODE_FK_PK] = @Original_FGARIA_FGA_"& _ 
                "CODE_FK_PK) AND ([FGARIA_CDF_RI_CODE_FK_PK] = @Original_FGARIA_CDF_RI_CODE_FK_PK"& _ 
                ") AND ((@IsNull_FGARIA_NUMORD = 1 AND [FGARIA_NUMORD] IS NULL) OR ([FGARIA_NUMOR"& _ 
                "D] = @Original_FGARIA_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGARIA_FGA_CODE_FK_PK, FGARIA_CDF_RI_CO"& _ 
                "DE_FK_PK, FGARIA_NUMORD FROM THERIAQUE.FGARIA_RISQUE_ANIMALE WHERE (FGARIA_CDF_R"& _ 
                "I_CODE_FK_PK = @FGARIA_CDF_RI_CODE_FK_PK) AND (FGARIA_FGA_CODE_FK_PK = @FGARIA_F"& _ 
                "GA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGARIA_FGA_CODE_FK_PK, FGARIA_CDF_RI_CODE_FK_PK, FGARIA_NUMORD FROM THERIA" & _
                "QUE.FGARIA_RISQUE_ANIMALE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGARIA_FGA_CODE_FK_PK, FGARIA_CDF_RI_CODE_FK_PK, FGARIA_NUMORD FROM THERIA" & _
                "QUE.FGARIA_RISQUE_ANIMALE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGARIA_FGA_CODE_FK_PK = @FGARIA_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable, ByVal FGARIA_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIA_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGARIA_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIA_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIA_RISQUE_ANIMALEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGARIA_RISQUE_ANIMALE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGARIA_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIA_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGARIA_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIA_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIA_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGARIA_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGARIA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGARIA_FGA_CODE_FK_PK As Integer, ByVal FGARIA_CDF_RI_CODE_FK_PK As String, ByVal FGARIA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGARIA_FGA_CODE_FK_PK, Integer)
            If (FGARIA_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIA_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGARIA_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGARIA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIA_FGA_CODE_FK_PK As Integer, ByVal FGARIA_CDF_RI_CODE_FK_PK As String, ByVal FGARIA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIA_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIA_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGARIA_FGA_CODE_FK_PK, Integer)
            If (FGARIA_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIA_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGARIA_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGARIA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGARIA_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIA_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIA_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGARIA_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGARIA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIA_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIA_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGARIA_FGA_CODE_FK_PK, Original_FGARIA_CDF_RI_CODE_FK_PK, FGARIA_NUMORD, Original_FGARIA_FGA_CODE_FK_PK, Original_FGARIA_CDF_RI_CODE_FK_PK, Original_FGARIA_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGAPC_PERIODECRITIQUE_FGRALTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGAPC_PERIODECRITIQUE_FGRAL"
            tableMapping.ColumnMappings.Add("FGAPC_FGA_CODE_FK_PK", "FGAPC_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAPC_CDF_PC_CODE_FK_PK", "FGAPC_CDF_PC_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAPC_NUMORD", "FGAPC_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGAPC_PERIODECRITIQUE_FGRAL] WHERE (([FGAPC_FGA_CODE_FK_" & _
                "PK] = @Original_FGAPC_FGA_CODE_FK_PK) AND ([FGAPC_CDF_PC_CODE_FK_PK] = @Original" & _
                "_FGAPC_CDF_PC_CODE_FK_PK) AND ((@IsNull_FGAPC_NUMORD = 1 AND [FGAPC_NUMORD] IS N" & _
                "ULL) OR ([FGAPC_NUMORD] = @Original_FGAPC_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAPC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGAPC_PERIODECRITIQUE_FGRAL] ([FGAPC_FGA_CODE_FK_PK], [F" & _
                "GAPC_CDF_PC_CODE_FK_PK], [FGAPC_NUMORD]) VALUES (@FGAPC_FGA_CODE_FK_PK, @FGAPC_C" & _
                "DF_PC_CODE_FK_PK, @FGAPC_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAPC_FGA_CODE_FK_PK, FGAPC_CDF_PC_COD" & _
                "E_FK_PK, FGAPC_NUMORD FROM THERIAQUE.FGAPC_PERIODECRITIQUE_FGRAL WHERE (FGAPC_CD" & _
                "F_PC_CODE_FK_PK = @FGAPC_CDF_PC_CODE_FK_PK) AND (FGAPC_FGA_CODE_FK_PK = @FGAPC_F" & _
                "GA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGAPC_PERIODECRITIQUE_FGRAL] SET [FGAPC_FGA_CODE_FK_PK] = @FG" & _
                "APC_FGA_CODE_FK_PK, [FGAPC_CDF_PC_CODE_FK_PK] = @FGAPC_CDF_PC_CODE_FK_PK, [FGAPC" & _
                "_NUMORD] = @FGAPC_NUMORD WHERE (([FGAPC_FGA_CODE_FK_PK] = @Original_FGAPC_FGA_CO" & _
                "DE_FK_PK) AND ([FGAPC_CDF_PC_CODE_FK_PK] = @Original_FGAPC_CDF_PC_CODE_FK_PK) AN" & _
                "D ((@IsNull_FGAPC_NUMORD = 1 AND [FGAPC_NUMORD] IS NULL) OR ([FGAPC_NUMORD] = @O" & _
                "riginal_FGAPC_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAPC_FGA_CODE_FK_PK, FGAPC_CDF_PC_CODE_FK_PK, " & _
                "FGAPC_NUMORD FROM THERIAQUE.FGAPC_PERIODECRITIQUE_FGRAL WHERE (FGAPC_CDF_PC_CODE" & _
                "_FK_PK = @FGAPC_CDF_PC_CODE_FK_PK) AND (FGAPC_FGA_CODE_FK_PK = @FGAPC_FGA_CODE_F" & _
                "K_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_CDF_PC_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAPC_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAPC_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGAPC_FGA_CODE_FK_PK, FGAPC_CDF_PC_CODE_FK_PK, FGAPC_NUMORD FROM THERIAQUE" & _
                ".FGAPC_PERIODECRITIQUE_FGRAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGAPC_FGA_CODE_FK_PK, FGAPC_CDF_PC_CODE_FK_PK, FGAPC_NUMORD FROM THERIAQUE" & _
                ".FGAPC_PERIODECRITIQUE_FGRAL" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGAPC_FGA_CODE_FK_PK = @FGAPC_FGA_CODE_FK_PK" & _
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAPC_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAPC_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable = New dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable, ByVal FGAPC_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAPC_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGAPC_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAPC_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable = New dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAPC_PERIODECRITIQUE_FGRALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGAPC_PERIODECRITIQUE_FGRAL")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGAPC_FGA_CODE_FK_PK As Integer, ByVal Original_FGAPC_CDF_PC_CODE_FK_PK As String, ByVal Original_FGAPC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGAPC_FGA_CODE_FK_PK, Integer)
            If (Original_FGAPC_CDF_PC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAPC_CDF_PC_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGAPC_CDF_PC_CODE_FK_PK, String)
            End If
            If (Original_FGAPC_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGAPC_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGAPC_FGA_CODE_FK_PK As Integer, ByVal FGAPC_CDF_PC_CODE_FK_PK As String, ByVal FGAPC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGAPC_FGA_CODE_FK_PK, Integer)
            If (FGAPC_CDF_PC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAPC_CDF_PC_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGAPC_CDF_PC_CODE_FK_PK, String)
            End If
            If (FGAPC_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGAPC_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAPC_FGA_CODE_FK_PK As Integer, ByVal FGAPC_CDF_PC_CODE_FK_PK As String, ByVal FGAPC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAPC_FGA_CODE_FK_PK As Integer, ByVal Original_FGAPC_CDF_PC_CODE_FK_PK As String, ByVal Original_FGAPC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGAPC_FGA_CODE_FK_PK, Integer)
            If (FGAPC_CDF_PC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAPC_CDF_PC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGAPC_CDF_PC_CODE_FK_PK, String)
            End If
            If (FGAPC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGAPC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGAPC_FGA_CODE_FK_PK, Integer)
            If (Original_FGAPC_CDF_PC_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAPC_CDF_PC_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGAPC_CDF_PC_CODE_FK_PK, String)
            End If
            If (Original_FGAPC_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGAPC_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAPC_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAPC_FGA_CODE_FK_PK As Integer, ByVal Original_FGAPC_CDF_PC_CODE_FK_PK As String, ByVal Original_FGAPC_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGAPC_FGA_CODE_FK_PK, Original_FGAPC_CDF_PC_CODE_FK_PK, FGAPC_NUMORD, Original_FGAPC_FGA_CODE_FK_PK, Original_FGAPC_CDF_PC_CODE_FK_PK, Original_FGAPC_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGAOH_OBSERVATION_HUMAINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGAOH_OBSERVATION_HUMAINE"
            tableMapping.ColumnMappings.Add("FGAOH_FGA_CODE_FK_PK", "FGAOH_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAOH_CDF_OBS_CODE_FK_PK", "FGAOH_CDF_OBS_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAOH_NUMORD", "FGAOH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGAOH_OBSERVATION_HUMAINE] WHERE (([FGAOH_FGA_CODE_FK_PK"& _ 
                "] = @Original_FGAOH_FGA_CODE_FK_PK) AND ([FGAOH_CDF_OBS_CODE_FK_PK] = @Original_"& _ 
                "FGAOH_CDF_OBS_CODE_FK_PK) AND ((@IsNull_FGAOH_NUMORD = 1 AND [FGAOH_NUMORD] IS N"& _ 
                "ULL) OR ([FGAOH_NUMORD] = @Original_FGAOH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAOH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGAOH_OBSERVATION_HUMAINE] ([FGAOH_FGA_CODE_FK_PK], [FGA"& _ 
                "OH_CDF_OBS_CODE_FK_PK], [FGAOH_NUMORD]) VALUES (@FGAOH_FGA_CODE_FK_PK, @FGAOH_CD"& _ 
                "F_OBS_CODE_FK_PK, @FGAOH_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGAOH_FGA_CODE_FK_PK, FGAOH_CDF_OBS_CO"& _ 
                "DE_FK_PK, FGAOH_NUMORD FROM THERIAQUE.FGAOH_OBSERVATION_HUMAINE WHERE (FGAOH_CDF"& _ 
                "_OBS_CODE_FK_PK = @FGAOH_CDF_OBS_CODE_FK_PK) AND (FGAOH_FGA_CODE_FK_PK = @FGAOH_"& _ 
                "FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGAOH_OBSERVATION_HUMAINE] SET [FGAOH_FGA_CODE_FK_PK] = @FGAO"& _ 
                "H_FGA_CODE_FK_PK, [FGAOH_CDF_OBS_CODE_FK_PK] = @FGAOH_CDF_OBS_CODE_FK_PK, [FGAOH"& _ 
                "_NUMORD] = @FGAOH_NUMORD WHERE (([FGAOH_FGA_CODE_FK_PK] = @Original_FGAOH_FGA_CO"& _ 
                "DE_FK_PK) AND ([FGAOH_CDF_OBS_CODE_FK_PK] = @Original_FGAOH_CDF_OBS_CODE_FK_PK) "& _ 
                "AND ((@IsNull_FGAOH_NUMORD = 1 AND [FGAOH_NUMORD] IS NULL) OR ([FGAOH_NUMORD] = "& _ 
                "@Original_FGAOH_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGAOH_FGA_CODE_FK_PK, FGAOH_CDF_OBS_CODE_FK_P"& _ 
                "K, FGAOH_NUMORD FROM THERIAQUE.FGAOH_OBSERVATION_HUMAINE WHERE (FGAOH_CDF_OBS_CO"& _ 
                "DE_FK_PK = @FGAOH_CDF_OBS_CODE_FK_PK) AND (FGAOH_FGA_CODE_FK_PK = @FGAOH_FGA_COD"& _ 
                "E_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAOH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAOH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGAOH_FGA_CODE_FK_PK, FGAOH_CDF_OBS_CODE_FK_PK, FGAOH_NUMORD FROM THERIAQU" & _
                "E.FGAOH_OBSERVATION_HUMAINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGAOH_FGA_CODE_FK_PK, FGAOH_CDF_OBS_CODE_FK_PK, FGAOH_NUMORD FROM THERIAQU" & _
                "E.FGAOH_OBSERVATION_HUMAINE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGAOH_FGA_CODE_FK_PK = @FGAOH_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAOH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAOH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable = New dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable, ByVal FGAOH_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAOH_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGAOH_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAOH_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable = New dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAOH_OBSERVATION_HUMAINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGAOH_OBSERVATION_HUMAINE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGAOH_FGA_CODE_FK_PK As Integer, ByVal Original_FGAOH_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAOH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGAOH_FGA_CODE_FK_PK, Integer)
            If (Original_FGAOH_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAOH_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGAOH_CDF_OBS_CODE_FK_PK, String)
            End If
            If (Original_FGAOH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGAOH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGAOH_FGA_CODE_FK_PK As Integer, ByVal FGAOH_CDF_OBS_CODE_FK_PK As String, ByVal FGAOH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGAOH_FGA_CODE_FK_PK, Integer)
            If (FGAOH_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAOH_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGAOH_CDF_OBS_CODE_FK_PK, String)
            End If
            If (FGAOH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGAOH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAOH_FGA_CODE_FK_PK As Integer, ByVal FGAOH_CDF_OBS_CODE_FK_PK As String, ByVal FGAOH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAOH_FGA_CODE_FK_PK As Integer, ByVal Original_FGAOH_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAOH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGAOH_FGA_CODE_FK_PK, Integer)
            If (FGAOH_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAOH_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGAOH_CDF_OBS_CODE_FK_PK, String)
            End If
            If (FGAOH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGAOH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGAOH_FGA_CODE_FK_PK, Integer)
            If (Original_FGAOH_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAOH_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGAOH_CDF_OBS_CODE_FK_PK, String)
            End If
            If (Original_FGAOH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGAOH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAOH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAOH_FGA_CODE_FK_PK As Integer, ByVal Original_FGAOH_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAOH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGAOH_FGA_CODE_FK_PK, Original_FGAOH_CDF_OBS_CODE_FK_PK, FGAOH_NUMORD, Original_FGAOH_FGA_CODE_FK_PK, Original_FGAOH_CDF_OBS_CODE_FK_PK, Original_FGAOH_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGACFH_CIRCONSTFAVORIS_HUMAINETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACFH_CIRCONSTFAVORIS_HUMAINE"
            tableMapping.ColumnMappings.Add("FGACFH_FGA_CODE_FK_PK", "FGACFH_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFH_CDF_CF_CODE_FK_PK", "FGACFH_CDF_CF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFH_NUMORD", "FGACFH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACFH_CIRCONSTFAVORIS_HUMAINE] WHERE (([FGACFH_FGA_CODE" & _
                "_FK_PK] = @Original_FGACFH_FGA_CODE_FK_PK) AND ([FGACFH_CDF_CF_CODE_FK_PK] = @Or" & _
                "iginal_FGACFH_CDF_CF_CODE_FK_PK) AND ((@IsNull_FGACFH_NUMORD = 1 AND [FGACFH_NUM" & _
                "ORD] IS NULL) OR ([FGACFH_NUMORD] = @Original_FGACFH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACFH_CIRCONSTFAVORIS_HUMAINE] ([FGACFH_FGA_CODE_FK_PK]" & _
                ", [FGACFH_CDF_CF_CODE_FK_PK], [FGACFH_NUMORD]) VALUES (@FGACFH_FGA_CODE_FK_PK, @" & _
                "FGACFH_CDF_CF_CODE_FK_PK, @FGACFH_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACFH_FGA_CODE_FK_PK, FGACFH" & _
                "_CDF_CF_CODE_FK_PK, FGACFH_NUMORD FROM THERIAQUE.FGACFH_CIRCONSTFAVORIS_HUMAINE " & _
                "WHERE (FGACFH_CDF_CF_CODE_FK_PK = @FGACFH_CDF_CF_CODE_FK_PK) AND (FGACFH_FGA_COD" & _
                "E_FK_PK = @FGACFH_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACFH_CIRCONSTFAVORIS_HUMAINE] SET [FGACFH_FGA_CODE_FK_PK] =" & _
                " @FGACFH_FGA_CODE_FK_PK, [FGACFH_CDF_CF_CODE_FK_PK] = @FGACFH_CDF_CF_CODE_FK_PK," & _
                " [FGACFH_NUMORD] = @FGACFH_NUMORD WHERE (([FGACFH_FGA_CODE_FK_PK] = @Original_FG" & _
                "ACFH_FGA_CODE_FK_PK) AND ([FGACFH_CDF_CF_CODE_FK_PK] = @Original_FGACFH_CDF_CF_C" & _
                "ODE_FK_PK) AND ((@IsNull_FGACFH_NUMORD = 1 AND [FGACFH_NUMORD] IS NULL) OR ([FGA" & _
                "CFH_NUMORD] = @Original_FGACFH_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACFH_FGA_CODE_FK_PK, FGACFH_" & _
                "CDF_CF_CODE_FK_PK, FGACFH_NUMORD FROM THERIAQUE.FGACFH_CIRCONSTFAVORIS_HUMAINE W" & _
                "HERE (FGACFH_CDF_CF_CODE_FK_PK = @FGACFH_CDF_CF_CODE_FK_PK) AND (FGACFH_FGA_CODE" & _
                "_FK_PK = @FGACFH_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACFH_FGA_CODE_FK_PK, FGACFH_CDF_CF_CODE_FK_PK, FGACFH_NUMORD FROM THERIA" & _
                "QUE.FGACFH_CIRCONSTFAVORIS_HUMAINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACFH_FGA_CODE_FK_PK, FGACFH_CDF_CF_CODE_FK_PK, FGACFH_NUMORD FROM THERIA" & _
                "QUE.FGACFH_CIRCONSTFAVORIS_HUMAINE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACFH_FGA_CODE_FK_PK = @FGACFH_FGA_CO" & _
                "DE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable, ByVal FGACFH_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFH_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACFH_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFH_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFH_CIRCONSTFAVORIS_HUMAINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACFH_CIRCONSTFAVORIS_HUMAINE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACFH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFH_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACFH_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFH_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFH_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACFH_CDF_CF_CODE_FK_PK, String)
            End If
            If (Original_FGACFH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACFH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACFH_FGA_CODE_FK_PK As Integer, ByVal FGACFH_CDF_CF_CODE_FK_PK As String, ByVal FGACFH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACFH_FGA_CODE_FK_PK, Integer)
            If (FGACFH_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFH_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACFH_CDF_CF_CODE_FK_PK, String)
            End If
            If (FGACFH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACFH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFH_FGA_CODE_FK_PK As Integer, ByVal FGACFH_CDF_CF_CODE_FK_PK As String, ByVal FGACFH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFH_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACFH_FGA_CODE_FK_PK, Integer)
            If (FGACFH_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFH_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACFH_CDF_CF_CODE_FK_PK, String)
            End If
            If (FGACFH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACFH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACFH_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFH_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFH_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACFH_CDF_CF_CODE_FK_PK, String)
            End If
            If (Original_FGACFH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACFH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFH_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFH_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACFH_FGA_CODE_FK_PK, Original_FGACFH_CDF_CF_CODE_FK_PK, FGACFH_NUMORD, Original_FGACFH_FGA_CODE_FK_PK, Original_FGACFH_CDF_CF_CODE_FK_PK, Original_FGACFH_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGATX3_FGA_TXOBSERVHUMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX3_FGA_TXOBSERVHUM"
            tableMapping.ColumnMappings.Add("FGATX3_FGA_CODE_FK_PK", "FGATX3_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX3_TEXTE", "FGATX3_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX3_FGA_TXOBSERVHUM] WHERE (([FGATX3_FGA_CODE_FK_PK] "& _ 
                "= @Original_FGATX3_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX3_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX3_FGA_TXOBSERVHUM] ([FGATX3_FGA_CODE_FK_PK], [FGATX"& _ 
                "3_TEXTE]) VALUES (@FGATX3_FGA_CODE_FK_PK, @FGATX3_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX3_FGA_COD"& _ 
                "E_FK_PK, FGATX3_TEXTE FROM THERIAQUE.FGATX3_FGA_TXOBSERVHUM WHERE (FGATX3_FGA_CO"& _ 
                "DE_FK_PK = @FGATX3_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX3_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX3_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX3_FGA_TXOBSERVHUM] SET [FGATX3_FGA_CODE_FK_PK] = @FGATX3"& _ 
                "_FGA_CODE_FK_PK, [FGATX3_TEXTE] = @FGATX3_TEXTE WHERE (([FGATX3_FGA_CODE_FK_PK] "& _ 
                "= @Original_FGATX3_FGA_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX3_FGA_CODE_FK_PK, FGATX3_TEXTE"& _ 
                " FROM THERIAQUE.FGATX3_FGA_TXOBSERVHUM WHERE (FGATX3_FGA_CODE_FK_PK = @FGATX3_FG"& _ 
                "A_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX3_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX3_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX3_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX3_FGA_CODE_FK_PK, FGATX3_TEXTE FROM THERIAQUE.FGATX3_FGA_TXOBSERVHUM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX3_FGA_CODE_FK_PK, FGATX3_TEXTE FROM THERIAQUE.FGATX3_FGA_TXOBSERVHUM" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX3_FGA_CODE_FK_PK = @FGATX3_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX3_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX3_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable, ByVal FGATX3_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX3_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX3_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX3_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX3_FGA_TXOBSERVHUMDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX3_FGA_TXOBSERVHUM")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX3_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX3_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX3_FGA_CODE_FK_PK As Integer, ByVal FGATX3_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX3_FGA_CODE_FK_PK, Integer)
            If (FGATX3_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX3_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX3_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX3_FGA_CODE_FK_PK As Integer, ByVal FGATX3_TEXTE As String, ByVal Original_FGATX3_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX3_FGA_CODE_FK_PK, Integer)
            If (FGATX3_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX3_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX3_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX3_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX3_TEXTE As String, ByVal Original_FGATX3_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX3_FGA_CODE_FK_PK, FGATX3_TEXTE, Original_FGATX3_FGA_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGARIH_RISQUE_HUMAINETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGARIH_RISQUE_HUMAINE"
            tableMapping.ColumnMappings.Add("FGARIH_FGA_CODE_FK_PK", "FGARIH_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIH_CDF_RI_CODE_FK_PK", "FGARIH_CDF_RI_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIH_NUMORD", "FGARIH_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGARIH_RISQUE_HUMAINE] WHERE (([FGARIH_FGA_CODE_FK_PK] =" & _
                " @Original_FGARIH_FGA_CODE_FK_PK) AND ([FGARIH_CDF_RI_CODE_FK_PK] = @Original_FG" & _
                "ARIH_CDF_RI_CODE_FK_PK) AND ((@IsNull_FGARIH_NUMORD = 1 AND [FGARIH_NUMORD] IS N" & _
                "ULL) OR ([FGARIH_NUMORD] = @Original_FGARIH_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGARIH_RISQUE_HUMAINE] ([FGARIH_FGA_CODE_FK_PK], [FGARIH" & _
                "_CDF_RI_CODE_FK_PK], [FGARIH_NUMORD]) VALUES (@FGARIH_FGA_CODE_FK_PK, @FGARIH_CD" & _
                "F_RI_CODE_FK_PK, @FGARIH_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGARIH_FGA_CODE_FK_PK, FGARIH_CDF_RI_C" & _
                "ODE_FK_PK, FGARIH_NUMORD FROM THERIAQUE.FGARIH_RISQUE_HUMAINE WHERE (FGARIH_CDF_" & _
                "RI_CODE_FK_PK = @FGARIH_CDF_RI_CODE_FK_PK) AND (FGARIH_FGA_CODE_FK_PK = @FGARIH_" & _
                "FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGARIH_RISQUE_HUMAINE] SET [FGARIH_FGA_CODE_FK_PK] = @FGARIH_" & _
                "FGA_CODE_FK_PK, [FGARIH_CDF_RI_CODE_FK_PK] = @FGARIH_CDF_RI_CODE_FK_PK, [FGARIH_" & _
                "NUMORD] = @FGARIH_NUMORD WHERE (([FGARIH_FGA_CODE_FK_PK] = @Original_FGARIH_FGA_" & _
                "CODE_FK_PK) AND ([FGARIH_CDF_RI_CODE_FK_PK] = @Original_FGARIH_CDF_RI_CODE_FK_PK" & _
                ") AND ((@IsNull_FGARIH_NUMORD = 1 AND [FGARIH_NUMORD] IS NULL) OR ([FGARIH_NUMOR" & _
                "D] = @Original_FGARIH_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGARIH_FGA_CODE_FK_PK, FGARIH_CDF_RI_CO" & _
                "DE_FK_PK, FGARIH_NUMORD FROM THERIAQUE.FGARIH_RISQUE_HUMAINE WHERE (FGARIH_CDF_R" & _
                "I_CODE_FK_PK = @FGARIH_CDF_RI_CODE_FK_PK) AND (FGARIH_FGA_CODE_FK_PK = @FGARIH_F" & _
                "GA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIH_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIH_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGARIH_FGA_CODE_FK_PK, FGARIH_CDF_RI_CODE_FK_PK, FGARIH_NUMORD FROM THERIA" & _
                "QUE.FGARIH_RISQUE_HUMAINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGARIH_FGA_CODE_FK_PK, FGARIH_CDF_RI_CODE_FK_PK, FGARIH_NUMORD FROM THERIA" & _
                "QUE.FGARIH_RISQUE_HUMAINE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGARIH_FGA_CODE_FK_PK = @FGARIH_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIH_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIH_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable, ByVal FGARIH_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIH_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGARIH_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIH_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIH_RISQUE_HUMAINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGARIH_RISQUE_HUMAINE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGARIH_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIH_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGARIH_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIH_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIH_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGARIH_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIH_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGARIH_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGARIH_FGA_CODE_FK_PK As Integer, ByVal FGARIH_CDF_RI_CODE_FK_PK As String, ByVal FGARIH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGARIH_FGA_CODE_FK_PK, Integer)
            If (FGARIH_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIH_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGARIH_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIH_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGARIH_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIH_FGA_CODE_FK_PK As Integer, ByVal FGARIH_CDF_RI_CODE_FK_PK As String, ByVal FGARIH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIH_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIH_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGARIH_FGA_CODE_FK_PK, Integer)
            If (FGARIH_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIH_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGARIH_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGARIH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGARIH_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIH_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIH_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGARIH_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIH_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGARIH_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIH_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIH_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIH_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIH_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGARIH_FGA_CODE_FK_PK, Original_FGARIH_CDF_RI_CODE_FK_PK, FGARIH_NUMORD, Original_FGARIH_FGA_CODE_FK_PK, Original_FGARIH_CDF_RI_CODE_FK_PK, Original_FGARIH_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGARIG_RISQUE_GROSSESSETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGARIG_RISQUE_GROSSESSE"
            tableMapping.ColumnMappings.Add("FGARIG_FGA_CODE_FK_PK", "FGARIG_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIG_NUMSEQ_PK", "FGARIG_NUMSEQ_PK")
            tableMapping.ColumnMappings.Add("FGARIG_CDF_RI_CODE_FK", "FGARIG_CDF_RI_CODE_FK")
            tableMapping.ColumnMappings.Add("FGARIG_CDF_TC_CODE_FK", "FGARIG_CDF_TC_CODE_FK")
            tableMapping.ColumnMappings.Add("FGARIG_NUMORD", "FGARIG_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGARIG_RISQUE_GROSSESSE] WHERE (([FGARIG_FGA_CODE_FK_PK]"& _ 
                " = @Original_FGARIG_FGA_CODE_FK_PK) AND ([FGARIG_NUMSEQ_PK] = @Original_FGARIG_N"& _ 
                "UMSEQ_PK) AND ([FGARIG_CDF_RI_CODE_FK] = @Original_FGARIG_CDF_RI_CODE_FK) AND (("& _ 
                "@IsNull_FGARIG_CDF_TC_CODE_FK = 1 AND [FGARIG_CDF_TC_CODE_FK] IS NULL) OR ([FGAR"& _ 
                "IG_CDF_TC_CODE_FK] = @Original_FGARIG_CDF_TC_CODE_FK)) AND ((@IsNull_FGARIG_NUMO"& _ 
                "RD = 1 AND [FGARIG_NUMORD] IS NULL) OR ([FGARIG_NUMORD] = @Original_FGARIG_NUMOR"& _ 
                "D)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_CDF_RI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_RI_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIG_CDF_TC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_TC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_CDF_TC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_TC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIG_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGARIG_RISQUE_GROSSESSE] ([FGARIG_FGA_CODE_FK_PK], [FGAR"& _ 
                "IG_NUMSEQ_PK], [FGARIG_CDF_RI_CODE_FK], [FGARIG_CDF_TC_CODE_FK], [FGARIG_NUMORD]"& _ 
                ") VALUES (@FGARIG_FGA_CODE_FK_PK, @FGARIG_NUMSEQ_PK, @FGARIG_CDF_RI_CODE_FK, @FG"& _ 
                "ARIG_CDF_TC_CODE_FK, @FGARIG_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGARIG_FGA_CODE_FK_PK, FGARIG_NUMS"& _ 
                "EQ_PK, FGARIG_CDF_RI_CODE_FK, FGARIG_CDF_TC_CODE_FK, FGARIG_NUMORD FROM THERIAQU"& _ 
                "E.FGARIG_RISQUE_GROSSESSE WHERE (FGARIG_FGA_CODE_FK_PK = @FGARIG_FGA_CODE_FK_PK)"& _ 
                " AND (FGARIG_NUMSEQ_PK = @FGARIG_NUMSEQ_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_CDF_RI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_RI_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_CDF_TC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_TC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGARIG_RISQUE_GROSSESSE] SET [FGARIG_FGA_CODE_FK_PK] = @FGARI"& _ 
                "G_FGA_CODE_FK_PK, [FGARIG_NUMSEQ_PK] = @FGARIG_NUMSEQ_PK, [FGARIG_CDF_RI_CODE_FK"& _ 
                "] = @FGARIG_CDF_RI_CODE_FK, [FGARIG_CDF_TC_CODE_FK] = @FGARIG_CDF_TC_CODE_FK, [F"& _ 
                "GARIG_NUMORD] = @FGARIG_NUMORD WHERE (([FGARIG_FGA_CODE_FK_PK] = @Original_FGARI"& _ 
                "G_FGA_CODE_FK_PK) AND ([FGARIG_NUMSEQ_PK] = @Original_FGARIG_NUMSEQ_PK) AND ([FG"& _ 
                "ARIG_CDF_RI_CODE_FK] = @Original_FGARIG_CDF_RI_CODE_FK) AND ((@IsNull_FGARIG_CDF"& _ 
                "_TC_CODE_FK = 1 AND [FGARIG_CDF_TC_CODE_FK] IS NULL) OR ([FGARIG_CDF_TC_CODE_FK]"& _ 
                " = @Original_FGARIG_CDF_TC_CODE_FK)) AND ((@IsNull_FGARIG_NUMORD = 1 AND [FGARIG"& _ 
                "_NUMORD] IS NULL) OR ([FGARIG_NUMORD] = @Original_FGARIG_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGAR"& _ 
                "IG_FGA_CODE_FK_PK, FGARIG_NUMSEQ_PK, FGARIG_CDF_RI_CODE_FK, FGARIG_CDF_TC_CODE_F"& _ 
                "K, FGARIG_NUMORD FROM THERIAQUE.FGARIG_RISQUE_GROSSESSE WHERE (FGARIG_FGA_CODE_F"& _ 
                "K_PK = @FGARIG_FGA_CODE_FK_PK) AND (FGARIG_NUMSEQ_PK = @FGARIG_NUMSEQ_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMSEQ_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_CDF_RI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_RI_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_CDF_TC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_TC_CODE_FK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_NUMSEQ_PK", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMSEQ_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_CDF_RI_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_RI_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIG_CDF_TC_CODE_FK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_TC_CODE_FK", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_CDF_TC_CODE_FK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_CDF_TC_CODE_FK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIG_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIG_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGARIG_FGA_CODE_FK_PK, FGARIG_NUMSEQ_PK, FGARIG_CDF_RI_CODE_FK, FGARIG_CDF" & _
                "_TC_CODE_FK, FGARIG_NUMORD FROM THERIAQUE.FGARIG_RISQUE_GROSSESSE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGARIG_FGA_CODE_FK_PK, FGARIG_NUMSEQ_PK, FGARIG_CDF_RI_CODE_FK, FGARIG_CDF" & _
                "_TC_CODE_FK, FGARIG_NUMORD FROM THERIAQUE.FGARIG_RISQUE_GROSSESSE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGARIG_" & _
                "FGA_CODE_FK_PK = @FGARIG_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIG_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIG_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable, ByVal FGARIG_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIG_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGARIG_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIG_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIG_RISQUE_GROSSESSEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGARIG_RISQUE_GROSSESSE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGARIG_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIG_NUMSEQ_PK As Short, ByVal Original_FGARIG_CDF_RI_CODE_FK As String, ByVal Original_FGARIG_CDF_TC_CODE_FK As String, ByVal Original_FGARIG_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGARIG_FGA_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGARIG_NUMSEQ_PK, Short)
            If (Original_FGARIG_CDF_RI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIG_CDF_RI_CODE_FK")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FGARIG_CDF_RI_CODE_FK, String)
            End If
            If (Original_FGARIG_CDF_TC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FGARIG_CDF_TC_CODE_FK, String)
            End If
            If (Original_FGARIG_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FGARIG_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGARIG_FGA_CODE_FK_PK As Integer, ByVal FGARIG_NUMSEQ_PK As Short, ByVal FGARIG_CDF_RI_CODE_FK As String, ByVal FGARIG_CDF_TC_CODE_FK As String, ByVal FGARIG_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGARIG_FGA_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGARIG_NUMSEQ_PK, Short)
            If (FGARIG_CDF_RI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIG_CDF_RI_CODE_FK")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGARIG_CDF_RI_CODE_FK, String)
            End If
            If (FGARIG_CDF_TC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FGARIG_CDF_TC_CODE_FK, String)
            End If
            If (FGARIG_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FGARIG_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIG_FGA_CODE_FK_PK As Integer, ByVal FGARIG_NUMSEQ_PK As Short, ByVal FGARIG_CDF_RI_CODE_FK As String, ByVal FGARIG_CDF_TC_CODE_FK As String, ByVal FGARIG_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIG_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIG_NUMSEQ_PK As Short, ByVal Original_FGARIG_CDF_RI_CODE_FK As String, ByVal Original_FGARIG_CDF_TC_CODE_FK As String, ByVal Original_FGARIG_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGARIG_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGARIG_NUMSEQ_PK, Short)
            If (FGARIG_CDF_RI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIG_CDF_RI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGARIG_CDF_RI_CODE_FK, String)
            End If
            If (FGARIG_CDF_TC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FGARIG_CDF_TC_CODE_FK, String)
            End If
            If (FGARIG_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FGARIG_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FGARIG_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGARIG_NUMSEQ_PK, Short)
            If (Original_FGARIG_CDF_RI_CODE_FK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIG_CDF_RI_CODE_FK")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FGARIG_CDF_RI_CODE_FK, String)
            End If
            If (Original_FGARIG_CDF_TC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FGARIG_CDF_TC_CODE_FK, String)
            End If
            If (Original_FGARIG_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FGARIG_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIG_CDF_RI_CODE_FK As String, ByVal FGARIG_CDF_TC_CODE_FK As String, ByVal FGARIG_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIG_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIG_NUMSEQ_PK As Short, ByVal Original_FGARIG_CDF_RI_CODE_FK As String, ByVal Original_FGARIG_CDF_TC_CODE_FK As String, ByVal Original_FGARIG_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGARIG_FGA_CODE_FK_PK, Original_FGARIG_NUMSEQ_PK, FGARIG_CDF_RI_CODE_FK, FGARIG_CDF_TC_CODE_FK, FGARIG_NUMORD, Original_FGARIG_FGA_CODE_FK_PK, Original_FGARIG_NUMSEQ_PK, Original_FGARIG_CDF_RI_CODE_FK, Original_FGARIG_CDF_TC_CODE_FK, Original_FGARIG_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGATX7_FGA_TXRECOMMANDATTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX7_FGA_TXRECOMMANDAT"
            tableMapping.ColumnMappings.Add("FGATX7_FGA_CODE_FK_PK", "FGATX7_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX7_TEXTE", "FGATX7_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX7_FGA_TXRECOMMANDAT] WHERE (([FGATX7_FGA_CODE_FK_PK" & _
                "] = @Original_FGATX7_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX7_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX7_FGA_TXRECOMMANDAT] ([FGATX7_FGA_CODE_FK_PK], [FGA" & _
                "TX7_TEXTE]) VALUES (@FGATX7_FGA_CODE_FK_PK, @FGATX7_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX7_FGA_C" & _
                "ODE_FK_PK, FGATX7_TEXTE FROM THERIAQUE.FGATX7_FGA_TXRECOMMANDAT WHERE (FGATX7_FG" & _
                "A_CODE_FK_PK = @FGATX7_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX7_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX7_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX7_FGA_TXRECOMMANDAT] SET [FGATX7_FGA_CODE_FK_PK] = @FGAT" & _
                "X7_FGA_CODE_FK_PK, [FGATX7_TEXTE] = @FGATX7_TEXTE WHERE (([FGATX7_FGA_CODE_FK_PK" & _
                "] = @Original_FGATX7_FGA_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX7_FGA_CODE_FK_PK, FGATX7_TEX" & _
                "TE FROM THERIAQUE.FGATX7_FGA_TXRECOMMANDAT WHERE (FGATX7_FGA_CODE_FK_PK = @FGATX" & _
                "7_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX7_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX7_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX7_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX7_FGA_CODE_FK_PK, FGATX7_TEXTE FROM THERIAQUE.FGATX7_FGA_TXRECOMMANDA" & _
                "T"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX7_FGA_CODE_FK_PK, FGATX7_TEXTE FROM THERIAQUE.FGATX7_FGA_TXRECOMMANDA" & _
                "T" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX7_FGA_CODE_FK_PK = @FGATX7_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX7_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX7_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable, ByVal FGATX7_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX7_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX7_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX7_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX7_FGA_TXRECOMMANDATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX7_FGA_TXRECOMMANDAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX7_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX7_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX7_FGA_CODE_FK_PK As Integer, ByVal FGATX7_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX7_FGA_CODE_FK_PK, Integer)
            If (FGATX7_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX7_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX7_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX7_FGA_CODE_FK_PK As Integer, ByVal FGATX7_TEXTE As String, ByVal Original_FGATX7_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX7_FGA_CODE_FK_PK, Integer)
            If (FGATX7_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX7_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX7_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX7_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX7_TEXTE As String, ByVal Original_FGATX7_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX7_FGA_CODE_FK_PK, FGATX7_TEXTE, Original_FGATX7_FGA_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGACF_CATFEMMEENCEINTETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACF_CATFEMMEENCEINTE"
            tableMapping.ColumnMappings.Add("FGACF_FGA_CODE_FK_PK", "FGACF_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACF_CDF_CAT_CODE_FK_PK", "FGACF_CDF_CAT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACF_NUMORD", "FGACF_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACF_CATFEMMEENCEINTE] WHERE (([FGACF_FGA_CODE_FK_PK] ="& _ 
                " @Original_FGACF_FGA_CODE_FK_PK) AND ([FGACF_CDF_CAT_CODE_FK_PK] = @Original_FGA"& _ 
                "CF_CDF_CAT_CODE_FK_PK) AND ((@IsNull_FGACF_NUMORD = 1 AND [FGACF_NUMORD] IS NULL"& _ 
                ") OR ([FGACF_NUMORD] = @Original_FGACF_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACF_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACF_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACF_CATFEMMEENCEINTE] ([FGACF_FGA_CODE_FK_PK], [FGACF_"& _ 
                "CDF_CAT_CODE_FK_PK], [FGACF_NUMORD]) VALUES (@FGACF_FGA_CODE_FK_PK, @FGACF_CDF_C"& _ 
                "AT_CODE_FK_PK, @FGACF_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACF_FGA_CODE_FK_PK, FGACF_CDF_CAT_CODE_"& _ 
                "FK_PK, FGACF_NUMORD FROM THERIAQUE.FGACF_CATFEMMEENCEINTE WHERE (FGACF_CDF_CAT_C"& _ 
                "ODE_FK_PK = @FGACF_CDF_CAT_CODE_FK_PK) AND (FGACF_FGA_CODE_FK_PK = @FGACF_FGA_CO"& _ 
                "DE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACF_CATFEMMEENCEINTE] SET [FGACF_FGA_CODE_FK_PK] = @FGACF_F"& _ 
                "GA_CODE_FK_PK, [FGACF_CDF_CAT_CODE_FK_PK] = @FGACF_CDF_CAT_CODE_FK_PK, [FGACF_NU"& _ 
                "MORD] = @FGACF_NUMORD WHERE (([FGACF_FGA_CODE_FK_PK] = @Original_FGACF_FGA_CODE_"& _ 
                "FK_PK) AND ([FGACF_CDF_CAT_CODE_FK_PK] = @Original_FGACF_CDF_CAT_CODE_FK_PK) AND"& _ 
                " ((@IsNull_FGACF_NUMORD = 1 AND [FGACF_NUMORD] IS NULL) OR ([FGACF_NUMORD] = @Or"& _ 
                "iginal_FGACF_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACF_FGA_CODE_FK_PK, FGACF_CDF_CAT_CODE_FK_PK, "& _ 
                "FGACF_NUMORD FROM THERIAQUE.FGACF_CATFEMMEENCEINTE WHERE (FGACF_CDF_CAT_CODE_FK_"& _ 
                "PK = @FGACF_CDF_CAT_CODE_FK_PK) AND (FGACF_FGA_CODE_FK_PK = @FGACF_FGA_CODE_FK_P"& _ 
                "K)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACF_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACF_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACF_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACF_FGA_CODE_FK_PK, FGACF_CDF_CAT_CODE_FK_PK, FGACF_NUMORD FROM THERIAQU" & _
                "E.FGACF_CATFEMMEENCEINTE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACF_FGA_CODE_FK_PK, FGACF_CDF_CAT_CODE_FK_PK, FGACF_NUMORD FROM THERIAQU" & _
                "E.FGACF_CATFEMMEENCEINTE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACF_FGA_CODE_FK_PK = @FGACF_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACF_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACF_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable, ByVal FGACF_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACF_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACF_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACF_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACF_CATFEMMEENCEINTEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACF_CATFEMMEENCEINTE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACF_FGA_CODE_FK_PK As Integer, ByVal Original_FGACF_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACF_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACF_FGA_CODE_FK_PK, Integer)
            If (Original_FGACF_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACF_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACF_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACF_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACF_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACF_FGA_CODE_FK_PK As Integer, ByVal FGACF_CDF_CAT_CODE_FK_PK As String, ByVal FGACF_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACF_FGA_CODE_FK_PK, Integer)
            If (FGACF_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACF_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACF_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACF_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACF_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACF_FGA_CODE_FK_PK As Integer, ByVal FGACF_CDF_CAT_CODE_FK_PK As String, ByVal FGACF_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACF_FGA_CODE_FK_PK As Integer, ByVal Original_FGACF_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACF_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACF_FGA_CODE_FK_PK, Integer)
            If (FGACF_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACF_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACF_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACF_FGA_CODE_FK_PK, Integer)
            If (Original_FGACF_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACF_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACF_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACF_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACF_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACF_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACF_FGA_CODE_FK_PK As Integer, ByVal Original_FGACF_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACF_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACF_FGA_CODE_FK_PK, Original_FGACF_CDF_CAT_CODE_FK_PK, FGACF_NUMORD, Original_FGACF_FGA_CODE_FK_PK, Original_FGACF_CDF_CAT_CODE_FK_PK, Original_FGACF_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGACN_CATNOUVEAUNETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACN_CATNOUVEAUNE"
            tableMapping.ColumnMappings.Add("FGACN_FGA_CODE_FK_PK", "FGACN_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACN_CDF_CAT_CODE_FK_PK", "FGACN_CDF_CAT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACN_NUMORD", "FGACN_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACN_CATNOUVEAUNE] WHERE (([FGACN_FGA_CODE_FK_PK] = @Or" & _
                "iginal_FGACN_FGA_CODE_FK_PK) AND ([FGACN_CDF_CAT_CODE_FK_PK] = @Original_FGACN_C" & _
                "DF_CAT_CODE_FK_PK) AND ((@IsNull_FGACN_NUMORD = 1 AND [FGACN_NUMORD] IS NULL) OR" & _
                " ([FGACN_NUMORD] = @Original_FGACN_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACN_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACN_CATNOUVEAUNE] ([FGACN_FGA_CODE_FK_PK], [FGACN_CDF_" & _
                "CAT_CODE_FK_PK], [FGACN_NUMORD]) VALUES (@FGACN_FGA_CODE_FK_PK, @FGACN_CDF_CAT_C" & _
                "ODE_FK_PK, @FGACN_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACN_FGA_CODE_FK_PK, FGACN_CDF_CAT_CODE_FK_P" & _
                "K, FGACN_NUMORD FROM THERIAQUE.FGACN_CATNOUVEAUNE WHERE (FGACN_CDF_CAT_CODE_FK_P" & _
                "K = @FGACN_CDF_CAT_CODE_FK_PK) AND (FGACN_FGA_CODE_FK_PK = @FGACN_FGA_CODE_FK_PK" & _
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACN_CATNOUVEAUNE] SET [FGACN_FGA_CODE_FK_PK] = @FGACN_FGA_C" & _
                "ODE_FK_PK, [FGACN_CDF_CAT_CODE_FK_PK] = @FGACN_CDF_CAT_CODE_FK_PK, [FGACN_NUMORD" & _
                "] = @FGACN_NUMORD WHERE (([FGACN_FGA_CODE_FK_PK] = @Original_FGACN_FGA_CODE_FK_P" & _
                "K) AND ([FGACN_CDF_CAT_CODE_FK_PK] = @Original_FGACN_CDF_CAT_CODE_FK_PK) AND ((@" & _
                "IsNull_FGACN_NUMORD = 1 AND [FGACN_NUMORD] IS NULL) OR ([FGACN_NUMORD] = @Origin" & _
                "al_FGACN_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACN_FGA_CODE_FK_PK, FGACN_CDF_CAT_CODE_FK_PK, FGAC" & _
                "N_NUMORD FROM THERIAQUE.FGACN_CATNOUVEAUNE WHERE (FGACN_CDF_CAT_CODE_FK_PK = @FG" & _
                "ACN_CDF_CAT_CODE_FK_PK) AND (FGACN_FGA_CODE_FK_PK = @FGACN_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACN_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACN_FGA_CODE_FK_PK, FGACN_CDF_CAT_CODE_FK_PK, FGACN_NUMORD FROM THERIAQU" & _
                "E.FGACN_CATNOUVEAUNE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACN_FGA_CODE_FK_PK, FGACN_CDF_CAT_CODE_FK_PK, FGACN_NUMORD FROM THERIAQU" & _
                "E.FGACN_CATNOUVEAUNE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACN_FGA_CODE_FK_PK = @FGACN_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable, ByVal FGACN_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACN_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACN_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACN_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACN_CATNOUVEAUNEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACN_CATNOUVEAUNE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACN_FGA_CODE_FK_PK As Integer, ByVal Original_FGACN_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACN_FGA_CODE_FK_PK, Integer)
            If (Original_FGACN_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACN_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACN_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACN_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACN_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACN_FGA_CODE_FK_PK As Integer, ByVal FGACN_CDF_CAT_CODE_FK_PK As String, ByVal FGACN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACN_FGA_CODE_FK_PK, Integer)
            If (FGACN_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACN_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACN_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACN_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACN_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACN_FGA_CODE_FK_PK As Integer, ByVal FGACN_CDF_CAT_CODE_FK_PK As String, ByVal FGACN_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACN_FGA_CODE_FK_PK As Integer, ByVal Original_FGACN_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACN_FGA_CODE_FK_PK, Integer)
            If (FGACN_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACN_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACN_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACN_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACN_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACN_FGA_CODE_FK_PK, Integer)
            If (Original_FGACN_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACN_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACN_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACN_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACN_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACN_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACN_FGA_CODE_FK_PK As Integer, ByVal Original_FGACN_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACN_FGA_CODE_FK_PK, Original_FGACN_CDF_CAT_CODE_FK_PK, FGACN_NUMORD, Original_FGACN_FGA_CODE_FK_PK, Original_FGACN_CDF_CAT_CODE_FK_PK, Original_FGACN_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGATX4_FGA_TXCONDATENIRCFTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX4_FGA_TXCONDATENIRCF"
            tableMapping.ColumnMappings.Add("FGATX4_FGA_CODE_FK_PK", "FGATX4_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX4_TEXTE", "FGATX4_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX4_FGA_TXCONDATENIRCF] WHERE (([FGATX4_FGA_CODE_FK_P"& _ 
                "K] = @Original_FGATX4_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX4_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX4_FGA_TXCONDATENIRCF] ([FGATX4_FGA_CODE_FK_PK], [FG"& _ 
                "ATX4_TEXTE]) VALUES (@FGATX4_FGA_CODE_FK_PK, @FGATX4_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX4_FGA_"& _ 
                "CODE_FK_PK, FGATX4_TEXTE FROM THERIAQUE.FGATX4_FGA_TXCONDATENIRCF WHERE (FGATX4_"& _ 
                "FGA_CODE_FK_PK = @FGATX4_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX4_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX4_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX4_FGA_TXCONDATENIRCF] SET [FGATX4_FGA_CODE_FK_PK] = @FGA"& _ 
                "TX4_FGA_CODE_FK_PK, [FGATX4_TEXTE] = @FGATX4_TEXTE WHERE (([FGATX4_FGA_CODE_FK_P"& _ 
                "K] = @Original_FGATX4_FGA_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX4_FGA_CODE_FK_PK, FGATX4_TE"& _ 
                "XTE FROM THERIAQUE.FGATX4_FGA_TXCONDATENIRCF WHERE (FGATX4_FGA_CODE_FK_PK = @FGA"& _ 
                "TX4_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX4_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX4_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX4_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX4_FGA_CODE_FK_PK, FGATX4_TEXTE FROM THERIAQUE.FGATX4_FGA_TXCONDATENIR" & _
                "CF"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX4_FGA_CODE_FK_PK, FGATX4_TEXTE FROM THERIAQUE.FGATX4_FGA_TXCONDATENIR" & _
                "CF" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX4_FGA_CODE_FK_PK = @FGATX4_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX4_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX4_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable, ByVal FGATX4_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX4_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX4_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX4_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX4_FGA_TXCONDATENIRCFDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX4_FGA_TXCONDATENIRCF")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX4_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX4_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX4_FGA_CODE_FK_PK As Integer, ByVal FGATX4_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX4_FGA_CODE_FK_PK, Integer)
            If (FGATX4_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX4_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX4_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX4_FGA_CODE_FK_PK As Integer, ByVal FGATX4_TEXTE As String, ByVal Original_FGATX4_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX4_FGA_CODE_FK_PK, Integer)
            If (FGATX4_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX4_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX4_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX4_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX4_TEXTE As String, ByVal Original_FGATX4_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX4_FGA_CODE_FK_PK, FGATX4_TEXTE, Original_FGATX4_FGA_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGATX5_FGA_TXCONDATENIRCNTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX5_FGA_TXCONDATENIRCN"
            tableMapping.ColumnMappings.Add("FGATX5_FGA_CODE_FK_PK", "FGATX5_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX5_TEXTE", "FGATX5_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX5_FGA_TXCONDATENIRCN] WHERE (([FGATX5_FGA_CODE_FK_P" & _
                "K] = @Original_FGATX5_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX5_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX5_FGA_TXCONDATENIRCN] ([FGATX5_FGA_CODE_FK_PK], [FG" & _
                "ATX5_TEXTE]) VALUES (@FGATX5_FGA_CODE_FK_PK, @FGATX5_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX5_FGA_" & _
                "CODE_FK_PK, FGATX5_TEXTE FROM THERIAQUE.FGATX5_FGA_TXCONDATENIRCN WHERE (FGATX5_" & _
                "FGA_CODE_FK_PK = @FGATX5_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX5_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX5_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX5_FGA_TXCONDATENIRCN] SET [FGATX5_FGA_CODE_FK_PK] = @FGA" & _
                "TX5_FGA_CODE_FK_PK, [FGATX5_TEXTE] = @FGATX5_TEXTE WHERE (([FGATX5_FGA_CODE_FK_P" & _
                "K] = @Original_FGATX5_FGA_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX5_FGA_CODE_FK_PK, FGATX5_TE" & _
                "XTE FROM THERIAQUE.FGATX5_FGA_TXCONDATENIRCN WHERE (FGATX5_FGA_CODE_FK_PK = @FGA" & _
                "TX5_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX5_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX5_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX5_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX5_FGA_CODE_FK_PK, FGATX5_TEXTE FROM THERIAQUE.FGATX5_FGA_TXCONDATENIR" & _
                "CN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX5_FGA_CODE_FK_PK, FGATX5_TEXTE FROM THERIAQUE.FGATX5_FGA_TXCONDATENIR" & _
                "CN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX5_FGA_CODE_FK_PK = @FGATX5_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX5_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX5_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable, ByVal FGATX5_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX5_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX5_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX5_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX5_FGA_TXCONDATENIRCNDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX5_FGA_TXCONDATENIRCN")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX5_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX5_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX5_FGA_CODE_FK_PK As Integer, ByVal FGATX5_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX5_FGA_CODE_FK_PK, Integer)
            If (FGATX5_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX5_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX5_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX5_FGA_CODE_FK_PK As Integer, ByVal FGATX5_TEXTE As String, ByVal Original_FGATX5_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX5_FGA_CODE_FK_PK, Integer)
            If (FGATX5_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX5_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX5_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX5_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX5_TEXTE As String, ByVal Original_FGATX5_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX5_FGA_CODE_FK_PK, FGATX5_TEXTE, Original_FGATX5_FGA_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGATX9_FGA_TXRECOMMANDATTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX9_FGA_TXRECOMMANDAT"
            tableMapping.ColumnMappings.Add("FGATX9_FGA_CODE_FK_PK", "FGATX9_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX9_TEXTE", "FGATX9_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX9_FGA_TXRECOMMANDAT] WHERE (([FGATX9_FGA_CODE_FK_PK"& _ 
                "] = @Original_FGATX9_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX9_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX9_FGA_TXRECOMMANDAT] ([FGATX9_FGA_CODE_FK_PK], [FGA"& _ 
                "TX9_TEXTE]) VALUES (@FGATX9_FGA_CODE_FK_PK, @FGATX9_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX9_FGA_C"& _ 
                "ODE_FK_PK, FGATX9_TEXTE FROM THERIAQUE.FGATX9_FGA_TXRECOMMANDAT WHERE (FGATX9_FG"& _ 
                "A_CODE_FK_PK = @FGATX9_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX9_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX9_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX9_FGA_TXRECOMMANDAT] SET [FGATX9_FGA_CODE_FK_PK] = @FGAT"& _ 
                "X9_FGA_CODE_FK_PK, [FGATX9_TEXTE] = @FGATX9_TEXTE WHERE (([FGATX9_FGA_CODE_FK_PK"& _ 
                "] = @Original_FGATX9_FGA_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX9_FGA_CODE_FK_PK, FGATX9_TEX"& _ 
                "TE FROM THERIAQUE.FGATX9_FGA_TXRECOMMANDAT WHERE (FGATX9_FGA_CODE_FK_PK = @FGATX"& _ 
                "9_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX9_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX9_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX9_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX9_FGA_CODE_FK_PK, FGATX9_TEXTE FROM THERIAQUE.FGATX9_FGA_TXRECOMMANDA" & _
                "T"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX9_FGA_CODE_FK_PK, FGATX9_TEXTE FROM THERIAQUE.FGATX9_FGA_TXRECOMMANDA" & _
                "T" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX9_FGA_CODE_FK_PK = @FGATX9_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX9_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX9_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable, ByVal FGATX9_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX9_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX9_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX9_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX9_FGA_TXRECOMMANDATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX9_FGA_TXRECOMMANDAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX9_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX9_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX9_FGA_CODE_FK_PK As Integer, ByVal FGATX9_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX9_FGA_CODE_FK_PK, Integer)
            If (FGATX9_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX9_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX9_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX9_FGA_CODE_FK_PK As Integer, ByVal FGATX9_TEXTE As String, ByVal Original_FGATX9_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX9_FGA_CODE_FK_PK, Integer)
            If (FGATX9_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX9_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX9_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX9_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX9_TEXTE As String, ByVal Original_FGATX9_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX9_FGA_CODE_FK_PK, FGATX9_TEXTE, Original_FGATX9_FGA_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGARIFAP_RISQUEFEMMEENAGETableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGARIFAP_RISQUEFEMMEENAGE"
            tableMapping.ColumnMappings.Add("FGARIFAP_FGA_CODE_FK_PK", "FGARIFAP_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIFAP_CDF_RI_CODE_FK_PK", "FGARIFAP_CDF_RI_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIFAP_NUMORD", "FGARIFAP_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGARIFAP_RISQUEFEMMEENAGE] WHERE (([FGARIFAP_FGA_CODE_FK" & _
                "_PK] = @Original_FGARIFAP_FGA_CODE_FK_PK) AND ([FGARIFAP_CDF_RI_CODE_FK_PK] = @O" & _
                "riginal_FGARIFAP_CDF_RI_CODE_FK_PK) AND ((@IsNull_FGARIFAP_NUMORD = 1 AND [FGARI" & _
                "FAP_NUMORD] IS NULL) OR ([FGARIFAP_NUMORD] = @Original_FGARIFAP_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIFAP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGARIFAP_RISQUEFEMMEENAGE] ([FGARIFAP_FGA_CODE_FK_PK], [" & _
                "FGARIFAP_CDF_RI_CODE_FK_PK], [FGARIFAP_NUMORD]) VALUES (@FGARIFAP_FGA_CODE_FK_PK" & _
                ", @FGARIFAP_CDF_RI_CODE_FK_PK, @FGARIFAP_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGARIFAP_FGA_CODE_FK_P" & _
                "K, FGARIFAP_CDF_RI_CODE_FK_PK, FGARIFAP_NUMORD FROM THERIAQUE.FGARIFAP_RISQUEFEM" & _
                "MEENAGE WHERE (FGARIFAP_CDF_RI_CODE_FK_PK = @FGARIFAP_CDF_RI_CODE_FK_PK) AND (FG" & _
                "ARIFAP_FGA_CODE_FK_PK = @FGARIFAP_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGARIFAP_RISQUEFEMMEENAGE] SET [FGARIFAP_FGA_CODE_FK_PK] = @F" & _
                "GARIFAP_FGA_CODE_FK_PK, [FGARIFAP_CDF_RI_CODE_FK_PK] = @FGARIFAP_CDF_RI_CODE_FK_" & _
                "PK, [FGARIFAP_NUMORD] = @FGARIFAP_NUMORD WHERE (([FGARIFAP_FGA_CODE_FK_PK] = @Or" & _
                "iginal_FGARIFAP_FGA_CODE_FK_PK) AND ([FGARIFAP_CDF_RI_CODE_FK_PK] = @Original_FG" & _
                "ARIFAP_CDF_RI_CODE_FK_PK) AND ((@IsNull_FGARIFAP_NUMORD = 1 AND [FGARIFAP_NUMORD" & _
                "] IS NULL) OR ([FGARIFAP_NUMORD] = @Original_FGARIFAP_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGARIFA" & _
                "P_FGA_CODE_FK_PK, FGARIFAP_CDF_RI_CODE_FK_PK, FGARIFAP_NUMORD FROM THERIAQUE.FGA" & _
                "RIFAP_RISQUEFEMMEENAGE WHERE (FGARIFAP_CDF_RI_CODE_FK_PK = @FGARIFAP_CDF_RI_CODE" & _
                "_FK_PK) AND (FGARIFAP_FGA_CODE_FK_PK = @FGARIFAP_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIFAP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGARIFAP_FGA_CODE_FK_PK, FGARIFAP_CDF_RI_CODE_FK_PK, FGARIFAP_NUMORD FROM " & _
                "THERIAQUE.FGARIFAP_RISQUEFEMMEENAGE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGARIFAP_FGA_CODE_FK_PK, FGARIFAP_CDF_RI_CODE_FK_PK, FGARIFAP_NUMORD FROM " & _
                "THERIAQUE.FGARIFAP_RISQUEFEMMEENAGE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGARIFAP_FGA_CODE_FK_PK = @FGARIFAP_F" & _
                "GA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable, ByVal FGARIFAP_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIFAP_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGARIFAP_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIFAP_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIFAP_RISQUEFEMMEENAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGARIFAP_RISQUEFEMMEENAGE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIFAP_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGARIFAP_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIFAP_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIFAP_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGARIFAP_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIFAP_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGARIFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal FGARIFAP_CDF_RI_CODE_FK_PK As String, ByVal FGARIFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGARIFAP_FGA_CODE_FK_PK, Integer)
            If (FGARIFAP_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIFAP_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGARIFAP_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIFAP_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGARIFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal FGARIFAP_CDF_RI_CODE_FK_PK As String, ByVal FGARIFAP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIFAP_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGARIFAP_FGA_CODE_FK_PK, Integer)
            If (FGARIFAP_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIFAP_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGARIFAP_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIFAP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGARIFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGARIFAP_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIFAP_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIFAP_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGARIFAP_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIFAP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGARIFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIFAP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIFAP_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIFAP_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGARIFAP_FGA_CODE_FK_PK, Original_FGARIFAP_CDF_RI_CODE_FK_PK, FGARIFAP_NUMORD, Original_FGARIFAP_FGA_CODE_FK_PK, Original_FGARIFAP_CDF_RI_CODE_FK_PK, Original_FGARIFAP_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGACFAP_CATFEMMEENAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACFAP_CATFEMMEENAGE"
            tableMapping.ColumnMappings.Add("FGACFAP_FGA_CODE_FK_PK", "FGACFAP_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFAP_CDF_CAT_CODE_FK_PK", "FGACFAP_CDF_CAT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFAP_NUMORD", "FGACFAP_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACFAP_CATFEMMEENAGE] WHERE (([FGACFAP_FGA_CODE_FK_PK] "& _ 
                "= @Original_FGACFAP_FGA_CODE_FK_PK) AND ([FGACFAP_CDF_CAT_CODE_FK_PK] = @Origina"& _ 
                "l_FGACFAP_CDF_CAT_CODE_FK_PK) AND ((@IsNull_FGACFAP_NUMORD = 1 AND [FGACFAP_NUMO"& _ 
                "RD] IS NULL) OR ([FGACFAP_NUMORD] = @Original_FGACFAP_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFAP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACFAP_CATFEMMEENAGE] ([FGACFAP_FGA_CODE_FK_PK], [FGACF"& _ 
                "AP_CDF_CAT_CODE_FK_PK], [FGACFAP_NUMORD]) VALUES (@FGACFAP_FGA_CODE_FK_PK, @FGAC"& _ 
                "FAP_CDF_CAT_CODE_FK_PK, @FGACFAP_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACFAP_FGA_CODE_FK_PK, FGACFA"& _ 
                "P_CDF_CAT_CODE_FK_PK, FGACFAP_NUMORD FROM THERIAQUE.FGACFAP_CATFEMMEENAGE WHERE "& _ 
                "(FGACFAP_CDF_CAT_CODE_FK_PK = @FGACFAP_CDF_CAT_CODE_FK_PK) AND (FGACFAP_FGA_CODE"& _ 
                "_FK_PK = @FGACFAP_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACFAP_CATFEMMEENAGE] SET [FGACFAP_FGA_CODE_FK_PK] = @FGACFA"& _ 
                "P_FGA_CODE_FK_PK, [FGACFAP_CDF_CAT_CODE_FK_PK] = @FGACFAP_CDF_CAT_CODE_FK_PK, [F"& _ 
                "GACFAP_NUMORD] = @FGACFAP_NUMORD WHERE (([FGACFAP_FGA_CODE_FK_PK] = @Original_FG"& _ 
                "ACFAP_FGA_CODE_FK_PK) AND ([FGACFAP_CDF_CAT_CODE_FK_PK] = @Original_FGACFAP_CDF_"& _ 
                "CAT_CODE_FK_PK) AND ((@IsNull_FGACFAP_NUMORD = 1 AND [FGACFAP_NUMORD] IS NULL) O"& _ 
                "R ([FGACFAP_NUMORD] = @Original_FGACFAP_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGACFAP_FGA_CODE_FK_P"& _ 
                "K, FGACFAP_CDF_CAT_CODE_FK_PK, FGACFAP_NUMORD FROM THERIAQUE.FGACFAP_CATFEMMEENA"& _ 
                "GE WHERE (FGACFAP_CDF_CAT_CODE_FK_PK = @FGACFAP_CDF_CAT_CODE_FK_PK) AND (FGACFAP"& _ 
                "_FGA_CODE_FK_PK = @FGACFAP_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFAP_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFAP_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACFAP_FGA_CODE_FK_PK, FGACFAP_CDF_CAT_CODE_FK_PK, FGACFAP_NUMORD FROM TH" & _
                "ERIAQUE.FGACFAP_CATFEMMEENAGE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACFAP_FGA_CODE_FK_PK, FGACFAP_CDF_CAT_CODE_FK_PK, FGACFAP_NUMORD FROM TH" & _
                "ERIAQUE.FGACFAP_CATFEMMEENAGE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACFAP_FGA_CODE_FK_PK = @FGACFAP_FGA_CODE_" & _
                "FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFAP_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFAP_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable, ByVal FGACFAP_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFAP_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACFAP_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFAP_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFAP_CATFEMMEENAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACFAP_CATFEMMEENAGE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACFAP_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFAP_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACFAP_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFAP_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFAP_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACFAP_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACFAP_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACFAP_FGA_CODE_FK_PK As Integer, ByVal FGACFAP_CDF_CAT_CODE_FK_PK As String, ByVal FGACFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACFAP_FGA_CODE_FK_PK, Integer)
            If (FGACFAP_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFAP_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACFAP_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACFAP_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFAP_FGA_CODE_FK_PK As Integer, ByVal FGACFAP_CDF_CAT_CODE_FK_PK As String, ByVal FGACFAP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFAP_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFAP_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACFAP_FGA_CODE_FK_PK, Integer)
            If (FGACFAP_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFAP_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACFAP_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACFAP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACFAP_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFAP_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFAP_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACFAP_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACFAP_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACFAP_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFAP_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFAP_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFAP_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACFAP_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACFAP_FGA_CODE_FK_PK, Original_FGACFAP_CDF_CAT_CODE_FK_PK, FGACFAP_NUMORD, Original_FGACFAP_FGA_CODE_FK_PK, Original_FGACFAP_CDF_CAT_CODE_FK_PK, Original_FGACFAP_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGATX10_FGA_TXRECOMMANDATTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX10_FGA_TXRECOMMANDAT"
            tableMapping.ColumnMappings.Add("FGATX10_FGA_CODE_FK_PK", "FGATX10_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX10_TEXTE", "FGATX10_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX10_FGA_TXRECOMMANDAT] WHERE (([FGATX10_FGA_CODE_FK_" & _
                "PK] = @Original_FGATX10_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX10_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX10_FGA_TXRECOMMANDAT] ([FGATX10_FGA_CODE_FK_PK], [F" & _
                "GATX10_TEXTE]) VALUES (@FGATX10_FGA_CODE_FK_PK, @FGATX10_TEXTE);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX10" & _
                "_FGA_CODE_FK_PK, FGATX10_TEXTE FROM THERIAQUE.FGATX10_FGA_TXRECOMMANDAT WHERE (F" & _
                "GATX10_FGA_CODE_FK_PK = @FGATX10_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX10_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX10_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX10_FGA_TXRECOMMANDAT] SET [FGATX10_FGA_CODE_FK_PK] = @FG" & _
                "ATX10_FGA_CODE_FK_PK, [FGATX10_TEXTE] = @FGATX10_TEXTE WHERE (([FGATX10_FGA_CODE" & _
                "_FK_PK] = @Original_FGATX10_FGA_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGATX10_FGA_CODE_FK_PK, FG" & _
                "ATX10_TEXTE FROM THERIAQUE.FGATX10_FGA_TXRECOMMANDAT WHERE (FGATX10_FGA_CODE_FK_" & _
                "PK = @FGATX10_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX10_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX10_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_TEXTE", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX10_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX10_FGA_CODE_FK_PK, FGATX10_TEXTE FROM THERIAQUE.FGATX10_FGA_TXRECOMMA" & _
                "NDAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX10_FGA_CODE_FK_PK, FGATX10_TEXTE FROM THERIAQUE.FGATX10_FGA_TXRECOMMA" & _
                "NDAT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX10_FGA_CODE_FK_PK = @FGATX10_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX10_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX10_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable, ByVal FGATX10_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX10_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX10_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX10_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX10_FGA_TXRECOMMANDATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX10_FGA_TXRECOMMANDAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX10_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX10_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX10_FGA_CODE_FK_PK As Integer, ByVal FGATX10_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX10_FGA_CODE_FK_PK, Integer)
            If (FGATX10_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX10_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX10_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX10_FGA_CODE_FK_PK As Integer, ByVal FGATX10_TEXTE As String, ByVal Original_FGATX10_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX10_FGA_CODE_FK_PK, Integer)
            If (FGATX10_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX10_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX10_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX10_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX10_TEXTE As String, ByVal Original_FGATX10_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX10_FGA_CODE_FK_PK, FGATX10_TEXTE, Original_FGATX10_FGA_CODE_FK_PK)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGAON_OBSERVATION_NOUVEAUNETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGAON_OBSERVATION_NOUVEAUNE"
            tableMapping.ColumnMappings.Add("FGAON_FGA_CODE_FK_PK", "FGAON_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAON_CDF_OBS_CODE_FK_PK", "FGAON_CDF_OBS_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAON_NUMORD", "FGAON_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGAON_OBSERVATION_NOUVEAUNE] WHERE (([FGAON_FGA_CODE_FK_"& _ 
                "PK] = @Original_FGAON_FGA_CODE_FK_PK) AND ([FGAON_CDF_OBS_CODE_FK_PK] = @Origina"& _ 
                "l_FGAON_CDF_OBS_CODE_FK_PK) AND ((@IsNull_FGAON_NUMORD = 1 AND [FGAON_NUMORD] IS"& _ 
                " NULL) OR ([FGAON_NUMORD] = @Original_FGAON_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAON_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAON_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGAON_OBSERVATION_NOUVEAUNE] ([FGAON_FGA_CODE_FK_PK], [F"& _ 
                "GAON_CDF_OBS_CODE_FK_PK], [FGAON_NUMORD]) VALUES (@FGAON_FGA_CODE_FK_PK, @FGAON_"& _ 
                "CDF_OBS_CODE_FK_PK, @FGAON_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGAON_FGA_CODE_FK_PK, FGAON_CDF_OBS_"& _ 
                "CODE_FK_PK, FGAON_NUMORD FROM THERIAQUE.FGAON_OBSERVATION_NOUVEAUNE WHERE (FGAON"& _ 
                "_CDF_OBS_CODE_FK_PK = @FGAON_CDF_OBS_CODE_FK_PK) AND (FGAON_FGA_CODE_FK_PK = @FG"& _ 
                "AON_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGAON_OBSERVATION_NOUVEAUNE] SET [FGAON_FGA_CODE_FK_PK] = @FG"& _ 
                "AON_FGA_CODE_FK_PK, [FGAON_CDF_OBS_CODE_FK_PK] = @FGAON_CDF_OBS_CODE_FK_PK, [FGA"& _ 
                "ON_NUMORD] = @FGAON_NUMORD WHERE (([FGAON_FGA_CODE_FK_PK] = @Original_FGAON_FGA_"& _ 
                "CODE_FK_PK) AND ([FGAON_CDF_OBS_CODE_FK_PK] = @Original_FGAON_CDF_OBS_CODE_FK_PK"& _ 
                ") AND ((@IsNull_FGAON_NUMORD = 1 AND [FGAON_NUMORD] IS NULL) OR ([FGAON_NUMORD] "& _ 
                "= @Original_FGAON_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGAON_FGA_CODE_FK_PK, FGAON_CDF_OBS_CODE_FK"& _ 
                "_PK, FGAON_NUMORD FROM THERIAQUE.FGAON_OBSERVATION_NOUVEAUNE WHERE (FGAON_CDF_OB"& _ 
                "S_CODE_FK_PK = @FGAON_CDF_OBS_CODE_FK_PK) AND (FGAON_FGA_CODE_FK_PK = @FGAON_FGA"& _ 
                "_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_NUMORD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAON_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_CDF_OBS_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGAON_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_NUMORD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAON_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_NUMORD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGAON_FGA_CODE_FK_PK, FGAON_CDF_OBS_CODE_FK_PK, FGAON_NUMORD FROM THERIAQU" & _
                "E.FGAON_OBSERVATION_NOUVEAUNE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGAON_FGA_CODE_FK_PK, FGAON_CDF_OBS_CODE_FK_PK, FGAON_NUMORD FROM THERIAQU" & _
                "E.FGAON_OBSERVATION_NOUVEAUNE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGAON_FGA_CODE_FK_PK = @FGAON_FGA_CODE_FK_P" & _
                "K"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAON_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAON_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable = New dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable, ByVal FGAON_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAON_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGAON_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAON_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable = New dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAON_OBSERVATION_NOUVEAUNEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGAON_OBSERVATION_NOUVEAUNE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGAON_FGA_CODE_FK_PK As Integer, ByVal Original_FGAON_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGAON_FGA_CODE_FK_PK, Integer)
            If (Original_FGAON_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAON_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGAON_CDF_OBS_CODE_FK_PK, String)
            End If
            If (Original_FGAON_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGAON_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGAON_FGA_CODE_FK_PK As Integer, ByVal FGAON_CDF_OBS_CODE_FK_PK As String, ByVal FGAON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGAON_FGA_CODE_FK_PK, Integer)
            If (FGAON_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAON_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGAON_CDF_OBS_CODE_FK_PK, String)
            End If
            If (FGAON_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGAON_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAON_FGA_CODE_FK_PK As Integer, ByVal FGAON_CDF_OBS_CODE_FK_PK As String, ByVal FGAON_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAON_FGA_CODE_FK_PK As Integer, ByVal Original_FGAON_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGAON_FGA_CODE_FK_PK, Integer)
            If (FGAON_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAON_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGAON_CDF_OBS_CODE_FK_PK, String)
            End If
            If (FGAON_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGAON_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGAON_FGA_CODE_FK_PK, Integer)
            If (Original_FGAON_CDF_OBS_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAON_CDF_OBS_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGAON_CDF_OBS_CODE_FK_PK, String)
            End If
            If (Original_FGAON_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGAON_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAON_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGAON_FGA_CODE_FK_PK As Integer, ByVal Original_FGAON_CDF_OBS_CODE_FK_PK As String, ByVal Original_FGAON_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGAON_FGA_CODE_FK_PK, Original_FGAON_CDF_OBS_CODE_FK_PK, FGAON_NUMORD, Original_FGAON_FGA_CODE_FK_PK, Original_FGAON_CDF_OBS_CODE_FK_PK, Original_FGAON_NUMORD)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGACFN_CIRCONSFAVORIS_NOUVEAUNTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACFN_CIRCONSFAVORIS_NOUVEAUN"
            tableMapping.ColumnMappings.Add("FGACFN_FGA_CODE_FK_PK", "FGACFN_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFN_CDF_CF_CODE_FK_PK", "FGACFN_CDF_CF_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACFN_NUMORD", "FGACFN_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACFN_CIRCONSFAVORIS_NOUVEAUN] WHERE (([FGACFN_FGA_CODE" & _
                "_FK_PK] = @Original_FGACFN_FGA_CODE_FK_PK) AND ([FGACFN_CDF_CF_CODE_FK_PK] = @Or" & _
                "iginal_FGACFN_CDF_CF_CODE_FK_PK) AND ((@IsNull_FGACFN_NUMORD = 1 AND [FGACFN_NUM" & _
                "ORD] IS NULL) OR ([FGACFN_NUMORD] = @Original_FGACFN_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFN_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACFN_CIRCONSFAVORIS_NOUVEAUN] ([FGACFN_FGA_CODE_FK_PK]" & _
                ", [FGACFN_CDF_CF_CODE_FK_PK], [FGACFN_NUMORD]) VALUES (@FGACFN_FGA_CODE_FK_PK, @" & _
                "FGACFN_CDF_CF_CODE_FK_PK, @FGACFN_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACFN_FGA_CODE_FK_PK, FGACFN" & _
                "_CDF_CF_CODE_FK_PK, FGACFN_NUMORD FROM THERIAQUE.FGACFN_CIRCONSFAVORIS_NOUVEAUN " & _
                "WHERE (FGACFN_CDF_CF_CODE_FK_PK = @FGACFN_CDF_CF_CODE_FK_PK) AND (FGACFN_FGA_COD" & _
                "E_FK_PK = @FGACFN_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACFN_CIRCONSFAVORIS_NOUVEAUN] SET [FGACFN_FGA_CODE_FK_PK] =" & _
                " @FGACFN_FGA_CODE_FK_PK, [FGACFN_CDF_CF_CODE_FK_PK] = @FGACFN_CDF_CF_CODE_FK_PK," & _
                " [FGACFN_NUMORD] = @FGACFN_NUMORD WHERE (([FGACFN_FGA_CODE_FK_PK] = @Original_FG" & _
                "ACFN_FGA_CODE_FK_PK) AND ([FGACFN_CDF_CF_CODE_FK_PK] = @Original_FGACFN_CDF_CF_C" & _
                "ODE_FK_PK) AND ((@IsNull_FGACFN_NUMORD = 1 AND [FGACFN_NUMORD] IS NULL) OR ([FGA" & _
                "CFN_NUMORD] = @Original_FGACFN_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACFN_FGA_CODE_FK_PK, FGACFN_" & _
                "CDF_CF_CODE_FK_PK, FGACFN_NUMORD FROM THERIAQUE.FGACFN_CIRCONSFAVORIS_NOUVEAUN W" & _
                "HERE (FGACFN_CDF_CF_CODE_FK_PK = @FGACFN_CDF_CF_CODE_FK_PK) AND (FGACFN_FGA_CODE" & _
                "_FK_PK = @FGACFN_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_CDF_CF_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACFN_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACFN_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACFN_FGA_CODE_FK_PK, FGACFN_CDF_CF_CODE_FK_PK, FGACFN_NUMORD FROM THERIA" & _
                "QUE.FGACFN_CIRCONSFAVORIS_NOUVEAUN"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACFN_FGA_CODE_FK_PK, FGACFN_CDF_CF_CODE_FK_PK, FGACFN_NUMORD FROM THERIA" & _
                "QUE.FGACFN_CIRCONSFAVORIS_NOUVEAUN" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACFN_FGA_CODE_FK_PK = @FGACFN_FGA_CO" & _
                "DE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACFN_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACFN_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable, ByVal FGACFN_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFN_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACFN_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACFN_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable = New dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACFN_CIRCONSFAVORIS_NOUVEAUNDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACFN_CIRCONSFAVORIS_NOUVEAUN")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACFN_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFN_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACFN_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFN_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFN_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACFN_CDF_CF_CODE_FK_PK, String)
            End If
            If (Original_FGACFN_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACFN_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACFN_FGA_CODE_FK_PK As Integer, ByVal FGACFN_CDF_CF_CODE_FK_PK As String, ByVal FGACFN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACFN_FGA_CODE_FK_PK, Integer)
            If (FGACFN_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFN_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACFN_CDF_CF_CODE_FK_PK, String)
            End If
            If (FGACFN_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACFN_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFN_FGA_CODE_FK_PK As Integer, ByVal FGACFN_CDF_CF_CODE_FK_PK As String, ByVal FGACFN_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFN_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFN_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACFN_FGA_CODE_FK_PK, Integer)
            If (FGACFN_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACFN_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACFN_CDF_CF_CODE_FK_PK, String)
            End If
            If (FGACFN_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACFN_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACFN_FGA_CODE_FK_PK, Integer)
            If (Original_FGACFN_CDF_CF_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACFN_CDF_CF_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACFN_CDF_CF_CODE_FK_PK, String)
            End If
            If (Original_FGACFN_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACFN_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACFN_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACFN_FGA_CODE_FK_PK As Integer, ByVal Original_FGACFN_CDF_CF_CODE_FK_PK As String, ByVal Original_FGACFN_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACFN_FGA_CODE_FK_PK, Original_FGACFN_CDF_CF_CODE_FK_PK, FGACFN_NUMORD, Original_FGACFN_FGA_CODE_FK_PK, Original_FGACFN_CDF_CF_CODE_FK_PK, Original_FGACFN_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGATX2_FGA_TXOBSERVNOUVNETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX2_FGA_TXOBSERVNOUVNE"
            tableMapping.ColumnMappings.Add("FGATX2_FGA_CODE_FK_PK", "FGATX2_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX2_TEXTE", "FGATX2_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX2_FGA_TXOBSERVNOUVNE] WHERE (([FGATX2_FGA_CODE_FK_P"& _ 
                "K] = @Original_FGATX2_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX2_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX2_FGA_TXOBSERVNOUVNE] ([FGATX2_FGA_CODE_FK_PK], [FG"& _ 
                "ATX2_TEXTE]) VALUES (@FGATX2_FGA_CODE_FK_PK, @FGATX2_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX2_FGA_"& _ 
                "CODE_FK_PK, FGATX2_TEXTE FROM THERIAQUE.FGATX2_FGA_TXOBSERVNOUVNE WHERE (FGATX2_"& _ 
                "FGA_CODE_FK_PK = @FGATX2_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX2_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX2_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX2_FGA_TXOBSERVNOUVNE] SET [FGATX2_FGA_CODE_FK_PK] = @FGA"& _ 
                "TX2_FGA_CODE_FK_PK, [FGATX2_TEXTE] = @FGATX2_TEXTE WHERE (([FGATX2_FGA_CODE_FK_P"& _ 
                "K] = @Original_FGATX2_FGA_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX2_FGA_CODE_FK_PK, FGATX2_TE"& _ 
                "XTE FROM THERIAQUE.FGATX2_FGA_TXOBSERVNOUVNE WHERE (FGATX2_FGA_CODE_FK_PK = @FGA"& _ 
                "TX2_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX2_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX2_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX2_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX2_FGA_CODE_FK_PK, FGATX2_TEXTE FROM THERIAQUE.FGATX2_FGA_TXOBSERVNOUV" & _
                "NE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX2_FGA_CODE_FK_PK, FGATX2_TEXTE FROM THERIAQUE.FGATX2_FGA_TXOBSERVNOUV" & _
                "NE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX2_FGA_CODE_FK_PK = @FGATX2_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX2_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX2_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable, ByVal FGATX2_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX2_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX2_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX2_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX2_FGA_TXOBSERVNOUVNEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX2_FGA_TXOBSERVNOUVNE")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX2_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX2_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX2_FGA_CODE_FK_PK As Integer, ByVal FGATX2_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX2_FGA_CODE_FK_PK, Integer)
            If (FGATX2_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX2_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX2_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX2_FGA_CODE_FK_PK As Integer, ByVal FGATX2_TEXTE As String, ByVal Original_FGATX2_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX2_FGA_CODE_FK_PK, Integer)
            If (FGATX2_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX2_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX2_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX2_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX2_TEXTE As String, ByVal Original_FGATX2_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX2_FGA_CODE_FK_PK, FGATX2_TEXTE, Original_FGATX2_FGA_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGARIL_RISQUE_ALLAITEMENTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGARIL_RISQUE_ALLAITEMENT"
            tableMapping.ColumnMappings.Add("FGARIL_FGA_CODE_FK_PK", "FGARIL_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIL_CDF_RI_CODE_FK_PK", "FGARIL_CDF_RI_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGARIL_NUMORD", "FGARIL_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGARIL_RISQUE_ALLAITEMENT] WHERE (([FGARIL_FGA_CODE_FK_P" & _
                "K] = @Original_FGARIL_FGA_CODE_FK_PK) AND ([FGARIL_CDF_RI_CODE_FK_PK] = @Origina" & _
                "l_FGARIL_CDF_RI_CODE_FK_PK) AND ((@IsNull_FGARIL_NUMORD = 1 AND [FGARIL_NUMORD] " & _
                "IS NULL) OR ([FGARIL_NUMORD] = @Original_FGARIL_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIL_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIL_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIL_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGARIL_RISQUE_ALLAITEMENT] ([FGARIL_FGA_CODE_FK_PK], [FG" & _
                "ARIL_CDF_RI_CODE_FK_PK], [FGARIL_NUMORD]) VALUES (@FGARIL_FGA_CODE_FK_PK, @FGARI" & _
                "L_CDF_RI_CODE_FK_PK, @FGARIL_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGARIL_FGA_CODE_FK_PK, FGARIL_CDF_" & _
                "RI_CODE_FK_PK, FGARIL_NUMORD FROM THERIAQUE.FGARIL_RISQUE_ALLAITEMENT WHERE (FGA" & _
                "RIL_CDF_RI_CODE_FK_PK = @FGARIL_CDF_RI_CODE_FK_PK) AND (FGARIL_FGA_CODE_FK_PK = " & _
                "@FGARIL_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGARIL_RISQUE_ALLAITEMENT] SET [FGARIL_FGA_CODE_FK_PK] = @FGA" & _
                "RIL_FGA_CODE_FK_PK, [FGARIL_CDF_RI_CODE_FK_PK] = @FGARIL_CDF_RI_CODE_FK_PK, [FGA" & _
                "RIL_NUMORD] = @FGARIL_NUMORD WHERE (([FGARIL_FGA_CODE_FK_PK] = @Original_FGARIL_" & _
                "FGA_CODE_FK_PK) AND ([FGARIL_CDF_RI_CODE_FK_PK] = @Original_FGARIL_CDF_RI_CODE_F" & _
                "K_PK) AND ((@IsNull_FGARIL_NUMORD = 1 AND [FGARIL_NUMORD] IS NULL) OR ([FGARIL_N" & _
                "UMORD] = @Original_FGARIL_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGARIL_FGA_CODE_FK_PK, FGARIL_CDF_R" & _
                "I_CODE_FK_PK, FGARIL_NUMORD FROM THERIAQUE.FGARIL_RISQUE_ALLAITEMENT WHERE (FGAR" & _
                "IL_CDF_RI_CODE_FK_PK = @FGARIL_CDF_RI_CODE_FK_PK) AND (FGARIL_FGA_CODE_FK_PK = @" & _
                "FGARIL_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIL_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_CDF_RI_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGARIL_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGARIL_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGARIL_FGA_CODE_FK_PK, FGARIL_CDF_RI_CODE_FK_PK, FGARIL_NUMORD FROM THERIA" & _
                "QUE.FGARIL_RISQUE_ALLAITEMENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGARIL_FGA_CODE_FK_PK, FGARIL_CDF_RI_CODE_FK_PK, FGARIL_NUMORD FROM THERIA" & _
                "QUE.FGARIL_RISQUE_ALLAITEMENT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGARIL_FGA_CODE_FK_PK = @FGARIL_FGA_CODE_FK" & _
                "_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGARIL_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGARIL_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable, ByVal FGARIL_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIL_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGARIL_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGARIL_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable = New dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGARIL_RISQUE_ALLAITEMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGARIL_RISQUE_ALLAITEMENT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGARIL_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIL_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIL_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGARIL_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIL_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIL_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGARIL_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIL_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGARIL_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGARIL_FGA_CODE_FK_PK As Integer, ByVal FGARIL_CDF_RI_CODE_FK_PK As String, ByVal FGARIL_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGARIL_FGA_CODE_FK_PK, Integer)
            If (FGARIL_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIL_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGARIL_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIL_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGARIL_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIL_FGA_CODE_FK_PK As Integer, ByVal FGARIL_CDF_RI_CODE_FK_PK As String, ByVal FGARIL_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIL_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIL_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIL_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGARIL_FGA_CODE_FK_PK, Integer)
            If (FGARIL_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGARIL_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGARIL_CDF_RI_CODE_FK_PK, String)
            End If
            If (FGARIL_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGARIL_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGARIL_FGA_CODE_FK_PK, Integer)
            If (Original_FGARIL_CDF_RI_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGARIL_CDF_RI_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGARIL_CDF_RI_CODE_FK_PK, String)
            End If
            If (Original_FGARIL_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGARIL_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGARIL_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGARIL_FGA_CODE_FK_PK As Integer, ByVal Original_FGARIL_CDF_RI_CODE_FK_PK As String, ByVal Original_FGARIL_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGARIL_FGA_CODE_FK_PK, Original_FGARIL_CDF_RI_CODE_FK_PK, FGARIL_NUMORD, Original_FGARIL_FGA_CODE_FK_PK, Original_FGARIL_CDF_RI_CODE_FK_PK, Original_FGARIL_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGATX8_FGA_TXRECOMMANDATTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX8_FGA_TXRECOMMANDAT"
            tableMapping.ColumnMappings.Add("FGATX8_FGA_CODE_FK_PK", "FGATX8_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX8_TEXTE", "FGATX8_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX8_FGA_TXRECOMMANDAT] WHERE (([FGATX8_FGA_CODE_FK_PK"& _ 
                "] = @Original_FGATX8_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX8_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX8_FGA_TXRECOMMANDAT] ([FGATX8_FGA_CODE_FK_PK], [FGA"& _ 
                "TX8_TEXTE]) VALUES (@FGATX8_FGA_CODE_FK_PK, @FGATX8_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX8_FGA_C"& _ 
                "ODE_FK_PK, FGATX8_TEXTE FROM THERIAQUE.FGATX8_FGA_TXRECOMMANDAT WHERE (FGATX8_FG"& _ 
                "A_CODE_FK_PK = @FGATX8_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX8_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX8_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX8_FGA_TXRECOMMANDAT] SET [FGATX8_FGA_CODE_FK_PK] = @FGAT"& _ 
                "X8_FGA_CODE_FK_PK, [FGATX8_TEXTE] = @FGATX8_TEXTE WHERE (([FGATX8_FGA_CODE_FK_PK"& _ 
                "] = @Original_FGATX8_FGA_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX8_FGA_CODE_FK_PK, FGATX8_TEX"& _ 
                "TE FROM THERIAQUE.FGATX8_FGA_TXRECOMMANDAT WHERE (FGATX8_FGA_CODE_FK_PK = @FGATX"& _ 
                "8_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX8_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX8_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX8_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX8_FGA_CODE_FK_PK, FGATX8_TEXTE FROM THERIAQUE.FGATX8_FGA_TXRECOMMANDA" & _
                "T"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX8_FGA_CODE_FK_PK, FGATX8_TEXTE FROM THERIAQUE.FGATX8_FGA_TXRECOMMANDA" & _
                "T" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX8_FGA_CODE_FK_PK = @FGATX8_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX8_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX8_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable, ByVal FGATX8_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX8_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX8_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX8_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable = New dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX8_FGA_TXRECOMMANDATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX8_FGA_TXRECOMMANDAT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX8_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX8_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX8_FGA_CODE_FK_PK As Integer, ByVal FGATX8_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX8_FGA_CODE_FK_PK, Integer)
            If (FGATX8_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX8_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX8_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX8_FGA_CODE_FK_PK As Integer, ByVal FGATX8_TEXTE As String, ByVal Original_FGATX8_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX8_FGA_CODE_FK_PK, Integer)
            If (FGATX8_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX8_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX8_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX8_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX8_TEXTE As String, ByVal Original_FGATX8_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX8_FGA_CODE_FK_PK, FGATX8_TEXTE, Original_FGATX8_FGA_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGACA_CATALLAITEMENTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGACA_CATALLAITEMENT"
            tableMapping.ColumnMappings.Add("FGACA_FGA_CODE_FK_PK", "FGACA_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACA_CDF_CAT_CODE_FK_PK", "FGACA_CDF_CAT_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGACA_NUMORD", "FGACA_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGACA_CATALLAITEMENT] WHERE (([FGACA_FGA_CODE_FK_PK] = @" & _
                "Original_FGACA_FGA_CODE_FK_PK) AND ([FGACA_CDF_CAT_CODE_FK_PK] = @Original_FGACA" & _
                "_CDF_CAT_CODE_FK_PK) AND ((@IsNull_FGACA_NUMORD = 1 AND [FGACA_NUMORD] IS NULL) " & _
                "OR ([FGACA_NUMORD] = @Original_FGACA_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGACA_CATALLAITEMENT] ([FGACA_FGA_CODE_FK_PK], [FGACA_CD" & _
                "F_CAT_CODE_FK_PK], [FGACA_NUMORD]) VALUES (@FGACA_FGA_CODE_FK_PK, @FGACA_CDF_CAT" & _
                "_CODE_FK_PK, @FGACA_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACA_FGA_CODE_FK_PK, FGACA_CDF_CAT_CODE_FK" & _
                "_PK, FGACA_NUMORD FROM THERIAQUE.FGACA_CATALLAITEMENT WHERE (FGACA_CDF_CAT_CODE_" & _
                "FK_PK = @FGACA_CDF_CAT_CODE_FK_PK) AND (FGACA_FGA_CODE_FK_PK = @FGACA_FGA_CODE_F" & _
                "K_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGACA_CATALLAITEMENT] SET [FGACA_FGA_CODE_FK_PK] = @FGACA_FGA" & _
                "_CODE_FK_PK, [FGACA_CDF_CAT_CODE_FK_PK] = @FGACA_CDF_CAT_CODE_FK_PK, [FGACA_NUMO" & _
                "RD] = @FGACA_NUMORD WHERE (([FGACA_FGA_CODE_FK_PK] = @Original_FGACA_FGA_CODE_FK" & _
                "_PK) AND ([FGACA_CDF_CAT_CODE_FK_PK] = @Original_FGACA_CDF_CAT_CODE_FK_PK) AND (" & _
                "(@IsNull_FGACA_NUMORD = 1 AND [FGACA_NUMORD] IS NULL) OR ([FGACA_NUMORD] = @Orig" & _
                "inal_FGACA_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGACA_FGA_CODE_FK_PK, FGACA_CDF_CAT_CODE_FK_PK, FG" & _
                "ACA_NUMORD FROM THERIAQUE.FGACA_CATALLAITEMENT WHERE (FGACA_CDF_CAT_CODE_FK_PK =" & _
                " @FGACA_CDF_CAT_CODE_FK_PK) AND (FGACA_FGA_CODE_FK_PK = @FGACA_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_NUMORD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_CDF_CAT_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FGACA_NUMORD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_NUMORD", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGACA_NUMORD", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_NUMORD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGACA_FGA_CODE_FK_PK, FGACA_CDF_CAT_CODE_FK_PK, FGACA_NUMORD FROM THERIAQU" & _
                "E.FGACA_CATALLAITEMENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGACA_FGA_CODE_FK_PK, FGACA_CDF_CAT_CODE_FK_PK, FGACA_NUMORD FROM THERIAQU" & _
                "E.FGACA_CATALLAITEMENT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGACA_FGA_CODE_FK_PK = @FGACA_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGACA_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGACA_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable = New dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable, ByVal FGACA_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACA_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGACA_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGACA_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable = New dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGACA_CATALLAITEMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGACA_CATALLAITEMENT")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGACA_FGA_CODE_FK_PK As Integer, ByVal Original_FGACA_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGACA_FGA_CODE_FK_PK, Integer)
            If (Original_FGACA_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACA_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGACA_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACA_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGACA_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGACA_FGA_CODE_FK_PK As Integer, ByVal FGACA_CDF_CAT_CODE_FK_PK As String, ByVal FGACA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGACA_FGA_CODE_FK_PK, Integer)
            If (FGACA_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACA_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGACA_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACA_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGACA_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACA_FGA_CODE_FK_PK As Integer, ByVal FGACA_CDF_CAT_CODE_FK_PK As String, ByVal FGACA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACA_FGA_CODE_FK_PK As Integer, ByVal Original_FGACA_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGACA_FGA_CODE_FK_PK, Integer)
            If (FGACA_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGACA_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGACA_CDF_CAT_CODE_FK_PK, String)
            End If
            If (FGACA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGACA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_FGACA_FGA_CODE_FK_PK, Integer)
            If (Original_FGACA_CDF_CAT_CODE_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGACA_CDF_CAT_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FGACA_CDF_CAT_CODE_FK_PK, String)
            End If
            If (Original_FGACA_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGACA_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGACA_NUMORD As Global.System.Nullable(Of Short), ByVal Original_FGACA_FGA_CODE_FK_PK As Integer, ByVal Original_FGACA_CDF_CAT_CODE_FK_PK As String, ByVal Original_FGACA_NUMORD As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FGACA_FGA_CODE_FK_PK, Original_FGACA_CDF_CAT_CODE_FK_PK, FGACA_NUMORD, Original_FGACA_FGA_CODE_FK_PK, Original_FGACA_CDF_CAT_CODE_FK_PK, Original_FGACA_NUMORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FGATX6_FGA_TXCONDATENIRCATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGATX6_FGA_TXCONDATENIRCA"
            tableMapping.ColumnMappings.Add("FGATX6_FGA_CODE_FK_PK", "FGATX6_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGATX6_TEXTE", "FGATX6_TEXTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGATX6_FGA_TXCONDATENIRCA] WHERE (([FGATX6_FGA_CODE_FK_P"& _ 
                "K] = @Original_FGATX6_FGA_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX6_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGATX6_FGA_TXCONDATENIRCA] ([FGATX6_FGA_CODE_FK_PK], [FG"& _ 
                "ATX6_TEXTE]) VALUES (@FGATX6_FGA_CODE_FK_PK, @FGATX6_TEXTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX6_FGA_"& _ 
                "CODE_FK_PK, FGATX6_TEXTE FROM THERIAQUE.FGATX6_FGA_TXCONDATENIRCA WHERE (FGATX6_"& _ 
                "FGA_CODE_FK_PK = @FGATX6_FGA_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX6_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX6_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGATX6_FGA_TXCONDATENIRCA] SET [FGATX6_FGA_CODE_FK_PK] = @FGA"& _ 
                "TX6_FGA_CODE_FK_PK, [FGATX6_TEXTE] = @FGATX6_TEXTE WHERE (([FGATX6_FGA_CODE_FK_P"& _ 
                "K] = @Original_FGATX6_FGA_CODE_FK_PK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FGATX6_FGA_CODE_FK_PK, FGATX6_TE"& _ 
                "XTE FROM THERIAQUE.FGATX6_FGA_TXCONDATENIRCA WHERE (FGATX6_FGA_CODE_FK_PK = @FGA"& _ 
                "TX6_FGA_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX6_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX6_TEXTE", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_TEXTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGATX6_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGATX6_FGA_CODE_FK_PK, FGATX6_TEXTE FROM THERIAQUE.FGATX6_FGA_TXCONDATENIR" & _
                "CA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGATX6_FGA_CODE_FK_PK, FGATX6_TEXTE FROM THERIAQUE.FGATX6_FGA_TXCONDATENIR" & _
                "CA" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGATX6_FGA_CODE_FK_PK = @FGATX6_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGATX6_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGATX6_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable = New dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable, ByVal FGATX6_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX6_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGATX6_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGATX6_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable = New dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGATX6_FGA_TXCONDATENIRCADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGATX6_FGA_TXCONDATENIRCA")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGATX6_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGATX6_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGATX6_FGA_CODE_FK_PK As Integer, ByVal FGATX6_TEXTE As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGATX6_FGA_CODE_FK_PK, Integer)
            If (FGATX6_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX6_TEXTE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGATX6_TEXTE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX6_FGA_CODE_FK_PK As Integer, ByVal FGATX6_TEXTE As String, ByVal Original_FGATX6_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGATX6_FGA_CODE_FK_PK, Integer)
            If (FGATX6_TEXTE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGATX6_TEXTE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGATX6_TEXTE, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FGATX6_FGA_CODE_FK_PK, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGATX6_TEXTE As String, ByVal Original_FGATX6_FGA_CODE_FK_PK As Integer) As Integer
            Return Me.Update(Original_FGATX6_FGA_CODE_FK_PK, FGATX6_TEXTE, Original_FGATX6_FGA_CODE_FK_PK)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FGAAFS_FGA_AFSSAPSTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FGAAFS_FGA_AFSSAPS"
            tableMapping.ColumnMappings.Add("FGAAFS_FGA_CODE_FK_PK", "FGAAFS_FGA_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAAFS_SP_CODE_FK_PK", "FGAAFS_SP_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("FGAAFS_DATE_PK", "FGAAFS_DATE_PK")
            tableMapping.ColumnMappings.Add("FGAAFS_TYPEGRAL_PK", "FGAAFS_TYPEGRAL_PK")
            tableMapping.ColumnMappings.Add("FGAAFS_CDF_DOCUMENT_FK_PK", "FGAAFS_CDF_DOCUMENT_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[FGAAFS_FGA_AFSSAPS] WHERE (([FGAAFS_FGA_CODE_FK_PK] = @O" & _
                "riginal_FGAAFS_FGA_CODE_FK_PK) AND ([FGAAFS_SP_CODE_FK_PK] = @Original_FGAAFS_SP" & _
                "_CODE_FK_PK) AND ([FGAAFS_DATE_PK] = @Original_FGAAFS_DATE_PK) AND ([FGAAFS_TYPE" & _
                "GRAL_PK] = @Original_FGAAFS_TYPEGRAL_PK) AND ([FGAAFS_CDF_DOCUMENT_FK_PK] = @Ori" & _
                "ginal_FGAAFS_CDF_DOCUMENT_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_TYPEGRAL_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_TYPEGRAL_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[FGAAFS_FGA_AFSSAPS] ([FGAAFS_FGA_CODE_FK_PK], [FGAAFS_SP" & _
                "_CODE_FK_PK], [FGAAFS_DATE_PK], [FGAAFS_TYPEGRAL_PK], [FGAAFS_CDF_DOCUMENT_FK_PK" & _
                "]) VALUES (@FGAAFS_FGA_CODE_FK_PK, @FGAAFS_SP_CODE_FK_PK, @FGAAFS_DATE_PK, @FGAA" & _
                "FS_TYPEGRAL_PK, @FGAAFS_CDF_DOCUMENT_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAAFS_FGA_CODE_FK_PK, FGAA" & _
                "FS_SP_CODE_FK_PK, FGAAFS_DATE_PK, FGAAFS_TYPEGRAL_PK, FGAAFS_CDF_DOCUMENT_FK_PK " & _
                "FROM THERIAQUE.FGAAFS_FGA_AFSSAPS WHERE (FGAAFS_CDF_DOCUMENT_FK_PK = @FGAAFS_CDF" & _
                "_DOCUMENT_FK_PK) AND (FGAAFS_DATE_PK = @FGAAFS_DATE_PK) AND (FGAAFS_FGA_CODE_FK_" & _
                "PK = @FGAAFS_FGA_CODE_FK_PK) AND (FGAAFS_SP_CODE_FK_PK = @FGAAFS_SP_CODE_FK_PK) " & _
                "AND (FGAAFS_TYPEGRAL_PK = @FGAAFS_TYPEGRAL_PK)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_TYPEGRAL_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_TYPEGRAL_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[FGAAFS_FGA_AFSSAPS] SET [FGAAFS_FGA_CODE_FK_PK] = @FGAAFS_FGA" & _
                "_CODE_FK_PK, [FGAAFS_SP_CODE_FK_PK] = @FGAAFS_SP_CODE_FK_PK, [FGAAFS_DATE_PK] = " & _
                "@FGAAFS_DATE_PK, [FGAAFS_TYPEGRAL_PK] = @FGAAFS_TYPEGRAL_PK, [FGAAFS_CDF_DOCUMEN" & _
                "T_FK_PK] = @FGAAFS_CDF_DOCUMENT_FK_PK WHERE (([FGAAFS_FGA_CODE_FK_PK] = @Origina" & _
                "l_FGAAFS_FGA_CODE_FK_PK) AND ([FGAAFS_SP_CODE_FK_PK] = @Original_FGAAFS_SP_CODE_" & _
                "FK_PK) AND ([FGAAFS_DATE_PK] = @Original_FGAAFS_DATE_PK) AND ([FGAAFS_TYPEGRAL_P" & _
                "K] = @Original_FGAAFS_TYPEGRAL_PK) AND ([FGAAFS_CDF_DOCUMENT_FK_PK] = @Original_" & _
                "FGAAFS_CDF_DOCUMENT_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT FGAAFS_FGA_CODE_FK_PK, FGAAFS_SP_CODE_FK_PK" & _
                ", FGAAFS_DATE_PK, FGAAFS_TYPEGRAL_PK, FGAAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.F" & _
                "GAAFS_FGA_AFSSAPS WHERE (FGAAFS_CDF_DOCUMENT_FK_PK = @FGAAFS_CDF_DOCUMENT_FK_PK)" & _
                " AND (FGAAFS_DATE_PK = @FGAAFS_DATE_PK) AND (FGAAFS_FGA_CODE_FK_PK = @FGAAFS_FGA" & _
                "_CODE_FK_PK) AND (FGAAFS_SP_CODE_FK_PK = @FGAAFS_SP_CODE_FK_PK) AND (FGAAFS_TYPE" & _
                "GRAL_PK = @FGAAFS_TYPEGRAL_PK)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_DATE_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_TYPEGRAL_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_TYPEGRAL_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_SP_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_SP_CODE_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_DATE_PK", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_DATE_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_TYPEGRAL_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_TYPEGRAL_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_CDF_DOCUMENT_FK_PK", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FGAAFS_FGA_CODE_FK_PK, FGAAFS_SP_CODE_FK_PK, FGAAFS_DATE_PK, FGAAFS_TYPEGR" & _
                "AL_PK, FGAAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FGAAFS_FGA_AFSSAPS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT FGAAFS_FGA_CODE_FK_PK, FGAAFS_SP_CODE_FK_PK, FGAAFS_DATE_PK, FGAAFS_TYPEGR" & _
                "AL_PK, FGAAFS_CDF_DOCUMENT_FK_PK FROM THERIAQUE.FGAAFS_FGA_AFSSAPS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE FGAAFS" & _
                "_FGA_CODE_FK_PK = @FGAAFS_FGA_CODE_FK_PK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FGAAFS_FGA_CODE_FK_PK", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FGAAFS_FGA_CODE_FK_PK", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable = New dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable, ByVal FGAAFS_FGA_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAAFS_FGA_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal FGAAFS_FGA_CODE_FK_PK As Integer) As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FGAAFS_FGA_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable = New dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Grossesse_Allaitement.FGAAFS_FGA_AFSSAPSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Grossesse_Allaitement) As Integer
            Return Me.Adapter.Update(dataSet, "FGAAFS_FGA_AFSSAPS")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_FGAAFS_FGA_CODE_FK_PK As Integer, ByVal Original_FGAAFS_SP_CODE_FK_PK As Integer, ByVal Original_FGAAFS_DATE_PK As Date, ByVal Original_FGAAFS_TYPEGRAL_PK As String, ByVal Original_FGAAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FGAAFS_FGA_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_FGAAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_FGAAFS_DATE_PK, Date)
            If (Original_FGAAFS_TYPEGRAL_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAAFS_TYPEGRAL_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FGAAFS_TYPEGRAL_PK, String)
            End If
            If (Original_FGAAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FGAAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal FGAAFS_FGA_CODE_FK_PK As Integer, ByVal FGAAFS_SP_CODE_FK_PK As Integer, ByVal FGAAFS_DATE_PK As Date, ByVal FGAAFS_TYPEGRAL_PK As String, ByVal FGAAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FGAAFS_FGA_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(FGAAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(FGAAFS_DATE_PK, Date)
            If (FGAAFS_TYPEGRAL_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAAFS_TYPEGRAL_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FGAAFS_TYPEGRAL_PK, String)
            End If
            If (FGAAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FGAAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal FGAAFS_FGA_CODE_FK_PK As Integer, ByVal FGAAFS_SP_CODE_FK_PK As Integer, ByVal FGAAFS_DATE_PK As Date, ByVal FGAAFS_TYPEGRAL_PK As String, ByVal FGAAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_FGAAFS_FGA_CODE_FK_PK As Integer, ByVal Original_FGAAFS_SP_CODE_FK_PK As Integer, ByVal Original_FGAAFS_DATE_PK As Date, ByVal Original_FGAAFS_TYPEGRAL_PK As String, ByVal Original_FGAAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FGAAFS_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FGAAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FGAAFS_DATE_PK, Date)
            If (FGAAFS_TYPEGRAL_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAAFS_TYPEGRAL_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FGAAFS_TYPEGRAL_PK, String)
            End If
            If (FGAAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FGAAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FGAAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_FGAAFS_FGA_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_FGAAFS_SP_CODE_FK_PK, Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_FGAAFS_DATE_PK, Date)
            If (Original_FGAAFS_TYPEGRAL_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAAFS_TYPEGRAL_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FGAAFS_TYPEGRAL_PK, String)
            End If
            If (Original_FGAAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FGAAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FGAAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Original_FGAAFS_FGA_CODE_FK_PK As Integer, ByVal Original_FGAAFS_SP_CODE_FK_PK As Integer, ByVal Original_FGAAFS_DATE_PK As Date, ByVal Original_FGAAFS_TYPEGRAL_PK As String, ByVal Original_FGAAFS_CDF_DOCUMENT_FK_PK As String) As Integer
            Return Me.Update(Original_FGAAFS_FGA_CODE_FK_PK, Original_FGAAFS_SP_CODE_FK_PK, Original_FGAAFS_DATE_PK, Original_FGAAFS_TYPEGRAL_PK, Original_FGAAFS_CDF_DOCUMENT_FK_PK, Original_FGAAFS_FGA_CODE_FK_PK, Original_FGAAFS_SP_CODE_FK_PK, Original_FGAAFS_DATE_PK, Original_FGAAFS_TYPEGRAL_PK, Original_FGAAFS_CDF_DOCUMENT_FK_PK)
        End Function
    End Class
End Namespace
