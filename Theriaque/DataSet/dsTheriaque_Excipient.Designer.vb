'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.312
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsTheriaque_Excipient"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsTheriaque_Excipient
    Inherits System.Data.DataSet
    
    Private tableSAU_SUBAUXILIAIRE As SAU_SUBAUXILIAIREDataTable
    
    Private tableGSAU_PERE_SUBAUX As GSAU_PERE_SUBAUXDataTable
    
    Private tableSYSAU_SYNONYME_SAU As SYSAU_SYNONYME_SAUDataTable
    
    Private tableSAUAFS_SAU_AFS As SAUAFS_SAU_AFSDataTable
    
    Private tableADSAU_AUTRE_DENOMINATION_SUBAU As ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
    
    Private tableSAUCCH_SUBAUX_CLASSECH As SAUCCH_SUBAUX_CLASSECHDataTable
    
    Private tableSAUCAS_SAU_CAS As SAUCAS_SAU_CASDataTable
    
    Private tableSAUNAV_SUBAUX_NATURE_VECT As SAUNAV_SUBAUX_NATURE_VECTDataTable
    
    Private tableSAUNAT_SUBAUX_NATURE As SAUNAT_SUBAUX_NATUREDataTable
    
    Private tableSAUVO_SUBAUXVOIE_SUBAUX As SAUVO_SUBAUXVOIE_SUBAUXDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SAU_SUBAUXILIAIRE")) Is Nothing) Then
                MyBase.Tables.Add(New SAU_SUBAUXILIAIREDataTable(ds.Tables("SAU_SUBAUXILIAIRE")))
            End If
            If (Not (ds.Tables("GSAU_PERE_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New GSAU_PERE_SUBAUXDataTable(ds.Tables("GSAU_PERE_SUBAUX")))
            End If
            If (Not (ds.Tables("SYSAU_SYNONYME_SAU")) Is Nothing) Then
                MyBase.Tables.Add(New SYSAU_SYNONYME_SAUDataTable(ds.Tables("SYSAU_SYNONYME_SAU")))
            End If
            If (Not (ds.Tables("SAUAFS_SAU_AFS")) Is Nothing) Then
                MyBase.Tables.Add(New SAUAFS_SAU_AFSDataTable(ds.Tables("SAUAFS_SAU_AFS")))
            End If
            If (Not (ds.Tables("ADSAU_AUTRE_DENOMINATION_SUBAU")) Is Nothing) Then
                MyBase.Tables.Add(New ADSAU_AUTRE_DENOMINATION_SUBAUDataTable(ds.Tables("ADSAU_AUTRE_DENOMINATION_SUBAU")))
            End If
            If (Not (ds.Tables("SAUCCH_SUBAUX_CLASSECH")) Is Nothing) Then
                MyBase.Tables.Add(New SAUCCH_SUBAUX_CLASSECHDataTable(ds.Tables("SAUCCH_SUBAUX_CLASSECH")))
            End If
            If (Not (ds.Tables("SAUCAS_SAU_CAS")) Is Nothing) Then
                MyBase.Tables.Add(New SAUCAS_SAU_CASDataTable(ds.Tables("SAUCAS_SAU_CAS")))
            End If
            If (Not (ds.Tables("SAUNAV_SUBAUX_NATURE_VECT")) Is Nothing) Then
                MyBase.Tables.Add(New SAUNAV_SUBAUX_NATURE_VECTDataTable(ds.Tables("SAUNAV_SUBAUX_NATURE_VECT")))
            End If
            If (Not (ds.Tables("SAUNAT_SUBAUX_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New SAUNAT_SUBAUX_NATUREDataTable(ds.Tables("SAUNAT_SUBAUX_NATURE")))
            End If
            If (Not (ds.Tables("SAUVO_SUBAUXVOIE_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New SAUVO_SUBAUXVOIE_SUBAUXDataTable(ds.Tables("SAUVO_SUBAUXVOIE_SUBAUX")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAU_SUBAUXILIAIRE() As SAU_SUBAUXILIAIREDataTable
        Get
            Return Me.tableSAU_SUBAUXILIAIRE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GSAU_PERE_SUBAUX() As GSAU_PERE_SUBAUXDataTable
        Get
            Return Me.tableGSAU_PERE_SUBAUX
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYSAU_SYNONYME_SAU() As SYSAU_SYNONYME_SAUDataTable
        Get
            Return Me.tableSYSAU_SYNONYME_SAU
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAUAFS_SAU_AFS() As SAUAFS_SAU_AFSDataTable
        Get
            Return Me.tableSAUAFS_SAU_AFS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ADSAU_AUTRE_DENOMINATION_SUBAU() As ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
        Get
            Return Me.tableADSAU_AUTRE_DENOMINATION_SUBAU
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAUCCH_SUBAUX_CLASSECH() As SAUCCH_SUBAUX_CLASSECHDataTable
        Get
            Return Me.tableSAUCCH_SUBAUX_CLASSECH
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAUCAS_SAU_CAS() As SAUCAS_SAU_CASDataTable
        Get
            Return Me.tableSAUCAS_SAU_CAS
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAUNAV_SUBAUX_NATURE_VECT() As SAUNAV_SUBAUX_NATURE_VECTDataTable
        Get
            Return Me.tableSAUNAV_SUBAUX_NATURE_VECT
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAUNAT_SUBAUX_NATURE() As SAUNAT_SUBAUX_NATUREDataTable
        Get
            Return Me.tableSAUNAT_SUBAUX_NATURE
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAUVO_SUBAUXVOIE_SUBAUX() As SAUVO_SUBAUXVOIE_SUBAUXDataTable
        Get
            Return Me.tableSAUVO_SUBAUXVOIE_SUBAUX
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsTheriaque_Excipient = CType(MyBase.Clone,dsTheriaque_Excipient)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SAU_SUBAUXILIAIRE")) Is Nothing) Then
                MyBase.Tables.Add(New SAU_SUBAUXILIAIREDataTable(ds.Tables("SAU_SUBAUXILIAIRE")))
            End If
            If (Not (ds.Tables("GSAU_PERE_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New GSAU_PERE_SUBAUXDataTable(ds.Tables("GSAU_PERE_SUBAUX")))
            End If
            If (Not (ds.Tables("SYSAU_SYNONYME_SAU")) Is Nothing) Then
                MyBase.Tables.Add(New SYSAU_SYNONYME_SAUDataTable(ds.Tables("SYSAU_SYNONYME_SAU")))
            End If
            If (Not (ds.Tables("SAUAFS_SAU_AFS")) Is Nothing) Then
                MyBase.Tables.Add(New SAUAFS_SAU_AFSDataTable(ds.Tables("SAUAFS_SAU_AFS")))
            End If
            If (Not (ds.Tables("ADSAU_AUTRE_DENOMINATION_SUBAU")) Is Nothing) Then
                MyBase.Tables.Add(New ADSAU_AUTRE_DENOMINATION_SUBAUDataTable(ds.Tables("ADSAU_AUTRE_DENOMINATION_SUBAU")))
            End If
            If (Not (ds.Tables("SAUCCH_SUBAUX_CLASSECH")) Is Nothing) Then
                MyBase.Tables.Add(New SAUCCH_SUBAUX_CLASSECHDataTable(ds.Tables("SAUCCH_SUBAUX_CLASSECH")))
            End If
            If (Not (ds.Tables("SAUCAS_SAU_CAS")) Is Nothing) Then
                MyBase.Tables.Add(New SAUCAS_SAU_CASDataTable(ds.Tables("SAUCAS_SAU_CAS")))
            End If
            If (Not (ds.Tables("SAUNAV_SUBAUX_NATURE_VECT")) Is Nothing) Then
                MyBase.Tables.Add(New SAUNAV_SUBAUX_NATURE_VECTDataTable(ds.Tables("SAUNAV_SUBAUX_NATURE_VECT")))
            End If
            If (Not (ds.Tables("SAUNAT_SUBAUX_NATURE")) Is Nothing) Then
                MyBase.Tables.Add(New SAUNAT_SUBAUX_NATUREDataTable(ds.Tables("SAUNAT_SUBAUX_NATURE")))
            End If
            If (Not (ds.Tables("SAUVO_SUBAUXVOIE_SUBAUX")) Is Nothing) Then
                MyBase.Tables.Add(New SAUVO_SUBAUXVOIE_SUBAUXDataTable(ds.Tables("SAUVO_SUBAUXVOIE_SUBAUX")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSAU_SUBAUXILIAIRE = CType(MyBase.Tables("SAU_SUBAUXILIAIRE"),SAU_SUBAUXILIAIREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAU_SUBAUXILIAIRE) Is Nothing) Then
                Me.tableSAU_SUBAUXILIAIRE.InitVars
            End If
        End If
        Me.tableGSAU_PERE_SUBAUX = CType(MyBase.Tables("GSAU_PERE_SUBAUX"),GSAU_PERE_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGSAU_PERE_SUBAUX) Is Nothing) Then
                Me.tableGSAU_PERE_SUBAUX.InitVars
            End If
        End If
        Me.tableSYSAU_SYNONYME_SAU = CType(MyBase.Tables("SYSAU_SYNONYME_SAU"),SYSAU_SYNONYME_SAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYSAU_SYNONYME_SAU) Is Nothing) Then
                Me.tableSYSAU_SYNONYME_SAU.InitVars
            End If
        End If
        Me.tableSAUAFS_SAU_AFS = CType(MyBase.Tables("SAUAFS_SAU_AFS"),SAUAFS_SAU_AFSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAUAFS_SAU_AFS) Is Nothing) Then
                Me.tableSAUAFS_SAU_AFS.InitVars
            End If
        End If
        Me.tableADSAU_AUTRE_DENOMINATION_SUBAU = CType(MyBase.Tables("ADSAU_AUTRE_DENOMINATION_SUBAU"),ADSAU_AUTRE_DENOMINATION_SUBAUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableADSAU_AUTRE_DENOMINATION_SUBAU) Is Nothing) Then
                Me.tableADSAU_AUTRE_DENOMINATION_SUBAU.InitVars
            End If
        End If
        Me.tableSAUCCH_SUBAUX_CLASSECH = CType(MyBase.Tables("SAUCCH_SUBAUX_CLASSECH"),SAUCCH_SUBAUX_CLASSECHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAUCCH_SUBAUX_CLASSECH) Is Nothing) Then
                Me.tableSAUCCH_SUBAUX_CLASSECH.InitVars
            End If
        End If
        Me.tableSAUCAS_SAU_CAS = CType(MyBase.Tables("SAUCAS_SAU_CAS"),SAUCAS_SAU_CASDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAUCAS_SAU_CAS) Is Nothing) Then
                Me.tableSAUCAS_SAU_CAS.InitVars
            End If
        End If
        Me.tableSAUNAV_SUBAUX_NATURE_VECT = CType(MyBase.Tables("SAUNAV_SUBAUX_NATURE_VECT"),SAUNAV_SUBAUX_NATURE_VECTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAUNAV_SUBAUX_NATURE_VECT) Is Nothing) Then
                Me.tableSAUNAV_SUBAUX_NATURE_VECT.InitVars
            End If
        End If
        Me.tableSAUNAT_SUBAUX_NATURE = CType(MyBase.Tables("SAUNAT_SUBAUX_NATURE"),SAUNAT_SUBAUX_NATUREDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAUNAT_SUBAUX_NATURE) Is Nothing) Then
                Me.tableSAUNAT_SUBAUX_NATURE.InitVars
            End If
        End If
        Me.tableSAUVO_SUBAUXVOIE_SUBAUX = CType(MyBase.Tables("SAUVO_SUBAUXVOIE_SUBAUX"),SAUVO_SUBAUXVOIE_SUBAUXDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAUVO_SUBAUXVOIE_SUBAUX) Is Nothing) Then
                Me.tableSAUVO_SUBAUXVOIE_SUBAUX.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsTheriaque_Excipient"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTheriaque_Excipient.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSAU_SUBAUXILIAIRE = New SAU_SUBAUXILIAIREDataTable
        MyBase.Tables.Add(Me.tableSAU_SUBAUXILIAIRE)
        Me.tableGSAU_PERE_SUBAUX = New GSAU_PERE_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableGSAU_PERE_SUBAUX)
        Me.tableSYSAU_SYNONYME_SAU = New SYSAU_SYNONYME_SAUDataTable
        MyBase.Tables.Add(Me.tableSYSAU_SYNONYME_SAU)
        Me.tableSAUAFS_SAU_AFS = New SAUAFS_SAU_AFSDataTable
        MyBase.Tables.Add(Me.tableSAUAFS_SAU_AFS)
        Me.tableADSAU_AUTRE_DENOMINATION_SUBAU = New ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
        MyBase.Tables.Add(Me.tableADSAU_AUTRE_DENOMINATION_SUBAU)
        Me.tableSAUCCH_SUBAUX_CLASSECH = New SAUCCH_SUBAUX_CLASSECHDataTable
        MyBase.Tables.Add(Me.tableSAUCCH_SUBAUX_CLASSECH)
        Me.tableSAUCAS_SAU_CAS = New SAUCAS_SAU_CASDataTable
        MyBase.Tables.Add(Me.tableSAUCAS_SAU_CAS)
        Me.tableSAUNAV_SUBAUX_NATURE_VECT = New SAUNAV_SUBAUX_NATURE_VECTDataTable
        MyBase.Tables.Add(Me.tableSAUNAV_SUBAUX_NATURE_VECT)
        Me.tableSAUNAT_SUBAUX_NATURE = New SAUNAT_SUBAUX_NATUREDataTable
        MyBase.Tables.Add(Me.tableSAUNAT_SUBAUX_NATURE)
        Me.tableSAUVO_SUBAUXVOIE_SUBAUX = New SAUVO_SUBAUXVOIE_SUBAUXDataTable
        MyBase.Tables.Add(Me.tableSAUVO_SUBAUXVOIE_SUBAUX)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAU_SUBAUXILIAIRE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGSAU_PERE_SUBAUX() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYSAU_SYNONYME_SAU() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAUAFS_SAU_AFS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeADSAU_AUTRE_DENOMINATION_SUBAU() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAUCCH_SUBAUX_CLASSECH() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAUCAS_SAU_CAS() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAUNAV_SUBAUX_NATURE_VECT() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAUNAT_SUBAUX_NATURE() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSAUVO_SUBAUXVOIE_SUBAUX() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub SAU_SUBAUXILIAIRERowChangeEventHandler(ByVal sender As Object, ByVal e As SAU_SUBAUXILIAIRERowChangeEvent)
    
    Public Delegate Sub GSAU_PERE_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As GSAU_PERE_SUBAUXRowChangeEvent)
    
    Public Delegate Sub SYSAU_SYNONYME_SAURowChangeEventHandler(ByVal sender As Object, ByVal e As SYSAU_SYNONYME_SAURowChangeEvent)
    
    Public Delegate Sub SAUAFS_SAU_AFSRowChangeEventHandler(ByVal sender As Object, ByVal e As SAUAFS_SAU_AFSRowChangeEvent)
    
    Public Delegate Sub ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEventHandler(ByVal sender As Object, ByVal e As ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEvent)
    
    Public Delegate Sub SAUCCH_SUBAUX_CLASSECHRowChangeEventHandler(ByVal sender As Object, ByVal e As SAUCCH_SUBAUX_CLASSECHRowChangeEvent)
    
    Public Delegate Sub SAUCAS_SAU_CASRowChangeEventHandler(ByVal sender As Object, ByVal e As SAUCAS_SAU_CASRowChangeEvent)
    
    Public Delegate Sub SAUNAV_SUBAUX_NATURE_VECTRowChangeEventHandler(ByVal sender As Object, ByVal e As SAUNAV_SUBAUX_NATURE_VECTRowChangeEvent)
    
    Public Delegate Sub SAUNAT_SUBAUX_NATURERowChangeEventHandler(ByVal sender As Object, ByVal e As SAUNAT_SUBAUX_NATURERowChangeEvent)
    
    Public Delegate Sub SAUVO_SUBAUXVOIE_SUBAUXRowChangeEventHandler(ByVal sender As Object, ByVal e As SAUVO_SUBAUXVOIE_SUBAUXRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAU_SUBAUXILIAIREDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAU_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnSAU_SAC_CODE_FK As System.Data.DataColumn
        
        Private columnSAU_GSAU_CODE_FK As System.Data.DataColumn
        
        Private columnSAU_NOM As System.Data.DataColumn
        
        Private columnSAU_DATECR As System.Data.DataColumn
        
        Private columnSAU_DATEMJ As System.Data.DataColumn
        
        Private columnSAU_EFFETNOTOIRE As System.Data.DataColumn
        
        Private columnSAU_CDF_DOC_CODE_FK As System.Data.DataColumn
        
        Private columnSAU_DOC_DATE As System.Data.DataColumn
        
        Private columnSAU_TEXTE As System.Data.DataColumn
        
        Private columnSAU_ETAT_COMMER As System.Data.DataColumn
        
        Private columnSAU_DATECOMMER As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAU_SUBAUXILIAIRE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_SAC_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_SAC_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_GSAU_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_GSAU_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_DATECRColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_DATECR
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_DATEMJColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_DATEMJ
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_EFFETNOTOIREColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_EFFETNOTOIRE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_CDF_DOC_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_CDF_DOC_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_DOC_DATEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_DOC_DATE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_TEXTEColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_TEXTE
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_ETAT_COMMERColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_ETAT_COMMER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAU_DATECOMMERColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAU_DATECOMMER
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAU_SUBAUXILIAIRERow
            Get
                Return CType(Me.Rows(index),SAU_SUBAUXILIAIRERow)
            End Get
        End Property
        
        Public Event SAU_SUBAUXILIAIRERowChanging As SAU_SUBAUXILIAIRERowChangeEventHandler
        
        Public Event SAU_SUBAUXILIAIRERowChanged As SAU_SUBAUXILIAIRERowChangeEventHandler
        
        Public Event SAU_SUBAUXILIAIRERowDeleting As SAU_SUBAUXILIAIRERowChangeEventHandler
        
        Public Event SAU_SUBAUXILIAIRERowDeleted As SAU_SUBAUXILIAIRERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAU_SUBAUXILIAIRERow(ByVal row As SAU_SUBAUXILIAIRERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAU_SUBAUXILIAIRERow(ByVal SAU_CODE_SQ_PK As Integer, ByVal SAU_SAC_CODE_FK As Integer, ByVal SAU_GSAU_CODE_FK As Integer, ByVal SAU_NOM As String, ByVal SAU_DATECR As Date, ByVal SAU_DATEMJ As Date, ByVal SAU_EFFETNOTOIRE As String, ByVal SAU_CDF_DOC_CODE_FK As String, ByVal SAU_DOC_DATE As Date, ByVal SAU_TEXTE As String, ByVal SAU_ETAT_COMMER As String, ByVal SAU_DATECOMMER As Date) As SAU_SUBAUXILIAIRERow
            Dim rowSAU_SUBAUXILIAIRERow As SAU_SUBAUXILIAIRERow = CType(Me.NewRow,SAU_SUBAUXILIAIRERow)
            rowSAU_SUBAUXILIAIRERow.ItemArray = New Object() {SAU_CODE_SQ_PK, SAU_SAC_CODE_FK, SAU_GSAU_CODE_FK, SAU_NOM, SAU_DATECR, SAU_DATEMJ, SAU_EFFETNOTOIRE, SAU_CDF_DOC_CODE_FK, SAU_DOC_DATE, SAU_TEXTE, SAU_ETAT_COMMER, SAU_DATECOMMER}
            Me.Rows.Add(rowSAU_SUBAUXILIAIRERow)
            Return rowSAU_SUBAUXILIAIRERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAU_CODE_SQ_PK(ByVal SAU_CODE_SQ_PK As Integer) As SAU_SUBAUXILIAIRERow
            Return CType(Me.Rows.Find(New Object() {SAU_CODE_SQ_PK}),SAU_SUBAUXILIAIRERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAU_SUBAUXILIAIREDataTable = CType(MyBase.Clone,SAU_SUBAUXILIAIREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAU_SUBAUXILIAIREDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAU_CODE_SQ_PK = MyBase.Columns("SAU_CODE_SQ_PK")
            Me.columnSAU_SAC_CODE_FK = MyBase.Columns("SAU_SAC_CODE_FK")
            Me.columnSAU_GSAU_CODE_FK = MyBase.Columns("SAU_GSAU_CODE_FK")
            Me.columnSAU_NOM = MyBase.Columns("SAU_NOM")
            Me.columnSAU_DATECR = MyBase.Columns("SAU_DATECR")
            Me.columnSAU_DATEMJ = MyBase.Columns("SAU_DATEMJ")
            Me.columnSAU_EFFETNOTOIRE = MyBase.Columns("SAU_EFFETNOTOIRE")
            Me.columnSAU_CDF_DOC_CODE_FK = MyBase.Columns("SAU_CDF_DOC_CODE_FK")
            Me.columnSAU_DOC_DATE = MyBase.Columns("SAU_DOC_DATE")
            Me.columnSAU_TEXTE = MyBase.Columns("SAU_TEXTE")
            Me.columnSAU_ETAT_COMMER = MyBase.Columns("SAU_ETAT_COMMER")
            Me.columnSAU_DATECOMMER = MyBase.Columns("SAU_DATECOMMER")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAU_CODE_SQ_PK = New System.Data.DataColumn("SAU_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_CODE_SQ_PK)
            Me.columnSAU_SAC_CODE_FK = New System.Data.DataColumn("SAU_SAC_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_SAC_CODE_FK)
            Me.columnSAU_GSAU_CODE_FK = New System.Data.DataColumn("SAU_GSAU_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_GSAU_CODE_FK)
            Me.columnSAU_NOM = New System.Data.DataColumn("SAU_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_NOM)
            Me.columnSAU_DATECR = New System.Data.DataColumn("SAU_DATECR", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_DATECR)
            Me.columnSAU_DATEMJ = New System.Data.DataColumn("SAU_DATEMJ", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_DATEMJ)
            Me.columnSAU_EFFETNOTOIRE = New System.Data.DataColumn("SAU_EFFETNOTOIRE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_EFFETNOTOIRE)
            Me.columnSAU_CDF_DOC_CODE_FK = New System.Data.DataColumn("SAU_CDF_DOC_CODE_FK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_CDF_DOC_CODE_FK)
            Me.columnSAU_DOC_DATE = New System.Data.DataColumn("SAU_DOC_DATE", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_DOC_DATE)
            Me.columnSAU_TEXTE = New System.Data.DataColumn("SAU_TEXTE", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_TEXTE)
            Me.columnSAU_ETAT_COMMER = New System.Data.DataColumn("SAU_ETAT_COMMER", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_ETAT_COMMER)
            Me.columnSAU_DATECOMMER = New System.Data.DataColumn("SAU_DATECOMMER", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAU_DATECOMMER)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAU_CODE_SQ_PK}, true))
            Me.columnSAU_CODE_SQ_PK.AllowDBNull = false
            Me.columnSAU_CODE_SQ_PK.Unique = true
            Me.columnSAU_NOM.AllowDBNull = false
            Me.columnSAU_NOM.MaxLength = 40
            Me.columnSAU_DATECR.AllowDBNull = false
            Me.columnSAU_EFFETNOTOIRE.MaxLength = 1
            Me.columnSAU_CDF_DOC_CODE_FK.MaxLength = 10
            Me.columnSAU_TEXTE.MaxLength = 4000
            Me.columnSAU_ETAT_COMMER.MaxLength = 2
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAU_SUBAUXILIAIRERow() As SAU_SUBAUXILIAIRERow
            Return CType(Me.NewRow,SAU_SUBAUXILIAIRERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAU_SUBAUXILIAIRERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAU_SUBAUXILIAIRERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAU_SUBAUXILIAIRERowChangedEvent) Is Nothing) Then
                RaiseEvent SAU_SUBAUXILIAIRERowChanged(Me, New SAU_SUBAUXILIAIRERowChangeEvent(CType(e.Row,SAU_SUBAUXILIAIRERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAU_SUBAUXILIAIRERowChangingEvent) Is Nothing) Then
                RaiseEvent SAU_SUBAUXILIAIRERowChanging(Me, New SAU_SUBAUXILIAIRERowChangeEvent(CType(e.Row,SAU_SUBAUXILIAIRERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAU_SUBAUXILIAIRERowDeletedEvent) Is Nothing) Then
                RaiseEvent SAU_SUBAUXILIAIRERowDeleted(Me, New SAU_SUBAUXILIAIRERowChangeEvent(CType(e.Row,SAU_SUBAUXILIAIRERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAU_SUBAUXILIAIRERowDeletingEvent) Is Nothing) Then
                RaiseEvent SAU_SUBAUXILIAIRERowDeleting(Me, New SAU_SUBAUXILIAIRERowChangeEvent(CType(e.Row,SAU_SUBAUXILIAIRERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAU_SUBAUXILIAIRERow(ByVal row As SAU_SUBAUXILIAIRERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAU_SUBAUXILIAIREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GSAU_PERE_SUBAUXDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGSAU_CODE_SQ_PK As System.Data.DataColumn
        
        Private columnGSAU_NOM As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GSAU_PERE_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSAU_CODE_SQ_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnGSAU_CODE_SQ_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GSAU_NOMColumn() As System.Data.DataColumn
            Get
                Return Me.columnGSAU_NOM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GSAU_PERE_SUBAUXRow
            Get
                Return CType(Me.Rows(index),GSAU_PERE_SUBAUXRow)
            End Get
        End Property
        
        Public Event GSAU_PERE_SUBAUXRowChanging As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        Public Event GSAU_PERE_SUBAUXRowChanged As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        Public Event GSAU_PERE_SUBAUXRowDeleting As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        Public Event GSAU_PERE_SUBAUXRowDeleted As GSAU_PERE_SUBAUXRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGSAU_PERE_SUBAUXRow(ByVal row As GSAU_PERE_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGSAU_PERE_SUBAUXRow(ByVal GSAU_CODE_SQ_PK As Integer, ByVal GSAU_NOM As String) As GSAU_PERE_SUBAUXRow
            Dim rowGSAU_PERE_SUBAUXRow As GSAU_PERE_SUBAUXRow = CType(Me.NewRow,GSAU_PERE_SUBAUXRow)
            rowGSAU_PERE_SUBAUXRow.ItemArray = New Object() {GSAU_CODE_SQ_PK, GSAU_NOM}
            Me.Rows.Add(rowGSAU_PERE_SUBAUXRow)
            Return rowGSAU_PERE_SUBAUXRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGSAU_CODE_SQ_PK(ByVal GSAU_CODE_SQ_PK As Integer) As GSAU_PERE_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {GSAU_CODE_SQ_PK}),GSAU_PERE_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As GSAU_PERE_SUBAUXDataTable = CType(MyBase.Clone,GSAU_PERE_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New GSAU_PERE_SUBAUXDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGSAU_CODE_SQ_PK = MyBase.Columns("GSAU_CODE_SQ_PK")
            Me.columnGSAU_NOM = MyBase.Columns("GSAU_NOM")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGSAU_CODE_SQ_PK = New System.Data.DataColumn("GSAU_CODE_SQ_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSAU_CODE_SQ_PK)
            Me.columnGSAU_NOM = New System.Data.DataColumn("GSAU_NOM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGSAU_NOM)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnGSAU_CODE_SQ_PK}, true))
            Me.columnGSAU_CODE_SQ_PK.AllowDBNull = false
            Me.columnGSAU_CODE_SQ_PK.Unique = true
            Me.columnGSAU_NOM.AllowDBNull = false
            Me.columnGSAU_NOM.MaxLength = 36
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGSAU_PERE_SUBAUXRow() As GSAU_PERE_SUBAUXRow
            Return CType(Me.NewRow,GSAU_PERE_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New GSAU_PERE_SUBAUXRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GSAU_PERE_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowChanged(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowChanging(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowDeleted(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GSAU_PERE_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent GSAU_PERE_SUBAUXRowDeleting(Me, New GSAU_PERE_SUBAUXRowChangeEvent(CType(e.Row,GSAU_PERE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGSAU_PERE_SUBAUXRow(ByVal row As GSAU_PERE_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GSAU_PERE_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYSAU_SYNONYME_SAUDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYSAU_NOM_PK As System.Data.DataColumn
        
        Private columnSYSAU_SAU_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYSAU_SYNONYME_SAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAU_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYSAU_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYSAU_SAU_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYSAU_SAU_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYSAU_SYNONYME_SAURow
            Get
                Return CType(Me.Rows(index),SYSAU_SYNONYME_SAURow)
            End Get
        End Property
        
        Public Event SYSAU_SYNONYME_SAURowChanging As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        Public Event SYSAU_SYNONYME_SAURowChanged As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        Public Event SYSAU_SYNONYME_SAURowDeleting As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        Public Event SYSAU_SYNONYME_SAURowDeleted As SYSAU_SYNONYME_SAURowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYSAU_SYNONYME_SAURow(ByVal row As SYSAU_SYNONYME_SAURow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYSAU_SYNONYME_SAURow(ByVal SYSAU_NOM_PK As String, ByVal SYSAU_SAU_CODE_FK As Integer) As SYSAU_SYNONYME_SAURow
            Dim rowSYSAU_SYNONYME_SAURow As SYSAU_SYNONYME_SAURow = CType(Me.NewRow,SYSAU_SYNONYME_SAURow)
            rowSYSAU_SYNONYME_SAURow.ItemArray = New Object() {SYSAU_NOM_PK, SYSAU_SAU_CODE_FK}
            Me.Rows.Add(rowSYSAU_SYNONYME_SAURow)
            Return rowSYSAU_SYNONYME_SAURow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYSAU_NOM_PK(ByVal SYSAU_NOM_PK As String) As SYSAU_SYNONYME_SAURow
            Return CType(Me.Rows.Find(New Object() {SYSAU_NOM_PK}),SYSAU_SYNONYME_SAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYSAU_SYNONYME_SAUDataTable = CType(MyBase.Clone,SYSAU_SYNONYME_SAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYSAU_SYNONYME_SAUDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYSAU_NOM_PK = MyBase.Columns("SYSAU_NOM_PK")
            Me.columnSYSAU_SAU_CODE_FK = MyBase.Columns("SYSAU_SAU_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYSAU_NOM_PK = New System.Data.DataColumn("SYSAU_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAU_NOM_PK)
            Me.columnSYSAU_SAU_CODE_FK = New System.Data.DataColumn("SYSAU_SAU_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSAU_SAU_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYSAU_NOM_PK}, true))
            Me.columnSYSAU_NOM_PK.AllowDBNull = false
            Me.columnSYSAU_NOM_PK.Unique = true
            Me.columnSYSAU_NOM_PK.MaxLength = 40
            Me.columnSYSAU_SAU_CODE_FK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYSAU_SYNONYME_SAURow() As SYSAU_SYNONYME_SAURow
            Return CType(Me.NewRow,SYSAU_SYNONYME_SAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYSAU_SYNONYME_SAURow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYSAU_SYNONYME_SAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowChangedEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowChanged(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowChangingEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowChanging(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowDeletedEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowDeleted(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYSAU_SYNONYME_SAURowDeletingEvent) Is Nothing) Then
                RaiseEvent SYSAU_SYNONYME_SAURowDeleting(Me, New SYSAU_SYNONYME_SAURowChangeEvent(CType(e.Row,SYSAU_SYNONYME_SAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYSAU_SYNONYME_SAURow(ByVal row As SYSAU_SYNONYME_SAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYSAU_SYNONYME_SAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAUAFS_SAU_AFSDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAUAFS_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUAFS_CDF_DOCUMENT_FK_PK As System.Data.DataColumn
        
        Private columnSAUAFS_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAUAFS_SAU_AFS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUAFS_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUAFS_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUAFS_CDF_DOCUMENT_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUAFS_CDF_DOCUMENT_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUAFS_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUAFS_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAUAFS_SAU_AFSRow
            Get
                Return CType(Me.Rows(index),SAUAFS_SAU_AFSRow)
            End Get
        End Property
        
        Public Event SAUAFS_SAU_AFSRowChanging As SAUAFS_SAU_AFSRowChangeEventHandler
        
        Public Event SAUAFS_SAU_AFSRowChanged As SAUAFS_SAU_AFSRowChangeEventHandler
        
        Public Event SAUAFS_SAU_AFSRowDeleting As SAUAFS_SAU_AFSRowChangeEventHandler
        
        Public Event SAUAFS_SAU_AFSRowDeleted As SAUAFS_SAU_AFSRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAUAFS_SAU_AFSRow(ByVal row As SAUAFS_SAU_AFSRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAUAFS_SAU_AFSRow(ByVal SAUAFS_SAU_CODE_FK_PK As Integer, ByVal SAUAFS_CDF_DOCUMENT_FK_PK As String, ByVal SAUAFS_NUMORD As Short) As SAUAFS_SAU_AFSRow
            Dim rowSAUAFS_SAU_AFSRow As SAUAFS_SAU_AFSRow = CType(Me.NewRow,SAUAFS_SAU_AFSRow)
            rowSAUAFS_SAU_AFSRow.ItemArray = New Object() {SAUAFS_SAU_CODE_FK_PK, SAUAFS_CDF_DOCUMENT_FK_PK, SAUAFS_NUMORD}
            Me.Rows.Add(rowSAUAFS_SAU_AFSRow)
            Return rowSAUAFS_SAU_AFSRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAUAFS_SAU_CODE_FK_PKSAUAFS_CDF_DOCUMENT_FK_PK(ByVal SAUAFS_SAU_CODE_FK_PK As Integer, ByVal SAUAFS_CDF_DOCUMENT_FK_PK As String) As SAUAFS_SAU_AFSRow
            Return CType(Me.Rows.Find(New Object() {SAUAFS_SAU_CODE_FK_PK, SAUAFS_CDF_DOCUMENT_FK_PK}),SAUAFS_SAU_AFSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAUAFS_SAU_AFSDataTable = CType(MyBase.Clone,SAUAFS_SAU_AFSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAUAFS_SAU_AFSDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAUAFS_SAU_CODE_FK_PK = MyBase.Columns("SAUAFS_SAU_CODE_FK_PK")
            Me.columnSAUAFS_CDF_DOCUMENT_FK_PK = MyBase.Columns("SAUAFS_CDF_DOCUMENT_FK_PK")
            Me.columnSAUAFS_NUMORD = MyBase.Columns("SAUAFS_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAUAFS_SAU_CODE_FK_PK = New System.Data.DataColumn("SAUAFS_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUAFS_SAU_CODE_FK_PK)
            Me.columnSAUAFS_CDF_DOCUMENT_FK_PK = New System.Data.DataColumn("SAUAFS_CDF_DOCUMENT_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUAFS_CDF_DOCUMENT_FK_PK)
            Me.columnSAUAFS_NUMORD = New System.Data.DataColumn("SAUAFS_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUAFS_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAUAFS_SAU_CODE_FK_PK, Me.columnSAUAFS_CDF_DOCUMENT_FK_PK}, true))
            Me.columnSAUAFS_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUAFS_CDF_DOCUMENT_FK_PK.AllowDBNull = false
            Me.columnSAUAFS_CDF_DOCUMENT_FK_PK.MaxLength = 20
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAUAFS_SAU_AFSRow() As SAUAFS_SAU_AFSRow
            Return CType(Me.NewRow,SAUAFS_SAU_AFSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAUAFS_SAU_AFSRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAUAFS_SAU_AFSRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAUAFS_SAU_AFSRowChangedEvent) Is Nothing) Then
                RaiseEvent SAUAFS_SAU_AFSRowChanged(Me, New SAUAFS_SAU_AFSRowChangeEvent(CType(e.Row,SAUAFS_SAU_AFSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAUAFS_SAU_AFSRowChangingEvent) Is Nothing) Then
                RaiseEvent SAUAFS_SAU_AFSRowChanging(Me, New SAUAFS_SAU_AFSRowChangeEvent(CType(e.Row,SAUAFS_SAU_AFSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAUAFS_SAU_AFSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAUAFS_SAU_AFSRowDeleted(Me, New SAUAFS_SAU_AFSRowChangeEvent(CType(e.Row,SAUAFS_SAU_AFSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAUAFS_SAU_AFSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAUAFS_SAU_AFSRowDeleting(Me, New SAUAFS_SAU_AFSRowChangeEvent(CType(e.Row,SAUAFS_SAU_AFSRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAUAFS_SAU_AFSRow(ByVal row As SAUAFS_SAU_AFSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAUAFS_SAU_AFSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnADSAU_NOM_PK As System.Data.DataColumn
        
        Private columnADSAU_SAU_CODE_FK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ADSAU_AUTRE_DENOMINATION_SUBAU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADSAU_NOM_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnADSAU_NOM_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADSAU_SAU_CODE_FKColumn() As System.Data.DataColumn
            Get
                Return Me.columnADSAU_SAU_CODE_FK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ADSAU_AUTRE_DENOMINATION_SUBAURow
            Get
                Return CType(Me.Rows(index),ADSAU_AUTRE_DENOMINATION_SUBAURow)
            End Get
        End Property
        
        Public Event ADSAU_AUTRE_DENOMINATION_SUBAURowChanging As ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEventHandler
        
        Public Event ADSAU_AUTRE_DENOMINATION_SUBAURowChanged As ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEventHandler
        
        Public Event ADSAU_AUTRE_DENOMINATION_SUBAURowDeleting As ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEventHandler
        
        Public Event ADSAU_AUTRE_DENOMINATION_SUBAURowDeleted As ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddADSAU_AUTRE_DENOMINATION_SUBAURow(ByVal row As ADSAU_AUTRE_DENOMINATION_SUBAURow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddADSAU_AUTRE_DENOMINATION_SUBAURow(ByVal ADSAU_NOM_PK As String, ByVal ADSAU_SAU_CODE_FK As Integer) As ADSAU_AUTRE_DENOMINATION_SUBAURow
            Dim rowADSAU_AUTRE_DENOMINATION_SUBAURow As ADSAU_AUTRE_DENOMINATION_SUBAURow = CType(Me.NewRow,ADSAU_AUTRE_DENOMINATION_SUBAURow)
            rowADSAU_AUTRE_DENOMINATION_SUBAURow.ItemArray = New Object() {ADSAU_NOM_PK, ADSAU_SAU_CODE_FK}
            Me.Rows.Add(rowADSAU_AUTRE_DENOMINATION_SUBAURow)
            Return rowADSAU_AUTRE_DENOMINATION_SUBAURow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByADSAU_NOM_PK(ByVal ADSAU_NOM_PK As String) As ADSAU_AUTRE_DENOMINATION_SUBAURow
            Return CType(Me.Rows.Find(New Object() {ADSAU_NOM_PK}),ADSAU_AUTRE_DENOMINATION_SUBAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ADSAU_AUTRE_DENOMINATION_SUBAUDataTable = CType(MyBase.Clone,ADSAU_AUTRE_DENOMINATION_SUBAUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnADSAU_NOM_PK = MyBase.Columns("ADSAU_NOM_PK")
            Me.columnADSAU_SAU_CODE_FK = MyBase.Columns("ADSAU_SAU_CODE_FK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnADSAU_NOM_PK = New System.Data.DataColumn("ADSAU_NOM_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADSAU_NOM_PK)
            Me.columnADSAU_SAU_CODE_FK = New System.Data.DataColumn("ADSAU_SAU_CODE_FK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADSAU_SAU_CODE_FK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnADSAU_NOM_PK}, true))
            Me.columnADSAU_NOM_PK.AllowDBNull = false
            Me.columnADSAU_NOM_PK.Unique = true
            Me.columnADSAU_NOM_PK.MaxLength = 40
            Me.columnADSAU_SAU_CODE_FK.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewADSAU_AUTRE_DENOMINATION_SUBAURow() As ADSAU_AUTRE_DENOMINATION_SUBAURow
            Return CType(Me.NewRow,ADSAU_AUTRE_DENOMINATION_SUBAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ADSAU_AUTRE_DENOMINATION_SUBAURow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ADSAU_AUTRE_DENOMINATION_SUBAURow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ADSAU_AUTRE_DENOMINATION_SUBAURowChangedEvent) Is Nothing) Then
                RaiseEvent ADSAU_AUTRE_DENOMINATION_SUBAURowChanged(Me, New ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEvent(CType(e.Row,ADSAU_AUTRE_DENOMINATION_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ADSAU_AUTRE_DENOMINATION_SUBAURowChangingEvent) Is Nothing) Then
                RaiseEvent ADSAU_AUTRE_DENOMINATION_SUBAURowChanging(Me, New ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEvent(CType(e.Row,ADSAU_AUTRE_DENOMINATION_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ADSAU_AUTRE_DENOMINATION_SUBAURowDeletedEvent) Is Nothing) Then
                RaiseEvent ADSAU_AUTRE_DENOMINATION_SUBAURowDeleted(Me, New ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEvent(CType(e.Row,ADSAU_AUTRE_DENOMINATION_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ADSAU_AUTRE_DENOMINATION_SUBAURowDeletingEvent) Is Nothing) Then
                RaiseEvent ADSAU_AUTRE_DENOMINATION_SUBAURowDeleting(Me, New ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEvent(CType(e.Row,ADSAU_AUTRE_DENOMINATION_SUBAURow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveADSAU_AUTRE_DENOMINATION_SUBAURow(ByVal row As ADSAU_AUTRE_DENOMINATION_SUBAURow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ADSAU_AUTRE_DENOMINATION_SUBAUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAUCCH_SUBAUX_CLASSECHDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAUCCH_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUCCH_CCH_CODE_FK_PK As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAUCCH_SUBAUX_CLASSECH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUCCH_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUCCH_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUCCH_CCH_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUCCH_CCH_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAUCCH_SUBAUX_CLASSECHRow
            Get
                Return CType(Me.Rows(index),SAUCCH_SUBAUX_CLASSECHRow)
            End Get
        End Property
        
        Public Event SAUCCH_SUBAUX_CLASSECHRowChanging As SAUCCH_SUBAUX_CLASSECHRowChangeEventHandler
        
        Public Event SAUCCH_SUBAUX_CLASSECHRowChanged As SAUCCH_SUBAUX_CLASSECHRowChangeEventHandler
        
        Public Event SAUCCH_SUBAUX_CLASSECHRowDeleting As SAUCCH_SUBAUX_CLASSECHRowChangeEventHandler
        
        Public Event SAUCCH_SUBAUX_CLASSECHRowDeleted As SAUCCH_SUBAUX_CLASSECHRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAUCCH_SUBAUX_CLASSECHRow(ByVal row As SAUCCH_SUBAUX_CLASSECHRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAUCCH_SUBAUX_CLASSECHRow(ByVal SAUCCH_SAU_CODE_FK_PK As Integer, ByVal SAUCCH_CCH_CODE_FK_PK As String) As SAUCCH_SUBAUX_CLASSECHRow
            Dim rowSAUCCH_SUBAUX_CLASSECHRow As SAUCCH_SUBAUX_CLASSECHRow = CType(Me.NewRow,SAUCCH_SUBAUX_CLASSECHRow)
            rowSAUCCH_SUBAUX_CLASSECHRow.ItemArray = New Object() {SAUCCH_SAU_CODE_FK_PK, SAUCCH_CCH_CODE_FK_PK}
            Me.Rows.Add(rowSAUCCH_SUBAUX_CLASSECHRow)
            Return rowSAUCCH_SUBAUX_CLASSECHRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAUCCH_SAU_CODE_FK_PKSAUCCH_CCH_CODE_FK_PK(ByVal SAUCCH_SAU_CODE_FK_PK As Integer, ByVal SAUCCH_CCH_CODE_FK_PK As String) As SAUCCH_SUBAUX_CLASSECHRow
            Return CType(Me.Rows.Find(New Object() {SAUCCH_SAU_CODE_FK_PK, SAUCCH_CCH_CODE_FK_PK}),SAUCCH_SUBAUX_CLASSECHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAUCCH_SUBAUX_CLASSECHDataTable = CType(MyBase.Clone,SAUCCH_SUBAUX_CLASSECHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAUCCH_SUBAUX_CLASSECHDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAUCCH_SAU_CODE_FK_PK = MyBase.Columns("SAUCCH_SAU_CODE_FK_PK")
            Me.columnSAUCCH_CCH_CODE_FK_PK = MyBase.Columns("SAUCCH_CCH_CODE_FK_PK")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAUCCH_SAU_CODE_FK_PK = New System.Data.DataColumn("SAUCCH_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUCCH_SAU_CODE_FK_PK)
            Me.columnSAUCCH_CCH_CODE_FK_PK = New System.Data.DataColumn("SAUCCH_CCH_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUCCH_CCH_CODE_FK_PK)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAUCCH_SAU_CODE_FK_PK, Me.columnSAUCCH_CCH_CODE_FK_PK}, true))
            Me.columnSAUCCH_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUCCH_CCH_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUCCH_CCH_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAUCCH_SUBAUX_CLASSECHRow() As SAUCCH_SUBAUX_CLASSECHRow
            Return CType(Me.NewRow,SAUCCH_SUBAUX_CLASSECHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAUCCH_SUBAUX_CLASSECHRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAUCCH_SUBAUX_CLASSECHRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAUCCH_SUBAUX_CLASSECHRowChangedEvent) Is Nothing) Then
                RaiseEvent SAUCCH_SUBAUX_CLASSECHRowChanged(Me, New SAUCCH_SUBAUX_CLASSECHRowChangeEvent(CType(e.Row,SAUCCH_SUBAUX_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAUCCH_SUBAUX_CLASSECHRowChangingEvent) Is Nothing) Then
                RaiseEvent SAUCCH_SUBAUX_CLASSECHRowChanging(Me, New SAUCCH_SUBAUX_CLASSECHRowChangeEvent(CType(e.Row,SAUCCH_SUBAUX_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAUCCH_SUBAUX_CLASSECHRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAUCCH_SUBAUX_CLASSECHRowDeleted(Me, New SAUCCH_SUBAUX_CLASSECHRowChangeEvent(CType(e.Row,SAUCCH_SUBAUX_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAUCCH_SUBAUX_CLASSECHRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAUCCH_SUBAUX_CLASSECHRowDeleting(Me, New SAUCCH_SUBAUX_CLASSECHRowChangeEvent(CType(e.Row,SAUCCH_SUBAUX_CLASSECHRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAUCCH_SUBAUX_CLASSECHRow(ByVal row As SAUCCH_SUBAUX_CLASSECHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAUCCH_SUBAUX_CLASSECHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAUCAS_SAU_CASDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAUCAS_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUCAS_CAS_CODE_PK As System.Data.DataColumn
        
        Private columnSAUCAS_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAUCAS_SAU_CAS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUCAS_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUCAS_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUCAS_CAS_CODE_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUCAS_CAS_CODE_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUCAS_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUCAS_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAUCAS_SAU_CASRow
            Get
                Return CType(Me.Rows(index),SAUCAS_SAU_CASRow)
            End Get
        End Property
        
        Public Event SAUCAS_SAU_CASRowChanging As SAUCAS_SAU_CASRowChangeEventHandler
        
        Public Event SAUCAS_SAU_CASRowChanged As SAUCAS_SAU_CASRowChangeEventHandler
        
        Public Event SAUCAS_SAU_CASRowDeleting As SAUCAS_SAU_CASRowChangeEventHandler
        
        Public Event SAUCAS_SAU_CASRowDeleted As SAUCAS_SAU_CASRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAUCAS_SAU_CASRow(ByVal row As SAUCAS_SAU_CASRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAUCAS_SAU_CASRow(ByVal SAUCAS_SAU_CODE_FK_PK As Integer, ByVal SAUCAS_CAS_CODE_PK As String, ByVal SAUCAS_NUMORD As Short) As SAUCAS_SAU_CASRow
            Dim rowSAUCAS_SAU_CASRow As SAUCAS_SAU_CASRow = CType(Me.NewRow,SAUCAS_SAU_CASRow)
            rowSAUCAS_SAU_CASRow.ItemArray = New Object() {SAUCAS_SAU_CODE_FK_PK, SAUCAS_CAS_CODE_PK, SAUCAS_NUMORD}
            Me.Rows.Add(rowSAUCAS_SAU_CASRow)
            Return rowSAUCAS_SAU_CASRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAUCAS_SAU_CODE_FK_PKSAUCAS_CAS_CODE_PK(ByVal SAUCAS_SAU_CODE_FK_PK As Integer, ByVal SAUCAS_CAS_CODE_PK As String) As SAUCAS_SAU_CASRow
            Return CType(Me.Rows.Find(New Object() {SAUCAS_SAU_CODE_FK_PK, SAUCAS_CAS_CODE_PK}),SAUCAS_SAU_CASRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAUCAS_SAU_CASDataTable = CType(MyBase.Clone,SAUCAS_SAU_CASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAUCAS_SAU_CASDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAUCAS_SAU_CODE_FK_PK = MyBase.Columns("SAUCAS_SAU_CODE_FK_PK")
            Me.columnSAUCAS_CAS_CODE_PK = MyBase.Columns("SAUCAS_CAS_CODE_PK")
            Me.columnSAUCAS_NUMORD = MyBase.Columns("SAUCAS_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAUCAS_SAU_CODE_FK_PK = New System.Data.DataColumn("SAUCAS_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUCAS_SAU_CODE_FK_PK)
            Me.columnSAUCAS_CAS_CODE_PK = New System.Data.DataColumn("SAUCAS_CAS_CODE_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUCAS_CAS_CODE_PK)
            Me.columnSAUCAS_NUMORD = New System.Data.DataColumn("SAUCAS_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUCAS_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAUCAS_SAU_CODE_FK_PK, Me.columnSAUCAS_CAS_CODE_PK}, true))
            Me.columnSAUCAS_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUCAS_CAS_CODE_PK.AllowDBNull = false
            Me.columnSAUCAS_CAS_CODE_PK.MaxLength = 20
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAUCAS_SAU_CASRow() As SAUCAS_SAU_CASRow
            Return CType(Me.NewRow,SAUCAS_SAU_CASRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAUCAS_SAU_CASRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAUCAS_SAU_CASRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAUCAS_SAU_CASRowChangedEvent) Is Nothing) Then
                RaiseEvent SAUCAS_SAU_CASRowChanged(Me, New SAUCAS_SAU_CASRowChangeEvent(CType(e.Row,SAUCAS_SAU_CASRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAUCAS_SAU_CASRowChangingEvent) Is Nothing) Then
                RaiseEvent SAUCAS_SAU_CASRowChanging(Me, New SAUCAS_SAU_CASRowChangeEvent(CType(e.Row,SAUCAS_SAU_CASRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAUCAS_SAU_CASRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAUCAS_SAU_CASRowDeleted(Me, New SAUCAS_SAU_CASRowChangeEvent(CType(e.Row,SAUCAS_SAU_CASRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAUCAS_SAU_CASRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAUCAS_SAU_CASRowDeleting(Me, New SAUCAS_SAU_CASRowChangeEvent(CType(e.Row,SAUCAS_SAU_CASRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAUCAS_SAU_CASRow(ByVal row As SAUCAS_SAU_CASRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAUCAS_SAU_CASDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAUNAV_SUBAUX_NATURE_VECTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAUNAV_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUNAV_CDF_NAV_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUNAV_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAUNAV_SUBAUX_NATURE_VECT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUNAV_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUNAV_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUNAV_CDF_NAV_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUNAV_CDF_NAV_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUNAV_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUNAV_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAUNAV_SUBAUX_NATURE_VECTRow
            Get
                Return CType(Me.Rows(index),SAUNAV_SUBAUX_NATURE_VECTRow)
            End Get
        End Property
        
        Public Event SAUNAV_SUBAUX_NATURE_VECTRowChanging As SAUNAV_SUBAUX_NATURE_VECTRowChangeEventHandler
        
        Public Event SAUNAV_SUBAUX_NATURE_VECTRowChanged As SAUNAV_SUBAUX_NATURE_VECTRowChangeEventHandler
        
        Public Event SAUNAV_SUBAUX_NATURE_VECTRowDeleting As SAUNAV_SUBAUX_NATURE_VECTRowChangeEventHandler
        
        Public Event SAUNAV_SUBAUX_NATURE_VECTRowDeleted As SAUNAV_SUBAUX_NATURE_VECTRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAUNAV_SUBAUX_NATURE_VECTRow(ByVal row As SAUNAV_SUBAUX_NATURE_VECTRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAUNAV_SUBAUX_NATURE_VECTRow(ByVal SAUNAV_SAU_CODE_FK_PK As Integer, ByVal SAUNAV_CDF_NAV_CODE_FK_PK As String, ByVal SAUNAV_NUMORD As Short) As SAUNAV_SUBAUX_NATURE_VECTRow
            Dim rowSAUNAV_SUBAUX_NATURE_VECTRow As SAUNAV_SUBAUX_NATURE_VECTRow = CType(Me.NewRow,SAUNAV_SUBAUX_NATURE_VECTRow)
            rowSAUNAV_SUBAUX_NATURE_VECTRow.ItemArray = New Object() {SAUNAV_SAU_CODE_FK_PK, SAUNAV_CDF_NAV_CODE_FK_PK, SAUNAV_NUMORD}
            Me.Rows.Add(rowSAUNAV_SUBAUX_NATURE_VECTRow)
            Return rowSAUNAV_SUBAUX_NATURE_VECTRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAUNAV_SAU_CODE_FK_PKSAUNAV_CDF_NAV_CODE_FK_PK(ByVal SAUNAV_SAU_CODE_FK_PK As Integer, ByVal SAUNAV_CDF_NAV_CODE_FK_PK As String) As SAUNAV_SUBAUX_NATURE_VECTRow
            Return CType(Me.Rows.Find(New Object() {SAUNAV_SAU_CODE_FK_PK, SAUNAV_CDF_NAV_CODE_FK_PK}),SAUNAV_SUBAUX_NATURE_VECTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAUNAV_SUBAUX_NATURE_VECTDataTable = CType(MyBase.Clone,SAUNAV_SUBAUX_NATURE_VECTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAUNAV_SUBAUX_NATURE_VECTDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAUNAV_SAU_CODE_FK_PK = MyBase.Columns("SAUNAV_SAU_CODE_FK_PK")
            Me.columnSAUNAV_CDF_NAV_CODE_FK_PK = MyBase.Columns("SAUNAV_CDF_NAV_CODE_FK_PK")
            Me.columnSAUNAV_NUMORD = MyBase.Columns("SAUNAV_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAUNAV_SAU_CODE_FK_PK = New System.Data.DataColumn("SAUNAV_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUNAV_SAU_CODE_FK_PK)
            Me.columnSAUNAV_CDF_NAV_CODE_FK_PK = New System.Data.DataColumn("SAUNAV_CDF_NAV_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUNAV_CDF_NAV_CODE_FK_PK)
            Me.columnSAUNAV_NUMORD = New System.Data.DataColumn("SAUNAV_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUNAV_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAUNAV_SAU_CODE_FK_PK, Me.columnSAUNAV_CDF_NAV_CODE_FK_PK}, true))
            Me.columnSAUNAV_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUNAV_CDF_NAV_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUNAV_CDF_NAV_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAUNAV_SUBAUX_NATURE_VECTRow() As SAUNAV_SUBAUX_NATURE_VECTRow
            Return CType(Me.NewRow,SAUNAV_SUBAUX_NATURE_VECTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAUNAV_SUBAUX_NATURE_VECTRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAUNAV_SUBAUX_NATURE_VECTRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAUNAV_SUBAUX_NATURE_VECTRowChangedEvent) Is Nothing) Then
                RaiseEvent SAUNAV_SUBAUX_NATURE_VECTRowChanged(Me, New SAUNAV_SUBAUX_NATURE_VECTRowChangeEvent(CType(e.Row,SAUNAV_SUBAUX_NATURE_VECTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAUNAV_SUBAUX_NATURE_VECTRowChangingEvent) Is Nothing) Then
                RaiseEvent SAUNAV_SUBAUX_NATURE_VECTRowChanging(Me, New SAUNAV_SUBAUX_NATURE_VECTRowChangeEvent(CType(e.Row,SAUNAV_SUBAUX_NATURE_VECTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAUNAV_SUBAUX_NATURE_VECTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAUNAV_SUBAUX_NATURE_VECTRowDeleted(Me, New SAUNAV_SUBAUX_NATURE_VECTRowChangeEvent(CType(e.Row,SAUNAV_SUBAUX_NATURE_VECTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAUNAV_SUBAUX_NATURE_VECTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAUNAV_SUBAUX_NATURE_VECTRowDeleting(Me, New SAUNAV_SUBAUX_NATURE_VECTRowChangeEvent(CType(e.Row,SAUNAV_SUBAUX_NATURE_VECTRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAUNAV_SUBAUX_NATURE_VECTRow(ByVal row As SAUNAV_SUBAUX_NATURE_VECTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAUNAV_SUBAUX_NATURE_VECTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAUNAT_SUBAUX_NATUREDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAUNAT_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUNAT_CDF_NASAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUNAT_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAUNAT_SUBAUX_NATURE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUNAT_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUNAT_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUNAT_CDF_NASAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUNAT_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUNAT_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAUNAT_SUBAUX_NATURERow
            Get
                Return CType(Me.Rows(index),SAUNAT_SUBAUX_NATURERow)
            End Get
        End Property
        
        Public Event SAUNAT_SUBAUX_NATURERowChanging As SAUNAT_SUBAUX_NATURERowChangeEventHandler
        
        Public Event SAUNAT_SUBAUX_NATURERowChanged As SAUNAT_SUBAUX_NATURERowChangeEventHandler
        
        Public Event SAUNAT_SUBAUX_NATURERowDeleting As SAUNAT_SUBAUX_NATURERowChangeEventHandler
        
        Public Event SAUNAT_SUBAUX_NATURERowDeleted As SAUNAT_SUBAUX_NATURERowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAUNAT_SUBAUX_NATURERow(ByVal row As SAUNAT_SUBAUX_NATURERow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAUNAT_SUBAUX_NATURERow(ByVal SAUNAT_SAU_CODE_FK_PK As Integer, ByVal SAUNAT_CDF_NASAU_CODE_FK_PK As String, ByVal SAUNAT_NUMORD As Short) As SAUNAT_SUBAUX_NATURERow
            Dim rowSAUNAT_SUBAUX_NATURERow As SAUNAT_SUBAUX_NATURERow = CType(Me.NewRow,SAUNAT_SUBAUX_NATURERow)
            rowSAUNAT_SUBAUX_NATURERow.ItemArray = New Object() {SAUNAT_SAU_CODE_FK_PK, SAUNAT_CDF_NASAU_CODE_FK_PK, SAUNAT_NUMORD}
            Me.Rows.Add(rowSAUNAT_SUBAUX_NATURERow)
            Return rowSAUNAT_SUBAUX_NATURERow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAUNAT_SAU_CODE_FK_PKSAUNAT_CDF_NASAU_CODE_FK_PK(ByVal SAUNAT_SAU_CODE_FK_PK As Integer, ByVal SAUNAT_CDF_NASAU_CODE_FK_PK As String) As SAUNAT_SUBAUX_NATURERow
            Return CType(Me.Rows.Find(New Object() {SAUNAT_SAU_CODE_FK_PK, SAUNAT_CDF_NASAU_CODE_FK_PK}),SAUNAT_SUBAUX_NATURERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAUNAT_SUBAUX_NATUREDataTable = CType(MyBase.Clone,SAUNAT_SUBAUX_NATUREDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAUNAT_SUBAUX_NATUREDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAUNAT_SAU_CODE_FK_PK = MyBase.Columns("SAUNAT_SAU_CODE_FK_PK")
            Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK = MyBase.Columns("SAUNAT_CDF_NASAU_CODE_FK_PK")
            Me.columnSAUNAT_NUMORD = MyBase.Columns("SAUNAT_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAUNAT_SAU_CODE_FK_PK = New System.Data.DataColumn("SAUNAT_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUNAT_SAU_CODE_FK_PK)
            Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK = New System.Data.DataColumn("SAUNAT_CDF_NASAU_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK)
            Me.columnSAUNAT_NUMORD = New System.Data.DataColumn("SAUNAT_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUNAT_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAUNAT_SAU_CODE_FK_PK, Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK}, true))
            Me.columnSAUNAT_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUNAT_CDF_NASAU_CODE_FK_PK.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAUNAT_SUBAUX_NATURERow() As SAUNAT_SUBAUX_NATURERow
            Return CType(Me.NewRow,SAUNAT_SUBAUX_NATURERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAUNAT_SUBAUX_NATURERow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAUNAT_SUBAUX_NATURERow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAUNAT_SUBAUX_NATURERowChangedEvent) Is Nothing) Then
                RaiseEvent SAUNAT_SUBAUX_NATURERowChanged(Me, New SAUNAT_SUBAUX_NATURERowChangeEvent(CType(e.Row,SAUNAT_SUBAUX_NATURERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAUNAT_SUBAUX_NATURERowChangingEvent) Is Nothing) Then
                RaiseEvent SAUNAT_SUBAUX_NATURERowChanging(Me, New SAUNAT_SUBAUX_NATURERowChangeEvent(CType(e.Row,SAUNAT_SUBAUX_NATURERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAUNAT_SUBAUX_NATURERowDeletedEvent) Is Nothing) Then
                RaiseEvent SAUNAT_SUBAUX_NATURERowDeleted(Me, New SAUNAT_SUBAUX_NATURERowChangeEvent(CType(e.Row,SAUNAT_SUBAUX_NATURERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAUNAT_SUBAUX_NATURERowDeletingEvent) Is Nothing) Then
                RaiseEvent SAUNAT_SUBAUX_NATURERowDeleting(Me, New SAUNAT_SUBAUX_NATURERowChangeEvent(CType(e.Row,SAUNAT_SUBAUX_NATURERow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAUNAT_SUBAUX_NATURERow(ByVal row As SAUNAT_SUBAUX_NATURERow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAUNAT_SUBAUX_NATUREDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAUVO_SUBAUXVOIE_SUBAUXDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSAUVO_SAU_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUVO_CDF_VOIE_CODE_FK_PK As System.Data.DataColumn
        
        Private columnSAUVO_DOSESEUIL As System.Data.DataColumn
        
        Private columnSAUVO_NUMORD As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAUVO_SUBAUXVOIE_SUBAUX"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUVO_SAU_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUVO_SAU_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUVO_CDF_VOIE_CODE_FK_PKColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUVO_CDF_VOIE_CODE_FK_PK
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUVO_DOSESEUILColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUVO_DOSESEUIL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAUVO_NUMORDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSAUVO_NUMORD
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAUVO_SUBAUXVOIE_SUBAUXRow
            Get
                Return CType(Me.Rows(index),SAUVO_SUBAUXVOIE_SUBAUXRow)
            End Get
        End Property
        
        Public Event SAUVO_SUBAUXVOIE_SUBAUXRowChanging As SAUVO_SUBAUXVOIE_SUBAUXRowChangeEventHandler
        
        Public Event SAUVO_SUBAUXVOIE_SUBAUXRowChanged As SAUVO_SUBAUXVOIE_SUBAUXRowChangeEventHandler
        
        Public Event SAUVO_SUBAUXVOIE_SUBAUXRowDeleting As SAUVO_SUBAUXVOIE_SUBAUXRowChangeEventHandler
        
        Public Event SAUVO_SUBAUXVOIE_SUBAUXRowDeleted As SAUVO_SUBAUXVOIE_SUBAUXRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSAUVO_SUBAUXVOIE_SUBAUXRow(ByVal row As SAUVO_SUBAUXVOIE_SUBAUXRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSAUVO_SUBAUXVOIE_SUBAUXRow(ByVal SAUVO_SAU_CODE_FK_PK As Integer, ByVal SAUVO_CDF_VOIE_CODE_FK_PK As String, ByVal SAUVO_DOSESEUIL As String, ByVal SAUVO_NUMORD As Short) As SAUVO_SUBAUXVOIE_SUBAUXRow
            Dim rowSAUVO_SUBAUXVOIE_SUBAUXRow As SAUVO_SUBAUXVOIE_SUBAUXRow = CType(Me.NewRow,SAUVO_SUBAUXVOIE_SUBAUXRow)
            rowSAUVO_SUBAUXVOIE_SUBAUXRow.ItemArray = New Object() {SAUVO_SAU_CODE_FK_PK, SAUVO_CDF_VOIE_CODE_FK_PK, SAUVO_DOSESEUIL, SAUVO_NUMORD}
            Me.Rows.Add(rowSAUVO_SUBAUXVOIE_SUBAUXRow)
            Return rowSAUVO_SUBAUXVOIE_SUBAUXRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySAUVO_SAU_CODE_FK_PKSAUVO_CDF_VOIE_CODE_FK_PK(ByVal SAUVO_SAU_CODE_FK_PK As Integer, ByVal SAUVO_CDF_VOIE_CODE_FK_PK As String) As SAUVO_SUBAUXVOIE_SUBAUXRow
            Return CType(Me.Rows.Find(New Object() {SAUVO_SAU_CODE_FK_PK, SAUVO_CDF_VOIE_CODE_FK_PK}),SAUVO_SUBAUXVOIE_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SAUVO_SUBAUXVOIE_SUBAUXDataTable = CType(MyBase.Clone,SAUVO_SUBAUXVOIE_SUBAUXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SAUVO_SUBAUXVOIE_SUBAUXDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAUVO_SAU_CODE_FK_PK = MyBase.Columns("SAUVO_SAU_CODE_FK_PK")
            Me.columnSAUVO_CDF_VOIE_CODE_FK_PK = MyBase.Columns("SAUVO_CDF_VOIE_CODE_FK_PK")
            Me.columnSAUVO_DOSESEUIL = MyBase.Columns("SAUVO_DOSESEUIL")
            Me.columnSAUVO_NUMORD = MyBase.Columns("SAUVO_NUMORD")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAUVO_SAU_CODE_FK_PK = New System.Data.DataColumn("SAUVO_SAU_CODE_FK_PK", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUVO_SAU_CODE_FK_PK)
            Me.columnSAUVO_CDF_VOIE_CODE_FK_PK = New System.Data.DataColumn("SAUVO_CDF_VOIE_CODE_FK_PK", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUVO_CDF_VOIE_CODE_FK_PK)
            Me.columnSAUVO_DOSESEUIL = New System.Data.DataColumn("SAUVO_DOSESEUIL", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUVO_DOSESEUIL)
            Me.columnSAUVO_NUMORD = New System.Data.DataColumn("SAUVO_NUMORD", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAUVO_NUMORD)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSAUVO_SAU_CODE_FK_PK, Me.columnSAUVO_CDF_VOIE_CODE_FK_PK}, true))
            Me.columnSAUVO_SAU_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUVO_CDF_VOIE_CODE_FK_PK.AllowDBNull = false
            Me.columnSAUVO_CDF_VOIE_CODE_FK_PK.MaxLength = 10
            Me.columnSAUVO_DOSESEUIL.MaxLength = 1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSAUVO_SUBAUXVOIE_SUBAUXRow() As SAUVO_SUBAUXVOIE_SUBAUXRow
            Return CType(Me.NewRow,SAUVO_SUBAUXVOIE_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SAUVO_SUBAUXVOIE_SUBAUXRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SAUVO_SUBAUXVOIE_SUBAUXRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAUVO_SUBAUXVOIE_SUBAUXRowChangedEvent) Is Nothing) Then
                RaiseEvent SAUVO_SUBAUXVOIE_SUBAUXRowChanged(Me, New SAUVO_SUBAUXVOIE_SUBAUXRowChangeEvent(CType(e.Row,SAUVO_SUBAUXVOIE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAUVO_SUBAUXVOIE_SUBAUXRowChangingEvent) Is Nothing) Then
                RaiseEvent SAUVO_SUBAUXVOIE_SUBAUXRowChanging(Me, New SAUVO_SUBAUXVOIE_SUBAUXRowChangeEvent(CType(e.Row,SAUVO_SUBAUXVOIE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAUVO_SUBAUXVOIE_SUBAUXRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAUVO_SUBAUXVOIE_SUBAUXRowDeleted(Me, New SAUVO_SUBAUXVOIE_SUBAUXRowChangeEvent(CType(e.Row,SAUVO_SUBAUXVOIE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAUVO_SUBAUXVOIE_SUBAUXRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAUVO_SUBAUXVOIE_SUBAUXRowDeleting(Me, New SAUVO_SUBAUXVOIE_SUBAUXRowChangeEvent(CType(e.Row,SAUVO_SUBAUXVOIE_SUBAUXRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSAUVO_SUBAUXVOIE_SUBAUXRow(ByVal row As SAUVO_SUBAUXVOIE_SUBAUXRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsTheriaque_Excipient = New dsTheriaque_Excipient
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAUVO_SUBAUXVOIE_SUBAUXDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAU_SUBAUXILIAIRERow
        Inherits System.Data.DataRow
        
        Private tableSAU_SUBAUXILIAIRE As SAU_SUBAUXILIAIREDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAU_SUBAUXILIAIRE = CType(Me.Table,SAU_SUBAUXILIAIREDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_SAC_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_SAC_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_SAC_CODE_FK' dans la table 'SAU_SUBAUXILIAIRE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_SAC_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_GSAU_CODE_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_GSAU_CODE_FKColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_GSAU_CODE_FK' dans la table 'SAU_SUBAUXILIAIRE' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_GSAU_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_NOM() As String
            Get
                Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_NOMColumn),String)
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_NOMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_DATECR() As Date
            Get
                Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATECRColumn),Date)
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATECRColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_DATEMJ() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATEMJColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_DATEMJ' dans la table 'SAU_SUBAUXILIAIRE' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATEMJColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_EFFETNOTOIRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_EFFETNOTOIREColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_EFFETNOTOIRE' dans la table 'SAU_SUBAUXILIAIRE' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_EFFETNOTOIREColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_CDF_DOC_CODE_FK() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_CDF_DOC_CODE_FKColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_CDF_DOC_CODE_FK' dans la table 'SAU_SUBAUXILIAIRE'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_CDF_DOC_CODE_FKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_DOC_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DOC_DATEColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_DOC_DATE' dans la table 'SAU_SUBAUXILIAIRE' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DOC_DATEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_TEXTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_TEXTEColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_TEXTE' dans la table 'SAU_SUBAUXILIAIRE' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_TEXTEColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_ETAT_COMMER() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_ETAT_COMMERColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_ETAT_COMMER' dans la table 'SAU_SUBAUXILIAIRE' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_ETAT_COMMERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAU_DATECOMMER() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATECOMMERColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAU_DATECOMMER' dans la table 'SAU_SUBAUXILIAIRE' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATECOMMERColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_SAC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_SAC_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_SAC_CODE_FKNull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_SAC_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_GSAU_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_GSAU_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_GSAU_CODE_FKNull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_GSAU_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_DATEMJNull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_DATEMJColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_DATEMJNull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATEMJColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_EFFETNOTOIRENull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_EFFETNOTOIREColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_EFFETNOTOIRENull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_EFFETNOTOIREColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_CDF_DOC_CODE_FKNull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_CDF_DOC_CODE_FKColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_CDF_DOC_CODE_FKNull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_CDF_DOC_CODE_FKColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_DOC_DATENull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_DOC_DATEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_DOC_DATENull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DOC_DATEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_TEXTENull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_TEXTEColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_TEXTENull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_TEXTEColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_ETAT_COMMERNull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_ETAT_COMMERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_ETAT_COMMERNull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_ETAT_COMMERColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAU_DATECOMMERNull() As Boolean
            Return Me.IsNull(Me.tableSAU_SUBAUXILIAIRE.SAU_DATECOMMERColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAU_DATECOMMERNull()
            Me(Me.tableSAU_SUBAUXILIAIRE.SAU_DATECOMMERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GSAU_PERE_SUBAUXRow
        Inherits System.Data.DataRow
        
        Private tableGSAU_PERE_SUBAUX As GSAU_PERE_SUBAUXDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGSAU_PERE_SUBAUX = CType(Me.Table,GSAU_PERE_SUBAUXDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSAU_CODE_SQ_PK() As Integer
            Get
                Return CType(Me(Me.tableGSAU_PERE_SUBAUX.GSAU_CODE_SQ_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableGSAU_PERE_SUBAUX.GSAU_CODE_SQ_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GSAU_NOM() As String
            Get
                Return CType(Me(Me.tableGSAU_PERE_SUBAUX.GSAU_NOMColumn),String)
            End Get
            Set
                Me(Me.tableGSAU_PERE_SUBAUX.GSAU_NOMColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYSAU_SYNONYME_SAURow
        Inherits System.Data.DataRow
        
        Private tableSYSAU_SYNONYME_SAU As SYSAU_SYNONYME_SAUDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYSAU_SYNONYME_SAU = CType(Me.Table,SYSAU_SYNONYME_SAUDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAU_NOM_PK() As String
            Get
                Return CType(Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYSAU_SAU_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_SAU_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableSYSAU_SYNONYME_SAU.SYSAU_SAU_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAUAFS_SAU_AFSRow
        Inherits System.Data.DataRow
        
        Private tableSAUAFS_SAU_AFS As SAUAFS_SAU_AFSDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAUAFS_SAU_AFS = CType(Me.Table,SAUAFS_SAU_AFSDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUAFS_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUAFS_CDF_DOCUMENT_FK_PK() As String
            Get
                Return CType(Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_CDF_DOCUMENT_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_CDF_DOCUMENT_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUAFS_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAUAFS_NUMORD' dans la table 'SAUAFS_SAU_AFS' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAUAFS_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSAUAFS_SAU_AFS.SAUAFS_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAUAFS_NUMORDNull()
            Me(Me.tableSAUAFS_SAU_AFS.SAUAFS_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ADSAU_AUTRE_DENOMINATION_SUBAURow
        Inherits System.Data.DataRow
        
        Private tableADSAU_AUTRE_DENOMINATION_SUBAU As ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableADSAU_AUTRE_DENOMINATION_SUBAU = CType(Me.Table,ADSAU_AUTRE_DENOMINATION_SUBAUDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADSAU_NOM_PK() As String
            Get
                Return CType(Me(Me.tableADSAU_AUTRE_DENOMINATION_SUBAU.ADSAU_NOM_PKColumn),String)
            End Get
            Set
                Me(Me.tableADSAU_AUTRE_DENOMINATION_SUBAU.ADSAU_NOM_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADSAU_SAU_CODE_FK() As Integer
            Get
                Return CType(Me(Me.tableADSAU_AUTRE_DENOMINATION_SUBAU.ADSAU_SAU_CODE_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableADSAU_AUTRE_DENOMINATION_SUBAU.ADSAU_SAU_CODE_FKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAUCCH_SUBAUX_CLASSECHRow
        Inherits System.Data.DataRow
        
        Private tableSAUCCH_SUBAUX_CLASSECH As SAUCCH_SUBAUX_CLASSECHDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAUCCH_SUBAUX_CLASSECH = CType(Me.Table,SAUCCH_SUBAUX_CLASSECHDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUCCH_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAUCCH_SUBAUX_CLASSECH.SAUCCH_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAUCCH_SUBAUX_CLASSECH.SAUCCH_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUCCH_CCH_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSAUCCH_SUBAUX_CLASSECH.SAUCCH_CCH_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSAUCCH_SUBAUX_CLASSECH.SAUCCH_CCH_CODE_FK_PKColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAUCAS_SAU_CASRow
        Inherits System.Data.DataRow
        
        Private tableSAUCAS_SAU_CAS As SAUCAS_SAU_CASDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAUCAS_SAU_CAS = CType(Me.Table,SAUCAS_SAU_CASDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUCAS_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUCAS_CAS_CODE_PK() As String
            Get
                Return CType(Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_CAS_CODE_PKColumn),String)
            End Get
            Set
                Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_CAS_CODE_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUCAS_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAUCAS_NUMORD' dans la table 'SAUCAS_SAU_CAS' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAUCAS_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSAUCAS_SAU_CAS.SAUCAS_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAUCAS_NUMORDNull()
            Me(Me.tableSAUCAS_SAU_CAS.SAUCAS_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAUNAV_SUBAUX_NATURE_VECTRow
        Inherits System.Data.DataRow
        
        Private tableSAUNAV_SUBAUX_NATURE_VECT As SAUNAV_SUBAUX_NATURE_VECTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAUNAV_SUBAUX_NATURE_VECT = CType(Me.Table,SAUNAV_SUBAUX_NATURE_VECTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUNAV_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUNAV_CDF_NAV_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_CDF_NAV_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_CDF_NAV_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUNAV_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAUNAV_NUMORD' dans la table 'SAUNAV_SUBAUX_NATURE_VEC"& _ 
                            "T' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAUNAV_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAUNAV_NUMORDNull()
            Me(Me.tableSAUNAV_SUBAUX_NATURE_VECT.SAUNAV_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAUNAT_SUBAUX_NATURERow
        Inherits System.Data.DataRow
        
        Private tableSAUNAT_SUBAUX_NATURE As SAUNAT_SUBAUX_NATUREDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAUNAT_SUBAUX_NATURE = CType(Me.Table,SAUNAT_SUBAUX_NATUREDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUNAT_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUNAT_CDF_NASAU_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_CDF_NASAU_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_CDF_NASAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUNAT_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAUNAT_NUMORD' dans la table 'SAUNAT_SUBAUX_NATURE' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAUNAT_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAUNAT_NUMORDNull()
            Me(Me.tableSAUNAT_SUBAUX_NATURE.SAUNAT_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SAUVO_SUBAUXVOIE_SUBAUXRow
        Inherits System.Data.DataRow
        
        Private tableSAUVO_SUBAUXVOIE_SUBAUX As SAUVO_SUBAUXVOIE_SUBAUXDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAUVO_SUBAUXVOIE_SUBAUX = CType(Me.Table,SAUVO_SUBAUXVOIE_SUBAUXDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUVO_SAU_CODE_FK_PK() As Integer
            Get
                Return CType(Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_SAU_CODE_FK_PKColumn),Integer)
            End Get
            Set
                Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_SAU_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUVO_CDF_VOIE_CODE_FK_PK() As String
            Get
                Return CType(Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_CDF_VOIE_CODE_FK_PKColumn),String)
            End Get
            Set
                Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_CDF_VOIE_CODE_FK_PKColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUVO_DOSESEUIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_DOSESEUILColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAUVO_DOSESEUIL' dans la table 'SAUVO_SUBAUXVOIE_SUBAU"& _ 
                            "X' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_DOSESEUILColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAUVO_NUMORD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_NUMORDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SAUVO_NUMORD' dans la table 'SAUVO_SUBAUXVOIE_SUBAUX' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_NUMORDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAUVO_DOSESEUILNull() As Boolean
            Return Me.IsNull(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_DOSESEUILColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAUVO_DOSESEUILNull()
            Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_DOSESEUILColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAUVO_NUMORDNull() As Boolean
            Return Me.IsNull(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_NUMORDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAUVO_NUMORDNull()
            Me(Me.tableSAUVO_SUBAUXVOIE_SUBAUX.SAUVO_NUMORDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAU_SUBAUXILIAIRERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAU_SUBAUXILIAIRERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAU_SUBAUXILIAIRERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAU_SUBAUXILIAIRERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GSAU_PERE_SUBAUXRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As GSAU_PERE_SUBAUXRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GSAU_PERE_SUBAUXRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GSAU_PERE_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYSAU_SYNONYME_SAURowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYSAU_SYNONYME_SAURow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYSAU_SYNONYME_SAURow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYSAU_SYNONYME_SAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAUAFS_SAU_AFSRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAUAFS_SAU_AFSRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAUAFS_SAU_AFSRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAUAFS_SAU_AFSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ADSAU_AUTRE_DENOMINATION_SUBAURowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ADSAU_AUTRE_DENOMINATION_SUBAURow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ADSAU_AUTRE_DENOMINATION_SUBAURow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ADSAU_AUTRE_DENOMINATION_SUBAURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAUCCH_SUBAUX_CLASSECHRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAUCCH_SUBAUX_CLASSECHRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAUCCH_SUBAUX_CLASSECHRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAUCCH_SUBAUX_CLASSECHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAUCAS_SAU_CASRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAUCAS_SAU_CASRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAUCAS_SAU_CASRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAUCAS_SAU_CASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAUNAV_SUBAUX_NATURE_VECTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAUNAV_SUBAUX_NATURE_VECTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAUNAV_SUBAUX_NATURE_VECTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAUNAV_SUBAUX_NATURE_VECTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAUNAT_SUBAUX_NATURERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAUNAT_SUBAUX_NATURERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAUNAT_SUBAUX_NATURERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAUNAT_SUBAUX_NATURERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SAUVO_SUBAUXVOIE_SUBAUXRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SAUVO_SUBAUXVOIE_SUBAUXRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SAUVO_SUBAUXVOIE_SUBAUXRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SAUVO_SUBAUXVOIE_SUBAUXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsTheriaque_ExcipientTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAU_SUBAUXILIAIRETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAU_SUBAUXILIAIRE"
            tableMapping.ColumnMappings.Add("SAU_CODE_SQ_PK", "SAU_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("SAU_SAC_CODE_FK", "SAU_SAC_CODE_FK")
            tableMapping.ColumnMappings.Add("SAU_GSAU_CODE_FK", "SAU_GSAU_CODE_FK")
            tableMapping.ColumnMappings.Add("SAU_NOM", "SAU_NOM")
            tableMapping.ColumnMappings.Add("SAU_DATECR", "SAU_DATECR")
            tableMapping.ColumnMappings.Add("SAU_DATEMJ", "SAU_DATEMJ")
            tableMapping.ColumnMappings.Add("SAU_EFFETNOTOIRE", "SAU_EFFETNOTOIRE")
            tableMapping.ColumnMappings.Add("SAU_CDF_DOC_CODE_FK", "SAU_CDF_DOC_CODE_FK")
            tableMapping.ColumnMappings.Add("SAU_DOC_DATE", "SAU_DOC_DATE")
            tableMapping.ColumnMappings.Add("SAU_TEXTE", "SAU_TEXTE")
            tableMapping.ColumnMappings.Add("SAU_ETAT_COMMER", "SAU_ETAT_COMMER")
            tableMapping.ColumnMappings.Add("SAU_DATECOMMER", "SAU_DATECOMMER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAU_SUBAUXILIAIRE] WHERE (([SAU_CODE_SQ_PK] = @Original_"& _ 
                "SAU_CODE_SQ_PK) AND ((@IsNull_SAU_SAC_CODE_FK = 1 AND [SAU_SAC_CODE_FK] IS NULL)"& _ 
                " OR ([SAU_SAC_CODE_FK] = @Original_SAU_SAC_CODE_FK)) AND ((@IsNull_SAU_GSAU_CODE"& _ 
                "_FK = 1 AND [SAU_GSAU_CODE_FK] IS NULL) OR ([SAU_GSAU_CODE_FK] = @Original_SAU_G"& _ 
                "SAU_CODE_FK)) AND ([SAU_NOM] = @Original_SAU_NOM) AND ([SAU_DATECR] = @Original_"& _ 
                "SAU_DATECR) AND ((@IsNull_SAU_DATEMJ = 1 AND [SAU_DATEMJ] IS NULL) OR ([SAU_DATE"& _ 
                "MJ] = @Original_SAU_DATEMJ)) AND ((@IsNull_SAU_EFFETNOTOIRE = 1 AND [SAU_EFFETNO"& _ 
                "TOIRE] IS NULL) OR ([SAU_EFFETNOTOIRE] = @Original_SAU_EFFETNOTOIRE)) AND ((@IsN"& _ 
                "ull_SAU_CDF_DOC_CODE_FK = 1 AND [SAU_CDF_DOC_CODE_FK] IS NULL) OR ([SAU_CDF_DOC_"& _ 
                "CODE_FK] = @Original_SAU_CDF_DOC_CODE_FK)) AND ((@IsNull_SAU_DOC_DATE = 1 AND [S"& _ 
                "AU_DOC_DATE] IS NULL) OR ([SAU_DOC_DATE] = @Original_SAU_DOC_DATE)) AND ((@IsNul"& _ 
                "l_SAU_TEXTE = 1 AND [SAU_TEXTE] IS NULL) OR ([SAU_TEXTE] = @Original_SAU_TEXTE))"& _ 
                " AND ((@IsNull_SAU_ETAT_COMMER = 1 AND [SAU_ETAT_COMMER] IS NULL) OR ([SAU_ETAT_"& _ 
                "COMMER] = @Original_SAU_ETAT_COMMER)) AND ((@IsNull_SAU_DATECOMMER = 1 AND [SAU_"& _ 
                "DATECOMMER] IS NULL) OR ([SAU_DATECOMMER] = @Original_SAU_DATECOMMER)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_SAC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_SAC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_SAC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_SAC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_GSAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_GSAU_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_GSAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_GSAU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_EFFETNOTOIRE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_EFFETNOTOIRE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_EFFETNOTOIRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_EFFETNOTOIRE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_CDF_DOC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CDF_DOC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_CDF_DOC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CDF_DOC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_DOC_DATE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DOC_DATE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DOC_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DOC_DATE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_ETAT_COMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_ETAT_COMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_ETAT_COMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_DATECOMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECOMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECOMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAU_SUBAUXILIAIRE] ([SAU_CODE_SQ_PK], [SAU_SAC_CODE_FK],"& _ 
                " [SAU_GSAU_CODE_FK], [SAU_NOM], [SAU_DATECR], [SAU_DATEMJ], [SAU_EFFETNOTOIRE], "& _ 
                "[SAU_CDF_DOC_CODE_FK], [SAU_DOC_DATE], [SAU_TEXTE], [SAU_ETAT_COMMER], [SAU_DATE"& _ 
                "COMMER]) VALUES (@SAU_CODE_SQ_PK, @SAU_SAC_CODE_FK, @SAU_GSAU_CODE_FK, @SAU_NOM,"& _ 
                " @SAU_DATECR, @SAU_DATEMJ, @SAU_EFFETNOTOIRE, @SAU_CDF_DOC_CODE_FK, @SAU_DOC_DAT"& _ 
                "E, @SAU_TEXTE, @SAU_ETAT_COMMER, @SAU_DATECOMMER);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAU_CODE_SQ_PK, SAU_S"& _ 
                "AC_CODE_FK, SAU_GSAU_CODE_FK, SAU_NOM, SAU_DATECR, SAU_DATEMJ, SAU_EFFETNOTOIRE,"& _ 
                " SAU_CDF_DOC_CODE_FK, SAU_DOC_DATE, SAU_TEXTE, SAU_ETAT_COMMER, SAU_DATECOMMER F"& _ 
                "ROM THERIAQUE.SAU_SUBAUXILIAIRE WHERE (SAU_CODE_SQ_PK = @SAU_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_SAC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_SAC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_GSAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_GSAU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_EFFETNOTOIRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_EFFETNOTOIRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_CDF_DOC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CDF_DOC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DOC_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DOC_DATE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_ETAT_COMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECOMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAU_SUBAUXILIAIRE] SET [SAU_CODE_SQ_PK] = @SAU_CODE_SQ_PK, [S"& _ 
                "AU_SAC_CODE_FK] = @SAU_SAC_CODE_FK, [SAU_GSAU_CODE_FK] = @SAU_GSAU_CODE_FK, [SAU"& _ 
                "_NOM] = @SAU_NOM, [SAU_DATECR] = @SAU_DATECR, [SAU_DATEMJ] = @SAU_DATEMJ, [SAU_E"& _ 
                "FFETNOTOIRE] = @SAU_EFFETNOTOIRE, [SAU_CDF_DOC_CODE_FK] = @SAU_CDF_DOC_CODE_FK, "& _ 
                "[SAU_DOC_DATE] = @SAU_DOC_DATE, [SAU_TEXTE] = @SAU_TEXTE, [SAU_ETAT_COMMER] = @S"& _ 
                "AU_ETAT_COMMER, [SAU_DATECOMMER] = @SAU_DATECOMMER WHERE (([SAU_CODE_SQ_PK] = @O"& _ 
                "riginal_SAU_CODE_SQ_PK) AND ((@IsNull_SAU_SAC_CODE_FK = 1 AND [SAU_SAC_CODE_FK] "& _ 
                "IS NULL) OR ([SAU_SAC_CODE_FK] = @Original_SAU_SAC_CODE_FK)) AND ((@IsNull_SAU_G"& _ 
                "SAU_CODE_FK = 1 AND [SAU_GSAU_CODE_FK] IS NULL) OR ([SAU_GSAU_CODE_FK] = @Origin"& _ 
                "al_SAU_GSAU_CODE_FK)) AND ([SAU_NOM] = @Original_SAU_NOM) AND ([SAU_DATECR] = @O"& _ 
                "riginal_SAU_DATECR) AND ((@IsNull_SAU_DATEMJ = 1 AND [SAU_DATEMJ] IS NULL) OR (["& _ 
                "SAU_DATEMJ] = @Original_SAU_DATEMJ)) AND ((@IsNull_SAU_EFFETNOTOIRE = 1 AND [SAU"& _ 
                "_EFFETNOTOIRE] IS NULL) OR ([SAU_EFFETNOTOIRE] = @Original_SAU_EFFETNOTOIRE)) AN"& _ 
                "D ((@IsNull_SAU_CDF_DOC_CODE_FK = 1 AND [SAU_CDF_DOC_CODE_FK] IS NULL) OR ([SAU_"& _ 
                "CDF_DOC_CODE_FK] = @Original_SAU_CDF_DOC_CODE_FK)) AND ((@IsNull_SAU_DOC_DATE = "& _ 
                "1 AND [SAU_DOC_DATE] IS NULL) OR ([SAU_DOC_DATE] = @Original_SAU_DOC_DATE)) AND "& _ 
                "((@IsNull_SAU_TEXTE = 1 AND [SAU_TEXTE] IS NULL) OR ([SAU_TEXTE] = @Original_SAU"& _ 
                "_TEXTE)) AND ((@IsNull_SAU_ETAT_COMMER = 1 AND [SAU_ETAT_COMMER] IS NULL) OR ([S"& _ 
                "AU_ETAT_COMMER] = @Original_SAU_ETAT_COMMER)) AND ((@IsNull_SAU_DATECOMMER = 1 A"& _ 
                "ND [SAU_DATECOMMER] IS NULL) OR ([SAU_DATECOMMER] = @Original_SAU_DATECOMMER)));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAU_CODE_SQ_PK, SAU_SAC_CODE_FK, SAU_GSAU_CODE_FK, SAU_NOM, SAU_DATECR,"& _ 
                " SAU_DATEMJ, SAU_EFFETNOTOIRE, SAU_CDF_DOC_CODE_FK, SAU_DOC_DATE, SAU_TEXTE, SAU"& _ 
                "_ETAT_COMMER, SAU_DATECOMMER FROM THERIAQUE.SAU_SUBAUXILIAIRE WHERE (SAU_CODE_SQ"& _ 
                "_PK = @SAU_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CODE_SQ_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_SAC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_SAC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_GSAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_GSAU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_NOM", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECR", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATEMJ", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_EFFETNOTOIRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_EFFETNOTOIRE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_CDF_DOC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CDF_DOC_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DOC_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DOC_DATE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_TEXTE", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_ETAT_COMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECOMMER", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CODE_SQ_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_SAC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_SAC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_SAC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_SAC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_GSAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_GSAU_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_GSAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_GSAU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_NOM", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DATECR", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECR", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_DATEMJ", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATEMJ", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DATEMJ", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATEMJ", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_EFFETNOTOIRE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_EFFETNOTOIRE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_EFFETNOTOIRE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_EFFETNOTOIRE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_CDF_DOC_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CDF_DOC_CODE_FK", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_CDF_DOC_CODE_FK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_CDF_DOC_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_DOC_DATE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DOC_DATE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DOC_DATE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DOC_DATE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_TEXTE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_TEXTE", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_TEXTE", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_TEXTE", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_ETAT_COMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_ETAT_COMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_ETAT_COMMER", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_ETAT_COMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAU_DATECOMMER", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECOMMER", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAU_DATECOMMER", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SAU_DATECOMMER", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAU_CODE_SQ_PK, SAU_SAC_CODE_FK, SAU_GSAU_CODE_FK, SAU_NOM, SAU_DATECR, SA" & _
                "U_DATEMJ, SAU_EFFETNOTOIRE, SAU_CDF_DOC_CODE_FK, SAU_DOC_DATE, SAU_TEXTE, SAU_ET" & _
                "AT_COMMER, SAU_DATECOMMER FROM THERIAQUE.SAU_SUBAUXILIAIRE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAU_CODE_SQ_PK, SAU_SAC_CODE_FK, SAU_GSAU_CODE_FK, SAU_NOM, SAU_DATECR, SA" & _
                "U_DATEMJ, SAU_EFFETNOTOIRE, SAU_CDF_DOC_CODE_FK, SAU_DOC_DATE, SAU_TEXTE, SAU_ET" & _
                "AT_COMMER, SAU_DATECOMMER FROM THERIAQUE.SAU_SUBAUXILIAIRE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAU_CODE_SQ_PK" & _
                " = @SAU_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAU_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable = New dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable, ByVal SAU_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAU_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAU_CODE_SQ_PK As Integer) As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAU_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable = New dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAU_SUBAUXILIAIREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAU_SUBAUXILIAIRE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAU_CODE_SQ_PK As Integer, ByVal Original_SAU_SAC_CODE_FK As System.Nullable(Of Integer), ByVal Original_SAU_GSAU_CODE_FK As System.Nullable(Of Integer), ByVal Original_SAU_NOM As String, ByVal Original_SAU_DATECR As Date, ByVal Original_SAU_DATEMJ As System.Nullable(Of Date), ByVal Original_SAU_EFFETNOTOIRE As String, ByVal Original_SAU_CDF_DOC_CODE_FK As String, ByVal Original_SAU_DOC_DATE As System.Nullable(Of Date), ByVal Original_SAU_TEXTE As String, ByVal Original_SAU_ETAT_COMMER As String, ByVal Original_SAU_DATECOMMER As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAU_CODE_SQ_PK, Integer)
            If (Original_SAU_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SAU_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_SAU_GSAU_CODE_FK.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SAU_GSAU_CODE_FK.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_SAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAU_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SAU_NOM, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SAU_DATECR, Date)
            If (Original_SAU_DATEMJ.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SAU_DATEMJ.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_SAU_EFFETNOTOIRE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SAU_EFFETNOTOIRE, String)
            End If
            If (Original_SAU_CDF_DOC_CODE_FK Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SAU_CDF_DOC_CODE_FK, String)
            End If
            If (Original_SAU_DOC_DATE.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SAU_DOC_DATE.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_SAU_TEXTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SAU_TEXTE, String)
            End If
            If (Original_SAU_ETAT_COMMER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SAU_ETAT_COMMER, String)
            End If
            If (Original_SAU_DATECOMMER.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SAU_DATECOMMER.Value, Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAU_CODE_SQ_PK As Integer, ByVal SAU_SAC_CODE_FK As System.Nullable(Of Integer), ByVal SAU_GSAU_CODE_FK As System.Nullable(Of Integer), ByVal SAU_NOM As String, ByVal SAU_DATECR As Date, ByVal SAU_DATEMJ As System.Nullable(Of Date), ByVal SAU_EFFETNOTOIRE As String, ByVal SAU_CDF_DOC_CODE_FK As String, ByVal SAU_DOC_DATE As System.Nullable(Of Date), ByVal SAU_TEXTE As String, ByVal SAU_ETAT_COMMER As String, ByVal SAU_DATECOMMER As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAU_CODE_SQ_PK, Integer)
            If (SAU_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAU_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SAU_GSAU_CODE_FK.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAU_GSAU_CODE_FK.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (SAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("SAU_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAU_NOM, String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(SAU_DATECR, Date)
            If (SAU_DATEMJ.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SAU_DATEMJ.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (SAU_EFFETNOTOIRE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SAU_EFFETNOTOIRE, String)
            End If
            If (SAU_CDF_DOC_CODE_FK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SAU_CDF_DOC_CODE_FK, String)
            End If
            If (SAU_DOC_DATE.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SAU_DOC_DATE.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (SAU_TEXTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SAU_TEXTE, String)
            End If
            If (SAU_ETAT_COMMER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SAU_ETAT_COMMER, String)
            End If
            If (SAU_DATECOMMER.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SAU_DATECOMMER.Value, Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal SAU_CODE_SQ_PK As Integer, _
                    ByVal SAU_SAC_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SAU_GSAU_CODE_FK As System.Nullable(Of Integer), _
                    ByVal SAU_NOM As String, _
                    ByVal SAU_DATECR As Date, _
                    ByVal SAU_DATEMJ As System.Nullable(Of Date), _
                    ByVal SAU_EFFETNOTOIRE As String, _
                    ByVal SAU_CDF_DOC_CODE_FK As String, _
                    ByVal SAU_DOC_DATE As System.Nullable(Of Date), _
                    ByVal SAU_TEXTE As String, _
                    ByVal SAU_ETAT_COMMER As String, _
                    ByVal SAU_DATECOMMER As System.Nullable(Of Date), _
                    ByVal Original_SAU_CODE_SQ_PK As Integer, _
                    ByVal Original_SAU_SAC_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SAU_GSAU_CODE_FK As System.Nullable(Of Integer), _
                    ByVal Original_SAU_NOM As String, _
                    ByVal Original_SAU_DATECR As Date, _
                    ByVal Original_SAU_DATEMJ As System.Nullable(Of Date), _
                    ByVal Original_SAU_EFFETNOTOIRE As String, _
                    ByVal Original_SAU_CDF_DOC_CODE_FK As String, _
                    ByVal Original_SAU_DOC_DATE As System.Nullable(Of Date), _
                    ByVal Original_SAU_TEXTE As String, _
                    ByVal Original_SAU_ETAT_COMMER As String, _
                    ByVal Original_SAU_DATECOMMER As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAU_CODE_SQ_PK, Integer)
            If (SAU_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAU_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SAU_GSAU_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAU_GSAU_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (SAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("SAU_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAU_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SAU_DATECR, Date)
            If (SAU_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SAU_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (SAU_EFFETNOTOIRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SAU_EFFETNOTOIRE, String)
            End If
            If (SAU_CDF_DOC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SAU_CDF_DOC_CODE_FK, String)
            End If
            If (SAU_DOC_DATE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SAU_DOC_DATE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (SAU_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SAU_TEXTE, String)
            End If
            If (SAU_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SAU_ETAT_COMMER, String)
            End If
            If (SAU_DATECOMMER.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SAU_DATECOMMER.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SAU_CODE_SQ_PK, Integer)
            If (Original_SAU_SAC_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_SAU_SAC_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_SAU_GSAU_CODE_FK.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SAU_GSAU_CODE_FK.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_SAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAU_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SAU_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SAU_DATECR, Date)
            If (Original_SAU_DATEMJ.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_SAU_DATEMJ.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_SAU_EFFETNOTOIRE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SAU_EFFETNOTOIRE, String)
            End If
            If (Original_SAU_CDF_DOC_CODE_FK Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_SAU_CDF_DOC_CODE_FK, String)
            End If
            If (Original_SAU_DOC_DATE.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SAU_DOC_DATE.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_SAU_TEXTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SAU_TEXTE, String)
            End If
            If (Original_SAU_ETAT_COMMER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SAU_ETAT_COMMER, String)
            End If
            If (Original_SAU_DATECOMMER.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SAU_DATECOMMER.Value, Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class GSAU_PERE_SUBAUXTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GSAU_PERE_SUBAUX"
            tableMapping.ColumnMappings.Add("GSAU_CODE_SQ_PK", "GSAU_CODE_SQ_PK")
            tableMapping.ColumnMappings.Add("GSAU_NOM", "GSAU_NOM")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[GSAU_PERE_SUBAUX] WHERE (([GSAU_CODE_SQ_PK] = @Original_" & _
                "GSAU_CODE_SQ_PK) AND ([GSAU_NOM] = @Original_GSAU_NOM))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_GSAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_GSAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[GSAU_PERE_SUBAUX] ([GSAU_CODE_SQ_PK], [GSAU_NOM]) VALUES" & _
                " (@GSAU_CODE_SQ_PK, @GSAU_NOM);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THERIAQUE" & _
                ".GSAU_PERE_SUBAUX WHERE (GSAU_CODE_SQ_PK = @GSAU_CODE_SQ_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@GSAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@GSAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[GSAU_PERE_SUBAUX] SET [GSAU_CODE_SQ_PK] = @GSAU_CODE_SQ_PK, [" & _
                "GSAU_NOM] = @GSAU_NOM WHERE (([GSAU_CODE_SQ_PK] = @Original_GSAU_CODE_SQ_PK) AND" & _
                " ([GSAU_NOM] = @Original_GSAU_NOM));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THER" & _
                "IAQUE.GSAU_PERE_SUBAUX WHERE (GSAU_CODE_SQ_PK = @GSAU_CODE_SQ_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@GSAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@GSAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_GSAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_GSAU_NOM", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GSAU_NOM", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THERIAQUE.GSAU_PERE_SUBAUX"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT GSAU_CODE_SQ_PK, GSAU_NOM FROM THERIAQUE.GSAU_PERE_SUBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE GSAU_CODE" & _
                "_SQ_PK = @GSAU_CODE_SQ_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@GSAU_CODE_SQ_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "GSAU_CODE_SQ_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable = New dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable, ByVal GSAU_CODE_SQ_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GSAU_CODE_SQ_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal GSAU_CODE_SQ_PK As Integer) As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(GSAU_CODE_SQ_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable = New dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.GSAU_PERE_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "GSAU_PERE_SUBAUX")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_GSAU_CODE_SQ_PK As Integer, ByVal Original_GSAU_NOM As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_GSAU_CODE_SQ_PK, Integer)
            If (Original_GSAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_GSAU_NOM")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_GSAU_NOM, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal GSAU_CODE_SQ_PK As Integer, ByVal GSAU_NOM As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(GSAU_CODE_SQ_PK, Integer)
            If (GSAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("GSAU_NOM")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(GSAU_NOM, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal GSAU_CODE_SQ_PK As Integer, ByVal GSAU_NOM As String, ByVal Original_GSAU_CODE_SQ_PK As Integer, ByVal Original_GSAU_NOM As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(GSAU_CODE_SQ_PK, Integer)
            If (GSAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("GSAU_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(GSAU_NOM, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_GSAU_CODE_SQ_PK, Integer)
            If (Original_GSAU_NOM Is Nothing) Then
                Throw New System.ArgumentNullException("Original_GSAU_NOM")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_GSAU_NOM, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYSAU_SYNONYME_SAUTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYSAU_SYNONYME_SAU"
            tableMapping.ColumnMappings.Add("SYSAU_NOM_PK", "SYSAU_NOM_PK")
            tableMapping.ColumnMappings.Add("SYSAU_SAU_CODE_FK", "SYSAU_SAU_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SYSAU_SYNONYME_SAU] WHERE (([SYSAU_NOM_PK] = @Original_S"& _ 
                "YSAU_NOM_PK) AND ([SYSAU_SAU_CODE_FK] = @Original_SYSAU_SAU_CODE_FK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SYSAU_SYNONYME_SAU] ([SYSAU_NOM_PK], [SYSAU_SAU_CODE_FK]"& _ 
                ") VALUES (@SYSAU_NOM_PK, @SYSAU_SAU_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYSAU_NOM_PK, SYSAU_SAU_CO"& _ 
                "DE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU WHERE (SYSAU_NOM_PK = @SYSAU_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SYSAU_SYNONYME_SAU] SET [SYSAU_NOM_PK] = @SYSAU_NOM_PK, [SYSA"& _ 
                "U_SAU_CODE_FK] = @SYSAU_SAU_CODE_FK WHERE (([SYSAU_NOM_PK] = @Original_SYSAU_NOM"& _ 
                "_PK) AND ([SYSAU_SAU_CODE_FK] = @Original_SYSAU_SAU_CODE_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SYSAU_NOM"& _ 
                "_PK, SYSAU_SAU_CODE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU WHERE (SYSAU_NOM_PK = @"& _ 
                "SYSAU_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SYSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYSAU_NOM_PK, SYSAU_SAU_CODE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SYSAU_NOM_PK, SYSAU_SAU_CODE_FK FROM THERIAQUE.SYSAU_SYNONYME_SAU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE S" & _
                "YSAU_SAU_CODE_FK = @SYSAU_SAU_CODE_FK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SYSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SYSAU_SAU_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable = New dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable, ByVal SYSAU_SAU_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYSAU_SAU_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SYSAU_SAU_CODE_FK As Integer) As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SYSAU_SAU_CODE_FK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable = New dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SYSAU_SYNONYME_SAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SYSAU_SYNONYME_SAU")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SYSAU_NOM_PK As String, ByVal Original_SYSAU_SAU_CODE_FK As Integer) As Integer
            If (Original_SYSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYSAU_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYSAU_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SYSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SYSAU_NOM_PK As String, ByVal SYSAU_SAU_CODE_FK As Integer) As Integer
            If (SYSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYSAU_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYSAU_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SYSAU_NOM_PK As String, ByVal SYSAU_SAU_CODE_FK As Integer, ByVal Original_SYSAU_NOM_PK As String, ByVal Original_SYSAU_SAU_CODE_FK As Integer) As Integer
            If (SYSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SYSAU_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYSAU_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYSAU_SAU_CODE_FK, Integer)
            If (Original_SYSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SYSAU_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYSAU_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SYSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SAUAFS_SAU_AFSTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAUAFS_SAU_AFS"
            tableMapping.ColumnMappings.Add("SAUAFS_SAU_CODE_FK_PK", "SAUAFS_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUAFS_CDF_DOCUMENT_FK_PK", "SAUAFS_CDF_DOCUMENT_FK_PK")
            tableMapping.ColumnMappings.Add("SAUAFS_NUMORD", "SAUAFS_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAUAFS_SAU_AFS] WHERE (([SAUAFS_SAU_CODE_FK_PK] = @Origi" & _
                "nal_SAUAFS_SAU_CODE_FK_PK) AND ([SAUAFS_CDF_DOCUMENT_FK_PK] = @Original_SAUAFS_C" & _
                "DF_DOCUMENT_FK_PK) AND ((@IsNull_SAUAFS_NUMORD = 1 AND [SAUAFS_NUMORD] IS NULL) " & _
                "OR ([SAUAFS_NUMORD] = @Original_SAUAFS_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUAFS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUAFS_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUAFS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAUAFS_SAU_AFS] ([SAUAFS_SAU_CODE_FK_PK], [SAUAFS_CDF_DO" & _
                "CUMENT_FK_PK], [SAUAFS_NUMORD]) VALUES (@SAUAFS_SAU_CODE_FK_PK, @SAUAFS_CDF_DOCU" & _
                "MENT_FK_PK, @SAUAFS_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAUAFS_SAU_CODE_FK_PK, SAUAFS_CDF_DOCUMENT_" & _
                "FK_PK, SAUAFS_NUMORD FROM THERIAQUE.SAUAFS_SAU_AFS WHERE (SAUAFS_CDF_DOCUMENT_FK" & _
                "_PK = @SAUAFS_CDF_DOCUMENT_FK_PK) AND (SAUAFS_SAU_CODE_FK_PK = @SAUAFS_SAU_CODE_" & _
                "FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAUAFS_SAU_AFS] SET [SAUAFS_SAU_CODE_FK_PK] = @SAUAFS_SAU_COD" & _
                "E_FK_PK, [SAUAFS_CDF_DOCUMENT_FK_PK] = @SAUAFS_CDF_DOCUMENT_FK_PK, [SAUAFS_NUMOR" & _
                "D] = @SAUAFS_NUMORD WHERE (([SAUAFS_SAU_CODE_FK_PK] = @Original_SAUAFS_SAU_CODE_" & _
                "FK_PK) AND ([SAUAFS_CDF_DOCUMENT_FK_PK] = @Original_SAUAFS_CDF_DOCUMENT_FK_PK) A" & _
                "ND ((@IsNull_SAUAFS_NUMORD = 1 AND [SAUAFS_NUMORD] IS NULL) OR ([SAUAFS_NUMORD] " & _
                "= @Original_SAUAFS_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAUAFS_SAU_CODE_FK_PK, SAUAFS_CDF_DOCUMENT" & _
                "_FK_PK, SAUAFS_NUMORD FROM THERIAQUE.SAUAFS_SAU_AFS WHERE (SAUAFS_CDF_DOCUMENT_F" & _
                "K_PK = @SAUAFS_CDF_DOCUMENT_FK_PK) AND (SAUAFS_SAU_CODE_FK_PK = @SAUAFS_SAU_CODE" & _
                "_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUAFS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_CDF_DOCUMENT_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUAFS_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUAFS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAUAFS_SAU_CODE_FK_PK, SAUAFS_CDF_DOCUMENT_FK_PK, SAUAFS_NUMORD FROM THERI" & _
                "AQUE.SAUAFS_SAU_AFS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAUAFS_SAU_CODE_FK_PK, SAUAFS_CDF_DOCUMENT_FK_PK, SAUAFS_NUMORD FROM THERI" & _
                "AQUE.SAUAFS_SAU_AFS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAUAFS_SAU_CODE_FK_PK = @SAUAFS_SAU_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUAFS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAUAFS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable = New dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable, ByVal SAUAFS_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUAFS_SAU_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAUAFS_SAU_CODE_FK_PK As Integer) As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUAFS_SAU_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable = New dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAUAFS_SAU_AFSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAUAFS_SAU_AFS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAUAFS_SAU_CODE_FK_PK As Integer, ByVal Original_SAUAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_SAUAFS_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAUAFS_SAU_CODE_FK_PK, Integer)
            If (Original_SAUAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAUAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            If (Original_SAUAFS_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAUAFS_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAUAFS_SAU_CODE_FK_PK As Integer, ByVal SAUAFS_CDF_DOCUMENT_FK_PK As String, ByVal SAUAFS_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAUAFS_SAU_CODE_FK_PK, Integer)
            If (SAUAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAUAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            If (SAUAFS_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAUAFS_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAUAFS_SAU_CODE_FK_PK As Integer, ByVal SAUAFS_CDF_DOCUMENT_FK_PK As String, ByVal SAUAFS_NUMORD As System.Nullable(Of Short), ByVal Original_SAUAFS_SAU_CODE_FK_PK As Integer, ByVal Original_SAUAFS_CDF_DOCUMENT_FK_PK As String, ByVal Original_SAUAFS_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAUAFS_SAU_CODE_FK_PK, Integer)
            If (SAUAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAUAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            If (SAUAFS_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAUAFS_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAUAFS_SAU_CODE_FK_PK, Integer)
            If (Original_SAUAFS_CDF_DOCUMENT_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUAFS_CDF_DOCUMENT_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SAUAFS_CDF_DOCUMENT_FK_PK, String)
            End If
            If (Original_SAUAFS_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SAUAFS_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ADSAU_AUTRE_DENOMINATION_SUBAUTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ADSAU_AUTRE_DENOMINATION_SUBAU"
            tableMapping.ColumnMappings.Add("ADSAU_NOM_PK", "ADSAU_NOM_PK")
            tableMapping.ColumnMappings.Add("ADSAU_SAU_CODE_FK", "ADSAU_SAU_CODE_FK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[ADSAU_AUTRE_DENOMINATION_SUBAU] WHERE (([ADSAU_NOM_PK] ="& _ 
                " @Original_ADSAU_NOM_PK) AND ([ADSAU_SAU_CODE_FK] = @Original_ADSAU_SAU_CODE_FK)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ADSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ADSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_SAU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[ADSAU_AUTRE_DENOMINATION_SUBAU] ([ADSAU_NOM_PK], [ADSAU_"& _ 
                "SAU_CODE_FK]) VALUES (@ADSAU_NOM_PK, @ADSAU_SAU_CODE_FK);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ADSAU_NOM_PK, "& _ 
                "ADSAU_SAU_CODE_FK FROM THERIAQUE.ADSAU_AUTRE_DENOMINATION_SUBAU WHERE (ADSAU_NOM"& _ 
                "_PK = @ADSAU_NOM_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ADSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ADSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_SAU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[ADSAU_AUTRE_DENOMINATION_SUBAU] SET [ADSAU_NOM_PK] = @ADSAU_N"& _ 
                "OM_PK, [ADSAU_SAU_CODE_FK] = @ADSAU_SAU_CODE_FK WHERE (([ADSAU_NOM_PK] = @Origin"& _ 
                "al_ADSAU_NOM_PK) AND ([ADSAU_SAU_CODE_FK] = @Original_ADSAU_SAU_CODE_FK));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT ADSAU_NOM_PK, ADSAU_SAU_CODE_FK FROM THERIAQUE.ADSAU_AUTRE_DENOMINATION_SUBAU"& _ 
                " WHERE (ADSAU_NOM_PK = @ADSAU_NOM_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ADSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_NOM_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ADSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_SAU_CODE_FK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ADSAU_NOM_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_NOM_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ADSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_SAU_CODE_FK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ADSAU_NOM_PK, ADSAU_SAU_CODE_FK FROM THERIAQUE.ADSAU_AUTRE_DENOMINATION_SU" & _
                "BAU"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ADSAU_NOM_PK, ADSAU_SAU_CODE_FK FROM THERIAQUE.ADSAU_AUTRE_DENOMINATION_SU" & _
                "BAU" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE ADSAU_SAU_CODE_FK = @ADSAU_SAU_CODE_FK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@ADSAU_SAU_CODE_FK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ADSAU_SAU_CODE_FK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable = New dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable, ByVal ADSAU_SAU_CODE_FK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADSAU_SAU_CODE_FK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal ADSAU_SAU_CODE_FK As Integer) As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ADSAU_SAU_CODE_FK, Integer)
            Dim dataTable As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable = New dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.ADSAU_AUTRE_DENOMINATION_SUBAUDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "ADSAU_AUTRE_DENOMINATION_SUBAU")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_ADSAU_NOM_PK As String, ByVal Original_ADSAU_SAU_CODE_FK As Integer) As Integer
            If (Original_ADSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ADSAU_NOM_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ADSAU_NOM_PK, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ADSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal ADSAU_NOM_PK As String, ByVal ADSAU_SAU_CODE_FK As Integer) As Integer
            If (ADSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ADSAU_NOM_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ADSAU_NOM_PK, String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ADSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal ADSAU_NOM_PK As String, ByVal ADSAU_SAU_CODE_FK As Integer, ByVal Original_ADSAU_NOM_PK As String, ByVal Original_ADSAU_SAU_CODE_FK As Integer) As Integer
            If (ADSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("ADSAU_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ADSAU_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ADSAU_SAU_CODE_FK, Integer)
            If (Original_ADSAU_NOM_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_ADSAU_NOM_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ADSAU_NOM_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ADSAU_SAU_CODE_FK, Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SAUCCH_SUBAUX_CLASSECHTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAUCCH_SUBAUX_CLASSECH"
            tableMapping.ColumnMappings.Add("SAUCCH_SAU_CODE_FK_PK", "SAUCCH_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUCCH_CCH_CODE_FK_PK", "SAUCCH_CCH_CODE_FK_PK")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAUCCH_SUBAUX_CLASSECH] WHERE (([SAUCCH_SAU_CODE_FK_PK] " & _
                "= @Original_SAUCCH_SAU_CODE_FK_PK) AND ([SAUCCH_CCH_CODE_FK_PK] = @Original_SAUC" & _
                "CH_CCH_CODE_FK_PK))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCCH_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAUCCH_SUBAUX_CLASSECH] ([SAUCCH_SAU_CODE_FK_PK], [SAUCC" & _
                "H_CCH_CODE_FK_PK]) VALUES (@SAUCCH_SAU_CODE_FK_PK, @SAUCCH_CCH_CODE_FK_PK);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SEL" & _
                "ECT SAUCCH_SAU_CODE_FK_PK, SAUCCH_CCH_CODE_FK_PK FROM THERIAQUE.SAUCCH_SUBAUX_CL" & _
                "ASSECH WHERE (SAUCCH_CCH_CODE_FK_PK = @SAUCCH_CCH_CODE_FK_PK) AND (SAUCCH_SAU_CO" & _
                "DE_FK_PK = @SAUCCH_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCCH_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAUCCH_SUBAUX_CLASSECH] SET [SAUCCH_SAU_CODE_FK_PK] = @SAUCCH" & _
                "_SAU_CODE_FK_PK, [SAUCCH_CCH_CODE_FK_PK] = @SAUCCH_CCH_CODE_FK_PK WHERE (([SAUCC" & _
                "H_SAU_CODE_FK_PK] = @Original_SAUCCH_SAU_CODE_FK_PK) AND ([SAUCCH_CCH_CODE_FK_PK" & _
                "] = @Original_SAUCCH_CCH_CODE_FK_PK));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAUCCH_SAU_CODE_FK_PK, SAUCCH_CCH" & _
                "_CODE_FK_PK FROM THERIAQUE.SAUCCH_SUBAUX_CLASSECH WHERE (SAUCCH_CCH_CODE_FK_PK =" & _
                " @SAUCCH_CCH_CODE_FK_PK) AND (SAUCCH_SAU_CODE_FK_PK = @SAUCCH_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCCH_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCCH_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCCH_CCH_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_CCH_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAUCCH_SAU_CODE_FK_PK, SAUCCH_CCH_CODE_FK_PK FROM THERIAQUE.SAUCCH_SUBAUX_" & _
                "CLASSECH"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAUCCH_SAU_CODE_FK_PK, SAUCCH_CCH_CODE_FK_PK FROM THERIAQUE.SAUCCH_SUBAUX_" & _
                "CLASSECH" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAUCCH_SAU_CODE_FK_PK = @SAUCCH_SAU_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCCH_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAUCCH_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable = New dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable, ByVal SAUCCH_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUCCH_SAU_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAUCCH_SAU_CODE_FK_PK As Integer) As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUCCH_SAU_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable = New dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAUCCH_SUBAUX_CLASSECHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAUCCH_SUBAUX_CLASSECH")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAUCCH_SAU_CODE_FK_PK As Integer, ByVal Original_SAUCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAUCCH_SAU_CODE_FK_PK, Integer)
            If (Original_SAUCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAUCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAUCCH_SAU_CODE_FK_PK As Integer, ByVal SAUCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAUCCH_SAU_CODE_FK_PK, Integer)
            If (SAUCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAUCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAUCCH_SAU_CODE_FK_PK As Integer, ByVal SAUCCH_CCH_CODE_FK_PK As String, ByVal Original_SAUCCH_SAU_CODE_FK_PK As Integer, ByVal Original_SAUCCH_CCH_CODE_FK_PK As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAUCCH_SAU_CODE_FK_PK, Integer)
            If (SAUCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAUCCH_CCH_CODE_FK_PK, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SAUCCH_SAU_CODE_FK_PK, Integer)
            If (Original_SAUCCH_CCH_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUCCH_CCH_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAUCCH_CCH_CODE_FK_PK, String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAUCAS_SAU_CASTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAUCAS_SAU_CAS"
            tableMapping.ColumnMappings.Add("SAUCAS_SAU_CODE_FK_PK", "SAUCAS_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUCAS_CAS_CODE_PK", "SAUCAS_CAS_CODE_PK")
            tableMapping.ColumnMappings.Add("SAUCAS_NUMORD", "SAUCAS_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAUCAS_SAU_CAS] WHERE (([SAUCAS_SAU_CODE_FK_PK] = @Origi"& _ 
                "nal_SAUCAS_SAU_CODE_FK_PK) AND ([SAUCAS_CAS_CODE_PK] = @Original_SAUCAS_CAS_CODE"& _ 
                "_PK) AND ((@IsNull_SAUCAS_NUMORD = 1 AND [SAUCAS_NUMORD] IS NULL) OR ([SAUCAS_NU"& _ 
                "MORD] = @Original_SAUCAS_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCAS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCAS_CAS_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_CAS_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUCAS_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCAS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAUCAS_SAU_CAS] ([SAUCAS_SAU_CODE_FK_PK], [SAUCAS_CAS_CO"& _ 
                "DE_PK], [SAUCAS_NUMORD]) VALUES (@SAUCAS_SAU_CODE_FK_PK, @SAUCAS_CAS_CODE_PK, @S"& _ 
                "AUCAS_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAUCAS_SAU_CODE_FK_PK, SAUCAS_CAS_CODE_PK, SAUCAS_NUMORD "& _ 
                "FROM THERIAQUE.SAUCAS_SAU_CAS WHERE (SAUCAS_CAS_CODE_PK = @SAUCAS_CAS_CODE_PK) A"& _ 
                "ND (SAUCAS_SAU_CODE_FK_PK = @SAUCAS_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_CAS_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_CAS_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAUCAS_SAU_CAS] SET [SAUCAS_SAU_CODE_FK_PK] = @SAUCAS_SAU_COD"& _ 
                "E_FK_PK, [SAUCAS_CAS_CODE_PK] = @SAUCAS_CAS_CODE_PK, [SAUCAS_NUMORD] = @SAUCAS_N"& _ 
                "UMORD WHERE (([SAUCAS_SAU_CODE_FK_PK] = @Original_SAUCAS_SAU_CODE_FK_PK) AND ([S"& _ 
                "AUCAS_CAS_CODE_PK] = @Original_SAUCAS_CAS_CODE_PK) AND ((@IsNull_SAUCAS_NUMORD ="& _ 
                " 1 AND [SAUCAS_NUMORD] IS NULL) OR ([SAUCAS_NUMORD] = @Original_SAUCAS_NUMORD)))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAUCAS_SAU_CODE_FK_PK, SAUCAS_CAS_CODE_PK, SAUCAS_NUMORD FROM THERIAQU"& _ 
                "E.SAUCAS_SAU_CAS WHERE (SAUCAS_CAS_CODE_PK = @SAUCAS_CAS_CODE_PK) AND (SAUCAS_SA"& _ 
                "U_CODE_FK_PK = @SAUCAS_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_CAS_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_CAS_CODE_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCAS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCAS_CAS_CODE_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_CAS_CODE_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUCAS_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUCAS_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAUCAS_SAU_CODE_FK_PK, SAUCAS_CAS_CODE_PK, SAUCAS_NUMORD FROM THERIAQUE.SA" & _
                "UCAS_SAU_CAS"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAUCAS_SAU_CODE_FK_PK, SAUCAS_CAS_CODE_PK, SAUCAS_NUMORD FROM THERIAQUE.SA" & _
                "UCAS_SAU_CAS" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAUCAS_SAU_CODE_FK_PK = @SAUCAS_SAU_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUCAS_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAUCAS_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable = New dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable, ByVal SAUCAS_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUCAS_SAU_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAUCAS_SAU_CODE_FK_PK As Integer) As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUCAS_SAU_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable = New dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAUCAS_SAU_CASDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAUCAS_SAU_CAS")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAUCAS_SAU_CODE_FK_PK As Integer, ByVal Original_SAUCAS_CAS_CODE_PK As String, ByVal Original_SAUCAS_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAUCAS_SAU_CODE_FK_PK, Integer)
            If (Original_SAUCAS_CAS_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUCAS_CAS_CODE_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAUCAS_CAS_CODE_PK, String)
            End If
            If (Original_SAUCAS_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAUCAS_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAUCAS_SAU_CODE_FK_PK As Integer, ByVal SAUCAS_CAS_CODE_PK As String, ByVal SAUCAS_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAUCAS_SAU_CODE_FK_PK, Integer)
            If (SAUCAS_CAS_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUCAS_CAS_CODE_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAUCAS_CAS_CODE_PK, String)
            End If
            If (SAUCAS_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAUCAS_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAUCAS_SAU_CODE_FK_PK As Integer, ByVal SAUCAS_CAS_CODE_PK As String, ByVal SAUCAS_NUMORD As System.Nullable(Of Short), ByVal Original_SAUCAS_SAU_CODE_FK_PK As Integer, ByVal Original_SAUCAS_CAS_CODE_PK As String, ByVal Original_SAUCAS_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAUCAS_SAU_CODE_FK_PK, Integer)
            If (SAUCAS_CAS_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUCAS_CAS_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAUCAS_CAS_CODE_PK, String)
            End If
            If (SAUCAS_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAUCAS_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAUCAS_SAU_CODE_FK_PK, Integer)
            If (Original_SAUCAS_CAS_CODE_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUCAS_CAS_CODE_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SAUCAS_CAS_CODE_PK, String)
            End If
            If (Original_SAUCAS_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SAUCAS_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SAUNAV_SUBAUX_NATURE_VECTTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAUNAV_SUBAUX_NATURE_VECT"
            tableMapping.ColumnMappings.Add("SAUNAV_SAU_CODE_FK_PK", "SAUNAV_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUNAV_CDF_NAV_CODE_FK_PK", "SAUNAV_CDF_NAV_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUNAV_NUMORD", "SAUNAV_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAUNAV_SUBAUX_NATURE_VECT] WHERE (([SAUNAV_SAU_CODE_FK_P" & _
                "K] = @Original_SAUNAV_SAU_CODE_FK_PK) AND ([SAUNAV_CDF_NAV_CODE_FK_PK] = @Origin" & _
                "al_SAUNAV_CDF_NAV_CODE_FK_PK) AND ((@IsNull_SAUNAV_NUMORD = 1 AND [SAUNAV_NUMORD" & _
                "] IS NULL) OR ([SAUNAV_NUMORD] = @Original_SAUNAV_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAV_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUNAV_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAV_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAUNAV_SUBAUX_NATURE_VECT] ([SAUNAV_SAU_CODE_FK_PK], [SA" & _
                "UNAV_CDF_NAV_CODE_FK_PK], [SAUNAV_NUMORD]) VALUES (@SAUNAV_SAU_CODE_FK_PK, @SAUN" & _
                "AV_CDF_NAV_CODE_FK_PK, @SAUNAV_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAUNAV_SAU_CODE_FK_PK, SAUNAV_CD" & _
                "F_NAV_CODE_FK_PK, SAUNAV_NUMORD FROM THERIAQUE.SAUNAV_SUBAUX_NATURE_VECT WHERE (" & _
                "SAUNAV_CDF_NAV_CODE_FK_PK = @SAUNAV_CDF_NAV_CODE_FK_PK) AND (SAUNAV_SAU_CODE_FK_" & _
                "PK = @SAUNAV_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAUNAV_SUBAUX_NATURE_VECT] SET [SAUNAV_SAU_CODE_FK_PK] = @SAU" & _
                "NAV_SAU_CODE_FK_PK, [SAUNAV_CDF_NAV_CODE_FK_PK] = @SAUNAV_CDF_NAV_CODE_FK_PK, [S" & _
                "AUNAV_NUMORD] = @SAUNAV_NUMORD WHERE (([SAUNAV_SAU_CODE_FK_PK] = @Original_SAUNA" & _
                "V_SAU_CODE_FK_PK) AND ([SAUNAV_CDF_NAV_CODE_FK_PK] = @Original_SAUNAV_CDF_NAV_CO" & _
                "DE_FK_PK) AND ((@IsNull_SAUNAV_NUMORD = 1 AND [SAUNAV_NUMORD] IS NULL) OR ([SAUN" & _
                "AV_NUMORD] = @Original_SAUNAV_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAUNAV_SAU_CODE_FK_PK, SAUNAV_C" & _
                "DF_NAV_CODE_FK_PK, SAUNAV_NUMORD FROM THERIAQUE.SAUNAV_SUBAUX_NATURE_VECT WHERE " & _
                "(SAUNAV_CDF_NAV_CODE_FK_PK = @SAUNAV_CDF_NAV_CODE_FK_PK) AND (SAUNAV_SAU_CODE_FK" & _
                "_PK = @SAUNAV_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAV_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_CDF_NAV_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUNAV_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAV_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAUNAV_SAU_CODE_FK_PK, SAUNAV_CDF_NAV_CODE_FK_PK, SAUNAV_NUMORD FROM THERI" & _
                "AQUE.SAUNAV_SUBAUX_NATURE_VECT"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAUNAV_SAU_CODE_FK_PK, SAUNAV_CDF_NAV_CODE_FK_PK, SAUNAV_NUMORD FROM THERI" & _
                "AQUE.SAUNAV_SUBAUX_NATURE_VECT" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAUNAV_SAU_CODE_FK_PK = @SAUNAV_SAU_CODE_F" & _
                "K_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAV_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAUNAV_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable = New dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable, ByVal SAUNAV_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUNAV_SAU_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAUNAV_SAU_CODE_FK_PK As Integer) As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUNAV_SAU_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable = New dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAUNAV_SUBAUX_NATURE_VECTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAUNAV_SUBAUX_NATURE_VECT")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAUNAV_SAU_CODE_FK_PK As Integer, ByVal Original_SAUNAV_CDF_NAV_CODE_FK_PK As String, ByVal Original_SAUNAV_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAUNAV_SAU_CODE_FK_PK, Integer)
            If (Original_SAUNAV_CDF_NAV_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUNAV_CDF_NAV_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAUNAV_CDF_NAV_CODE_FK_PK, String)
            End If
            If (Original_SAUNAV_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAUNAV_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAUNAV_SAU_CODE_FK_PK As Integer, ByVal SAUNAV_CDF_NAV_CODE_FK_PK As String, ByVal SAUNAV_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAUNAV_SAU_CODE_FK_PK, Integer)
            If (SAUNAV_CDF_NAV_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUNAV_CDF_NAV_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAUNAV_CDF_NAV_CODE_FK_PK, String)
            End If
            If (SAUNAV_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAUNAV_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAUNAV_SAU_CODE_FK_PK As Integer, ByVal SAUNAV_CDF_NAV_CODE_FK_PK As String, ByVal SAUNAV_NUMORD As System.Nullable(Of Short), ByVal Original_SAUNAV_SAU_CODE_FK_PK As Integer, ByVal Original_SAUNAV_CDF_NAV_CODE_FK_PK As String, ByVal Original_SAUNAV_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAUNAV_SAU_CODE_FK_PK, Integer)
            If (SAUNAV_CDF_NAV_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUNAV_CDF_NAV_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAUNAV_CDF_NAV_CODE_FK_PK, String)
            End If
            If (SAUNAV_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAUNAV_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAUNAV_SAU_CODE_FK_PK, Integer)
            If (Original_SAUNAV_CDF_NAV_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUNAV_CDF_NAV_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SAUNAV_CDF_NAV_CODE_FK_PK, String)
            End If
            If (Original_SAUNAV_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SAUNAV_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAUNAT_SUBAUX_NATURETableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAUNAT_SUBAUX_NATURE"
            tableMapping.ColumnMappings.Add("SAUNAT_SAU_CODE_FK_PK", "SAUNAT_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUNAT_CDF_NASAU_CODE_FK_PK", "SAUNAT_CDF_NASAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUNAT_NUMORD", "SAUNAT_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAUNAT_SUBAUX_NATURE] WHERE (([SAUNAT_SAU_CODE_FK_PK] = "& _ 
                "@Original_SAUNAT_SAU_CODE_FK_PK) AND ([SAUNAT_CDF_NASAU_CODE_FK_PK] = @Original_"& _ 
                "SAUNAT_CDF_NASAU_CODE_FK_PK) AND ((@IsNull_SAUNAT_NUMORD = 1 AND [SAUNAT_NUMORD]"& _ 
                " IS NULL) OR ([SAUNAT_NUMORD] = @Original_SAUNAT_NUMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAT_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUNAT_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAT_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAUNAT_SUBAUX_NATURE] ([SAUNAT_SAU_CODE_FK_PK], [SAUNAT_"& _ 
                "CDF_NASAU_CODE_FK_PK], [SAUNAT_NUMORD]) VALUES (@SAUNAT_SAU_CODE_FK_PK, @SAUNAT_"& _ 
                "CDF_NASAU_CODE_FK_PK, @SAUNAT_NUMORD);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAUNAT_SAU_CODE_FK_PK, SAUNAT_CDF"& _ 
                "_NASAU_CODE_FK_PK, SAUNAT_NUMORD FROM THERIAQUE.SAUNAT_SUBAUX_NATURE WHERE (SAUN"& _ 
                "AT_CDF_NASAU_CODE_FK_PK = @SAUNAT_CDF_NASAU_CODE_FK_PK) AND (SAUNAT_SAU_CODE_FK_"& _ 
                "PK = @SAUNAT_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAUNAT_SUBAUX_NATURE] SET [SAUNAT_SAU_CODE_FK_PK] = @SAUNAT_S"& _ 
                "AU_CODE_FK_PK, [SAUNAT_CDF_NASAU_CODE_FK_PK] = @SAUNAT_CDF_NASAU_CODE_FK_PK, [SA"& _ 
                "UNAT_NUMORD] = @SAUNAT_NUMORD WHERE (([SAUNAT_SAU_CODE_FK_PK] = @Original_SAUNAT"& _ 
                "_SAU_CODE_FK_PK) AND ([SAUNAT_CDF_NASAU_CODE_FK_PK] = @Original_SAUNAT_CDF_NASAU"& _ 
                "_CODE_FK_PK) AND ((@IsNull_SAUNAT_NUMORD = 1 AND [SAUNAT_NUMORD] IS NULL) OR ([S"& _ 
                "AUNAT_NUMORD] = @Original_SAUNAT_NUMORD)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT SAUNAT_SAU_CODE_FK_PK, SAUNA"& _ 
                "T_CDF_NASAU_CODE_FK_PK, SAUNAT_NUMORD FROM THERIAQUE.SAUNAT_SUBAUX_NATURE WHERE "& _ 
                "(SAUNAT_CDF_NASAU_CODE_FK_PK = @SAUNAT_CDF_NASAU_CODE_FK_PK) AND (SAUNAT_SAU_COD"& _ 
                "E_FK_PK = @SAUNAT_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_NUMORD", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAT_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_CDF_NASAU_CODE_FK_PK", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUNAT_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_NUMORD", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUNAT_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_NUMORD", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAUNAT_SAU_CODE_FK_PK, SAUNAT_CDF_NASAU_CODE_FK_PK, SAUNAT_NUMORD FROM THE" & _
                "RIAQUE.SAUNAT_SUBAUX_NATURE"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAUNAT_SAU_CODE_FK_PK, SAUNAT_CDF_NASAU_CODE_FK_PK, SAUNAT_NUMORD FROM THE" & _
                "RIAQUE.SAUNAT_SUBAUX_NATURE" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAUNAT_SAU_CODE_FK_PK = @SAUNAT_SAU_CODE_FK_P" & _
                "K"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUNAT_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAUNAT_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable = New dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable, ByVal SAUNAT_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUNAT_SAU_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAUNAT_SAU_CODE_FK_PK As Integer) As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUNAT_SAU_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable = New dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAUNAT_SUBAUX_NATUREDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAUNAT_SUBAUX_NATURE")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAUNAT_SAU_CODE_FK_PK As Integer, ByVal Original_SAUNAT_CDF_NASAU_CODE_FK_PK As String, ByVal Original_SAUNAT_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAUNAT_SAU_CODE_FK_PK, Integer)
            If (Original_SAUNAT_CDF_NASAU_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUNAT_CDF_NASAU_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAUNAT_CDF_NASAU_CODE_FK_PK, String)
            End If
            If (Original_SAUNAT_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAUNAT_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAUNAT_SAU_CODE_FK_PK As Integer, ByVal SAUNAT_CDF_NASAU_CODE_FK_PK As String, ByVal SAUNAT_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAUNAT_SAU_CODE_FK_PK, Integer)
            If (SAUNAT_CDF_NASAU_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUNAT_CDF_NASAU_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAUNAT_CDF_NASAU_CODE_FK_PK, String)
            End If
            If (SAUNAT_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAUNAT_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAUNAT_SAU_CODE_FK_PK As Integer, ByVal SAUNAT_CDF_NASAU_CODE_FK_PK As String, ByVal SAUNAT_NUMORD As System.Nullable(Of Short), ByVal Original_SAUNAT_SAU_CODE_FK_PK As Integer, ByVal Original_SAUNAT_CDF_NASAU_CODE_FK_PK As String, ByVal Original_SAUNAT_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAUNAT_SAU_CODE_FK_PK, Integer)
            If (SAUNAT_CDF_NASAU_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUNAT_CDF_NASAU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAUNAT_CDF_NASAU_CODE_FK_PK, String)
            End If
            If (SAUNAT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAUNAT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SAUNAT_SAU_CODE_FK_PK, Integer)
            If (Original_SAUNAT_CDF_NASAU_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUNAT_CDF_NASAU_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SAUNAT_CDF_NASAU_CODE_FK_PK, String)
            End If
            If (Original_SAUNAT_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SAUNAT_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.ComponentModel.ToolboxItem(True), _
     System.ComponentModel.DataObjectAttribute(True), _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SAUVO_SUBAUXVOIE_SUBAUXTableAdapter
        Inherits System.ComponentModel.Component

        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter

        Private _connection As System.Data.SqlClient.SqlConnection

        Private _commandCollection() As System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As System.Data.SqlClient.SqlConnection)
                Me._connection = Value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = Value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = Value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = Value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), System.Data.SqlClient.SqlCommand).Connection = Value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = Value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAUVO_SUBAUXVOIE_SUBAUX"
            tableMapping.ColumnMappings.Add("SAUVO_SAU_CODE_FK_PK", "SAUVO_SAU_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUVO_CDF_VOIE_CODE_FK_PK", "SAUVO_CDF_VOIE_CODE_FK_PK")
            tableMapping.ColumnMappings.Add("SAUVO_DOSESEUIL", "SAUVO_DOSESEUIL")
            tableMapping.ColumnMappings.Add("SAUVO_NUMORD", "SAUVO_NUMORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [THERIAQUE].[SAUVO_SUBAUXVOIE_SUBAUX] WHERE (([SAUVO_SAU_CODE_FK_PK] " & _
                "= @Original_SAUVO_SAU_CODE_FK_PK) AND ([SAUVO_CDF_VOIE_CODE_FK_PK] = @Original_S" & _
                "AUVO_CDF_VOIE_CODE_FK_PK) AND ((@IsNull_SAUVO_DOSESEUIL = 1 AND [SAUVO_DOSESEUIL" & _
                "] IS NULL) OR ([SAUVO_DOSESEUIL] = @Original_SAUVO_DOSESEUIL)) AND ((@IsNull_SAU" & _
                "VO_NUMORD = 1 AND [SAUVO_NUMORD] IS NULL) OR ([SAUVO_NUMORD] = @Original_SAUVO_N" & _
                "UMORD)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUVO_DOSESEUIL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_DOSESEUIL", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_DOSESEUIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_DOSESEUIL", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUVO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [THERIAQUE].[SAUVO_SUBAUXVOIE_SUBAUX] ([SAUVO_SAU_CODE_FK_PK], [SAUVO" & _
                "_CDF_VOIE_CODE_FK_PK], [SAUVO_DOSESEUIL], [SAUVO_NUMORD]) VALUES (@SAUVO_SAU_COD" & _
                "E_FK_PK, @SAUVO_CDF_VOIE_CODE_FK_PK, @SAUVO_DOSESEUIL, @SAUVO_NUMORD);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT S" & _
                "AUVO_SAU_CODE_FK_PK, SAUVO_CDF_VOIE_CODE_FK_PK, SAUVO_DOSESEUIL, SAUVO_NUMORD FR" & _
                "OM THERIAQUE.SAUVO_SUBAUXVOIE_SUBAUX WHERE (SAUVO_CDF_VOIE_CODE_FK_PK = @SAUVO_C" & _
                "DF_VOIE_CODE_FK_PK) AND (SAUVO_SAU_CODE_FK_PK = @SAUVO_SAU_CODE_FK_PK)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_DOSESEUIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_DOSESEUIL", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [THERIAQUE].[SAUVO_SUBAUXVOIE_SUBAUX] SET [SAUVO_SAU_CODE_FK_PK] = @SAUVO_" & _
                "SAU_CODE_FK_PK, [SAUVO_CDF_VOIE_CODE_FK_PK] = @SAUVO_CDF_VOIE_CODE_FK_PK, [SAUVO" & _
                "_DOSESEUIL] = @SAUVO_DOSESEUIL, [SAUVO_NUMORD] = @SAUVO_NUMORD WHERE (([SAUVO_SA" & _
                "U_CODE_FK_PK] = @Original_SAUVO_SAU_CODE_FK_PK) AND ([SAUVO_CDF_VOIE_CODE_FK_PK]" & _
                " = @Original_SAUVO_CDF_VOIE_CODE_FK_PK) AND ((@IsNull_SAUVO_DOSESEUIL = 1 AND [S" & _
                "AUVO_DOSESEUIL] IS NULL) OR ([SAUVO_DOSESEUIL] = @Original_SAUVO_DOSESEUIL)) AND" & _
                " ((@IsNull_SAUVO_NUMORD = 1 AND [SAUVO_NUMORD] IS NULL) OR ([SAUVO_NUMORD] = @Or" & _
                "iginal_SAUVO_NUMORD)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SAUVO_SAU_CODE_FK_PK, SAUVO_CDF_VOIE_CODE_FK_PK," & _
                " SAUVO_DOSESEUIL, SAUVO_NUMORD FROM THERIAQUE.SAUVO_SUBAUXVOIE_SUBAUX WHERE (SAU" & _
                "VO_CDF_VOIE_CODE_FK_PK = @SAUVO_CDF_VOIE_CODE_FK_PK) AND (SAUVO_SAU_CODE_FK_PK =" & _
                " @SAUVO_SAU_CODE_FK_PK)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_DOSESEUIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_DOSESEUIL", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_NUMORD", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_SAU_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_CDF_VOIE_CODE_FK_PK", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUVO_DOSESEUIL", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_DOSESEUIL", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_DOSESEUIL", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_DOSESEUIL", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SAUVO_NUMORD", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_NUMORD", System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SAUVO_NUMORD", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_NUMORD", System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Theriaque.My.Settings.ConnectionString
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SAUVO_SAU_CODE_FK_PK, SAUVO_CDF_VOIE_CODE_FK_PK, SAUVO_DOSESEUIL, SAUVO_NU" & _
                "MORD FROM THERIAQUE.SAUVO_SUBAUXVOIE_SUBAUX"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT SAUVO_SAU_CODE_FK_PK, SAUVO_CDF_VOIE_CODE_FK_PK, SAUVO_DOSESEUIL, SAUVO_NU" & _
                "MORD FROM THERIAQUE.SAUVO_SUBAUXVOIE_SUBAUX" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE SAUVO_SAU_CODE_FK_PK = @SAUVO" & _
                "_SAU_CODE_FK_PK"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@SAUVO_SAU_CODE_FK_PK", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SAUVO_SAU_CODE_FK_PK", System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable = New dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, False)> _
        Public Overridable Overloads Function FillByCode(ByVal dataTable As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable, ByVal SAUVO_SAU_CODE_FK_PK As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUVO_SAU_CODE_FK_PK, Integer)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDataByCode(ByVal SAUVO_SAU_CODE_FK_PK As Integer) As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SAUVO_SAU_CODE_FK_PK, Integer)
            Dim dataTable As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable = New dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As dsTheriaque_Excipient.SAUVO_SUBAUXVOIE_SUBAUXDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As dsTheriaque_Excipient) As Integer
            Return Me.Adapter.Update(dataSet, "SAUVO_SUBAUXVOIE_SUBAUX")
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_SAUVO_SAU_CODE_FK_PK As Integer, ByVal Original_SAUVO_CDF_VOIE_CODE_FK_PK As String, ByVal Original_SAUVO_DOSESEUIL As String, ByVal Original_SAUVO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SAUVO_SAU_CODE_FK_PK, Integer)
            If (Original_SAUVO_CDF_VOIE_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUVO_CDF_VOIE_CODE_FK_PK")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SAUVO_CDF_VOIE_CODE_FK_PK, String)
            End If
            If (Original_SAUVO_DOSESEUIL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SAUVO_DOSESEUIL, String)
            End If
            If (Original_SAUVO_NUMORD.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SAUVO_NUMORD.Value, Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal SAUVO_SAU_CODE_FK_PK As Integer, ByVal SAUVO_CDF_VOIE_CODE_FK_PK As String, ByVal SAUVO_DOSESEUIL As String, ByVal SAUVO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SAUVO_SAU_CODE_FK_PK, Integer)
            If (SAUVO_CDF_VOIE_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUVO_CDF_VOIE_CODE_FK_PK")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SAUVO_CDF_VOIE_CODE_FK_PK, String)
            End If
            If (SAUVO_DOSESEUIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SAUVO_DOSESEUIL, String)
            End If
            If (SAUVO_NUMORD.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SAUVO_NUMORD.Value, Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal SAUVO_SAU_CODE_FK_PK As Integer, ByVal SAUVO_CDF_VOIE_CODE_FK_PK As String, ByVal SAUVO_DOSESEUIL As String, ByVal SAUVO_NUMORD As System.Nullable(Of Short), ByVal Original_SAUVO_SAU_CODE_FK_PK As Integer, ByVal Original_SAUVO_CDF_VOIE_CODE_FK_PK As String, ByVal Original_SAUVO_DOSESEUIL As String, ByVal Original_SAUVO_NUMORD As System.Nullable(Of Short)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SAUVO_SAU_CODE_FK_PK, Integer)
            If (SAUVO_CDF_VOIE_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("SAUVO_CDF_VOIE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SAUVO_CDF_VOIE_CODE_FK_PK, String)
            End If
            If (SAUVO_DOSESEUIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SAUVO_DOSESEUIL, String)
            End If
            If (SAUVO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SAUVO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SAUVO_SAU_CODE_FK_PK, Integer)
            If (Original_SAUVO_CDF_VOIE_CODE_FK_PK Is Nothing) Then
                Throw New System.ArgumentNullException("Original_SAUVO_CDF_VOIE_CODE_FK_PK")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SAUVO_CDF_VOIE_CODE_FK_PK, String)
            End If
            If (Original_SAUVO_DOSESEUIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SAUVO_DOSESEUIL, String)
            End If
            If (Original_SAUVO_NUMORD.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SAUVO_NUMORD.Value, Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
